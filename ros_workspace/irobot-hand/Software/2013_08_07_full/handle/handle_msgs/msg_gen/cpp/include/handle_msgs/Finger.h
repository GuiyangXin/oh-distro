/* Auto-generated by genmsg_cpp for file /home/sisir/irobot-hand/Software/2013_08_07_full/handle/handle_msgs/msg/Finger.msg */
#ifndef HANDLE_MSGS_MESSAGE_FINGER_H
#define HANDLE_MSGS_MESSAGE_FINGER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace handle_msgs
{
template <class ContainerAllocator>
struct Finger_ {
  typedef Finger_<ContainerAllocator> Type;

  Finger_()
  : proximal()
  , distal()
  {
  }

  Finger_(const ContainerAllocator& _alloc)
  : proximal(_alloc)
  , distal(_alloc)
  {
  }

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _proximal_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  proximal;

  typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _distal_type;
  std::vector<float, typename ContainerAllocator::template rebind<float>::other >  distal;


  typedef boost::shared_ptr< ::handle_msgs::Finger_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handle_msgs::Finger_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Finger
typedef  ::handle_msgs::Finger_<std::allocator<void> > Finger;

typedef boost::shared_ptr< ::handle_msgs::Finger> FingerPtr;
typedef boost::shared_ptr< ::handle_msgs::Finger const> FingerConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::handle_msgs::Finger_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::handle_msgs::Finger_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace handle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::handle_msgs::Finger_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::handle_msgs::Finger_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::handle_msgs::Finger_<ContainerAllocator> > {
  static const char* value() 
  {
    return "143bc4ae61f1c2415fee6b36cd2011b8";
  }

  static const char* value(const  ::handle_msgs::Finger_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x143bc4ae61f1c241ULL;
  static const uint64_t static_value2 = 0x5fee6b36cd2011b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::handle_msgs::Finger_<ContainerAllocator> > {
  static const char* value() 
  {
    return "handle_msgs/Finger";
  }

  static const char* value(const  ::handle_msgs::Finger_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::handle_msgs::Finger_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This finger definition is used for different sensors in the HandleSensors \n\
# message type.  \n\
\n\
float32[] proximal\n\
float32[] distal\n\
\n\
\n\
";
  }

  static const char* value(const  ::handle_msgs::Finger_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::handle_msgs::Finger_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.proximal);
    stream.next(m.distal);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Finger_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handle_msgs::Finger_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::handle_msgs::Finger_<ContainerAllocator> & v) 
  {
    s << indent << "proximal[]" << std::endl;
    for (size_t i = 0; i < v.proximal.size(); ++i)
    {
      s << indent << "  proximal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.proximal[i]);
    }
    s << indent << "distal[]" << std::endl;
    for (size_t i = 0; i < v.distal.size(); ++i)
    {
      s << indent << "  distal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.distal[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HANDLE_MSGS_MESSAGE_FINGER_H

