/* Auto-generated by genmsg_cpp for file /home/sisir/irobot-hand/Software/2013_08_07_full/handle/handle_msgs/msg/HandleControl.msg */
#ifndef HANDLE_MSGS_MESSAGE_HANDLECONTROL_H
#define HANDLE_MSGS_MESSAGE_HANDLECONTROL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace handle_msgs
{
template <class ContainerAllocator>
struct HandleControl_ {
  typedef HandleControl_<ContainerAllocator> Type;

  HandleControl_()
  : type()
  , value()
  , valid()
  {
    type.assign(0);
    value.assign(0);
    valid.assign(false);
  }

  HandleControl_(const ContainerAllocator& _alloc)
  : type()
  , value()
  , valid()
  {
    type.assign(0);
    value.assign(0);
    valid.assign(false);
  }

  typedef boost::array<int32_t, 5>  _type_type;
  boost::array<int32_t, 5>  type;

  typedef boost::array<int32_t, 5>  _value_type;
  boost::array<int32_t, 5>  value;

  typedef boost::array<uint8_t, 5>  _valid_type;
  boost::array<uint8_t, 5>  valid;

  enum { VELOCITY = 1 };
  enum { POSITION = 2 };
  enum { CURRENT = 3 };
  enum { VOLTAGE = 4 };

  typedef boost::shared_ptr< ::handle_msgs::HandleControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handle_msgs::HandleControl_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HandleControl
typedef  ::handle_msgs::HandleControl_<std::allocator<void> > HandleControl;

typedef boost::shared_ptr< ::handle_msgs::HandleControl> HandleControlPtr;
typedef boost::shared_ptr< ::handle_msgs::HandleControl const> HandleControlConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::handle_msgs::HandleControl_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::handle_msgs::HandleControl_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace handle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::handle_msgs::HandleControl_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::handle_msgs::HandleControl_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::handle_msgs::HandleControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b42b65a1c8b5504458b9cee3c21e3f68";
  }

  static const char* value(const  ::handle_msgs::HandleControl_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb42b65a1c8b55044ULL;
  static const uint64_t static_value2 = 0x58b9cee3c21e3f68ULL;
};

template<class ContainerAllocator>
struct DataType< ::handle_msgs::HandleControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "handle_msgs/HandleControl";
  }

  static const char* value(const  ::handle_msgs::HandleControl_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::handle_msgs::HandleControl_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Command to move the HANDLE hand\n\
# \n\
\n\
# The different control types\n\
uint8 VELOCITY = 1\n\
uint8 POSITION = 2\n\
uint8 CURRENT  = 3\n\
uint8 VOLTAGE  = 4\n\
\n\
# The control type for each motor.\n\
int32[5] type\n\
\n\
# The value to set.\n\
int32[5] value\n\
\n\
# Whether or not to control each motor.\n\
bool[5] valid\n\
\n\
# To be added if/when this becomes a service call:\n\
#---\n\
#bool ok\n\
#string reason\n\
\n\
";
  }

  static const char* value(const  ::handle_msgs::HandleControl_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::handle_msgs::HandleControl_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::handle_msgs::HandleControl_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.type);
    stream.next(m.value);
    stream.next(m.valid);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HandleControl_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handle_msgs::HandleControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::handle_msgs::HandleControl_<ContainerAllocator> & v) 
  {
    s << indent << "type[]" << std::endl;
    for (size_t i = 0; i < v.type.size(); ++i)
    {
      s << indent << "  type[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.type[i]);
    }
    s << indent << "value[]" << std::endl;
    for (size_t i = 0; i < v.value.size(); ++i)
    {
      s << indent << "  value[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.value[i]);
    }
    s << indent << "valid[]" << std::endl;
    for (size_t i = 0; i < v.valid.size(); ++i)
    {
      s << indent << "  valid[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.valid[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HANDLE_MSGS_MESSAGE_HANDLECONTROL_H

