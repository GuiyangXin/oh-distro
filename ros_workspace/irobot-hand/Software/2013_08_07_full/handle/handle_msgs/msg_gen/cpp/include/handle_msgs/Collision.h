/* Auto-generated by genmsg_cpp for file /home/sisir/irobot-hand/Software/2013_08_07_full/handle/handle_msgs/msg/Collision.msg */
#ifndef HANDLE_MSGS_MESSAGE_COLLISION_H
#define HANDLE_MSGS_MESSAGE_COLLISION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace handle_msgs
{
template <class ContainerAllocator>
struct Collision_ {
  typedef Collision_<ContainerAllocator> Type;

  Collision_()
  : frame_id()
  , sensor_id(0)
  , intensity(0.0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  Collision_(const ContainerAllocator& _alloc)
  : frame_id(_alloc)
  , sensor_id(0)
  , intensity(0.0)
  , x(0.0)
  , y(0.0)
  , z(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frame_id;

  typedef int32_t _sensor_id_type;
  int32_t sensor_id;

  typedef float _intensity_type;
  float intensity;

  typedef float _x_type;
  float x;

  typedef float _y_type;
  float y;

  typedef float _z_type;
  float z;


  typedef boost::shared_ptr< ::handle_msgs::Collision_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::handle_msgs::Collision_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Collision
typedef  ::handle_msgs::Collision_<std::allocator<void> > Collision;

typedef boost::shared_ptr< ::handle_msgs::Collision> CollisionPtr;
typedef boost::shared_ptr< ::handle_msgs::Collision const> CollisionConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::handle_msgs::Collision_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::handle_msgs::Collision_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace handle_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::handle_msgs::Collision_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::handle_msgs::Collision_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::handle_msgs::Collision_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ac44fce6d57e9e973d85368daf4a69ee";
  }

  static const char* value(const  ::handle_msgs::Collision_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xac44fce6d57e9e97ULL;
  static const uint64_t static_value2 = 0x3d85368daf4a69eeULL;
};

template<class ContainerAllocator>
struct DataType< ::handle_msgs::Collision_<ContainerAllocator> > {
  static const char* value() 
  {
    return "handle_msgs/Collision";
  }

  static const char* value(const  ::handle_msgs::Collision_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::handle_msgs::Collision_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This is basic collision message\n\
# it is used in HandleCollisions to build an array\n\
\n\
string frame_id\n\
# finger[0]/proximal_link\n\
# finger[0]/distal_link\n\
# finger[1]/proximal_link\n\
# finger[1]/distal_link\n\
# finger[2]/proximal_link\n\
# finger[2]/distal_link\n\
# base_link\n\
\n\
int32 sensor_id\n\
# index of sensor\n\
\n\
float32 intensity\n\
\n\
# location of sensor on the surface of the finger in the link frame\n\
float32 x\n\
float32 y\n\
float32 z\n\
\n\
";
  }

  static const char* value(const  ::handle_msgs::Collision_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::handle_msgs::Collision_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.frame_id);
    stream.next(m.sensor_id);
    stream.next(m.intensity);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Collision_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::handle_msgs::Collision_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::handle_msgs::Collision_<ContainerAllocator> & v) 
  {
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "sensor_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_id);
    s << indent << "intensity: ";
    Printer<float>::stream(s, indent + "  ", v.intensity);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<float>::stream(s, indent + "  ", v.z);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HANDLE_MSGS_MESSAGE_COLLISION_H

