/* Auto-generated by genmsg_cpp for file /home/sisir/sandia-hand/ros/sandia_hand_msgs/srv/SimpleGraspSrv.srv */
#ifndef SANDIA_HAND_MSGS_SERVICE_SIMPLEGRASPSRV_H
#define SANDIA_HAND_MSGS_SERVICE_SIMPLEGRASPSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "sandia_hand_msgs/SimpleGrasp.h"



namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct SimpleGraspSrvRequest_ {
  typedef SimpleGraspSrvRequest_<ContainerAllocator> Type;

  SimpleGraspSrvRequest_()
  : grasp()
  {
  }

  SimpleGraspSrvRequest_(const ContainerAllocator& _alloc)
  : grasp(_alloc)
  {
  }

  typedef  ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator>  _grasp_type;
   ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator>  grasp;


  typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimpleGraspSrvRequest
typedef  ::sandia_hand_msgs::SimpleGraspSrvRequest_<std::allocator<void> > SimpleGraspSrvRequest;

typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGraspSrvRequest> SimpleGraspSrvRequestPtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGraspSrvRequest const> SimpleGraspSrvRequestConstPtr;


template <class ContainerAllocator>
struct SimpleGraspSrvResponse_ {
  typedef SimpleGraspSrvResponse_<ContainerAllocator> Type;

  SimpleGraspSrvResponse_()
  {
  }

  SimpleGraspSrvResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimpleGraspSrvResponse
typedef  ::sandia_hand_msgs::SimpleGraspSrvResponse_<std::allocator<void> > SimpleGraspSrvResponse;

typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGraspSrvResponse> SimpleGraspSrvResponsePtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGraspSrvResponse const> SimpleGraspSrvResponseConstPtr;

struct SimpleGraspSrv
{

typedef SimpleGraspSrvRequest Request;
typedef SimpleGraspSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SimpleGraspSrv
} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "271a4db012a7d00f6c0fed086d30155c";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x271a4db012a7d00fULL;
  static const uint64_t static_value2 = 0x6c0fed086d30155cULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/SimpleGraspSrvRequest";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SimpleGrasp grasp\n\
\n\
================================================================================\n\
MSG: sandia_hand_msgs/SimpleGrasp\n\
string  name\n\
float64 closed_amount  \n\
# closed_amount = 0 means fully open\n\
# closed_amount = 1 means fully closed\n\
\n\
";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/SimpleGraspSrvResponse";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.grasp);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimpleGraspSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimpleGraspSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<sandia_hand_msgs::SimpleGraspSrv> {
  static const char* value() 
  {
    return "271a4db012a7d00f6c0fed086d30155c";
  }

  static const char* value(const sandia_hand_msgs::SimpleGraspSrv&) { return value(); } 
};

template<>
struct DataType<sandia_hand_msgs::SimpleGraspSrv> {
  static const char* value() 
  {
    return "sandia_hand_msgs/SimpleGraspSrv";
  }

  static const char* value(const sandia_hand_msgs::SimpleGraspSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "271a4db012a7d00f6c0fed086d30155c";
  }

  static const char* value(const sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/SimpleGraspSrv";
  }

  static const char* value(const sandia_hand_msgs::SimpleGraspSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "271a4db012a7d00f6c0fed086d30155c";
  }

  static const char* value(const sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/SimpleGraspSrv";
  }

  static const char* value(const sandia_hand_msgs::SimpleGraspSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SANDIA_HAND_MSGS_SERVICE_SIMPLEGRASPSRV_H

