/* Auto-generated by genmsg_cpp for file /home/sisir/sandia-hand/ros/sandia_hand_msgs/msg/RawPalmState.msg */
#ifndef SANDIA_HAND_MSGS_MESSAGE_RAWPALMSTATE_H
#define SANDIA_HAND_MSGS_MESSAGE_RAWPALMSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct RawPalmState_ {
  typedef RawPalmState_<ContainerAllocator> Type;

  RawPalmState_()
  : palm_time(0)
  , palm_accel()
  , palm_gyro()
  , palm_mag()
  , palm_temps()
  , palm_tactile()
  {
    palm_accel.assign(0);
    palm_gyro.assign(0);
    palm_mag.assign(0);
    palm_temps.assign(0);
    palm_tactile.assign(0);
  }

  RawPalmState_(const ContainerAllocator& _alloc)
  : palm_time(0)
  , palm_accel()
  , palm_gyro()
  , palm_mag()
  , palm_temps()
  , palm_tactile()
  {
    palm_accel.assign(0);
    palm_gyro.assign(0);
    palm_mag.assign(0);
    palm_temps.assign(0);
    palm_tactile.assign(0);
  }

  typedef uint32_t _palm_time_type;
  uint32_t palm_time;

  typedef boost::array<int16_t, 3>  _palm_accel_type;
  boost::array<int16_t, 3>  palm_accel;

  typedef boost::array<int16_t, 3>  _palm_gyro_type;
  boost::array<int16_t, 3>  palm_gyro;

  typedef boost::array<int16_t, 3>  _palm_mag_type;
  boost::array<int16_t, 3>  palm_mag;

  typedef boost::array<uint16_t, 7>  _palm_temps_type;
  boost::array<uint16_t, 7>  palm_temps;

  typedef boost::array<uint16_t, 32>  _palm_tactile_type;
  boost::array<uint16_t, 32>  palm_tactile;


  typedef boost::shared_ptr< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RawPalmState
typedef  ::sandia_hand_msgs::RawPalmState_<std::allocator<void> > RawPalmState;

typedef boost::shared_ptr< ::sandia_hand_msgs::RawPalmState> RawPalmStatePtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::RawPalmState const> RawPalmStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4dac80ef5adde66fbf1e5067579f33bb";
  }

  static const char* value(const  ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4dac80ef5adde66fULL;
  static const uint64_t static_value2 = 0xbf1e5067579f33bbULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/RawPalmState";
  }

  static const char* value(const  ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32     palm_time\n\
int16[3]   palm_accel\n\
int16[3]   palm_gyro\n\
int16[3]   palm_mag\n\
uint16[7]  palm_temps\n\
uint16[32] palm_tactile\n\
\n\
";
  }

  static const char* value(const  ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.palm_time);
    stream.next(m.palm_accel);
    stream.next(m.palm_gyro);
    stream.next(m.palm_mag);
    stream.next(m.palm_temps);
    stream.next(m.palm_tactile);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RawPalmState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sandia_hand_msgs::RawPalmState_<ContainerAllocator> & v) 
  {
    s << indent << "palm_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.palm_time);
    s << indent << "palm_accel[]" << std::endl;
    for (size_t i = 0; i < v.palm_accel.size(); ++i)
    {
      s << indent << "  palm_accel[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.palm_accel[i]);
    }
    s << indent << "palm_gyro[]" << std::endl;
    for (size_t i = 0; i < v.palm_gyro.size(); ++i)
    {
      s << indent << "  palm_gyro[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.palm_gyro[i]);
    }
    s << indent << "palm_mag[]" << std::endl;
    for (size_t i = 0; i < v.palm_mag.size(); ++i)
    {
      s << indent << "  palm_mag[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.palm_mag[i]);
    }
    s << indent << "palm_temps[]" << std::endl;
    for (size_t i = 0; i < v.palm_temps.size(); ++i)
    {
      s << indent << "  palm_temps[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.palm_temps[i]);
    }
    s << indent << "palm_tactile[]" << std::endl;
    for (size_t i = 0; i < v.palm_tactile.size(); ++i)
    {
      s << indent << "  palm_tactile[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.palm_tactile[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_RAWPALMSTATE_H

