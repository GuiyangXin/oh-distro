/* Auto-generated by genmsg_cpp for file /home/sisir/sandia-hand/ros/sandia_hand_msgs/msg/Parameter.msg */
#ifndef SANDIA_HAND_MSGS_MESSAGE_PARAMETER_H
#define SANDIA_HAND_MSGS_MESSAGE_PARAMETER_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct Parameter_ {
  typedef Parameter_<ContainerAllocator> Type;

  Parameter_()
  : name()
  , val_type(0)
  , i_val(0)
  , f_val(0.0)
  {
  }

  Parameter_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , val_type(0)
  , i_val(0)
  , f_val(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef int8_t _val_type_type;
  int8_t val_type;

  typedef uint32_t _i_val_type;
  uint32_t i_val;

  typedef float _f_val_type;
  float f_val;

  enum { INTEGER = 1 };
  enum { FLOAT = 2 };

  typedef boost::shared_ptr< ::sandia_hand_msgs::Parameter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::Parameter_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Parameter
typedef  ::sandia_hand_msgs::Parameter_<std::allocator<void> > Parameter;

typedef boost::shared_ptr< ::sandia_hand_msgs::Parameter> ParameterPtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::Parameter const> ParameterConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sandia_hand_msgs::Parameter_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sandia_hand_msgs::Parameter_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::Parameter_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::Parameter_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::Parameter_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57415258934843cb3facecb3fd658b64";
  }

  static const char* value(const  ::sandia_hand_msgs::Parameter_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x57415258934843cbULL;
  static const uint64_t static_value2 = 0x3facecb3fd658b64ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::Parameter_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/Parameter";
  }

  static const char* value(const  ::sandia_hand_msgs::Parameter_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::Parameter_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string  name\n\
byte    INTEGER=1\n\
byte    FLOAT=2\n\
byte    val_type\n\
uint32  i_val\n\
float32 f_val\n\
\n\
";
  }

  static const char* value(const  ::sandia_hand_msgs::Parameter_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::Parameter_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.val_type);
    stream.next(m.i_val);
    stream.next(m.f_val);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Parameter_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::Parameter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sandia_hand_msgs::Parameter_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "val_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.val_type);
    s << indent << "i_val: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.i_val);
    s << indent << "f_val: ";
    Printer<float>::stream(s, indent + "  ", v.f_val);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_PARAMETER_H

