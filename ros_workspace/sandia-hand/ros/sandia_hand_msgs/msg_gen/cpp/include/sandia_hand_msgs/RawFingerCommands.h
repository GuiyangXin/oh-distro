/* Auto-generated by genmsg_cpp for file /home/sisir/sandia-hand/ros/sandia_hand_msgs/msg/RawFingerCommands.msg */
#ifndef SANDIA_HAND_MSGS_MESSAGE_RAWFINGERCOMMANDS_H
#define SANDIA_HAND_MSGS_MESSAGE_RAWFINGERCOMMANDS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct RawFingerCommands_ {
  typedef RawFingerCommands_<ContainerAllocator> Type;

  RawFingerCommands_()
  : motor_targets()
  {
    motor_targets.assign(0);
  }

  RawFingerCommands_(const ContainerAllocator& _alloc)
  : motor_targets()
  {
    motor_targets.assign(0);
  }

  typedef boost::array<int16_t, 3>  _motor_targets_type;
  boost::array<int16_t, 3>  motor_targets;


  typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RawFingerCommands
typedef  ::sandia_hand_msgs::RawFingerCommands_<std::allocator<void> > RawFingerCommands;

typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerCommands> RawFingerCommandsPtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerCommands const> RawFingerCommandsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "62e121b7d21d200f20a78585e63fdbe0";
  }

  static const char* value(const  ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x62e121b7d21d200fULL;
  static const uint64_t static_value2 = 0x20a78585e63fdbe0ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/RawFingerCommands";
  }

  static const char* value(const  ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16[3] motor_targets\n\
\n\
";
  }

  static const char* value(const  ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.motor_targets);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RawFingerCommands_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sandia_hand_msgs::RawFingerCommands_<ContainerAllocator> & v) 
  {
    s << indent << "motor_targets[]" << std::endl;
    for (size_t i = 0; i < v.motor_targets.size(); ++i)
    {
      s << indent << "  motor_targets[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.motor_targets[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_RAWFINGERCOMMANDS_H

