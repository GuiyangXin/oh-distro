/* Auto-generated by genmsg_cpp for file /home/sisir/sandia-hand/ros/sandia_hand_msgs/msg/RawFingerInertial.msg */
#ifndef SANDIA_HAND_MSGS_MESSAGE_RAWFINGERINERTIAL_H
#define SANDIA_HAND_MSGS_MESSAGE_RAWFINGERINERTIAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct RawFingerInertial_ {
  typedef RawFingerInertial_<ContainerAllocator> Type;

  RawFingerInertial_()
  : mm_accel()
  , pp_accel()
  , dp_accel()
  , mm_mag()
  , pp_mag()
  , dp_mag()
  {
    mm_accel.assign(0);
    pp_accel.assign(0);
    dp_accel.assign(0);
    mm_mag.assign(0);
    pp_mag.assign(0);
    dp_mag.assign(0);
  }

  RawFingerInertial_(const ContainerAllocator& _alloc)
  : mm_accel()
  , pp_accel()
  , dp_accel()
  , mm_mag()
  , pp_mag()
  , dp_mag()
  {
    mm_accel.assign(0);
    pp_accel.assign(0);
    dp_accel.assign(0);
    mm_mag.assign(0);
    pp_mag.assign(0);
    dp_mag.assign(0);
  }

  typedef boost::array<uint16_t, 3>  _mm_accel_type;
  boost::array<uint16_t, 3>  mm_accel;

  typedef boost::array<uint16_t, 3>  _pp_accel_type;
  boost::array<uint16_t, 3>  pp_accel;

  typedef boost::array<uint16_t, 3>  _dp_accel_type;
  boost::array<uint16_t, 3>  dp_accel;

  typedef boost::array<uint16_t, 3>  _mm_mag_type;
  boost::array<uint16_t, 3>  mm_mag;

  typedef boost::array<uint16_t, 3>  _pp_mag_type;
  boost::array<uint16_t, 3>  pp_mag;

  typedef boost::array<uint16_t, 3>  _dp_mag_type;
  boost::array<uint16_t, 3>  dp_mag;


  typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RawFingerInertial
typedef  ::sandia_hand_msgs::RawFingerInertial_<std::allocator<void> > RawFingerInertial;

typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerInertial> RawFingerInertialPtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::RawFingerInertial const> RawFingerInertialConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> > {
  static const char* value() 
  {
    return "47495f9d3649f45640a29f32e4801b17";
  }

  static const char* value(const  ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x47495f9d3649f456ULL;
  static const uint64_t static_value2 = 0x40a29f32e4801b17ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/RawFingerInertial";
  }

  static const char* value(const  ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint16[3] mm_accel\n\
uint16[3] pp_accel\n\
uint16[3] dp_accel\n\
uint16[3] mm_mag\n\
uint16[3] pp_mag\n\
uint16[3] dp_mag\n\
\n\
";
  }

  static const char* value(const  ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.mm_accel);
    stream.next(m.pp_accel);
    stream.next(m.dp_accel);
    stream.next(m.mm_mag);
    stream.next(m.pp_mag);
    stream.next(m.dp_mag);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RawFingerInertial_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sandia_hand_msgs::RawFingerInertial_<ContainerAllocator> & v) 
  {
    s << indent << "mm_accel[]" << std::endl;
    for (size_t i = 0; i < v.mm_accel.size(); ++i)
    {
      s << indent << "  mm_accel[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.mm_accel[i]);
    }
    s << indent << "pp_accel[]" << std::endl;
    for (size_t i = 0; i < v.pp_accel.size(); ++i)
    {
      s << indent << "  pp_accel[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.pp_accel[i]);
    }
    s << indent << "dp_accel[]" << std::endl;
    for (size_t i = 0; i < v.dp_accel.size(); ++i)
    {
      s << indent << "  dp_accel[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.dp_accel[i]);
    }
    s << indent << "mm_mag[]" << std::endl;
    for (size_t i = 0; i < v.mm_mag.size(); ++i)
    {
      s << indent << "  mm_mag[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.mm_mag[i]);
    }
    s << indent << "pp_mag[]" << std::endl;
    for (size_t i = 0; i < v.pp_mag.size(); ++i)
    {
      s << indent << "  pp_mag[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.pp_mag[i]);
    }
    s << indent << "dp_mag[]" << std::endl;
    for (size_t i = 0; i < v.dp_mag.size(); ++i)
    {
      s << indent << "  dp_mag[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.dp_mag[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_RAWFINGERINERTIAL_H

