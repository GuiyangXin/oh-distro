/* Auto-generated by genmsg_cpp for file /home/sisir/sandia-hand/ros/sandia_hand_msgs/msg/SimpleGrasp.msg */
#ifndef SANDIA_HAND_MSGS_MESSAGE_SIMPLEGRASP_H
#define SANDIA_HAND_MSGS_MESSAGE_SIMPLEGRASP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sandia_hand_msgs
{
template <class ContainerAllocator>
struct SimpleGrasp_ {
  typedef SimpleGrasp_<ContainerAllocator> Type;

  SimpleGrasp_()
  : name()
  , closed_amount(0.0)
  {
  }

  SimpleGrasp_(const ContainerAllocator& _alloc)
  : name(_alloc)
  , closed_amount(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  name;

  typedef double _closed_amount_type;
  double closed_amount;


  typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimpleGrasp
typedef  ::sandia_hand_msgs::SimpleGrasp_<std::allocator<void> > SimpleGrasp;

typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGrasp> SimpleGraspPtr;
typedef boost::shared_ptr< ::sandia_hand_msgs::SimpleGrasp const> SimpleGraspConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sandia_hand_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "95873588e5f0e32a373b23f95e571087";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x95873588e5f0e32aULL;
  static const uint64_t static_value2 = 0x373b23f95e571087ULL;
};

template<class ContainerAllocator>
struct DataType< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sandia_hand_msgs/SimpleGrasp";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string  name\n\
float64 closed_amount  \n\
# closed_amount = 0 means fully open\n\
# closed_amount = 1 means fully closed\n\
\n\
";
  }

  static const char* value(const  ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.name);
    stream.next(m.closed_amount);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimpleGrasp_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sandia_hand_msgs::SimpleGrasp_<ContainerAllocator> & v) 
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "closed_amount: ";
    Printer<double>::stream(s, indent + "  ", v.closed_amount);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SANDIA_HAND_MSGS_MESSAGE_SIMPLEGRASP_H

