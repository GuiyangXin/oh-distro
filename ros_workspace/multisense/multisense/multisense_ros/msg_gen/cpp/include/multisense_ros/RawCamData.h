/* Auto-generated by genmsg_cpp for file /home/mfallon/drc/ros_workspace/multisense/multisense/multisense_ros/msg/RawCamData.msg */
#ifndef MULTISENSE_ROS_MESSAGE_RAWCAMDATA_H
#define MULTISENSE_ROS_MESSAGE_RAWCAMDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace multisense_ros
{
template <class ContainerAllocator>
struct RawCamData_ {
  typedef RawCamData_<ContainerAllocator> Type;

  RawCamData_()
  : frames_per_second(0.0)
  , gain(0.0)
  , exposure_time(0)
  , frame_count(0)
  , time_stamp()
  , angle(0)
  , width(0)
  , height(0)
  , gray_scale_image()
  , disparity_image()
  {
  }

  RawCamData_(const ContainerAllocator& _alloc)
  : frames_per_second(0.0)
  , gain(0.0)
  , exposure_time(0)
  , frame_count(0)
  , time_stamp()
  , angle(0)
  , width(0)
  , height(0)
  , gray_scale_image(_alloc)
  , disparity_image(_alloc)
  {
  }

  typedef float _frames_per_second_type;
  float frames_per_second;

  typedef float _gain_type;
  float gain;

  typedef uint32_t _exposure_time_type;
  uint32_t exposure_time;

  typedef uint32_t _frame_count_type;
  uint32_t frame_count;

  typedef ros::Time _time_stamp_type;
  ros::Time time_stamp;

  typedef uint32_t _angle_type;
  uint32_t angle;

  typedef uint16_t _width_type;
  uint16_t width;

  typedef uint16_t _height_type;
  uint16_t height;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _gray_scale_image_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  gray_scale_image;

  typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _disparity_image_type;
  std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  disparity_image;


  typedef boost::shared_ptr< ::multisense_ros::RawCamData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::RawCamData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RawCamData
typedef  ::multisense_ros::RawCamData_<std::allocator<void> > RawCamData;

typedef boost::shared_ptr< ::multisense_ros::RawCamData> RawCamDataPtr;
typedef boost::shared_ptr< ::multisense_ros::RawCamData const> RawCamDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::multisense_ros::RawCamData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::multisense_ros::RawCamData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace multisense_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::multisense_ros::RawCamData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::multisense_ros::RawCamData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::RawCamData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5088c19778d4fa49ece5e07c0880c7e3";
  }

  static const char* value(const  ::multisense_ros::RawCamData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5088c19778d4fa49ULL;
  static const uint64_t static_value2 = 0xece5e07c0880c7e3ULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::RawCamData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "multisense_ros/RawCamData";
  }

  static const char* value(const  ::multisense_ros::RawCamData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::RawCamData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 frames_per_second\n\
float32 gain\n\
uint32  exposure_time\n\
uint32  frame_count\n\
time    time_stamp\n\
uint32  angle\n\
uint16  width\n\
uint16  height\n\
uint8[] gray_scale_image\n\
uint16[] disparity_image\n\
\n\
";
  }

  static const char* value(const  ::multisense_ros::RawCamData_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::multisense_ros::RawCamData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.frames_per_second);
    stream.next(m.gain);
    stream.next(m.exposure_time);
    stream.next(m.frame_count);
    stream.next(m.time_stamp);
    stream.next(m.angle);
    stream.next(m.width);
    stream.next(m.height);
    stream.next(m.gray_scale_image);
    stream.next(m.disparity_image);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RawCamData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::RawCamData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::multisense_ros::RawCamData_<ContainerAllocator> & v) 
  {
    s << indent << "frames_per_second: ";
    Printer<float>::stream(s, indent + "  ", v.frames_per_second);
    s << indent << "gain: ";
    Printer<float>::stream(s, indent + "  ", v.gain);
    s << indent << "exposure_time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.exposure_time);
    s << indent << "frame_count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.frame_count);
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "angle: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.angle);
    s << indent << "width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.height);
    s << indent << "gray_scale_image[]" << std::endl;
    for (size_t i = 0; i < v.gray_scale_image.size(); ++i)
    {
      s << indent << "  gray_scale_image[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.gray_scale_image[i]);
    }
    s << indent << "disparity_image[]" << std::endl;
    for (size_t i = 0; i < v.disparity_image.size(); ++i)
    {
      s << indent << "  disparity_image[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.disparity_image[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_RAWCAMDATA_H

