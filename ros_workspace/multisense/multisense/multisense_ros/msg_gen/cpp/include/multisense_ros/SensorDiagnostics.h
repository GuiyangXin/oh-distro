/* Auto-generated by genmsg_cpp for file /home/mfallon/drc/ros_workspace/multisense/multisense/multisense_ros/msg/SensorDiagnostics.msg */
#ifndef MULTISENSE_ROS_MESSAGE_SENSORDIAGNOSTICS_H
#define MULTISENSE_ROS_MESSAGE_SENSORDIAGNOSTICS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "multisense_ros/SensorStatus.h"

namespace multisense_ros
{
template <class ContainerAllocator>
struct SensorDiagnostics_ {
  typedef SensorDiagnostics_<ContainerAllocator> Type;

  SensorDiagnostics_()
  : stamp()
  , status()
  , desired_rate(0.0)
  , current_rate(0.0)
  {
  }

  SensorDiagnostics_(const ContainerAllocator& _alloc)
  : stamp()
  , status(_alloc)
  , desired_rate(0.0)
  , current_rate(0.0)
  {
  }

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef  ::multisense_ros::SensorStatus_<ContainerAllocator>  _status_type;
   ::multisense_ros::SensorStatus_<ContainerAllocator>  status;

  typedef float _desired_rate_type;
  float desired_rate;

  typedef float _current_rate_type;
  float current_rate;


  typedef boost::shared_ptr< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::SensorDiagnostics_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SensorDiagnostics
typedef  ::multisense_ros::SensorDiagnostics_<std::allocator<void> > SensorDiagnostics;

typedef boost::shared_ptr< ::multisense_ros::SensorDiagnostics> SensorDiagnosticsPtr;
typedef boost::shared_ptr< ::multisense_ros::SensorDiagnostics const> SensorDiagnosticsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::multisense_ros::SensorDiagnostics_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace multisense_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::multisense_ros::SensorDiagnostics_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> > {
  static const char* value() 
  {
    return "28e7c3ade6fe630a725df4dd4637fe9c";
  }

  static const char* value(const  ::multisense_ros::SensorDiagnostics_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x28e7c3ade6fe630aULL;
  static const uint64_t static_value2 = 0x725df4dd4637fe9cULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> > {
  static const char* value() 
  {
    return "multisense_ros/SensorDiagnostics";
  }

  static const char* value(const  ::multisense_ros::SensorDiagnostics_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> > {
  static const char* value() 
  {
    return "time stamp\n\
multisense_ros/SensorStatus status\n\
float32 desired_rate\n\
float32 current_rate\n\
\n\
================================================================================\n\
MSG: multisense_ros/SensorStatus\n\
uint8 STOPPED = 0\n\
uint8 RUNNING = 1\n\
uint8 STARTING = 2\n\
uint8 STOPPING = 3\n\
\n\
uint8 state\n\
time last_state_change\n\
\n\
";
  }

  static const char* value(const  ::multisense_ros::SensorDiagnostics_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.status);
    stream.next(m.desired_rate);
    stream.next(m.current_rate);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SensorDiagnostics_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::SensorDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::multisense_ros::SensorDiagnostics_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "status: ";
s << std::endl;
    Printer< ::multisense_ros::SensorStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "desired_rate: ";
    Printer<float>::stream(s, indent + "  ", v.desired_rate);
    s << indent << "current_rate: ";
    Printer<float>::stream(s, indent + "  ", v.current_rate);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_SENSORDIAGNOSTICS_H

