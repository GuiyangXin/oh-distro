/* Auto-generated by genmsg_cpp for file /home/mfallon/drc/ros_workspace/multisense/multisense/multisense_ros/msg/SensorStatus.msg */
#ifndef MULTISENSE_ROS_MESSAGE_SENSORSTATUS_H
#define MULTISENSE_ROS_MESSAGE_SENSORSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace multisense_ros
{
template <class ContainerAllocator>
struct SensorStatus_ {
  typedef SensorStatus_<ContainerAllocator> Type;

  SensorStatus_()
  : state(0)
  , last_state_change()
  {
  }

  SensorStatus_(const ContainerAllocator& _alloc)
  : state(0)
  , last_state_change()
  {
  }

  typedef uint8_t _state_type;
  uint8_t state;

  typedef ros::Time _last_state_change_type;
  ros::Time last_state_change;

  enum { STOPPED = 0 };
  enum { RUNNING = 1 };
  enum { STARTING = 2 };
  enum { STOPPING = 3 };

  typedef boost::shared_ptr< ::multisense_ros::SensorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::multisense_ros::SensorStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SensorStatus
typedef  ::multisense_ros::SensorStatus_<std::allocator<void> > SensorStatus;

typedef boost::shared_ptr< ::multisense_ros::SensorStatus> SensorStatusPtr;
typedef boost::shared_ptr< ::multisense_ros::SensorStatus const> SensorStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::multisense_ros::SensorStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::multisense_ros::SensorStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace multisense_ros

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::multisense_ros::SensorStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::multisense_ros::SensorStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::multisense_ros::SensorStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0a4701d6811d800b5926beac29687bdf";
  }

  static const char* value(const  ::multisense_ros::SensorStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0a4701d6811d800bULL;
  static const uint64_t static_value2 = 0x5926beac29687bdfULL;
};

template<class ContainerAllocator>
struct DataType< ::multisense_ros::SensorStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "multisense_ros/SensorStatus";
  }

  static const char* value(const  ::multisense_ros::SensorStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::multisense_ros::SensorStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 STOPPED = 0\n\
uint8 RUNNING = 1\n\
uint8 STARTING = 2\n\
uint8 STOPPING = 3\n\
\n\
uint8 state\n\
time last_state_change\n\
\n\
";
  }

  static const char* value(const  ::multisense_ros::SensorStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::multisense_ros::SensorStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::multisense_ros::SensorStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.last_state_change);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SensorStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::multisense_ros::SensorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::multisense_ros::SensorStatus_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "last_state_change: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.last_state_change);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MULTISENSE_ROS_MESSAGE_SENSORSTATUS_H

