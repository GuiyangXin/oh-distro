"""autogenerated by genpy from multisense_ros/SensorDiagnostics.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import multisense_ros.msg
import genpy

class SensorDiagnostics(genpy.Message):
  _md5sum = "28e7c3ade6fe630a725df4dd4637fe9c"
  _type = "multisense_ros/SensorDiagnostics"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time stamp
multisense_ros/SensorStatus status
float32 desired_rate
float32 current_rate

================================================================================
MSG: multisense_ros/SensorStatus
uint8 STOPPED = 0
uint8 RUNNING = 1
uint8 STARTING = 2
uint8 STOPPING = 3

uint8 state
time last_state_change

"""
  __slots__ = ['stamp','status','desired_rate','current_rate']
  _slot_types = ['time','multisense_ros/SensorStatus','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,status,desired_rate,current_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorDiagnostics, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.status is None:
        self.status = multisense_ros.msg.SensorStatus()
      if self.desired_rate is None:
        self.desired_rate = 0.
      if self.current_rate is None:
        self.current_rate = 0.
    else:
      self.stamp = genpy.Time()
      self.status = multisense_ros.msg.SensorStatus()
      self.desired_rate = 0.
      self.current_rate = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2IB2I2f.pack(_x.stamp.secs, _x.stamp.nsecs, _x.status.state, _x.status.last_state_change.secs, _x.status.last_state_change.nsecs, _x.desired_rate, _x.current_rate))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.status is None:
        self.status = multisense_ros.msg.SensorStatus()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.stamp.secs, _x.stamp.nsecs, _x.status.state, _x.status.last_state_change.secs, _x.status.last_state_change.nsecs, _x.desired_rate, _x.current_rate,) = _struct_2IB2I2f.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2IB2I2f.pack(_x.stamp.secs, _x.stamp.nsecs, _x.status.state, _x.status.last_state_change.secs, _x.status.last_state_change.nsecs, _x.desired_rate, _x.current_rate))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.status is None:
        self.status = multisense_ros.msg.SensorStatus()
      end = 0
      _x = self
      start = end
      end += 25
      (_x.stamp.secs, _x.stamp.nsecs, _x.status.state, _x.status.last_state_change.secs, _x.status.last_state_change.nsecs, _x.desired_rate, _x.current_rate,) = _struct_2IB2I2f.unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2IB2I2f = struct.Struct("<2IB2I2f")
