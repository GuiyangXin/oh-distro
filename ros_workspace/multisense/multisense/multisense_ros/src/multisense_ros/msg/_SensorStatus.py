"""autogenerated by genpy from multisense_ros/SensorStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class SensorStatus(genpy.Message):
  _md5sum = "0a4701d6811d800b5926beac29687bdf"
  _type = "multisense_ros/SensorStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 STOPPED = 0
uint8 RUNNING = 1
uint8 STARTING = 2
uint8 STOPPING = 3

uint8 state
time last_state_change

"""
  # Pseudo-constants
  STOPPED = 0
  RUNNING = 1
  STARTING = 2
  STOPPING = 3

  __slots__ = ['state','last_state_change']
  _slot_types = ['uint8','time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       state,last_state_change

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.state is None:
        self.state = 0
      if self.last_state_change is None:
        self.last_state_change = genpy.Time()
    else:
      self.state = 0
      self.last_state_change = genpy.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B2I.pack(_x.state, _x.last_state_change.secs, _x.last_state_change.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.last_state_change is None:
        self.last_state_change = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.state, _x.last_state_change.secs, _x.last_state_change.nsecs,) = _struct_B2I.unpack(str[start:end])
      self.last_state_change.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B2I.pack(_x.state, _x.last_state_change.secs, _x.last_state_change.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.last_state_change is None:
        self.last_state_change = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 9
      (_x.state, _x.last_state_change.secs, _x.last_state_change.nsecs,) = _struct_B2I.unpack(str[start:end])
      self.last_state_change.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2I = struct.Struct("<B2I")
