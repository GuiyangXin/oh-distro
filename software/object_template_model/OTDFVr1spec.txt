  Object Template Description Format (OTDF) Vr 1.00:
  ===================================================
  
  An OTDF specification contains the following tags encompassed in an <object> tag:
  - <param>
  - <bounding_volume>
  - <link>*
  - <joint>** 
  - <link_pattern>
  - <joint_pattern>
  - <grasp> 
  
  *  - In addition to URDF compatible geometries (sphere, box, cylinder, mesh), Torus is supported.
  ** - An additional "type" attribute was added to <child_link> 
       and <parent_link> sub tags to indicated if the parent/child is a bounding volume or 
       a link. If parsed as URDF, this attribute will be ignored.

  Notes:
  ===================================================
  1) Root must be a dummy link without inertial, visual or collision properties. 
     Either a world link (<link name="world" \> for world fixed static object) 
     or a dummy base link (<link name="xxx" \> for movable objects).
  2) The element following the root must always be the outer most bounding volume.
  3) bounding volumes can have links, or other bounding volumes as children.
  4) links can have links, or other bounding volumes as children.  
  5) joints associate bounding volumes and links in a tree structure.
  6) link pattern and joint pattern tags specifies a sequence of links or joints that are separated 
     by a fixed relative transformation.
  7) param tags specify the arguments of the templated objects. They must also have a default 
     value specified with them.
  8) All other values in the OTDF file can be written as expressions of the specified parameters
     in xacro style expressions enclosed with "${ }". Some sample expressions are shown below.

      Example Usage
      ------------------
      <param name="x" default_value="0.0" /> 
      ...
      	  <origin rpy="0 0 0" xyz="${0.5*x} ${2*x} ${3*x}"/>
      ...
      
      Example Expressions
      -------------------    
      ${(2*x)}
      ${sqrt(1 - (x^2))}
      ${sin(2 * pi * x) + cos(y / 2 * pi)}
      ${sin(2 * x)}
      
      
      These following functions are supported in the parser
      -----------------------------------------------------
      Mathematical operators (+, -, *, /, %, ^)
      Paranthesis '(',')'      
      Functions (min, max, avg, sum, abs, ceil, floor, round,
                 roundn, exp, log, log10, logn, root, sqrt, clamp, range, sgn)
      Trigonometry (sin, cos, tan, acos, asin, atan, atan2, cosh, cot, csc, 
                    sec, sinh, tanh, d2r, r2d, d2g, g2d, hyp)
      Equalities, Inequalities and Assigment (=, ==, <>, !=, <, <=, >, >=, :=)


      Usage in code:
      --------------
      For instantiation see parseOTDF function in otdf_parser.cpp/.h. This functions is provided within the lotdf_dom.so shared library, 
      which must be linked to within the client pod. The definition of the instance class is in otdf_interface/model.h. 
      
      #include <otdf_parser/otdf_parser.h>
      boost::shared_ptr<ModelInterface> object = parseOTDF(xml_string);
      std::map<std::string, double> params = object->params_map_; // all parameters defined in the object template
      // Modifying parameters at runtime and updating model.
      object->setParam("X", 10);
      object->update();
      
      // convertion to URDF
      convertObjectInstanceToURDFfile(object); // prints urdf xml to .urdf file
      std::string urdf_xml_string=convertObjectInstanceToURDFstring(object) // returns a string for broadcast 
      
      
      
  Useful programs:
   check_otdf_interface  xxxx.otdf
   otdf_to_graphiz  xxxx.otdf
   otdf_to_urdf     xxxx.otdf
   
  TODO:
  ===================================================
  - Need to add support for  <grasp> tags.
  - The internals of the grasp tag is still unknown.
