package drc;

// Base Goal Message with timeout

struct walking_goal_t
{
	int64_t utime;
	//string robot_name;

	// The goal position, as the center between the two feet
	position_3d_t goal_pos;

	int32_t max_num_steps;
	int32_t min_num_steps;

    // Max time to spend walking (in ns)
	int64_t timeout;

	// // Default time per step (in ns)
	// int64_t time_per_step;

	// speed at which the foot should move while swinging (m/s)
	float step_speed; 

	float nom_step_width;
	float nom_forward_step;
	float max_forward_step;

	float step_height;

	double fixed_step_duration;
	float bdi_step_duration;
	float bdi_sway_duration;
	float bdi_lift_height;
	int32_t bdi_toe_off; // see drc_atlas_behavior_step_action_t
	float bdi_knee_nominal;

	boolean follow_spline;
	boolean ignore_terrain;
	boolean force_to_sticky_feet;

    int8_t goal_type;
    const int8_t GOAL_TYPE_CENTER = 0;
    const int8_t GOAL_TYPE_RIGHT_FOOT = 1;
    const int8_t GOAL_TYPE_LEFT_FOOT = 2;

	float mu;
    int8_t behavior;
	int8_t map_command;
	boolean velocity_based_steps;
    const int8_t BEHAVIOR_WALKING = 0;
    const int8_t BEHAVIOR_CRAWLING = 1;
    const int8_t BEHAVIOR_BDI_WALKING = 2;
    const int8_t BEHAVIOR_BDI_STEPPING = 3;


	// whether to allow optimization of the foostep plan
	boolean allow_optimization;

	// whether this is a new goal message which should force the planner to start over
	boolean is_new_goal;

	// true if the right foot leads, false if left foot leads
	int8_t right_foot_lead;
	const int8_t LEAD_RIGHT = 1;
	const int8_t LEAD_LEFT = 0;
	const int8_t LEAD_AUTO = -1;

}

