
proximal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00001750  000017e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000247  00802002  00802002  000017e6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00001eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e8  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000439f  00000000  00000000  00002021  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000df1  00000000  00000000  000063c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dc4  00000000  00000000  000071b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005bc  00000000  00000000  00007f78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c1c  00000000  00000000  00008534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001252  00000000  00000000  0000b150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000c3a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__vector_6>
      1c:	0c 94 53 03 	jmp	0x6a6	; 0x6a6 <__vector_7>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 85 02 	jmp	0x50a	; 0x50a <__vector_14>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 9f 06 	jmp	0xd3e	; 0xd3e <__vector_20>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 19 03 	jmp	0x632	; 0x632 <__vector_60>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_88>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_90>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e0 e5       	ldi	r30, 0x50	; 80
     210:	f7 e1       	ldi	r31, 0x17	; 23
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a2 30       	cpi	r26, 0x02	; 2
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	12 e2       	ldi	r17, 0x22	; 34
     220:	a2 e0       	ldi	r26, 0x02	; 2
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a9 34       	cpi	r26, 0x49	; 73
     22a:	b1 07       	cpc	r27, r17
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 ef 0a 	call	0x15de	; 0x15de <main>
     232:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <captureSweep>:
//     return;
// }
// */

void captureSweep(int16_t *outputData)
{
     23a:	fc 01       	movw	r30, r24
    //Begin sampling on the Distal
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     23c:	88 e0       	ldi	r24, 0x08	; 8
     23e:	80 93 21 02 	sts	0x0221, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     242:	80 e1       	ldi	r24, 0x10	; 16
     244:	80 93 29 02 	sts	0x0229, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     248:	88 e1       	ldi	r24, 0x18	; 24
     24a:	80 93 31 02 	sts	0x0231, r24
    ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
     24e:	80 e2       	ldi	r24, 0x20	; 32
     250:	80 93 39 02 	sts	0x0239, r24

    asm("nop"); // delay for mux switch
     254:	00 00       	nop
    asm("nop");
     256:	00 00       	nop

    ADCA.CTRLA = ADC_CH3START_bm | ADC_CH2START_bm | ADC_CH1START_bm | ADC_CH0START_bm | ADC_ENABLE_bm;
     258:	8d e3       	ldi	r24, 0x3D	; 61
     25a:	80 93 00 02 	sts	0x0200, r24

    //Now wait for the conclusion of the sampling
    while(!(ADCA.INTFLAGS & ADC_CH3IF_bm));
     25e:	80 91 06 02 	lds	r24, 0x0206
     262:	83 ff       	sbrs	r24, 3
     264:	fc cf       	rjmp	.-8      	; 0x25e <captureSweep+0x24>
    while(!(ADCA.INTFLAGS & ADC_CH2IF_bm));
     266:	80 91 06 02 	lds	r24, 0x0206
     26a:	82 ff       	sbrs	r24, 2
     26c:	fc cf       	rjmp	.-8      	; 0x266 <captureSweep+0x2c>
    while(!(ADCA.INTFLAGS & ADC_CH1IF_bm));
     26e:	80 91 06 02 	lds	r24, 0x0206
     272:	81 ff       	sbrs	r24, 1
     274:	fc cf       	rjmp	.-8      	; 0x26e <captureSweep+0x34>
    while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
     276:	80 91 06 02 	lds	r24, 0x0206
     27a:	80 ff       	sbrs	r24, 0
     27c:	fc cf       	rjmp	.-8      	; 0x276 <captureSweep+0x3c>

    //Sampling complete
    outputData[0] = ADCA.CH0RES;
     27e:	80 91 10 02 	lds	r24, 0x0210
     282:	90 91 11 02 	lds	r25, 0x0211
     286:	80 83       	st	Z, r24
     288:	91 83       	std	Z+1, r25	; 0x01
    outputData[1] = ADCA.CH1RES;
     28a:	80 91 12 02 	lds	r24, 0x0212
     28e:	90 91 13 02 	lds	r25, 0x0213
     292:	82 83       	std	Z+2, r24	; 0x02
     294:	93 83       	std	Z+3, r25	; 0x03
    outputData[2] = ADCA.CH2RES;
     296:	80 91 14 02 	lds	r24, 0x0214
     29a:	90 91 15 02 	lds	r25, 0x0215
     29e:	84 83       	std	Z+4, r24	; 0x04
     2a0:	95 83       	std	Z+5, r25	; 0x05
    outputData[3] = ADCA.CH3RES;
     2a2:	80 91 16 02 	lds	r24, 0x0216
     2a6:	90 91 17 02 	lds	r25, 0x0217
     2aa:	86 83       	std	Z+6, r24	; 0x06
     2ac:	97 83       	std	Z+7, r25	; 0x07

    ADCA.INTFLAGS = ADC_CH3IF_bm | ADC_CH2IF_bm | ADC_CH1IF_bm | ADC_CH0IF_bm;
     2ae:	8f e0       	ldi	r24, 0x0F	; 15
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f2 e0       	ldi	r31, 0x02	; 2
     2b4:	86 83       	std	Z+6, r24	; 0x06
    // outputData[6] = ADCA.CH2RES;

    // ADCA.INTFLAGS = ADC_CH2IF_bm | ADC_CH1IF_bm | ADC_CH0IF_bm;

    return;
}
     2b6:	08 95       	ret

000002b8 <configureADC>:
*
* Note that an internal reference is being used in this test setup.
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     2bc:	aa ec       	ldi	r26, 0xCA	; 202
     2be:	b1 e0       	ldi	r27, 0x01	; 1
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	8c 93       	st	X, r24
    result = pgm_read_byte(index);
     2c4:	e0 e2       	ldi	r30, 0x20	; 32
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     2ca:	1c 92       	st	X, r1
* Note that an internal reference is being used in this test setup.
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
    ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     2cc:	c0 e0       	ldi	r28, 0x00	; 0
     2ce:	d2 e0       	ldi	r29, 0x02	; 2
     2d0:	ec 87       	std	Y+12, r30	; 0x0c
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     2d2:	8c 93       	st	X, r24
    result = pgm_read_byte(index);
     2d4:	e1 e2       	ldi	r30, 0x21	; 33
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     2da:	1c 92       	st	X, r1
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
    ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
    ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     2dc:	ed 87       	std	Y+13, r30	; 0x0d
    //EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;

    //ADCA.EVCTRL = ADC_SWEEP_0123_gc | ADC_EVSEL_3456_gc | ADC_EVACT_SWEEP_gc;

    //Maximum ADC clock is 2 MHz.  This requires a prescaler of 16 on a CPU clock of 32 MHz
    ADCA.PRESCALER = ADC_PRESCALER_DIV16_gc;
     2de:	8c 83       	std	Y+4, r24	; 0x04
    //CURRENT_ADC.PRESCALER = ADC_PRESCALER_DIV256_gc;

#ifdef USE_INTERNAL_REF
    ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
#else
    ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
     2e0:	20 e2       	ldi	r18, 0x20	; 32
     2e2:	2a 83       	std	Y+2, r18	; 0x02
#endif

#warning The ADC.CH structure is wrong in AU parts.  Just use the ADC_CH0_MUXCTRL, etc. defines instead

    //CH0 is Distal 1 and Dynamic 1
    ADCA_CH0_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	80 93 20 02 	sts	0x0220, r24
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     2ea:	98 e0       	ldi	r25, 0x08	; 8
     2ec:	90 93 21 02 	sts	0x0221, r25
    ADCA_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     2f0:	10 92 22 02 	sts	0x0222, r1

    //CH1 is Distal 2 and Dynamic 2
    ADCA_CH1_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     2f4:	80 93 28 02 	sts	0x0228, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     2f8:	90 e1       	ldi	r25, 0x10	; 16
     2fa:	90 93 29 02 	sts	0x0229, r25
    ADCA_CH1_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     2fe:	10 92 2a 02 	sts	0x022A, r1

    //CH2 is Distal 3 and Dynamic 3
    ADCA_CH2_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     302:	80 93 30 02 	sts	0x0230, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     306:	38 e1       	ldi	r19, 0x18	; 24
     308:	30 93 31 02 	sts	0x0231, r19
    ADCA_CH2_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     30c:	10 92 32 02 	sts	0x0232, r1

    //CH3 is Distal 4 only
    ADCA_CH3_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     310:	80 93 38 02 	sts	0x0238, r24
    ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
     314:	20 93 39 02 	sts	0x0239, r18
    ADCA_CH3_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     318:	10 92 3a 02 	sts	0x023A, r1

    //Configure for signed operation
    ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
     31c:	99 83       	std	Y+1, r25	; 0x01
    ADCA.CTRLA = ADC_ENABLE_bm;
     31e:	88 83       	st	Y, r24
    //ADC_TC.CTRLE = 0x00;
    //ADC_TC.PERBUF = 3125;
    //ADC_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
    //ADC_TC.CTRLA = TC_CLKSEL_DIV1024_gc;

}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <prepareDMAChannel>:
* it into the buffer targetBuffer.
*
* This should be called before fireDMAChannel()
************************************************************************/
static void prepareDMAChannel(DMA_CH_t *selectedChannel, uint8_t usartTrigger, USART_t *targetUSART, volatile uint8_t *targetBuffer, uint8_t isOutbound)
{
     326:	0f 93       	push	r16
     328:	fc 01       	movw	r30, r24
     32a:	da 01       	movw	r26, r20
    //Configure the chosen channel to read from a fixed UART into a linear array
    if(isOutbound)
     32c:	00 23       	and	r16, r16
     32e:	11 f0       	breq	.+4      	; 0x334 <prepareDMAChannel+0xe>
    {
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | \
     330:	88 ed       	ldi	r24, 0xD8	; 216
     332:	01 c0       	rjmp	.+2      	; 0x336 <prepareDMAChannel+0x10>
                       DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_FIXED_gc;
    } else {
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_FIXED_gc | \
     334:	8d e8       	ldi	r24, 0x8D	; 141
     336:	82 83       	std	Z+2, r24	; 0x02
                       DMA_CH_DESTRELOAD_TRANSACTION_gc | DMA_CH_DESTDIR_INC_gc;
    }

    //Set to perform one block transfer corresponding to one command packet
    //Technically not necessary because REPEAT will not be set in CTRLA
    selectedChannel->REPCNT = 0x01;
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	86 83       	std	Z+6, r24	; 0x06
    //This part has 16 bit pointers, so cast appropriately.
    //Memory addresses are 24 bits to allow for external memory to be mapped into one address space
    //Same with internal EEPROM Data memory.
    //Since these locations are in lower memory, fix the high order address bits to zero.
    //Mapping external memory will require more care.
    if(isOutbound)
     33c:	00 23       	and	r16, r16
     33e:	31 f0       	breq	.+12     	; 0x34c <prepareDMAChannel+0x26>
    {
        selectedChannel->DESTADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     340:	a4 87       	std	Z+12, r26	; 0x0c
        selectedChannel->DESTADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     342:	b5 87       	std	Z+13, r27	; 0x0d
        selectedChannel->DESTADDR2 = 0;
     344:	16 86       	std	Z+14, r1	; 0x0e

        selectedChannel->SRCADDR0 = (uint16_t)targetBuffer & 0x00FF;
     346:	20 87       	std	Z+8, r18	; 0x08
        selectedChannel->SRCADDR1 = (uint16_t)targetBuffer >> 8;
     348:	31 87       	std	Z+9, r19	; 0x09
     34a:	05 c0       	rjmp	.+10     	; 0x356 <prepareDMAChannel+0x30>
        selectedChannel->SRCADDR2 = 0;
    } else {
        selectedChannel->DESTADDR0 = (uint16_t)targetBuffer & 0x00FF;
     34c:	24 87       	std	Z+12, r18	; 0x0c
        selectedChannel->DESTADDR1 = (uint16_t)targetBuffer >> 8;
     34e:	35 87       	std	Z+13, r19	; 0x0d
        selectedChannel->DESTADDR2 = 0;
     350:	16 86       	std	Z+14, r1	; 0x0e

        selectedChannel->SRCADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     352:	a0 87       	std	Z+8, r26	; 0x08
        selectedChannel->SRCADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     354:	b1 87       	std	Z+9, r27	; 0x09
        selectedChannel->SRCADDR2 = 0;
     356:	12 86       	std	Z+10, r1	; 0x0a
    }

    //Trigger on received data
    selectedChannel->TRIGSRC = usartTrigger;
     358:	63 83       	std	Z+3, r22	; 0x03

    //Interrupt on this channel when the transaction is complete, and clear any pending flags
    if(isOutbound)
     35a:	00 23       	and	r16, r16
     35c:	59 f0       	breq	.+22     	; 0x374 <prepareDMAChannel+0x4e>
    {
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_OFF_gc | DMA_CH_TRNIF_bm;
     35e:	80 e1       	ldi	r24, 0x10	; 16
     360:	81 83       	std	Z+1, r24	; 0x01
        targetUSART->STATUS = USART_TXCIF_bm;
     362:	80 e4       	ldi	r24, 0x40	; 64
     364:	11 96       	adiw	r26, 0x01	; 1
     366:	8c 93       	st	X, r24
     368:	11 97       	sbiw	r26, 0x01	; 1
        targetUSART->CTRLA = USART_TXCINTLVL_LO_gc | USART_RXCINTLVL_OFF_gc;
     36a:	84 e0       	ldi	r24, 0x04	; 4
     36c:	13 96       	adiw	r26, 0x03	; 3
     36e:	8c 93       	st	X, r24
     370:	13 97       	sbiw	r26, 0x03	; 3
     372:	02 c0       	rjmp	.+4      	; 0x378 <prepareDMAChannel+0x52>
    } else
    {
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc | DMA_CH_TRNIF_bm;
     374:	81 e1       	ldi	r24, 0x11	; 17
     376:	81 83       	std	Z+1, r24	; 0x01
    }
}
     378:	0f 91       	pop	r16
     37a:	08 95       	ret

0000037c <configureHalfDuplexLink>:
 *
 * Configures hardware and DMA channels to support the requested stream configuration
 ************************************************************************/

static void configureHalfDuplexLink(SERIAL_STREAM_t selectedStream, SERIAL_DIRECTION_t selectedDirection)
{
     37c:	0f 93       	push	r16
    cli();
     37e:	f8 94       	cli
    switch(selectedStream)
     380:	88 23       	and	r24, r24
     382:	21 f0       	breq	.+8      	; 0x38c <configureHalfDuplexLink+0x10>
     384:	81 30       	cpi	r24, 0x01	; 1
     386:	09 f0       	breq	.+2      	; 0x38a <configureHalfDuplexLink+0xe>
     388:	70 c0       	rjmp	.+224    	; 0x46a <configureHalfDuplexLink+0xee>
     38a:	34 c0       	rjmp	.+104    	; 0x3f4 <configureHalfDuplexLink+0x78>
    {
        case DOWNSTREAM:
            //Abort any pending DMA transfers
            if(DOWNSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm)
     38c:	80 91 21 01 	lds	r24, 0x0121
     390:	87 ff       	sbrs	r24, 7
     392:	05 c0       	rjmp	.+10     	; 0x39e <configureHalfDuplexLink+0x22>
            {
                DOWNSTREAM_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
     394:	80 91 20 01 	lds	r24, 0x0120
     398:	8f 77       	andi	r24, 0x7F	; 127
     39a:	80 93 20 01 	sts	0x0120, r24
            }

            //downstreamXmitDone = 0;
            downstreamSizeReceived = 0;
     39e:	10 92 d6 20 	sts	0x20D6, r1
            downstreamBusy = 0;
     3a2:	10 92 05 20 	sts	0x2005, r1

            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
     3a6:	66 23       	and	r22, r22
     3a8:	99 f4       	brne	.+38     	; 0x3d0 <configureHalfDuplexLink+0x54>
            {
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_INBOUND_TRIGGER, &DOWNSTREAM_USART, inbound_downstream_data,0);
     3aa:	80 e2       	ldi	r24, 0x20	; 32
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	6b e6       	ldi	r22, 0x6B	; 107
     3b0:	40 ea       	ldi	r20, 0xA0	; 160
     3b2:	59 e0       	ldi	r21, 0x09	; 9
     3b4:	2e e0       	ldi	r18, 0x0E	; 14
     3b6:	30 e2       	ldi	r19, 0x20	; 32
     3b8:	00 e0       	ldi	r16, 0x00	; 0
     3ba:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
                DOWNSTREAM_USART.CTRLA |= USART_RXCINTLVL_LO_gc;
     3be:	80 91 a3 09 	lds	r24, 0x09A3
     3c2:	80 61       	ori	r24, 0x10	; 16
     3c4:	e0 ea       	ldi	r30, 0xA0	; 160
     3c6:	f9 e0       	ldi	r31, 0x09	; 9
     3c8:	83 83       	std	Z+3, r24	; 0x03
                DOWNSTREAM_CONFIG = INBOUND;
     3ca:	10 92 00 20 	sts	0x2000, r1
     3ce:	4d c0       	rjmp	.+154    	; 0x46a <configureHalfDuplexLink+0xee>
            } else {
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     3d0:	80 e4       	ldi	r24, 0x40	; 64
     3d2:	e0 ea       	ldi	r30, 0xA0	; 160
     3d4:	f9 e0       	ldi	r31, 0x09	; 9
     3d6:	81 83       	std	Z+1, r24	; 0x01
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     3d8:	80 e2       	ldi	r24, 0x20	; 32
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	6c e6       	ldi	r22, 0x6C	; 108
     3de:	40 ea       	ldi	r20, 0xA0	; 160
     3e0:	59 e0       	ldi	r21, 0x09	; 9
     3e2:	27 e0       	ldi	r18, 0x07	; 7
     3e4:	30 e2       	ldi	r19, 0x20	; 32
     3e6:	01 e0       	ldi	r16, 0x01	; 1
     3e8:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>

                DOWNSTREAM_CONFIG = OUTBOUND;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	80 93 00 20 	sts	0x2000, r24
     3f2:	3b c0       	rjmp	.+118    	; 0x46a <configureHalfDuplexLink+0xee>
            }
            break;
        case UPSTREAM:
            //Abort any pending DMA transfers
            if(UPSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm)
     3f4:	80 91 11 01 	lds	r24, 0x0111
     3f8:	87 ff       	sbrs	r24, 7
     3fa:	06 c0       	rjmp	.+12     	; 0x408 <configureHalfDuplexLink+0x8c>
            {
                UPSTREAM_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
     3fc:	80 91 10 01 	lds	r24, 0x0110
     400:	8f 77       	andi	r24, 0x7F	; 127
     402:	e0 e0       	ldi	r30, 0x00	; 0
     404:	f1 e0       	ldi	r31, 0x01	; 1
     406:	80 8b       	std	Z+16, r24	; 0x10
            }

            upstreamRxDone = 0;
     408:	10 92 da 20 	sts	0x20DA, r1
     40c:	10 92 db 20 	sts	0x20DB, r1
            //upstreamTxDone = 0;
            upstreamBusy = 0;
     410:	10 92 d7 20 	sts	0x20D7, r1

            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
     414:	66 23       	and	r22, r22
     416:	b1 f4       	brne	.+44     	; 0x444 <configureHalfDuplexLink+0xc8>
            {
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
     418:	80 e1       	ldi	r24, 0x10	; 16
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	6b e8       	ldi	r22, 0x8B	; 139
     41e:	40 ea       	ldi	r20, 0xA0	; 160
     420:	5a e0       	ldi	r21, 0x0A	; 10
     422:	25 ea       	ldi	r18, 0xA5	; 165
     424:	31 e2       	ldi	r19, 0x21	; 33
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     42c:	87 e0       	ldi	r24, 0x07	; 7
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	e0 e1       	ldi	r30, 0x10	; 16
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	84 83       	std	Z+4, r24	; 0x04
     436:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     438:	84 e8       	ldi	r24, 0x84	; 132
     43a:	80 93 10 01 	sts	0x0110, r24
            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
            {
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
                activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
                UPSTREAM_CONFIG = INBOUND;
     43e:	10 92 dc 20 	sts	0x20DC, r1
     442:	13 c0       	rjmp	.+38     	; 0x46a <configureHalfDuplexLink+0xee>

            } else {
                UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     444:	e0 ea       	ldi	r30, 0xA0	; 160
     446:	fa e0       	ldi	r31, 0x0A	; 10
     448:	80 e4       	ldi	r24, 0x40	; 64
     44a:	81 83       	std	Z+1, r24	; 0x01
                UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc | USART_RXCINTLVL_OFF_gc;
     44c:	84 e0       	ldi	r24, 0x04	; 4
     44e:	83 83       	std	Z+3, r24	; 0x03
                //Do not send all data through DMA.  Instead send outbound upstream data + 1.  This allows for the insertion of a small delay between size and data
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data + 1,1);
     450:	80 e1       	ldi	r24, 0x10	; 16
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	6c e8       	ldi	r22, 0x8C	; 140
     456:	40 ea       	ldi	r20, 0xA0	; 160
     458:	5a e0       	ldi	r21, 0x0A	; 10
     45a:	2e ed       	ldi	r18, 0xDE	; 222
     45c:	30 e2       	ldi	r19, 0x20	; 32
     45e:	01 e0       	ldi	r16, 0x01	; 1
     460:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
                UPSTREAM_CONFIG = OUTBOUND;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	80 93 dc 20 	sts	0x20DC, r24
            break;
        default:
            break;
    }

    sei();
     46a:	78 94       	sei
    return;

}
     46c:	0f 91       	pop	r16
     46e:	08 95       	ret

00000470 <__vector_88>:
 *
 * The Upstream USART only receives fixed COMMAND_PACKET_SIZE packets, so it simply needs an
 * armed DMA channel
 ************************************************************************/
ISR(DOWNSTREAM_USART_RX_vect)
{
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	0f 93       	push	r16
     47c:	2f 93       	push	r18
     47e:	3f 93       	push	r19
     480:	4f 93       	push	r20
     482:	5f 93       	push	r21
     484:	6f 93       	push	r22
     486:	7f 93       	push	r23
     488:	8f 93       	push	r24
     48a:	9f 93       	push	r25
     48c:	af 93       	push	r26
     48e:	bf 93       	push	r27
     490:	cf 93       	push	r28
     492:	ef 93       	push	r30
     494:	ff 93       	push	r31
    uint8_t packetSize;
    //Status bits must be polled before reading the data or they are invalidated
    if(DOWNSTREAM_USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
     496:	80 91 a1 09 	lds	r24, 0x09A1
     49a:	88 71       	andi	r24, 0x18	; 24
     49c:	19 f0       	breq	.+6      	; 0x4a4 <__vector_88+0x34>
    {
        //Framing or overflow error. Discard and do nothing else
        packetSize = DOWNSTREAM_USART.DATA;
     49e:	80 91 a0 09 	lds	r24, 0x09A0
        return;
     4a2:	20 c0       	rjmp	.+64     	; 0x4e4 <__vector_88+0x74>

    //Packetsize is defined as the number of additional bytes to arrive
    //The buffer is of size MAX_PACKET_SIZE, so packetSize can be up to
    //MAX_PACKET_SIZE - 1.  If it is equal to MAX_PACKET_SIZE or greater, reject

    packetSize = DOWNSTREAM_USART.DATA;
     4a4:	c0 91 a0 09 	lds	r28, 0x09A0
    if((packetSize >= MAX_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
     4a8:	8c 2f       	mov	r24, r28
     4aa:	83 50       	subi	r24, 0x03	; 3
     4ac:	85 3c       	cpi	r24, 0xC5	; 197
     4ae:	d0 f4       	brcc	.+52     	; 0x4e4 <__vector_88+0x74>
        return;
    }

    //Packet size looks good.  Arm DMA

    prepareDMAChannel(&DOWNSTREAM_DMA,DOWNSTREAM_USART_INBOUND_TRIGGER,&DOWNSTREAM_USART,inbound_downstream_data+1,0);
     4b0:	80 e2       	ldi	r24, 0x20	; 32
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	6b e6       	ldi	r22, 0x6B	; 107
     4b6:	40 ea       	ldi	r20, 0xA0	; 160
     4b8:	59 e0       	ldi	r21, 0x09	; 9
     4ba:	2f e0       	ldi	r18, 0x0F	; 15
     4bc:	30 e2       	ldi	r19, 0x20	; 32
     4be:	00 e0       	ldi	r16, 0x00	; 0
     4c0:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
    activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
     4c4:	8c 2f       	mov	r24, r28
     4c6:	90 e0       	ldi	r25, 0x00	; 0
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     4c8:	e0 e2       	ldi	r30, 0x20	; 32
     4ca:	f1 e0       	ldi	r31, 0x01	; 1
     4cc:	84 83       	std	Z+4, r24	; 0x04
     4ce:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     4d0:	84 e8       	ldi	r24, 0x84	; 132
     4d2:	80 93 20 01 	sts	0x0120, r24

    //Packet size looks good.  Arm DMA

    prepareDMAChannel(&DOWNSTREAM_DMA,DOWNSTREAM_USART_INBOUND_TRIGGER,&DOWNSTREAM_USART,inbound_downstream_data+1,0);
    activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
    inbound_downstream_data[0] = packetSize;
     4d6:	c0 93 0e 20 	sts	0x200E, r28

    //Disable all interrupts and let the DMA take command.
    DOWNSTREAM_USART.CTRLA = 0x00;
     4da:	e0 ea       	ldi	r30, 0xA0	; 160
     4dc:	f9 e0       	ldi	r31, 0x09	; 9
     4de:	13 82       	std	Z+3, r1	; 0x03

    downstreamBusy = 0;
     4e0:	10 92 05 20 	sts	0x2005, r1
    //activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
    //inbound_downstream_data[0] = packetSize;

    //Disable the RX interrupt for now and let the DMA take control.
    //DOWNSTREAM_USART.CTRLA &= ~USART_RXCINTLVL_OFF_gc;            //Clear the interrupt (assumes that OFF is zeroing it out)
}
     4e4:	ff 91       	pop	r31
     4e6:	ef 91       	pop	r30
     4e8:	cf 91       	pop	r28
     4ea:	bf 91       	pop	r27
     4ec:	af 91       	pop	r26
     4ee:	9f 91       	pop	r25
     4f0:	8f 91       	pop	r24
     4f2:	7f 91       	pop	r23
     4f4:	6f 91       	pop	r22
     4f6:	5f 91       	pop	r21
     4f8:	4f 91       	pop	r20
     4fa:	3f 91       	pop	r19
     4fc:	2f 91       	pop	r18
     4fe:	0f 91       	pop	r16
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	1f 90       	pop	r1
     508:	18 95       	reti

0000050a <__vector_14>:

#define DOWNSTREAM_TIMEOUT_MS 15

ISR(DAISY_TC_vect)
{
     50a:	1f 92       	push	r1
     50c:	0f 92       	push	r0
     50e:	0f b6       	in	r0, 0x3f	; 63
     510:	0f 92       	push	r0
     512:	11 24       	eor	r1, r1
     514:	8f 93       	push	r24
  notifyTC=1;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 02 20 	sts	0x2002, r24
}
     51c:	8f 91       	pop	r24
     51e:	0f 90       	pop	r0
     520:	0f be       	out	0x3f, r0	; 63
     522:	0f 90       	pop	r0
     524:	1f 90       	pop	r1
     526:	18 95       	reti

00000528 <handleTC>:

void handleTC(void)
{
     528:	0f 93       	push	r16
  if(notifyTC)
     52a:	80 91 02 20 	lds	r24, 0x2002
     52e:	88 23       	and	r24, r24
     530:	09 f4       	brne	.+2      	; 0x534 <handleTC+0xc>
     532:	52 c0       	rjmp	.+164    	; 0x5d8 <handleTC+0xb0>
    {
      notifyTC=0;
     534:	10 92 02 20 	sts	0x2002, r1

      //Check if the DMA is busy and waiting on incoming data
      if(UPSTREAM_CONFIG == OUTBOUND)
     538:	80 91 dc 20 	lds	r24, 0x20DC
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	19 f4       	brne	.+6      	; 0x546 <handleTC+0x1e>
	{
	  //No need to reset DMA
	  upstreamBusy = 0;
     540:	10 92 d7 20 	sts	0x20D7, r1
     544:	2f c0       	rjmp	.+94     	; 0x5a4 <handleTC+0x7c>
	}
      else
	{
	  if((UPSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm) || !(UPSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm))
     546:	80 91 11 01 	lds	r24, 0x0111
     54a:	87 fd       	sbrc	r24, 7
     54c:	04 c0       	rjmp	.+8      	; 0x556 <handleTC+0x2e>
     54e:	80 91 10 01 	lds	r24, 0x0110
     552:	87 fd       	sbrc	r24, 7
     554:	05 c0       	rjmp	.+10     	; 0x560 <handleTC+0x38>
	    {
	      upstreamBusy++;
     556:	80 91 d7 20 	lds	r24, 0x20D7
     55a:	8f 5f       	subi	r24, 0xFF	; 255
     55c:	80 93 d7 20 	sts	0x20D7, r24
	    }
	  
	  if(upstreamBusy > 2)
     560:	80 91 d7 20 	lds	r24, 0x20D7
     564:	83 30       	cpi	r24, 0x03	; 3
     566:	f0 f0       	brcs	.+60     	; 0x5a4 <handleTC+0x7c>
	    {
	      //Cancel and rearm the incoming DMA
	      UPSTREAM_DMA.CTRLA = 0x00;
     568:	e0 e0       	ldi	r30, 0x00	; 0
     56a:	f1 e0       	ldi	r31, 0x01	; 1
     56c:	10 8a       	std	Z+16, r1	; 0x10
	      //Wait for it to disable
	      while(UPSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     56e:	80 91 10 01 	lds	r24, 0x0110
     572:	87 fd       	sbrc	r24, 7
     574:	fc cf       	rjmp	.-8      	; 0x56e <handleTC+0x46>
	      
	      //Issue a reset
	      UPSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     576:	80 e4       	ldi	r24, 0x40	; 64
     578:	e0 e0       	ldi	r30, 0x00	; 0
     57a:	f1 e0       	ldi	r31, 0x01	; 1
     57c:	80 8b       	std	Z+16, r24	; 0x10
	      
	      //Re-arm
	      prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
     57e:	80 e1       	ldi	r24, 0x10	; 16
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	6b e8       	ldi	r22, 0x8B	; 139
     584:	40 ea       	ldi	r20, 0xA0	; 160
     586:	5a e0       	ldi	r21, 0x0A	; 10
     588:	25 ea       	ldi	r18, 0xA5	; 165
     58a:	31 e2       	ldi	r19, 0x21	; 33
     58c:	00 e0       	ldi	r16, 0x00	; 0
     58e:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     592:	87 e0       	ldi	r24, 0x07	; 7
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	e0 e1       	ldi	r30, 0x10	; 16
     598:	f1 e0       	ldi	r31, 0x01	; 1
     59a:	84 83       	std	Z+4, r24	; 0x04
     59c:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     59e:	84 e8       	ldi	r24, 0x84	; 132
     5a0:	80 93 10 01 	sts	0x0110, r24
	      prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
	      activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
	    }
	}
      //Check if downstream might be stalled
      if(DOWNSTREAM_CONFIG == OUTBOUND)
     5a4:	80 91 00 20 	lds	r24, 0x2000
     5a8:	81 30       	cpi	r24, 0x01	; 1
     5aa:	19 f4       	brne	.+6      	; 0x5b2 <handleTC+0x8a>
	{
	  //No need
	  downstreamBusy = 0;
     5ac:	10 92 05 20 	sts	0x2005, r1
     5b0:	13 c0       	rjmp	.+38     	; 0x5d8 <handleTC+0xb0>
	  //if((DOWNSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm) || (passthroughWaiting == 1))
	  //{
	  //    downstreamBusy++;
	  //}

	  if(downstreamBusy++ > (2 * DOWNSTREAM_TIMEOUT_MS))
     5b2:	80 91 05 20 	lds	r24, 0x2005
     5b6:	98 2f       	mov	r25, r24
     5b8:	9f 5f       	subi	r25, 0xFF	; 255
     5ba:	90 93 05 20 	sts	0x2005, r25
     5be:	8f 31       	cpi	r24, 0x1F	; 31
     5c0:	58 f0       	brcs	.+22     	; 0x5d8 <handleTC+0xb0>
	    {
	      
	      
	      //Notify the daisy chain task so that the upstream can potentially be fixed up.
	      notifyDaisy = 1;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 03 20 	sts	0x2003, r24
	      downstreamTimedout = 1;
     5c8:	80 93 04 20 	sts	0x2004, r24
	      downstreamBusy = 0;
     5cc:	10 92 05 20 	sts	0x2005, r1
	      passthroughWaiting = 0;
     5d0:	10 92 06 20 	sts	0x2006, r1
	      //downstreamXmitDone = 0;
	      downstreamSizeReceived = 0;
     5d4:	10 92 d6 20 	sts	0x20D6, r1
	    }
	}
    }
}
     5d8:	0f 91       	pop	r16
     5da:	08 95       	ret

000005dc <__vector_6>:
/************************************************************************
 * ISRs for the DMA engines.
 * Set flags for the Daisy Chain Task
 ************************************************************************/
ISR(UPSTREAM_USART_DMA_vect)
{
     5dc:	1f 92       	push	r1
     5de:	0f 92       	push	r0
     5e0:	0f b6       	in	r0, 0x3f	; 63
     5e2:	0f 92       	push	r0
     5e4:	11 24       	eor	r1, r1
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	ef 93       	push	r30
     5ec:	ff 93       	push	r31
    if(UPSTREAM_DMA.CTRLB & DMA_CH_ERRIF_bm)
     5ee:	80 91 11 01 	lds	r24, 0x0111
     5f2:	85 fd       	sbrc	r24, 5
     5f4:	15 c0       	rjmp	.+42     	; 0x620 <__vector_6+0x44>
        //UPSTREAM_DMA.CTRLB = UPSTREAM_DMA.CTRLB | DMA_CH_ERRIF_bm;
        //Cancel and rearm the incoming DMA
        return;
    }

    if(UPSTREAM_DMA.CTRLB & DMA_CH_TRNIF_bm)
     5f6:	80 91 11 01 	lds	r24, 0x0111
     5fa:	84 ff       	sbrs	r24, 4
     5fc:	11 c0       	rjmp	.+34     	; 0x620 <__vector_6+0x44>
    {
        //The transfer is complete and should be acked
        UPSTREAM_DMA.CTRLB = UPSTREAM_DMA.CTRLB | DMA_CH_TRNIF_bm;
     5fe:	80 91 11 01 	lds	r24, 0x0111
     602:	80 61       	ori	r24, 0x10	; 16
     604:	e0 e0       	ldi	r30, 0x00	; 0
     606:	f1 e0       	ldi	r31, 0x01	; 1
     608:	81 8b       	std	Z+17, r24	; 0x11
        upstreamBusy = 0;
     60a:	10 92 d7 20 	sts	0x20D7, r1
        notifyDaisy = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 03 20 	sts	0x2003, r24
        upstreamRxDone = 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	80 93 da 20 	sts	0x20DA, r24
     61c:	90 93 db 20 	sts	0x20DB, r25
    }
}
     620:	ff 91       	pop	r31
     622:	ef 91       	pop	r30
     624:	9f 91       	pop	r25
     626:	8f 91       	pop	r24
     628:	0f 90       	pop	r0
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	0f 90       	pop	r0
     62e:	1f 90       	pop	r1
     630:	18 95       	reti

00000632 <__vector_60>:

ISR(UPSTREAM_USART_TXDONE_vect)
{
     632:	1f 92       	push	r1
     634:	0f 92       	push	r0
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	0f 92       	push	r0
     63a:	11 24       	eor	r1, r1
     63c:	8f 93       	push	r24
     63e:	9f 93       	push	r25
     640:	ef 93       	push	r30
     642:	ff 93       	push	r31
    upstreamBusy = 0;
     644:	10 92 d7 20 	sts	0x20D7, r1
    notifyDaisy = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 03 20 	sts	0x2003, r24
    upstreamTxDone = 1;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	80 93 d8 20 	sts	0x20D8, r24
     656:	90 93 d9 20 	sts	0x20D9, r25
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc;
     65a:	e0 ea       	ldi	r30, 0xA0	; 160
     65c:	fa e0       	ldi	r31, 0x0A	; 10
     65e:	13 82       	std	Z+3, r1	; 0x03
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     660:	80 e4       	ldi	r24, 0x40	; 64
     662:	81 83       	std	Z+1, r24	; 0x01
}
     664:	ff 91       	pop	r31
     666:	ef 91       	pop	r30
     668:	9f 91       	pop	r25
     66a:	8f 91       	pop	r24
     66c:	0f 90       	pop	r0
     66e:	0f be       	out	0x3f, r0	; 63
     670:	0f 90       	pop	r0
     672:	1f 90       	pop	r1
     674:	18 95       	reti

00000676 <__vector_90>:


ISR(DOWNSTREAM_USART_TXDONE_vect)
{
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	8f 93       	push	r24
     682:	ef 93       	push	r30
     684:	ff 93       	push	r31
    //prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_INBOUND_TRIGGER, &DOWNSTREAM_USART, inbound_downstream_data,0);
    DOWNSTREAM_CONFIG = INBOUND;
     686:	10 92 00 20 	sts	0x2000, r1
    //Shut down the TXC interrupt
    //DOWNSTREAM_USART.CTRLA &= ~USART_TXCINTLVL_gm;
    DOWNSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
     68a:	80 e1       	ldi	r24, 0x10	; 16
     68c:	e0 ea       	ldi	r30, 0xA0	; 160
     68e:	f9 e0       	ldi	r31, 0x09	; 9
     690:	83 83       	std	Z+3, r24	; 0x03
    downstreamBusy = 0;
     692:	10 92 05 20 	sts	0x2005, r1
}
     696:	ff 91       	pop	r31
     698:	ef 91       	pop	r30
     69a:	8f 91       	pop	r24
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_7>:
 * When a OUTBOUND transfer finishes, enable the RX interrupt to capture the reply.
 * When an INBOUND transfer finishes, switch back to outbound mode and notify
 * userspace.
 ************************************************************************/
ISR(DOWNSTREAM_USART_DMA_vect)
{
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	8f 93       	push	r24
     6b2:	ef 93       	push	r30
     6b4:	ff 93       	push	r31
    if(DOWNSTREAM_DMA.CTRLB & DMA_CH_ERRIF_bm)
     6b6:	e0 e2       	ldi	r30, 0x20	; 32
     6b8:	f1 e0       	ldi	r31, 0x01	; 1
     6ba:	80 91 21 01 	lds	r24, 0x0121
     6be:	85 ff       	sbrs	r24, 5
     6c0:	05 c0       	rjmp	.+10     	; 0x6cc <__vector_7+0x26>
    {
        //Acknowledge the error
        //It may be from an aborted transfer, so just return.
        DOWNSTREAM_DMA.CTRLB = DOWNSTREAM_DMA.CTRLB | DMA_CH_ERRIF_bm;
     6c2:	80 91 21 01 	lds	r24, 0x0121
     6c6:	80 62       	ori	r24, 0x20	; 32
     6c8:	81 83       	std	Z+1, r24	; 0x01
        return;
     6ca:	10 c0       	rjmp	.+32     	; 0x6ec <__vector_7+0x46>
    }

    if(DOWNSTREAM_DMA.CTRLB & DMA_CH_TRNIF_bm)
     6cc:	80 91 21 01 	lds	r24, 0x0121
     6d0:	84 ff       	sbrs	r24, 4
     6d2:	0c c0       	rjmp	.+24     	; 0x6ec <__vector_7+0x46>
    {
        //The transfer is complete and should be acked
        DOWNSTREAM_DMA.CTRLB = DOWNSTREAM_DMA.CTRLB | DMA_CH_TRNIF_bm;
     6d4:	80 91 21 01 	lds	r24, 0x0121
     6d8:	80 61       	ori	r24, 0x10	; 16
     6da:	81 83       	std	Z+1, r24	; 0x01
        //
        //if(DOWNSTREAM_CONFIG == INBOUND)
        //{
            //Just finished receiving response into singleDownstreamBuffer.  Signal userspace
            //The number of bytes received is the size field plus 1 (to account for the size field itself)
            downstreamSizeReceived = inbound_downstream_data[0] + 1;
     6dc:	80 91 0e 20 	lds	r24, 0x200E
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	80 93 d6 20 	sts	0x20D6, r24
            notifyDaisy = 1;
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	80 93 03 20 	sts	0x2003, r24
                downstreamXmitDone = 1;
                break;
        }
        */
    }
}
     6ec:	ff 91       	pop	r31
     6ee:	ef 91       	pop	r30
     6f0:	8f 91       	pop	r24
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <computeChecksum>:
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     6fc:	fc 01       	movw	r30, r24
    for(int i=0;i<packetSize;i++)
     6fe:	20 e0       	ldi	r18, 0x00	; 0
     700:	30 e0       	ldi	r19, 0x00	; 0
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     702:	80 e0       	ldi	r24, 0x00	; 0
    for(int i=0;i<packetSize;i++)
     704:	04 c0       	rjmp	.+8      	; 0x70e <computeChecksum+0x12>
    {
        accumulator += packetBuffer[i];
     706:	91 91       	ld	r25, Z+
     708:	89 0f       	add	r24, r25
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
    for(int i=0;i<packetSize;i++)
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	26 17       	cp	r18, r22
     710:	37 07       	cpc	r19, r23
     712:	cc f3       	brlt	.-14     	; 0x706 <computeChecksum+0xa>
    {
        accumulator += packetBuffer[i];
    }

    return (0x00 - accumulator);
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	90 95       	com	r25
     718:	81 95       	neg	r24
     71a:	9f 4f       	sbci	r25, 0xFF	; 255
}
     71c:	08 95       	ret

0000071e <passthroughToUpstream>:
 *
 * Pass the data directly from the downstream INBOUND buffer to the
 * upstream OUTBOUND buffer.  Send a corrupt checksum error if necessary
 ************************************************************************/
static void passthroughToUpstream(void)
{
     71e:	0f 93       	push	r16
     720:	1f 93       	push	r17
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
    //It is assumed that the upstream DMA is able to accept additional data at this point
    //A data packet has arrived from downstream.  Validate it
    //The volatile keyword can be discarded because the DMA routines are inactive while this function executes
    if(computeChecksum((uint8_t *)inbound_downstream_data,downstreamSizeReceived) != 0x00)
     726:	60 91 d6 20 	lds	r22, 0x20D6
     72a:	ce e0       	ldi	r28, 0x0E	; 14
     72c:	d0 e2       	ldi	r29, 0x20	; 32
     72e:	ce 01       	movw	r24, r28
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	0e 94 7e 03 	call	0x6fc	; 0x6fc <computeChecksum>
     736:	00 97       	sbiw	r24, 0x00	; 0
     738:	b1 f1       	breq	.+108    	; 0x7a6 <passthroughToUpstream+0x88>
    {
      RxCheckSumErrCnt[1]++;
     73a:	80 91 b3 21 	lds	r24, 0x21B3
     73e:	90 91 b4 21 	lds	r25, 0x21B4
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	80 93 b3 21 	sts	0x21B3, r24
     748:	90 93 b4 21 	sts	0x21B4, r25
        //Invalid checksum
        outbound_upstream_data[0] = 3; //Packet size
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	80 93 dd 20 	sts	0x20DD, r24
        outbound_upstream_data[1] = inbound_upstream_data[1]; //Reflected command byte
     752:	80 91 a6 21 	lds	r24, 0x21A6
     756:	80 93 de 20 	sts	0x20DE, r24
        outbound_upstream_data[2] = CHECKSUM_ERROR; //Checksum error
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	80 93 df 20 	sts	0x20DF, r24
        outbound_upstream_data[3] = computeChecksum((uint8_t *)outbound_upstream_data,3); //checksum
     760:	8d ed       	ldi	r24, 0xDD	; 221
     762:	90 e2       	ldi	r25, 0x20	; 32
     764:	63 e0       	ldi	r22, 0x03	; 3
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	0e 94 7e 03 	call	0x6fc	; 0x6fc <computeChecksum>
     76c:	80 93 e0 20 	sts	0x20E0, r24
        //configureHalfDuplexLink(UPSTREAM,OUTBOUND);
        UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     770:	e0 ea       	ldi	r30, 0xA0	; 160
     772:	fa e0       	ldi	r31, 0x0A	; 10
     774:	13 82       	std	Z+3, r1	; 0x03
        UPSTREAM_USART.DATA = outbound_upstream_data[0];// push the first character out
     776:	80 91 dd 20 	lds	r24, 0x20DD
     77a:	80 93 a0 0a 	sts	0x0AA0, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     77e:	80 e4       	ldi	r24, 0x40	; 64
     780:	8a 95       	dec	r24
     782:	f1 f7       	brne	.-4      	; 0x780 <passthroughToUpstream+0x62>
        DELAY_ROUTINE();
        //while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
        UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     784:	80 e4       	ldi	r24, 0x40	; 64
     786:	81 83       	std	Z+1, r24	; 0x01
        UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     788:	84 e0       	ldi	r24, 0x04	; 4
     78a:	83 83       	std	Z+3, r24	; 0x03
        prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
     78c:	80 e1       	ldi	r24, 0x10	; 16
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	6c e8       	ldi	r22, 0x8C	; 140
     792:	40 ea       	ldi	r20, 0xA0	; 160
     794:	5a e0       	ldi	r21, 0x0A	; 10
     796:	2e ed       	ldi	r18, 0xDE	; 222
     798:	30 e2       	ldi	r19, 0x20	; 32
     79a:	01 e0       	ldi	r16, 0x01	; 1
     79c:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     7a0:	83 e0       	ldi	r24, 0x03	; 3
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	26 c0       	rjmp	.+76     	; 0x7f2 <passthroughToUpstream+0xd4>
        prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
        activateDMAChannel(&UPSTREAM_DMA,3);
        downstreamSizeReceived = 0;
        return;
    }
    memcpy((uint8_t *)outbound_upstream_data,(uint8_t *)inbound_downstream_data,downstreamSizeReceived);
     7a6:	40 91 d6 20 	lds	r20, 0x20D6
     7aa:	0d ed       	ldi	r16, 0xDD	; 221
     7ac:	10 e2       	ldi	r17, 0x20	; 32
     7ae:	c8 01       	movw	r24, r16
     7b0:	be 01       	movw	r22, r28
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <memcpy>
    //for(int i=0;i<inbound_downstream_data[0];i++)
    //{
    //    outbound_upstream_data[i] = inbound_downstream_data[i];
    //}
    //configureHalfDuplexLink(UPSTREAM,OUTBOUND);
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     7b8:	e0 ea       	ldi	r30, 0xA0	; 160
     7ba:	fa e0       	ldi	r31, 0x0A	; 10
     7bc:	13 82       	std	Z+3, r1	; 0x03
    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     7be:	80 91 dd 20 	lds	r24, 0x20DD
     7c2:	80 93 a0 0a 	sts	0x0AA0, r24
     7c6:	80 e4       	ldi	r24, 0x40	; 64
     7c8:	8a 95       	dec	r24
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <passthroughToUpstream+0xaa>
    DELAY_ROUTINE();
    //while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     7cc:	80 e4       	ldi	r24, 0x40	; 64
     7ce:	81 83       	std	Z+1, r24	; 0x01
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	83 83       	std	Z+3, r24	; 0x03
    prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
     7d4:	80 e1       	ldi	r24, 0x10	; 16
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	6c e8       	ldi	r22, 0x8C	; 140
     7da:	40 ea       	ldi	r20, 0xA0	; 160
     7dc:	5a e0       	ldi	r21, 0x0A	; 10
     7de:	98 01       	movw	r18, r16
     7e0:	2f 5f       	subi	r18, 0xFF	; 255
     7e2:	3f 4f       	sbci	r19, 0xFF	; 255
     7e4:	01 e0       	ldi	r16, 0x01	; 1
     7e6:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
    activateDMAChannel(&UPSTREAM_DMA,downstreamSizeReceived-1);
     7ea:	80 91 d6 20 	lds	r24, 0x20D6
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	01 97       	sbiw	r24, 0x01	; 1
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     7f2:	e0 e1       	ldi	r30, 0x10	; 16
     7f4:	f1 e0       	ldi	r31, 0x01	; 1
     7f6:	84 83       	std	Z+4, r24	; 0x04
     7f8:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     7fa:	84 e8       	ldi	r24, 0x84	; 132
     7fc:	80 93 10 01 	sts	0x0110, r24
    //while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
    prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
    activateDMAChannel(&UPSTREAM_DMA,downstreamSizeReceived-1);
    downstreamSizeReceived = 0;
     800:	10 92 d6 20 	sts	0x20D6, r1
    return;
}
     804:	df 91       	pop	r29
     806:	cf 91       	pop	r28
     808:	1f 91       	pop	r17
     80a:	0f 91       	pop	r16
     80c:	08 95       	ret

0000080e <configureDaisyUSART>:
        //COMMAND_USART.BAUDCTRLA = 34;                            //Configure for 57600 baud rate with normal baud rate generation
        //COMMAND_USART.BAUDCTRLB = 0;
        targetUSART->BAUDCTRLA = 33;                            //Configure for 115200 with fractional baud rate generation
        targetUSART->BAUDCTRLB = 0xF0;
    } else {
        targetUSART->BAUDCTRLA = 0;                                //Configure for 2 MBaud by setting baud rate to zero
     80e:	e0 ea       	ldi	r30, 0xA0	; 160
     810:	fa e0       	ldi	r31, 0x0A	; 10
     812:	16 82       	std	Z+6, r1	; 0x06
        targetUSART->BAUDCTRLB = 0x00;                            //and BSEL to zero
     814:	17 82       	std	Z+7, r1	; 0x07
    }
    targetUSART->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | \
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	95 83       	std	Z+5, r25	; 0x05
                         USART_PMODE_DISABLED_gc | \
                          USART_CHSIZE_8BIT_gc;                //Configure port settings for 8 bits of data, 1 stop bit.
    targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     81a:	84 81       	ldd	r24, Z+4	; 0x04
     81c:	88 61       	ori	r24, 0x18	; 24
     81e:	84 83       	std	Z+4, r24	; 0x04
************************************************************************/
static void configureUSARTHardware(USART_t *targetUSART, int isPC, int isDownstream)
{
    if(isDownstream)
    {
        targetUSART->CTRLA = USART_RXCINTLVL_LO_gc;            //Enable RX interrupt at LO priority
     820:	e0 ea       	ldi	r30, 0xA0	; 160
     822:	f9 e0       	ldi	r31, 0x09	; 9
     824:	80 e1       	ldi	r24, 0x10	; 16
     826:	83 83       	std	Z+3, r24	; 0x03
        //COMMAND_USART.BAUDCTRLA = 34;                            //Configure for 57600 baud rate with normal baud rate generation
        //COMMAND_USART.BAUDCTRLB = 0;
        targetUSART->BAUDCTRLA = 33;                            //Configure for 115200 with fractional baud rate generation
        targetUSART->BAUDCTRLB = 0xF0;
    } else {
        targetUSART->BAUDCTRLA = 0;                                //Configure for 2 MBaud by setting baud rate to zero
     828:	16 82       	std	Z+6, r1	; 0x06
        targetUSART->BAUDCTRLB = 0x00;                            //and BSEL to zero
     82a:	17 82       	std	Z+7, r1	; 0x07
    }
    targetUSART->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | \
     82c:	95 83       	std	Z+5, r25	; 0x05
                         USART_PMODE_DISABLED_gc | \
                          USART_CHSIZE_8BIT_gc;                //Configure port settings for 8 bits of data, 1 stop bit.
    targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     82e:	84 81       	ldd	r24, Z+4	; 0x04
     830:	88 61       	ori	r24, 0x18	; 24
     832:	84 83       	std	Z+4, r24	; 0x04
    configureUSARTHardware(&UPSTREAM_USART,0,0);
    //Now initialize the downstream
    configureUSARTHardware(&DOWNSTREAM_USART,0,1);

    //Prepare DMA transfers
    DMA.CTRL = DMA_ENABLE_bm;
     834:	80 e8       	ldi	r24, 0x80	; 128
     836:	80 93 00 01 	sts	0x0100, r24

    //Assume default configuration with downstream OUT and upstream IN
    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>
    configureHalfDuplexLink(UPSTREAM,INBOUND);
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>

    //Activate the heartbeat timer for resetting inbound DMA as necessary
    //Interrupt every half millisecond
    //At 32 MHz internal oscillator with 1024 prescaler,
    DAISY_TC.CTRLB = TC_WGMODE_NORMAL_gc;
     84a:	e0 e0       	ldi	r30, 0x00	; 0
     84c:	f8 e0       	ldi	r31, 0x08	; 8
     84e:	11 82       	std	Z+1, r1	; 0x01
    DAISY_TC.CTRLC = 0x00;
     850:	12 82       	std	Z+2, r1	; 0x02
    DAISY_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     852:	13 82       	std	Z+3, r1	; 0x03
    DAISY_TC.CTRLE = 0x00;
     854:	14 82       	std	Z+4, r1	; 0x04
    DAISY_TC.PERBUF = 16;
     856:	80 e1       	ldi	r24, 0x10	; 16
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	86 ab       	sts	0x56, r24
     85c:	97 ab       	sts	0x57, r25
    DAISY_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	86 83       	std	Z+6, r24	; 0x06
    DAISY_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
     862:	87 e0       	ldi	r24, 0x07	; 7
     864:	80 83       	st	Z, r24

    //Activate the Upstream DMA for a command packet of data
    //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
}
     866:	08 95       	ret

00000868 <doDaisyTask>:
 * Maintains system state and manages the transmission/reception of chained data
 * Should be called whenever notifyDaisy is set to 1.
 ************************************************************************/

void doDaisyTask(void)
{
     868:	0f 93       	push	r16
     86a:	cf 93       	push	r28
    //This is set to IDLE when the upstream port is idle and TRANSMITTING when it is in use
    static DAISY_STATE_t daisyState = DAISY_IDLE;
    uint8_t packetSize;

    //First clear the daisy notification flag
    cli();
     86c:	f8 94       	cli
    notifyDaisy = 0;
     86e:	10 92 03 20 	sts	0x2003, r1
    sei();
     872:	78 94       	sei

    switch(daisyState)
     874:	80 91 ac 21 	lds	r24, 0x21AC
     878:	88 23       	and	r24, r24
     87a:	21 f0       	breq	.+8      	; 0x884 <doDaisyTask+0x1c>
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	09 f0       	breq	.+2      	; 0x882 <doDaisyTask+0x1a>
     880:	48 c1       	rjmp	.+656    	; 0xb12 <doDaisyTask+0x2aa>
     882:	ff c0       	rjmp	.+510    	; 0xa82 <doDaisyTask+0x21a>
    {
        case DAISY_IDLE:
            //The daisy chain module is not transmitting, though a passthrough may be waiting

            if(downstreamSizeReceived && passthroughWaiting)
     884:	80 91 d6 20 	lds	r24, 0x20D6
     888:	88 23       	and	r24, r24
     88a:	a1 f0       	breq	.+40     	; 0x8b4 <doDaisyTask+0x4c>
     88c:	80 91 06 20 	lds	r24, 0x2006
     890:	88 23       	and	r24, r24
     892:	81 f0       	breq	.+32     	; 0x8b4 <doDaisyTask+0x4c>
            {
                //Since a downstream reply was heard, pass it through to upstream
                passthroughWaiting = 0;
     894:	10 92 06 20 	sts	0x2006, r1
                daisyState = DAISY_TRANSMITTING;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	80 93 ac 21 	sts	0x21AC, r24
                if(UPSTREAM_CONFIG == INBOUND)
     89e:	80 91 dc 20 	lds	r24, 0x20DC
     8a2:	88 23       	and	r24, r24
     8a4:	21 f4       	brne	.+8      	; 0x8ae <doDaisyTask+0x46>
                {
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	61 e0       	ldi	r22, 0x01	; 1
     8aa:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>
                }
                passthroughToUpstream();
     8ae:	0e 94 8f 03 	call	0x71e	; 0x71e <passthroughToUpstream>
     8b2:	0c c0       	rjmp	.+24     	; 0x8cc <doDaisyTask+0x64>

                cli();
                downstreamTimedout = 0;
                sei();

            } else if(downstreamSizeReceived)
     8b4:	80 91 d6 20 	lds	r24, 0x20D6
     8b8:	88 23       	and	r24, r24
     8ba:	61 f0       	breq	.+24     	; 0x8d4 <doDaisyTask+0x6c>
            {
                //Error condition.  Just clear it out and restart
                configureHalfDuplexLink(UPSTREAM,INBOUND);
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>
                //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);

                configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	61 e0       	ldi	r22, 0x01	; 1
     8c8:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>

                cli();
     8cc:	f8 94       	cli
                downstreamTimedout = 0;
     8ce:	10 92 04 20 	sts	0x2004, r1
                sei();
     8d2:	78 94       	sei

            }

            if(downstreamTimedout)
     8d4:	80 91 04 20 	lds	r24, 0x2004
     8d8:	88 23       	and	r24, r24
     8da:	29 f1       	breq	.+74     	; 0x926 <doDaisyTask+0xbe>
            {
                cli();
     8dc:	f8 94       	cli
                downstreamTimedout = 0;
     8de:	10 92 04 20 	sts	0x2004, r1
                sei();
     8e2:	78 94       	sei

                //Cancel waiting for a downstream
                DOWNSTREAM_DMA.CTRLA = 0x00;
     8e4:	10 92 20 01 	sts	0x0120, r1
                //Wait for it to disable
                while(DOWNSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     8e8:	80 91 20 01 	lds	r24, 0x0120
     8ec:	87 fd       	sbrc	r24, 7
     8ee:	fc cf       	rjmp	.-8      	; 0x8e8 <doDaisyTask+0x80>

                //Issue a reset
                DOWNSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     8f0:	c0 e4       	ldi	r28, 0x40	; 64
     8f2:	c0 93 20 01 	sts	0x0120, r28

                //Now set back to outbound and wait
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     8f6:	80 e2       	ldi	r24, 0x20	; 32
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	6c e6       	ldi	r22, 0x6C	; 108
     8fc:	40 ea       	ldi	r20, 0xA0	; 160
     8fe:	59 e0       	ldi	r21, 0x09	; 9
     900:	27 e0       	ldi	r18, 0x07	; 7
     902:	30 e2       	ldi	r19, 0x20	; 32
     904:	01 e0       	ldi	r16, 0x01	; 1
     906:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     90a:	e0 ea       	ldi	r30, 0xA0	; 160
     90c:	f9 e0       	ldi	r31, 0x09	; 9
     90e:	c1 83       	std	Z+1, r28	; 0x01
                DOWNSTREAM_CONFIG = OUTBOUND;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	80 93 00 20 	sts	0x2000, r24
                DOWNSTREAM_USART.CTRLA = 0x00;
     916:	13 82       	std	Z+3, r1	; 0x03

                //Make sure Upstream is facing the proper direction
                if(UPSTREAM_CONFIG == OUTBOUND)
     918:	80 91 dc 20 	lds	r24, 0x20DC
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	19 f4       	brne	.+6      	; 0x926 <doDaisyTask+0xbe>
                {
                    //while(!(UPSTREAM_USART.STATUS & USART_TXCIF_bm));
                    configureHalfDuplexLink(UPSTREAM,INBOUND);
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>
                    //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
                }
            }

            if(upstreamRxDone)
     926:	80 91 da 20 	lds	r24, 0x20DA
     92a:	90 91 db 20 	lds	r25, 0x20DB
     92e:	00 97       	sbiw	r24, 0x00	; 0
     930:	09 f4       	brne	.+2      	; 0x934 <doDaisyTask+0xcc>
     932:	ef c0       	rjmp	.+478    	; 0xb12 <doDaisyTask+0x2aa>
            {
                //A packet arrived from upstream.  Parse it and compute some sort of reply.
                cli();
     934:	f8 94       	cli
                upstreamRxDone = 0;
     936:	10 92 da 20 	sts	0x20DA, r1
     93a:	10 92 db 20 	sts	0x20DB, r1
                sei();
     93e:	78 94       	sei

                //A data packet has arrived from upstream.  Validate it
                if(computeChecksum((uint8_t *)inbound_upstream_data,COMMAND_PACKET_SIZE) != 0x00)
     940:	85 ea       	ldi	r24, 0xA5	; 165
     942:	91 e2       	ldi	r25, 0x21	; 33
     944:	67 e0       	ldi	r22, 0x07	; 7
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 7e 03 	call	0x6fc	; 0x6fc <computeChecksum>
     94c:	00 97       	sbiw	r24, 0x00	; 0
     94e:	d9 f1       	breq	.+118    	; 0x9c6 <doDaisyTask+0x15e>
                {
                  RxCheckSumErrCnt[0]++;
     950:	80 91 b1 21 	lds	r24, 0x21B1
     954:	90 91 b2 21 	lds	r25, 0x21B2
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	80 93 b1 21 	sts	0x21B1, r24
     95e:	90 93 b2 21 	sts	0x21B2, r25
                    //Invalid checksum
                    outbound_upstream_data[0] = 3; //Packet size
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	80 93 dd 20 	sts	0x20DD, r24
                    outbound_upstream_data[1] = inbound_upstream_data[1]; //Reflected command byte
     968:	80 91 a6 21 	lds	r24, 0x21A6
     96c:	80 93 de 20 	sts	0x20DE, r24
                    outbound_upstream_data[2] = CHECKSUM_ERROR; //Checksum error
     970:	c1 e0       	ldi	r28, 0x01	; 1
     972:	c0 93 df 20 	sts	0x20DF, r28
                    outbound_upstream_data[3] = computeChecksum((uint8_t *)outbound_upstream_data,3); //checksum
     976:	8d ed       	ldi	r24, 0xDD	; 221
     978:	90 e2       	ldi	r25, 0x20	; 32
     97a:	63 e0       	ldi	r22, 0x03	; 3
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	0e 94 7e 03 	call	0x6fc	; 0x6fc <computeChecksum>
     982:	80 93 e0 20 	sts	0x20E0, r24
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     98e:	e0 ea       	ldi	r30, 0xA0	; 160
     990:	fa e0       	ldi	r31, 0x0A	; 10
     992:	13 82       	std	Z+3, r1	; 0x03
                    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     994:	80 91 dd 20 	lds	r24, 0x20DD
     998:	80 93 a0 0a 	sts	0x0AA0, r24
     99c:	80 e4       	ldi	r24, 0x40	; 64
     99e:	8a 95       	dec	r24
     9a0:	f1 f7       	brne	.-4      	; 0x99e <doDaisyTask+0x136>
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     9a2:	80 e4       	ldi	r24, 0x40	; 64
     9a4:	81 83       	std	Z+1, r24	; 0x01
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     9a6:	84 e0       	ldi	r24, 0x04	; 4
     9a8:	83 83       	std	Z+3, r24	; 0x03
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     9aa:	83 e0       	ldi	r24, 0x03	; 3
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	e0 e1       	ldi	r30, 0x10	; 16
     9b0:	f1 e0       	ldi	r31, 0x01	; 1
     9b2:	84 83       	std	Z+4, r24	; 0x04
     9b4:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     9b6:	84 e8       	ldi	r24, 0x84	; 132
     9b8:	80 93 10 01 	sts	0x0110, r24
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
                    activateDMAChannel(&UPSTREAM_DMA,3);
                    daisyState = DAISY_TRANSMITTING;
     9bc:	c0 93 ac 21 	sts	0x21AC, r28
                    //No passthrough occurred, so do not wait on a downstream reply.
                    passthroughWaiting = 0;
     9c0:	10 92 06 20 	sts	0x2006, r1
                    break;
     9c4:	a6 c0       	rjmp	.+332    	; 0xb12 <doDaisyTask+0x2aa>
                }
                if((inbound_upstream_data[0] & 0x0F) != 0)
     9c6:	80 91 a5 21 	lds	r24, 0x21A5
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	8f 70       	andi	r24, 0x0F	; 15
     9ce:	90 70       	andi	r25, 0x00	; 0
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	19 f1       	breq	.+70     	; 0xa1a <doDaisyTask+0x1b2>
                {
                    //This packet is going downstream

                    memcpy((uint8_t *)outbound_downstream_data,(uint8_t *)inbound_upstream_data,COMMAND_PACKET_SIZE);
     9d4:	a7 e0       	ldi	r26, 0x07	; 7
     9d6:	b0 e2       	ldi	r27, 0x20	; 32
     9d8:	e5 ea       	ldi	r30, 0xA5	; 165
     9da:	f1 e2       	ldi	r31, 0x21	; 33
     9dc:	87 e0       	ldi	r24, 0x07	; 7
     9de:	01 90       	ld	r0, Z+
     9e0:	0d 92       	st	X+, r0
     9e2:	81 50       	subi	r24, 0x01	; 1
     9e4:	e1 f7       	brne	.-8      	; 0x9de <doDaisyTask+0x176>

                    //Adjust the Destination Header and the checksum for the new destination
                    outbound_downstream_data[0]--;
     9e6:	80 91 07 20 	lds	r24, 0x2007
     9ea:	81 50       	subi	r24, 0x01	; 1
     9ec:	80 93 07 20 	sts	0x2007, r24
                    outbound_downstream_data[CHECKSUM_OFFSET]++;
     9f0:	80 91 0d 20 	lds	r24, 0x200D
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	80 93 0d 20 	sts	0x200D, r24
                    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	61 e0       	ldi	r22, 0x01	; 1
     9fe:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     a02:	87 e0       	ldi	r24, 0x07	; 7
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	e0 e2       	ldi	r30, 0x20	; 32
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	84 83       	std	Z+4, r24	; 0x04
     a0c:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     a0e:	84 e8       	ldi	r24, 0x84	; 132
     a10:	80 93 20 01 	sts	0x0120, r24
                    outbound_downstream_data[CHECKSUM_OFFSET]++;
                    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
                    activateDMAChannel(&DOWNSTREAM_DMA,COMMAND_PACKET_SIZE);

                    //A downstream reply will be expected
                    passthroughWaiting = 1;
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	80 93 06 20 	sts	0x2006, r24
                }

                if(((inbound_upstream_data[0] & 0xF0) == 0xF0) || ((inbound_upstream_data[0] & 0x0F) == 0x00))
     a1a:	80 91 a5 21 	lds	r24, 0x21A5
     a1e:	80 7f       	andi	r24, 0xF0	; 240
     a20:	80 3f       	cpi	r24, 0xF0	; 240
     a22:	41 f0       	breq	.+16     	; 0xa34 <doDaisyTask+0x1cc>
     a24:	80 91 a5 21 	lds	r24, 0x21A5
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	8f 70       	andi	r24, 0x0F	; 15
     a2c:	90 70       	andi	r25, 0x00	; 0
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	09 f0       	breq	.+2      	; 0xa34 <doDaisyTask+0x1cc>
     a32:	6f c0       	rjmp	.+222    	; 0xb12 <doDaisyTask+0x2aa>
                {
                    //This packet should be responded to
                    packetSize = processCommand((uint8_t *)inbound_upstream_data,(uint8_t *)outbound_upstream_data);
     a34:	85 ea       	ldi	r24, 0xA5	; 165
     a36:	91 e2       	ldi	r25, 0x21	; 33
     a38:	6d ed       	ldi	r22, 0xDD	; 221
     a3a:	70 e2       	ldi	r23, 0x20	; 32
     a3c:	0e 94 31 09 	call	0x1262	; 0x1262 <processCommand>
     a40:	c8 2f       	mov	r28, r24

                    //Assume the command processor handled the packetization
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     a4a:	e0 ea       	ldi	r30, 0xA0	; 160
     a4c:	fa e0       	ldi	r31, 0x0A	; 10
     a4e:	13 82       	std	Z+3, r1	; 0x03
                    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     a50:	80 91 dd 20 	lds	r24, 0x20DD
     a54:	80 93 a0 0a 	sts	0x0AA0, r24
     a58:	80 e4       	ldi	r24, 0x40	; 64
     a5a:	8a 95       	dec	r24
     a5c:	f1 f7       	brne	.-4      	; 0xa5a <doDaisyTask+0x1f2>
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     a5e:	80 e4       	ldi	r24, 0x40	; 64
     a60:	81 83       	std	Z+1, r24	; 0x01
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     a62:	84 e0       	ldi	r24, 0x04	; 4
     a64:	83 83       	std	Z+3, r24	; 0x03
                    activateDMAChannel(&UPSTREAM_DMA,packetSize-1);
     a66:	8c 2f       	mov	r24, r28
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	01 97       	sbiw	r24, 0x01	; 1
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     a6c:	e0 e1       	ldi	r30, 0x10	; 16
     a6e:	f1 e0       	ldi	r31, 0x01	; 1
     a70:	84 83       	std	Z+4, r24	; 0x04
     a72:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     a74:	84 e8       	ldi	r24, 0x84	; 132
     a76:	80 93 10 01 	sts	0x0110, r24
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
                    activateDMAChannel(&UPSTREAM_DMA,packetSize-1);
                    daisyState = DAISY_TRANSMITTING;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 93 ac 21 	sts	0x21AC, r24
     a80:	48 c0       	rjmp	.+144    	; 0xb12 <doDaisyTask+0x2aa>
                }
            }
            break;

        case DAISY_TRANSMITTING:
            if(downstreamTimedout)
     a82:	80 91 04 20 	lds	r24, 0x2004
     a86:	88 23       	and	r24, r24
     a88:	f1 f0       	breq	.+60     	; 0xac6 <doDaisyTask+0x25e>
            {
                cli();
     a8a:	f8 94       	cli
                downstreamTimedout = 0;
     a8c:	10 92 04 20 	sts	0x2004, r1
                sei();
     a90:	78 94       	sei
                //Downstream timed out, so just finish transmitting upstream and take no further action
                //Cancel waiting for a downstream
                DOWNSTREAM_DMA.CTRLA = 0x00;
     a92:	10 92 20 01 	sts	0x0120, r1
                //Wait for it to disable
                while(DOWNSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     a96:	80 91 20 01 	lds	r24, 0x0120
     a9a:	87 fd       	sbrc	r24, 7
     a9c:	fc cf       	rjmp	.-8      	; 0xa96 <doDaisyTask+0x22e>

                //Issue a reset
                DOWNSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     a9e:	c0 e4       	ldi	r28, 0x40	; 64
     aa0:	c0 93 20 01 	sts	0x0120, r28

                //Now set back to outbound and wait
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     aa4:	80 e2       	ldi	r24, 0x20	; 32
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	6c e6       	ldi	r22, 0x6C	; 108
     aaa:	40 ea       	ldi	r20, 0xA0	; 160
     aac:	59 e0       	ldi	r21, 0x09	; 9
     aae:	27 e0       	ldi	r18, 0x07	; 7
     ab0:	30 e2       	ldi	r19, 0x20	; 32
     ab2:	01 e0       	ldi	r16, 0x01	; 1
     ab4:	0e 94 93 01 	call	0x326	; 0x326 <prepareDMAChannel>
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     ab8:	e0 ea       	ldi	r30, 0xA0	; 160
     aba:	f9 e0       	ldi	r31, 0x09	; 9
     abc:	c1 83       	std	Z+1, r28	; 0x01
                DOWNSTREAM_CONFIG = OUTBOUND;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	80 93 00 20 	sts	0x2000, r24
                DOWNSTREAM_USART.CTRLA = 0x00;
     ac4:	13 82       	std	Z+3, r1	; 0x03
            }
            //System is pushing data upstream, but it might be done
            if(upstreamTxDone)
     ac6:	80 91 d8 20 	lds	r24, 0x20D8
     aca:	90 91 d9 20 	lds	r25, 0x20D9
     ace:	00 97       	sbiw	r24, 0x00	; 0
     ad0:	01 f1       	breq	.+64     	; 0xb12 <doDaisyTask+0x2aa>
            {
                //The upstream transmitter is loaded with data (but possibly not done)

                cli();
     ad2:	f8 94       	cli
                upstreamTxDone = 0;
     ad4:	10 92 d8 20 	sts	0x20D8, r1
     ad8:	10 92 d9 20 	sts	0x20D9, r1
                sei();
     adc:	78 94       	sei

                if(downstreamSizeReceived && passthroughWaiting)
     ade:	80 91 d6 20 	lds	r24, 0x20D6
     ae2:	88 23       	and	r24, r24
     ae4:	61 f0       	breq	.+24     	; 0xafe <doDaisyTask+0x296>
     ae6:	80 91 06 20 	lds	r24, 0x2006
     aea:	88 23       	and	r24, r24
     aec:	41 f0       	breq	.+16     	; 0xafe <doDaisyTask+0x296>
                {
                    //The passthrough packet has already arrived.  Just send it upstream
                    passthroughWaiting = 0;
     aee:	10 92 06 20 	sts	0x2006, r1
                    daisyState = DAISY_TRANSMITTING;
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	80 93 ac 21 	sts	0x21AC, r24
                    passthroughToUpstream();
     af8:	0e 94 8f 03 	call	0x71e	; 0x71e <passthroughToUpstream>
     afc:	0a c0       	rjmp	.+20     	; 0xb12 <doDaisyTask+0x2aa>
                }
                else if(passthroughWaiting)
     afe:	80 91 06 20 	lds	r24, 0x2006
                {
                    //Just go back to idle.  Another notification will arrive to wake up when the downstream reply is delivered
                    daisyState = DAISY_IDLE;
     b02:	10 92 ac 21 	sts	0x21AC, r1
                    //The passthrough packet has already arrived.  Just send it upstream
                    passthroughWaiting = 0;
                    daisyState = DAISY_TRANSMITTING;
                    passthroughToUpstream();
                }
                else if(passthroughWaiting)
     b06:	88 23       	and	r24, r24
     b08:	21 f4       	brne	.+8      	; 0xb12 <doDaisyTask+0x2aa>
                } else {
                    //Nothing else is coming  Reset to idle after full transmission complete
                    daisyState = DAISY_IDLE;
                    //Now wait for the transmission to complete entirely
                    //while(!(UPSTREAM_USART.STATUS & USART_TXCIF_bm));
                    configureHalfDuplexLink(UPSTREAM,INBOUND);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	0e 94 be 01 	call	0x37c	; 0x37c <configureHalfDuplexLink>

        default:
            break;
    }

}
     b12:	cf 91       	pop	r28
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <configureSPIModulesEncoder>:

void configureSPIModulesEncoder(void)
{
    //This part expects an idling high SCLK, and it wants to setup data on the RISING clock edge and sample on the FALLING.  This is Mode 2

    ENCODERSPI.INTCTRL = SPI_INTLVL_OFF_gc;
     b18:	e0 ec       	ldi	r30, 0xC0	; 192
     b1a:	f8 e0       	ldi	r31, 0x08	; 8
     b1c:	11 82       	std	Z+1, r1	; 0x01
    ENCODERSPI.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_2_gc | SPI_PRESCALER_DIV64_gc | SPI_CLK2X_bm;
     b1e:	8a ed       	ldi	r24, 0xDA	; 218
     b20:	80 83       	st	Z, r24
}
     b22:	08 95       	ret

00000b24 <readRawEncoder>:
int16_t readRawEncoder(void)
{
    uint8_t temp;
    uint8_t temp2;

    configureSPIModulesEncoder();
     b24:	0e 94 8c 05 	call	0xb18	; 0xb18 <configureSPIModulesEncoder>
     b28:	8a e0       	ldi	r24, 0x0A	; 10
     b2a:	8a 95       	dec	r24
     b2c:	f1 f7       	brne	.-4      	; 0xb2a <readRawEncoder+0x6>
     b2e:	00 c0       	rjmp	.+0      	; 0xb30 <readRawEncoder+0xc>
    _delay_us(1);
    //ENCODER_CS13_PORT.OUTCLR = ENCODER_CS13_PIN; //Chip select
    PORTC.OUTSET = ENC_PORTC_MUX_ADDR << PORTC_MUX_SHIFT;
     b30:	8c e1       	ldi	r24, 0x1C	; 28
     b32:	e0 e4       	ldi	r30, 0x40	; 64
     b34:	f6 e0       	ldi	r31, 0x06	; 6
     b36:	85 83       	std	Z+5, r24	; 0x05
    PORTA.OUTCLR = PORTA_MUX_EN;
     b38:	80 e4       	ldi	r24, 0x40	; 64
     b3a:	e0 e0       	ldi	r30, 0x00	; 0
     b3c:	f6 e0       	ldi	r31, 0x06	; 6
     b3e:	86 83       	std	Z+6, r24	; 0x06
    //_delay_us(5);

    ENCODERSPI.DATA = 0x00;
     b40:	e0 ec       	ldi	r30, 0xC0	; 192
     b42:	f8 e0       	ldi	r31, 0x08	; 8
     b44:	13 82       	std	Z+3, r1	; 0x03
    while(!(ENCODERSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     b46:	80 91 c2 08 	lds	r24, 0x08C2
     b4a:	87 ff       	sbrs	r24, 7
     b4c:	fc cf       	rjmp	.-8      	; 0xb46 <readRawEncoder+0x22>
    temp = ENCODERSPI.DATA;
     b4e:	20 91 c3 08 	lds	r18, 0x08C3

    ENCODERSPI.DATA = 0x00;
     b52:	e0 ec       	ldi	r30, 0xC0	; 192
     b54:	f8 e0       	ldi	r31, 0x08	; 8
     b56:	13 82       	std	Z+3, r1	; 0x03
    while(!(ENCODERSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     b58:	80 91 c2 08 	lds	r24, 0x08C2
     b5c:	87 ff       	sbrs	r24, 7
     b5e:	fc cf       	rjmp	.-8      	; 0xb58 <readRawEncoder+0x34>
    temp2 = ENCODERSPI.DATA;
     b60:	80 91 c3 08 	lds	r24, 0x08C3

    //ENCODER_CS13_PORT.OUTSET = ENCODER_CS13_PIN; //Chip select
    PORTA.OUTSET = PORTA_MUX_EN;
     b64:	90 e4       	ldi	r25, 0x40	; 64
     b66:	e0 e0       	ldi	r30, 0x00	; 0
     b68:	f6 e0       	ldi	r31, 0x06	; 6
     b6a:	95 83       	std	Z+5, r25	; 0x05
    PORTC.OUTCLR = PORTC_MUX_MASK;
     b6c:	9c e1       	ldi	r25, 0x1C	; 28
     b6e:	e0 e4       	ldi	r30, 0x40	; 64
     b70:	f6 e0       	ldi	r31, 0x06	; 6
     b72:	96 83       	std	Z+6, r25	; 0x06
    
    //The serial port is likely strange because the encoder will likely have a dummy bit at the front.
    return ((temp << 3) & 0x3F8) | ((temp2 >> 5) & 0x007);
     b74:	82 95       	swap	r24
     b76:	86 95       	lsr	r24
     b78:	87 70       	andi	r24, 0x07	; 7
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	43 e0       	ldi	r20, 0x03	; 3
     b80:	22 0f       	add	r18, r18
     b82:	33 1f       	adc	r19, r19
     b84:	4a 95       	dec	r20
     b86:	e1 f7       	brne	.-8      	; 0xb80 <readRawEncoder+0x5c>
     b88:	28 7f       	andi	r18, 0xF8	; 248
     b8a:	33 70       	andi	r19, 0x03	; 3
     b8c:	82 2b       	or	r24, r18
     b8e:	93 2b       	or	r25, r19
}
     b90:	08 95       	ret

00000b92 <readEncoder>:

int16_t readEncoder(void)
{
    int16_t rawEncoder = readRawEncoder();
     b92:	0e 94 92 05 	call	0xb24	; 0xb24 <readRawEncoder>
     b96:	9c 01       	movw	r18, r24
    
    int16_t top = (1023 + encoderOffset) - rawEncoder;
     b98:	80 91 ad 21 	lds	r24, 0x21AD
     b9c:	90 91 ae 21 	lds	r25, 0x21AE
     ba0:	ac 01       	movw	r20, r24
     ba2:	41 50       	subi	r20, 0x01	; 1
     ba4:	5c 4f       	sbci	r21, 0xFC	; 252
     ba6:	42 1b       	sub	r20, r18
     ba8:	53 0b       	sbc	r21, r19
    int16_t middle = encoderOffset - rawEncoder;
     baa:	dc 01       	movw	r26, r24
     bac:	a2 1b       	sub	r26, r18
     bae:	b3 0b       	sbc	r27, r19
    int16_t bottom = (encoderOffset - 1023) - rawEncoder;
     bb0:	8f 5f       	subi	r24, 0xFF	; 255
     bb2:	93 40       	sbci	r25, 0x03	; 3
     bb4:	82 1b       	sub	r24, r18
     bb6:	93 0b       	sbc	r25, r19
    
    // find the minimum of the 3 absolute values, then return that value as non-absolute.
    // this only works because the valid range for the sensor is less than 512.
    // this should let you calibrate the joint in any angle and still get valid readings, even negative values.
    if (abs(top) < abs(middle))
     bb8:	ba 01       	movw	r22, r20
     bba:	57 ff       	sbrs	r21, 7
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <readEncoder+0x34>
     bbe:	66 27       	eor	r22, r22
     bc0:	77 27       	eor	r23, r23
     bc2:	64 1b       	sub	r22, r20
     bc4:	75 0b       	sbc	r23, r21
     bc6:	fd 01       	movw	r30, r26
     bc8:	b7 ff       	sbrs	r27, 7
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <readEncoder+0x42>
     bcc:	ee 27       	eor	r30, r30
     bce:	ff 27       	eor	r31, r31
     bd0:	ea 1b       	sub	r30, r26
     bd2:	fb 0b       	sbc	r31, r27
    {
        if (abs(top) < abs(bottom)) 
     bd4:	9c 01       	movw	r18, r24
    int16_t bottom = (encoderOffset - 1023) - rawEncoder;
    
    // find the minimum of the 3 absolute values, then return that value as non-absolute.
    // this only works because the valid range for the sensor is less than 512.
    // this should let you calibrate the joint in any angle and still get valid readings, even negative values.
    if (abs(top) < abs(middle))
     bd6:	6e 17       	cp	r22, r30
     bd8:	7f 07       	cpc	r23, r31
     bda:	54 f4       	brge	.+20     	; 0xbf0 <readEncoder+0x5e>
    {
        if (abs(top) < abs(bottom)) 
     bdc:	97 ff       	sbrs	r25, 7
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <readEncoder+0x56>
     be0:	22 27       	eor	r18, r18
     be2:	33 27       	eor	r19, r19
     be4:	28 1b       	sub	r18, r24
     be6:	39 0b       	sbc	r19, r25
     be8:	62 17       	cp	r22, r18
     bea:	73 07       	cpc	r23, r19
     bec:	64 f4       	brge	.+24     	; 0xc06 <readEncoder+0x74>
     bee:	0c c0       	rjmp	.+24     	; 0xc08 <readEncoder+0x76>
             return top; 
        else 
             return bottom;
    }
    else if (abs(middle) < abs(bottom))
     bf0:	97 ff       	sbrs	r25, 7
     bf2:	04 c0       	rjmp	.+8      	; 0xbfc <readEncoder+0x6a>
     bf4:	22 27       	eor	r18, r18
     bf6:	33 27       	eor	r19, r19
     bf8:	28 1b       	sub	r18, r24
     bfa:	39 0b       	sbc	r19, r25
     bfc:	e2 17       	cp	r30, r18
     bfe:	f3 07       	cpc	r31, r19
     c00:	14 f4       	brge	.+4      	; 0xc06 <readEncoder+0x74>
        return middle;
     c02:	ad 01       	movw	r20, r26
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <readEncoder+0x76>
    else 
        return bottom;
     c06:	ac 01       	movw	r20, r24
}
     c08:	ca 01       	movw	r24, r20
     c0a:	08 95       	ret

00000c0c <configurePortIOProximal>:
    //PA3 - PROXIMAL3
    //PA4 - PROXIMAL4
    //PA5 - nCS6                 nCS12
    //PA6 - MUX nE1              nCS13
    //PA7 - ACC nCS
    PORTA.OUT = 0xE0; //E0
     c0c:	e0 e0       	ldi	r30, 0x00	; 0
     c0e:	f6 e0       	ldi	r31, 0x06	; 6
     c10:	80 ee       	ldi	r24, 0xE0	; 224
     c12:	84 83       	std	Z+4, r24	; 0x04
    PORTA.DIR = 0xE0; //E0
     c14:	80 83       	st	Z, r24

    //PB0 - nCS1
    //PB1 - nCS2
    //PB2 - nCS3
    //PB3 - nCS4
    PORTB.OUT = 0x0F;
     c16:	e0 e2       	ldi	r30, 0x20	; 32
     c18:	f6 e0       	ldi	r31, 0x06	; 6
     c1a:	8f e0       	ldi	r24, 0x0F	; 15
     c1c:	84 83       	std	Z+4, r24	; 0x04
    PORTB.DIR = 0x0F;
     c1e:	80 83       	st	Z, r24
    //PC3 - MUX A1              nCS7
    //PC4 - MUX A2              nCS8
    //PC5 - MOSI
    //PC6 - MISO
    //PC7 - SCK
    PORTC.OUT = 0x1D; //01
     c20:	e0 e4       	ldi	r30, 0x40	; 64
     c22:	f6 e0       	ldi	r31, 0x06	; 6
     c24:	8d e1       	ldi	r24, 0x1D	; 29
     c26:	84 83       	std	Z+4, r24	; 0x04
    PORTC.DIR = 0xBF; //BF
     c28:	8f eb       	ldi	r24, 0xBF	; 191
     c2a:	80 83       	st	Z, r24
    //PD3 - TX_OUTBOUND
    //PD4 - INBOUND_nEN_RX
    //PD5 - ACC MOSI                     INBOUND_EN_TX
    //PD6 - ACC MISO                     RX_INBOUND
    //PD7 - ACC SCK                      TX_INBOUND
    PORTD.OUT = 0x02; //22
     c2c:	e0 e6       	ldi	r30, 0x60	; 96
     c2e:	f6 e0       	ldi	r31, 0x06	; 6
     c30:	82 e0       	ldi	r24, 0x02	; 2
     c32:	84 83       	std	Z+4, r24	; 0x04
    PORTD.DIR = 0xBB; //BB
     c34:	9b eb       	ldi	r25, 0xBB	; 187
     c36:	90 83       	st	Z, r25

    //PE0 - NC                    LED_PWM
    //PE1 - INBOUND_EN_TX         nCS9
    //PE2 - RX_INBOUND            nCS10
    //PE3 - TX_INBOUND            nCS11
    PORTE.OUT = 0x02; //0F
     c38:	e0 e8       	ldi	r30, 0x80	; 128
     c3a:	f6 e0       	ldi	r31, 0x06	; 6
     c3c:	84 83       	std	Z+4, r24	; 0x04
    PORTE.DIR = 0x0A; //0F
     c3e:	8a e0       	ldi	r24, 0x0A	; 10
     c40:	80 83       	st	Z, r24

    //PR0 - ACC INT2
    //PR1 - ACC INT1
    PORTR.OUT = 0x00;
     c42:	e0 ee       	ldi	r30, 0xE0	; 224
     c44:	f7 e0       	ldi	r31, 0x07	; 7
     c46:	14 82       	std	Z+4, r1	; 0x04
    PORTR.DIR = 0x00;
     c48:	10 82       	st	Z, r1

}
     c4a:	08 95       	ret

00000c4c <configurePortIODistal>:
* This function configures the peripheral I/O ports.  The direction,
* default out state, and drivers are set up here.
************************************************************************/
void configurePortIODistal(void)
{
  configurePortIOProximal();
     c4c:	0e 94 06 06 	call	0xc0c	; 0xc0c <configurePortIOProximal>
}
     c50:	08 95       	ret

00000c52 <getDoubleWord>:
}



static void getDoubleWord(uint8_t startingOpcode, uint16_t *firstResponse)
{
     c52:	fb 01       	movw	r30, r22
    uint8_t dummyRead;

    //Send the data.
    SPI0.DATA = startingOpcode;
     c54:	a0 ec       	ldi	r26, 0xC0	; 192
     c56:	b8 e0       	ldi	r27, 0x08	; 8
     c58:	13 96       	adiw	r26, 0x03	; 3
     c5a:	8c 93       	st	X, r24
     c5c:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
     c5e:	90 91 c2 08 	lds	r25, 0x08C2
     c62:	97 ff       	sbrs	r25, 7
     c64:	fc cf       	rjmp	.-8      	; 0xc5e <getDoubleWord+0xc>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     c66:	90 91 c3 08 	lds	r25, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
     c6a:	a0 ec       	ldi	r26, 0xC0	; 192
     c6c:	b8 e0       	ldi	r27, 0x08	; 8
     c6e:	13 96       	adiw	r26, 0x03	; 3
     c70:	1c 92       	st	X, r1
     c72:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
     c74:	90 91 c2 08 	lds	r25, 0x08C2
     c78:	97 ff       	sbrs	r25, 7
     c7a:	fc cf       	rjmp	.-8      	; 0xc74 <getDoubleWord+0x22>

    //Read the MSB data
    dummyRead = SPI0.DATA;
     c7c:	90 91 c3 08 	lds	r25, 0x08C3
    *firstResponse = dummyRead << 8;
     c80:	10 82       	st	Z, r1
     c82:	91 83       	std	Z+1, r25	; 0x01

    //Send the data.
    SPI0.DATA = startingOpcode+2;
     c84:	8e 5f       	subi	r24, 0xFE	; 254
     c86:	a0 ec       	ldi	r26, 0xC0	; 192
     c88:	b8 e0       	ldi	r27, 0x08	; 8
     c8a:	13 96       	adiw	r26, 0x03	; 3
     c8c:	8c 93       	st	X, r24
     c8e:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
     c90:	80 91 c2 08 	lds	r24, 0x08C2
     c94:	87 ff       	sbrs	r24, 7
     c96:	fc cf       	rjmp	.-8      	; 0xc90 <getDoubleWord+0x3e>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     c98:	80 91 c3 08 	lds	r24, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
     c9c:	a0 ec       	ldi	r26, 0xC0	; 192
     c9e:	b8 e0       	ldi	r27, 0x08	; 8
     ca0:	13 96       	adiw	r26, 0x03	; 3
     ca2:	1c 92       	st	X, r1
     ca4:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
     ca6:	80 91 c2 08 	lds	r24, 0x08C2
     caa:	87 ff       	sbrs	r24, 7
     cac:	fc cf       	rjmp	.-8      	; 0xca6 <getDoubleWord+0x54>

    //Read the LSB data
    dummyRead = SPI0.DATA;
     cae:	20 91 c3 08 	lds	r18, 0x08C3
    *firstResponse |= dummyRead;
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	82 2b       	or	r24, r18
     cba:	93 2b       	or	r25, r19
     cbc:	80 83       	st	Z, r24
     cbe:	91 83       	std	Z+1, r25	; 0x01

    return;
}
     cc0:	08 95       	ret

00000cc2 <unselectSensors>:
}

// un-set all chip select lines
static void unselectSensors(void)
{
    PORTA.OUTSET = TACT_PORTA_MASK;
     cc2:	80 e6       	ldi	r24, 0x60	; 96
     cc4:	e0 e0       	ldi	r30, 0x00	; 0
     cc6:	f6 e0       	ldi	r31, 0x06	; 6
     cc8:	85 83       	std	Z+5, r24	; 0x05
    PORTB.OUTSET = TACT_PORTB_MASK;
     cca:	8f e0       	ldi	r24, 0x0F	; 15
     ccc:	e0 e2       	ldi	r30, 0x20	; 32
     cce:	f6 e0       	ldi	r31, 0x06	; 6
     cd0:	85 83       	std	Z+5, r24	; 0x05
    PORTC.OUTSET = TACT_PORTC_MASK;
     cd2:	e0 e4       	ldi	r30, 0x40	; 64
     cd4:	f6 e0       	ldi	r31, 0x06	; 6
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	85 83       	std	Z+5, r24	; 0x05
    PORTC.OUTCLR = PORTC_MUX_MASK;
     cda:	8c e1       	ldi	r24, 0x1C	; 28
     cdc:	86 83       	std	Z+6, r24	; 0x06
}
     cde:	08 95       	ret

00000ce0 <selectSensor>:
static void selectSensor(uint8_t tactAddress)
{
    uint8_t dummyRead;

    //Now assert the proper chip select
    switch(tactAddress)
     ce0:	84 30       	cpi	r24, 0x04	; 4
     ce2:	91 f0       	breq	.+36     	; 0xd08 <selectSensor+0x28>
     ce4:	84 30       	cpi	r24, 0x04	; 4
     ce6:	28 f0       	brcs	.+10     	; 0xcf2 <selectSensor+0x12>
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	91 f0       	breq	.+36     	; 0xd10 <selectSensor+0x30>
     cec:	8c 30       	cpi	r24, 0x0C	; 12
     cee:	e8 f4       	brcc	.+58     	; 0xd2a <selectSensor+0x4a>
     cf0:	11 c0       	rjmp	.+34     	; 0xd14 <selectSensor+0x34>
    {
        case 0x00:
        case 0x01:
        case 0x02:
        case 0x03:
            PORTB.OUTCLR = 1 << tactAddress;
     cf2:	21 e0       	ldi	r18, 0x01	; 1
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <selectSensor+0x1c>
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	8a 95       	dec	r24
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <selectSensor+0x18>
     d00:	e0 e2       	ldi	r30, 0x20	; 32
     d02:	f6 e0       	ldi	r31, 0x06	; 6
     d04:	26 83       	std	Z+6, r18	; 0x06
            break;
     d06:	14 c0       	rjmp	.+40     	; 0xd30 <selectSensor+0x50>
        case 0x04:
            PORTC.OUTCLR = 0x02;
     d08:	82 e0       	ldi	r24, 0x02	; 2
     d0a:	e0 e4       	ldi	r30, 0x40	; 64
     d0c:	f6 e0       	ldi	r31, 0x06	; 6
     d0e:	0b c0       	rjmp	.+22     	; 0xd26 <selectSensor+0x46>
            break;
        case 0x05:
            PORTA.OUTCLR = 0x20;
     d10:	80 e2       	ldi	r24, 0x20	; 32
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <selectSensor+0x42>
        case 0x07:
        case 0x08:
        case 0x09:
        case 0x0A:
        case 0x0B:
            PORTC.OUTSET = (tactAddress - 0x05) << PORTC_MUX_SHIFT;
     d14:	85 50       	subi	r24, 0x05	; 5
     d16:	88 0f       	add	r24, r24
     d18:	88 0f       	add	r24, r24
     d1a:	e0 e4       	ldi	r30, 0x40	; 64
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	85 83       	std	Z+5, r24	; 0x05
            PORTA.OUTCLR = PORTA_MUX_EN;
     d20:	80 e4       	ldi	r24, 0x40	; 64
     d22:	e0 e0       	ldi	r30, 0x00	; 0
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	86 83       	std	Z+6, r24	; 0x06
            //_delay_us(5);
            break;
     d28:	03 c0       	rjmp	.+6      	; 0xd30 <selectSensor+0x50>
        default:
            //Should never get here.  Invalid address
            //Reset chip select lines and get out
            unselectSensors();
     d2a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <unselectSensors>
            return;
     d2e:	08 95       	ret
    }

    //Make sure transmitters are OK
    if(SPI0.STATUS & SPI_IF_bm)
     d30:	80 91 c2 08 	lds	r24, 0x08C2
     d34:	87 ff       	sbrs	r24, 7
     d36:	02 c0       	rjmp	.+4      	; 0xd3c <selectSensor+0x5c>
    {
        dummyRead = SPI0.DATA;
     d38:	80 91 c3 08 	lds	r24, 0x08C3
     d3c:	08 95       	ret

00000d3e <__vector_20>:
static void unselectSensors(void);

volatile uint8_t tactReady = 0;

ISR(TACT_TC_vect)
{
     d3e:	1f 92       	push	r1
     d40:	0f 92       	push	r0
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	0f 92       	push	r0
     d46:	11 24       	eor	r1, r1
     d48:	8f 93       	push	r24
    tactReady = 1;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 b0 21 	sts	0x21B0, r24
    TACT_TC.CTRLA = TC_CLKSEL_OFF_gc;
     d50:	10 92 40 08 	sts	0x0840, r1
    return;
}
     d54:	8f 91       	pop	r24
     d56:	0f 90       	pop	r0
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	0f 90       	pop	r0
     d5c:	1f 90       	pop	r1
     d5e:	18 95       	reti

00000d60 <configureSPIModulesPressure>:

//The system can take 8 MHz.  Peripheral clock is set to 32 MHz internally, so a divide by 4 prescaler is correct
//volatile uint8_t dummyRead;
void configureSPIModulesPressure(void)
{
    SPI0.INTCTRL = SPI_INTLVL_OFF_gc;
     d60:	e0 ec       	ldi	r30, 0xC0	; 192
     d62:	f8 e0       	ldi	r31, 0x08	; 8
     d64:	11 82       	std	Z+1, r1	; 0x01
    SPI0.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV4_gc;
     d66:	80 e5       	ldi	r24, 0x50	; 80
     d68:	80 83       	st	Z, r24
}
     d6a:	08 95       	ret

00000d6c <initTactileModule>:

//initialization
void initTactileModule(void)
{
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	0d ec       	ldi	r16, 0xCD	; 205
     d76:	11 e2       	ldi	r17, 0x21	; 33
     d78:	a5 eb       	ldi	r26, 0xB5	; 181
     d7a:	b1 e2       	ldi	r27, 0x21	; 33
     d7c:	c9 ed       	ldi	r28, 0xD9	; 217
     d7e:	d1 e2       	ldi	r29, 0x21	; 33
     d80:	89 e0       	ldi	r24, 0x09	; 9
     d82:	92 e2       	ldi	r25, 0x22	; 34
     d84:	21 ef       	ldi	r18, 0xF1	; 241
     d86:	31 e2       	ldi	r19, 0x21	; 33
     d88:	41 e2       	ldi	r20, 0x21	; 33
     d8a:	52 e2       	ldi	r21, 0x22	; 34
     d8c:	6c e0       	ldi	r22, 0x0C	; 12
    for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
    {
        pressureCalibrated[i] = 0;
     d8e:	f8 01       	movw	r30, r16
     d90:	11 92       	st	Z+, r1
     d92:	8f 01       	movw	r16, r30
        pressureData[i] = 0;
     d94:	1d 92       	st	X+, r1
     d96:	1d 92       	st	X+, r1
        pressureTempData[i] = 0;
     d98:	19 92       	st	Y+, r1
     d9a:	19 92       	st	Y+, r1
        pressureDataOffset[i] = 0;
     d9c:	fc 01       	movw	r30, r24
     d9e:	11 92       	st	Z+, r1
     da0:	11 92       	st	Z+, r1
     da2:	cf 01       	movw	r24, r30
        // b1coeff[i] = 0;
        // b2coeff[i] = 0;
        // c12coeff[i] = 0;
        // rawpressure[i] = 0;
        // rawtemp[i] = 0;
        lastPressure[i] = 0;
     da4:	f9 01       	movw	r30, r18
     da6:	11 92       	st	Z+, r1
     da8:	11 92       	st	Z+, r1
     daa:	9f 01       	movw	r18, r30
        adjustedPressure[i] = 0;
     dac:	fa 01       	movw	r30, r20
     dae:	11 92       	st	Z+, r1
     db0:	11 92       	st	Z+, r1
     db2:	af 01       	movw	r20, r30
     db4:	61 50       	subi	r22, 0x01	; 1
}

//initialization
void initTactileModule(void)
{
    for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
     db6:	59 f7       	brne	.-42     	; 0xd8e <initTactileModule+0x22>
        // rawpressure[i] = 0;
        // rawtemp[i] = 0;
        lastPressure[i] = 0;
        adjustedPressure[i] = 0;
    }
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <collectAllCalibrationValues>:
// }

void collectAllCalibrationValues(void)
{
    //First set the pins to known values to tighten inner reading loops
    unselectSensors();
     dc2:	0e 94 61 06 	call	0xcc2	; 0xcc2 <unselectSensors>
    // {
    //     readCoefficient(i);
    // }

    //Set the Tactile Timer to expire at 3 ms
    TACT_TC.CTRLB = TC_WGMODE_NORMAL_gc;
     dc6:	e0 e4       	ldi	r30, 0x40	; 64
     dc8:	f8 e0       	ldi	r31, 0x08	; 8
     dca:	11 82       	std	Z+1, r1	; 0x01
    TACT_TC.CTRLC = 0x00;
     dcc:	12 82       	std	Z+2, r1	; 0x02
    TACT_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     dce:	13 82       	std	Z+3, r1	; 0x03
    TACT_TC.CTRLE = 0x00;
     dd0:	14 82       	std	Z+4, r1	; 0x04
    TACT_TC.PERBUF = TACT_TIMEOUT;
     dd2:	80 e6       	ldi	r24, 0x60	; 96
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	86 ab       	sts	0x56, r24
     dd8:	97 ab       	sts	0x57, r25
    TACT_TC.CNT = 0x0000;
     dda:	10 a2       	lds	r17, 0x90
     ddc:	11 a2       	lds	r17, 0x91
    TACT_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	86 83       	std	Z+6, r24	; 0x06
    TACT_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
     de2:	87 e0       	ldi	r24, 0x07	; 7
     de4:	80 83       	st	Z, r24

    return;
}
     de6:	08 95       	ret

00000de8 <compensatePressure>:
 * This routine was pulled from Freescale app note AN3785 and modified
 * for this microprocessor.  The original code assumed two extra parameters
 * that have now been removed.
 ************************************************************************/
void compensatePressure(uint16_t tempReading, uint16_t pressureReading, uint8_t sensorIndex)
{
     de8:	ef 92       	push	r14
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
    // int32_t si_a2x2,si_y1,si_a1x1,si_c12x2,si_a1;

    // int16_t siPcomp;
    // //float decPcomp;

    pressureLocal=pressureReading>>6; //Note that the PressCntdec is the raw value from the MPL115A data address. Its shifted >>6 since its 10 bit.
     df4:	36 e0       	ldi	r19, 0x06	; 6
     df6:	76 95       	lsr	r23
     df8:	67 95       	ror	r22
     dfa:	3a 95       	dec	r19
     dfc:	e1 f7       	brne	.-8      	; 0xdf6 <compensatePressure+0xe>
    tempLocal=tempReading>>6; //Note that the TempCntdec is the raw value from the MPL115A data address. Its shifted >>6 since its 10 bit.
     dfe:	7c 01       	movw	r14, r24
     e00:	56 e0       	ldi	r21, 0x06	; 6
     e02:	f6 94       	lsr	r15
     e04:	e7 94       	ror	r14
     e06:	5a 95       	dec	r21
     e08:	e1 f7       	brne	.-8      	; 0xe02 <compensatePressure+0x1a>

    // since we are operating the sensor outside its normal range, it seems to behave as if it has 11 bytes of data.
    // however, its range is still 10 bits, (0-1023).  So we need to track the "actual" value of the sensor across multiple overflows.
    {
        if (!pressureCalibrated[sensorIndex])
     e0a:	04 2f       	mov	r16, r20
     e0c:	10 e0       	ldi	r17, 0x00	; 0
     e0e:	d8 01       	movw	r26, r16
     e10:	a3 53       	subi	r26, 0x33	; 51
     e12:	be 4d       	sbci	r27, 0xDE	; 222
     e14:	2c 91       	ld	r18, X
     e16:	c8 01       	movw	r24, r16
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	22 23       	and	r18, r18
     e1e:	61 f4       	brne	.+24     	; 0xe38 <compensatePressure+0x50>
        {
            lastPressure[sensorIndex] = pressureLocal;
     e20:	fc 01       	movw	r30, r24
     e22:	ef 50       	subi	r30, 0x0F	; 15
     e24:	fe 4d       	sbci	r31, 0xDE	; 222
     e26:	60 83       	st	Z, r22
     e28:	71 83       	std	Z+1, r23	; 0x01
            adjustedPressure[sensorIndex] = pressureLocal;
     e2a:	fc 01       	movw	r30, r24
     e2c:	ef 5d       	subi	r30, 0xDF	; 223
     e2e:	fd 4d       	sbci	r31, 0xDD	; 221
     e30:	60 83       	st	Z, r22
     e32:	71 83       	std	Z+1, r23	; 0x01
            pressureCalibrated[sensorIndex] = 1;
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	2c 93       	st	X, r18
        }

        int16_t delta = pressureLocal - lastPressure[sensorIndex];
     e38:	dc 01       	movw	r26, r24
     e3a:	af 50       	subi	r26, 0x0F	; 15
     e3c:	be 4d       	sbci	r27, 0xDE	; 222
     e3e:	4d 91       	ld	r20, X+
     e40:	5c 91       	ld	r21, X
     e42:	11 97       	sbiw	r26, 0x01	; 1
     e44:	9b 01       	movw	r18, r22
     e46:	24 1b       	sub	r18, r20
     e48:	35 0b       	sbc	r19, r21

        if (abs(delta) < 512)
     e4a:	e9 01       	movw	r28, r18
     e4c:	c1 50       	subi	r28, 0x01	; 1
     e4e:	de 4f       	sbci	r29, 0xFE	; 254
     e50:	fc 01       	movw	r30, r24
     e52:	ef 5d       	subi	r30, 0xDF	; 223
     e54:	fd 4d       	sbci	r31, 0xDD	; 221
     e56:	83 e0       	ldi	r24, 0x03	; 3
     e58:	cf 3f       	cpi	r28, 0xFF	; 255
     e5a:	d8 07       	cpc	r29, r24
     e5c:	30 f4       	brcc	.+12     	; 0xe6a <compensatePressure+0x82>
        {
            lastPressure[sensorIndex] = pressureLocal;
     e5e:	6d 93       	st	X+, r22
     e60:	7c 93       	st	X, r23
     e62:	11 97       	sbiw	r26, 0x01	; 1
            adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] + delta;
     e64:	80 81       	ld	r24, Z
     e66:	91 81       	ldd	r25, Z+1	; 0x01
     e68:	11 c0       	rjmp	.+34     	; 0xe8c <compensatePressure+0xa4>
        }
        else
        {
            int16_t bottom = lastPressure[sensorIndex] + (1024 - pressureLocal);
     e6a:	46 1b       	sub	r20, r22
     e6c:	57 0b       	sbc	r21, r23
     e6e:	40 50       	subi	r20, 0x00	; 0
     e70:	5c 4f       	sbci	r21, 0xFC	; 252
            int16_t top = pressureLocal + (1024 - lastPressure[sensorIndex]);
     e72:	20 50       	subi	r18, 0x00	; 0
     e74:	3c 4f       	sbci	r19, 0xFC	; 252
            lastPressure[sensorIndex] = pressureLocal;
     e76:	6d 93       	st	X+, r22
     e78:	7c 93       	st	X, r23
     e7a:	11 97       	sbiw	r26, 0x01	; 1
            if (bottom<top) // crossing 0
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] - bottom;
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
        else
        {
            int16_t bottom = lastPressure[sensorIndex] + (1024 - pressureLocal);
            int16_t top = pressureLocal + (1024 - lastPressure[sensorIndex]);
            lastPressure[sensorIndex] = pressureLocal;
            if (bottom<top) // crossing 0
     e80:	42 17       	cp	r20, r18
     e82:	53 07       	cpc	r21, r19
     e84:	1c f4       	brge	.+6      	; 0xe8c <compensatePressure+0xa4>
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] - bottom;
     e86:	84 1b       	sub	r24, r20
     e88:	95 0b       	sbc	r25, r21
     e8a:	02 c0       	rjmp	.+4      	; 0xe90 <compensatePressure+0xa8>
            else // crossing 1024
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] + top;
     e8c:	82 0f       	add	r24, r18
     e8e:	93 1f       	adc	r25, r19
     e90:	80 83       	st	Z, r24
     e92:	91 83       	std	Z+1, r25	; 0x01
    // siPcomp = (int16_t)(lt3>>14); //&0x3FF); // goes to no fractional parts since this is an ADC count.
    // //decPcomp is defined as a floating point number.
    // //Conversion to Decimal value from 1023 ADC count value. ADC counts are 0 to 1023. Pressure is 50 to 115kPa correspondingly.
    // //decPcomp = ((65.0/1023.0)*(float)siPcomp)+50.0;

    pressureTempData[sensorIndex] = tempLocal;
     e94:	c8 01       	movw	r24, r16
     e96:	88 0f       	add	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	fc 01       	movw	r30, r24
     e9c:	e7 52       	subi	r30, 0x27	; 39
     e9e:	fe 4d       	sbci	r31, 0xDE	; 222
     ea0:	e0 82       	st	Z, r14
     ea2:	f1 82       	std	Z+1, r15	; 0x01
    //pressureData[sensorIndex] = siPcomp - pressureDataOffset[sensorIndex];
    pressureData[sensorIndex] = adjustedPressure[sensorIndex] - pressureDataOffset[sensorIndex];
     ea4:	dc 01       	movw	r26, r24
     ea6:	ab 54       	subi	r26, 0x4B	; 75
     ea8:	be 4d       	sbci	r27, 0xDE	; 222
     eaa:	fc 01       	movw	r30, r24
     eac:	ef 5d       	subi	r30, 0xDF	; 223
     eae:	fd 4d       	sbci	r31, 0xDD	; 221
     eb0:	87 5f       	subi	r24, 0xF7	; 247
     eb2:	9d 4d       	sbci	r25, 0xDD	; 221
     eb4:	20 81       	ld	r18, Z
     eb6:	31 81       	ldd	r19, Z+1	; 0x01
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	28 1b       	sub	r18, r24
     ec0:	39 0b       	sbc	r19, r25
     ec2:	2d 93       	st	X+, r18
     ec4:	3c 93       	st	X, r19
     ec6:	11 97       	sbiw	r26, 0x01	; 1
    return;
}
     ec8:	df 91       	pop	r29
     eca:	cf 91       	pop	r28
     ecc:	1f 91       	pop	r17
     ece:	0f 91       	pop	r16
     ed0:	ff 90       	pop	r15
     ed2:	ef 90       	pop	r14
     ed4:	08 95       	ret

00000ed6 <doTactSensors>:
}

uint8_t activeSensor = 0;

void doTactSensors(void)
{
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <doTactSensors+0x12>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <doTactSensors+0x14>
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;

    //Set all chip selects high
    unselectSensors();
     eee:	0e 94 61 06 	call	0xcc2	; 0xcc2 <unselectSensors>

    configureSPIModulesPressure();
     ef2:	0e 94 b0 06 	call	0xd60	; 0xd60 <configureSPIModulesPressure>

    if(activeSensor >= numPressureSensors)
     ef6:	00 91 af 21 	lds	r16, 0x21AF
     efa:	80 91 01 20 	lds	r24, 0x2001
     efe:	08 17       	cp	r16, r24
     f00:	e0 f1       	brcs	.+120    	; 0xf7a <doTactSensors+0xa4>
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
     f02:	f8 94       	cli
        tactReady = 0;
     f04:	10 92 b0 21 	sts	0x21B0, r1
        for(i=0;i<numPressureSensors;i++)
     f08:	dd 24       	eor	r13, r13
{
    uint8_t dummyRead;
    selectSensor(tactAddress);

    //Send the data.
    SPI0.DATA = CONVERT_OPCODE;
     f0a:	00 ec       	ldi	r16, 0xC0	; 192
     f0c:	18 e0       	ldi	r17, 0x08	; 8
     f0e:	f4 e2       	ldi	r31, 0x24	; 36
     f10:	cf 2e       	mov	r12, r31

    while(!(SPI0.STATUS & SPI_IF_bm));
     f12:	a0 ec       	ldi	r26, 0xC0	; 192
     f14:	ea 2e       	mov	r14, r26
     f16:	a8 e0       	ldi	r26, 0x08	; 8
     f18:	fa 2e       	mov	r15, r26
    if(activeSensor >= numPressureSensors)
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
        tactReady = 0;
        for(i=0;i<numPressureSensors;i++)
     f1a:	16 c0       	rjmp	.+44     	; 0xf48 <doTactSensors+0x72>
}

static void convertTactSensor(uint8_t tactAddress)
{
    uint8_t dummyRead;
    selectSensor(tactAddress);
     f1c:	8d 2d       	mov	r24, r13
     f1e:	0e 94 70 06 	call	0xce0	; 0xce0 <selectSensor>

    //Send the data.
    SPI0.DATA = CONVERT_OPCODE;
     f22:	f8 01       	movw	r30, r16
     f24:	c3 82       	std	Z+3, r12	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
     f26:	80 91 c2 08 	lds	r24, 0x08C2
     f2a:	87 ff       	sbrs	r24, 7
     f2c:	fc cf       	rjmp	.-8      	; 0xf26 <doTactSensors+0x50>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     f2e:	80 91 c3 08 	lds	r24, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
     f32:	f7 01       	movw	r30, r14
     f34:	13 82       	std	Z+3, r1	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
     f36:	80 91 c2 08 	lds	r24, 0x08C2
     f3a:	87 ff       	sbrs	r24, 7
     f3c:	fc cf       	rjmp	.-8      	; 0xf36 <doTactSensors+0x60>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     f3e:	80 91 c3 08 	lds	r24, 0x08C3

    //Reset the chip select and address lines
    unselectSensors();
     f42:	0e 94 61 06 	call	0xcc2	; 0xcc2 <unselectSensors>
    if(activeSensor >= numPressureSensors)
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
        tactReady = 0;
        for(i=0;i<numPressureSensors;i++)
     f46:	d3 94       	inc	r13
     f48:	80 91 01 20 	lds	r24, 0x2001
     f4c:	d8 16       	cp	r13, r24
     f4e:	30 f3       	brcs	.-52     	; 0xf1c <doTactSensors+0x46>
        {
            convertTactSensor(i);
        }
        TACT_TC.CTRLB = TC_WGMODE_NORMAL_gc;
     f50:	e0 e4       	ldi	r30, 0x40	; 64
     f52:	f8 e0       	ldi	r31, 0x08	; 8
     f54:	11 82       	std	Z+1, r1	; 0x01
        TACT_TC.CTRLC = 0x00;
     f56:	12 82       	std	Z+2, r1	; 0x02
        TACT_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     f58:	13 82       	std	Z+3, r1	; 0x03
        TACT_TC.CTRLE = 0x00;
     f5a:	14 82       	std	Z+4, r1	; 0x04
        TACT_TC.PERBUF = TACT_TIMEOUT;
     f5c:	80 e6       	ldi	r24, 0x60	; 96
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	86 ab       	sts	0x56, r24
     f62:	97 ab       	sts	0x57, r25
        TACT_TC.CNT = 0x0000;
     f64:	10 a2       	lds	r17, 0x90
     f66:	11 a2       	lds	r17, 0x91
        TACT_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	86 83       	std	Z+6, r24	; 0x06
        TACT_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
     f6c:	87 e0       	ldi	r24, 0x07	; 7
     f6e:	80 93 40 08 	sts	0x0840, r24
        activeSensor = 0;
     f72:	10 92 af 21 	sts	0x21AF, r1
        sei();
     f76:	78 94       	sei
        return;
     f78:	29 c0       	rjmp	.+82     	; 0xfcc <doTactSensors+0xf6>
{
    uint8_t dummyRead;
    uint16_t firstPressureReading;
    uint16_t firstTempReading;

    selectSensor(tactAddress);
     f7a:	80 2f       	mov	r24, r16
     f7c:	0e 94 70 06 	call	0xce0	; 0xce0 <selectSensor>

    getDoubleWord(READ_PRESSURE_MSB_OPCODE,&firstPressureReading);
     f80:	80 e8       	ldi	r24, 0x80	; 128
     f82:	be 01       	movw	r22, r28
     f84:	6d 5f       	subi	r22, 0xFD	; 253
     f86:	7f 4f       	sbci	r23, 0xFF	; 255
     f88:	0e 94 29 06 	call	0xc52	; 0xc52 <getDoubleWord>

    getDoubleWord(READ_TEMPERATURE_MSB_OPCODE,&firstTempReading);
     f8c:	84 e8       	ldi	r24, 0x84	; 132
     f8e:	be 01       	movw	r22, r28
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	0e 94 29 06 	call	0xc52	; 0xc52 <getDoubleWord>

    //Do a final dummy write

    //Send the data.
    SPI0.DATA = 0x00;
     f98:	e0 ec       	ldi	r30, 0xC0	; 192
     f9a:	f8 e0       	ldi	r31, 0x08	; 8
     f9c:	13 82       	std	Z+3, r1	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
     f9e:	80 91 c2 08 	lds	r24, 0x08C2
     fa2:	87 ff       	sbrs	r24, 7
     fa4:	fc cf       	rjmp	.-8      	; 0xf9e <doTactSensors+0xc8>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     fa6:	80 91 c3 08 	lds	r24, 0x08C3

    //Reset the chip select and address lines
    unselectSensors();
     faa:	0e 94 61 06 	call	0xcc2	; 0xcc2 <unselectSensors>

    // protect against bad data if reading accelerometer
    if (firstPressureReading == 0)
     fae:	6b 81       	ldd	r22, Y+3	; 0x03
     fb0:	7c 81       	ldd	r23, Y+4	; 0x04
     fb2:	61 15       	cp	r22, r1
     fb4:	71 05       	cpc	r23, r1
     fb6:	29 f0       	breq	.+10     	; 0xfc2 <doTactSensors+0xec>
        return;

    //floatingPressureData[tactAddress] = compensatePressure(firstTempReading,firstPressureReading,tactAddress);
    compensatePressure(firstTempReading, firstPressureReading, tactAddress);
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	9a 81       	ldd	r25, Y+2	; 0x02
     fbc:	40 2f       	mov	r20, r16
     fbe:	0e 94 f4 06 	call	0xde8	; 0xde8 <compensatePressure>
        sei();
        return;
    }

    readTactSensor(activeSensor);
    activeSensor++;
     fc2:	80 91 af 21 	lds	r24, 0x21AF
     fc6:	8f 5f       	subi	r24, 0xFF	; 255
     fc8:	80 93 af 21 	sts	0x21AF, r24

    //Leave tactReady asserted so that we can quickly return after giving command a chance
}
     fcc:	24 96       	adiw	r28, 0x04	; 4
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	08 95       	ret

00000fe4 <ReadIntFromEEPROM>:
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
     fe4:	ef 92       	push	r14
     fe6:	ff 92       	push	r15
     fe8:	0f 93       	push	r16
     fea:	1f 93       	push	r17
     fec:	cf 93       	push	r28
     fee:	df 93       	push	r29
     ff0:	0f 92       	push	r0
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
     ff6:	e8 2e       	mov	r14, r24
     ff8:	ff 24       	eor	r15, r15
     ffa:	ee 0c       	add	r14, r14
     ffc:	ff 1c       	adc	r15, r15
     ffe:	ee 0c       	add	r14, r14
    1000:	ff 1c       	adc	r15, r15
    1002:	8b 01       	movw	r16, r22
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4; i++)
    1004:	20 e0       	ldi	r18, 0x00	; 0
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
    1006:	c7 01       	movw	r24, r14
    1008:	29 83       	std	Y+1, r18	; 0x01
    100a:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <__eerd_byte_x32a4u>
    100e:	f8 01       	movw	r30, r16
    1010:	81 93       	st	Z+, r24
    1012:	8f 01       	movw	r16, r30
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4; i++)
    1014:	29 81       	ldd	r18, Y+1	; 0x01
    1016:	2f 5f       	subi	r18, 0xFF	; 255
    1018:	08 94       	sec
    101a:	e1 1c       	adc	r14, r1
    101c:	f1 1c       	adc	r15, r1
    101e:	24 30       	cpi	r18, 0x04	; 4
    1020:	91 f7       	brne	.-28     	; 0x1006 <ReadIntFromEEPROM+0x22>
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
}
    1022:	0f 90       	pop	r0
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	1f 91       	pop	r17
    102a:	0f 91       	pop	r16
    102c:	ff 90       	pop	r15
    102e:	ef 90       	pop	r14
    1030:	08 95       	ret

00001032 <WriteIntToEEPROM>:
    ReadIntFromEEPROM(EEPROM_ADDRESS_ENCODER_OFFSET, (uint8_t*)&temp);
    encoderOffset = temp;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
    1044:	8b 01       	movw	r16, r22
    1046:	e8 2e       	mov	r14, r24
    1048:	ff 24       	eor	r15, r15
    104a:	ee 0c       	add	r14, r14
    104c:	ff 1c       	adc	r15, r15
    104e:	ee 0c       	add	r14, r14
    1050:	ff 1c       	adc	r15, r15
    encoderOffset = temp;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
    1052:	20 e0       	ldi	r18, 0x00	; 0
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
    1054:	f8 01       	movw	r30, r16
    1056:	61 91       	ld	r22, Z+
    1058:	8f 01       	movw	r16, r30
    105a:	c7 01       	movw	r24, r14
    105c:	29 83       	std	Y+1, r18	; 0x01
    105e:	0e 94 83 0b 	call	0x1706	; 0x1706 <__eewr_byte_x32a4u>
    encoderOffset = temp;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
    1062:	29 81       	ldd	r18, Y+1	; 0x01
    1064:	2f 5f       	subi	r18, 0xFF	; 255
    1066:	08 94       	sec
    1068:	e1 1c       	adc	r14, r1
    106a:	f1 1c       	adc	r15, r1
    106c:	24 30       	cpi	r18, 0x04	; 4
    106e:	91 f7       	brne	.-28     	; 0x1054 <WriteIntToEEPROM+0x22>
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}
    1070:	0f 90       	pop	r0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	ff 90       	pop	r15
    107c:	ef 90       	pop	r14
    107e:	08 95       	ret

00001080 <LEDon>:
  }
}

void LEDon(void)
{
    PORTC.OUT &= ~0x01;
    1080:	e0 e4       	ldi	r30, 0x40	; 64
    1082:	f6 e0       	ldi	r31, 0x06	; 6
    1084:	84 81       	ldd	r24, Z+4	; 0x04
    1086:	8e 7f       	andi	r24, 0xFE	; 254
    1088:	84 83       	std	Z+4, r24	; 0x04
}
    108a:	08 95       	ret

0000108c <LEDoff>:

void LEDoff(void)
{
    PORTC.OUT |= 0x01;
    108c:	e0 e4       	ldi	r30, 0x40	; 64
    108e:	f6 e0       	ldi	r31, 0x06	; 6
    1090:	84 81       	ldd	r24, Z+4	; 0x04
    1092:	81 60       	ori	r24, 0x01	; 1
    1094:	84 83       	std	Z+4, r24	; 0x04
}
    1096:	08 95       	ret

00001098 <initStateFromEEPROM>:
    outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
    return 4+responseSize;
}

static void initStateFromEEPROM(void)
{
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	00 d0       	rcall	.+0      	; 0x109e <initStateFromEEPROM+0x6>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <initStateFromEEPROM+0x8>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    uint32_t temp = 0;
    10a4:	19 82       	std	Y+1, r1	; 0x01
    10a6:	1a 82       	std	Y+2, r1	; 0x02
    10a8:	1b 82       	std	Y+3, r1	; 0x03
    10aa:	1c 82       	std	Y+4, r1	; 0x04
    
    ReadIntFromEEPROM(EEPROM_ADDRESS_LED, (uint8_t*)&temp);
    10ac:	8f e1       	ldi	r24, 0x1F	; 31
    10ae:	be 01       	movw	r22, r28
    10b0:	6f 5f       	subi	r22, 0xFF	; 255
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ReadIntFromEEPROM>
    if(temp)
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	ab 81       	ldd	r26, Y+3	; 0x03
    10be:	bc 81       	ldd	r27, Y+4	; 0x04
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	a1 05       	cpc	r26, r1
    10c4:	b1 05       	cpc	r27, r1
    10c6:	19 f0       	breq	.+6      	; 0x10ce <initStateFromEEPROM+0x36>
        LEDon();
    10c8:	0e 94 40 08 	call	0x1080	; 0x1080 <LEDon>
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <initStateFromEEPROM+0x3a>
    else
        LEDoff();
    10ce:	0e 94 46 08 	call	0x108c	; 0x108c <LEDoff>
    
    ReadIntFromEEPROM(EEPROM_ADDRESS_ENCODER_OFFSET, (uint8_t*)&temp);
    10d2:	8c e1       	ldi	r24, 0x1C	; 28
    10d4:	be 01       	movw	r22, r28
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ReadIntFromEEPROM>
    encoderOffset = temp;
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	9a 81       	ldd	r25, Y+2	; 0x02
    10e2:	80 93 ad 21 	sts	0x21AD, r24
    10e6:	90 93 ae 21 	sts	0x21AE, r25
}
    10ea:	24 96       	adiw	r28, 0x04	; 4
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	08 95       	ret

000010f6 <BootRelay>:
    outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
    return 4;
}

void BootRelay(uint8_t *commandPacket)
{
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	a0 97       	sbiw	r28, 0x20	; 32
    1100:	cd bf       	out	0x3d, r28	; 61
    1102:	de bf       	out	0x3e, r29	; 62
  // overview: 2)configure for 115200 baud passthrough
  // overview: 3)start a 20 second timer
  // overview: 4)do the serial passthrough, blink LED
  // overview: 5)wait for timer to finish, then reset/reboot

  cli(); // disable all interrupts, nothing else going on
    1104:	f8 94       	cli
  DMA.CTRL = 0; // disable the DMA controller
    1106:	10 92 00 01 	sts	0x0100, r1
  
  // repeat the command to the target
  DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
    110a:	e0 ea       	ldi	r30, 0xA0	; 160
    110c:	f9 e0       	ldi	r31, 0x09	; 9
    110e:	13 82       	std	Z+3, r1	; 0x03
  DOWNSTREAM_USART.CTRLB |= USART_RXEN_bm | USART_TXEN_bm; //enable RX and TX
    1110:	20 91 a4 09 	lds	r18, 0x09A4
    1114:	28 61       	ori	r18, 0x18	; 24
    1116:	24 83       	std	Z+4, r18	; 0x04
    1118:	fc 01       	movw	r30, r24
  for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    {
      while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm));
    111e:	20 91 a1 09 	lds	r18, 0x09A1
    1122:	25 ff       	sbrs	r18, 5
    1124:	fc cf       	rjmp	.-8      	; 0x111e <BootRelay+0x28>
      DOWNSTREAM_USART.DATA = commandPacket[i];
    1126:	21 91       	ld	r18, Z+
    1128:	20 93 a0 09 	sts	0x09A0, r18
  DMA.CTRL = 0; // disable the DMA controller
  
  // repeat the command to the target
  DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
  DOWNSTREAM_USART.CTRLB |= USART_RXEN_bm | USART_TXEN_bm; //enable RX and TX
  for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	87 30       	cpi	r24, 0x07	; 7
    1130:	91 05       	cpc	r25, r1
    1132:	a9 f7       	brne	.-22     	; 0x111e <BootRelay+0x28>
    {
      while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm));
      DOWNSTREAM_USART.DATA = commandPacket[i];
    }
  // dont bother waiting for a response verification
  while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm)); // wait for the data to be read
    1134:	80 91 a1 09 	lds	r24, 0x09A1
    1138:	85 ff       	sbrs	r24, 5
    113a:	fc cf       	rjmp	.-8      	; 0x1134 <BootRelay+0x3e>
  DOWNSTREAM_USART.STATUS = USART_TXCIF_bm; // clear the TX done flag
    113c:	80 e4       	ldi	r24, 0x40	; 64
    113e:	e0 ea       	ldi	r30, 0xA0	; 160
    1140:	f9 e0       	ldi	r31, 0x09	; 9
    1142:	81 83       	std	Z+1, r24	; 0x01
  while(!(DOWNSTREAM_USART.STATUS & USART_TXCIF_bm)); // wait for the TX to be done
    1144:	e0 ea       	ldi	r30, 0xA0	; 160
    1146:	f9 e0       	ldi	r31, 0x09	; 9
    1148:	80 91 a1 09 	lds	r24, 0x09A1
    114c:	86 ff       	sbrs	r24, 6
    114e:	fa cf       	rjmp	.-12     	; 0x1144 <BootRelay+0x4e>
  // Reconfigure the serial ports
  //int bsel = 1047;       // 115200 @ 32Mhz as calculated from ProtoTalk.net
  //uint8_t bscale = 10;      // 115200 @ 32Mhz as calculated from ProtoTalk.net
  int bsel = 3269;       // 38,400 @ 32Mhz as calculated from ProtoTalk.net
  uint8_t bscale = -6;      // 38,400 @ 32Mhz as calculated from ProtoTalk.net
  UPSTREAM_USART.CTRLA = 0x00; // disable interrupts
    1150:	a0 ea       	ldi	r26, 0xA0	; 160
    1152:	ba e0       	ldi	r27, 0x0A	; 10
    1154:	13 96       	adiw	r26, 0x03	; 3
    1156:	1c 92       	st	X, r1
    1158:	13 97       	sbiw	r26, 0x03	; 3
  UPSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
    115a:	25 ec       	ldi	r18, 0xC5	; 197
    115c:	16 96       	adiw	r26, 0x06	; 6
    115e:	2c 93       	st	X, r18
    1160:	16 97       	sbiw	r26, 0x06	; 6
  UPSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
    1162:	9c ea       	ldi	r25, 0xAC	; 172
    1164:	17 96       	adiw	r26, 0x07	; 7
    1166:	9c 93       	st	X, r25
    1168:	17 97       	sbiw	r26, 0x07	; 7
  UPSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
    116a:	88 e1       	ldi	r24, 0x18	; 24
    116c:	14 96       	adiw	r26, 0x04	; 4
    116e:	8c 93       	st	X, r24
  DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
    1170:	13 82       	std	Z+3, r1	; 0x03
  DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
    1172:	26 83       	std	Z+6, r18	; 0x06
  DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
    1174:	97 83       	std	Z+7, r25	; 0x07
  DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
    1176:	84 83       	std	Z+4, r24	; 0x04
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
  uint8_t down_tail = 0;
    1178:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
    117a:	00 e0       	ldi	r16, 0x00	; 0
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
    117c:	ff 24       	eor	r15, r15
  DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
    117e:	ee 24       	eor	r14, r14
  DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
  DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
  DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	dc 01       	movw	r26, r24
  DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
  DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
  DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
  DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
    1186:	cc 24       	eor	r12, r12
    1188:	dd 24       	eor	r13, r13
  uint8_t down_tail = 0;

  // relay chars while waiting for timeout
  while(sec_cnt < 200) 
  {
      loop_cnt++;
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	a1 1d       	adc	r26, r1
    118e:	b1 1d       	adc	r27, r1
      if(loop_cnt > 90000L) 
    1190:	81 39       	cpi	r24, 0x91	; 145
    1192:	2f e5       	ldi	r18, 0x5F	; 95
    1194:	92 07       	cpc	r25, r18
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	a2 07       	cpc	r26, r18
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	b2 07       	cpc	r27, r18
    119e:	88 f0       	brcs	.+34     	; 0x11c2 <BootRelay+0xcc>
      { // approximately 0.1sec experimentally
          loop_cnt=0;
          sec_cnt++;
    11a0:	08 94       	sec
    11a2:	c1 1c       	adc	r12, r1
    11a4:	d1 1c       	adc	r13, r1
          if((sec_cnt&0x03)==0x03)
    11a6:	c6 01       	movw	r24, r12
    11a8:	83 70       	andi	r24, 0x03	; 3
    11aa:	90 70       	andi	r25, 0x00	; 0
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	91 05       	cpc	r25, r1
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <BootRelay+0xc2>
              LEDon();
    11b2:	0e 94 40 08 	call	0x1080	; 0x1080 <LEDon>
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <BootRelay+0xc6>
          else
              LEDoff();
    11b8:	0e 94 46 08 	call	0x108c	; 0x108c <LEDoff>
  while(sec_cnt < 200) 
  {
      loop_cnt++;
      if(loop_cnt > 90000L) 
      { // approximately 0.1sec experimentally
          loop_cnt=0;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	dc 01       	movw	r26, r24
          if((sec_cnt&0x03)==0x03)
              LEDon();
          else
              LEDoff();
      }
      if (DOWNSTREAM_USART.STATUS & USART_RXCIF_bm) {
    11c2:	20 91 a1 09 	lds	r18, 0x09A1
    11c6:	27 ff       	sbrs	r18, 7
    11c8:	0c c0       	rjmp	.+24     	; 0x11e2 <BootRelay+0xec>
          up_fifo[up_head++] = DOWNSTREAM_USART.DATA;
    11ca:	20 91 a0 09 	lds	r18, 0x09A0
    11ce:	e1 e1       	ldi	r30, 0x11	; 17
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	ec 0f       	add	r30, r28
    11d4:	fd 1f       	adc	r31, r29
    11d6:	ee 0d       	add	r30, r14
    11d8:	f1 1d       	adc	r31, r1
    11da:	20 83       	st	Z, r18
    11dc:	e3 94       	inc	r14
          up_head %= sizeof(up_fifo);
    11de:	2f e0       	ldi	r18, 0x0F	; 15
    11e0:	e2 22       	and	r14, r18
      }
      if (UPSTREAM_USART.STATUS & USART_RXCIF_bm) {
    11e2:	20 91 a1 0a 	lds	r18, 0x0AA1
    11e6:	27 ff       	sbrs	r18, 7
    11e8:	0b c0       	rjmp	.+22     	; 0x1200 <BootRelay+0x10a>
          down_fifo[down_head++] = UPSTREAM_USART.DATA;
    11ea:	20 91 a0 0a 	lds	r18, 0x0AA0
    11ee:	e1 e0       	ldi	r30, 0x01	; 1
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	ec 0f       	add	r30, r28
    11f4:	fd 1f       	adc	r31, r29
    11f6:	e0 0f       	add	r30, r16
    11f8:	f1 1d       	adc	r31, r1
    11fa:	20 83       	st	Z, r18
    11fc:	0f 5f       	subi	r16, 0xFF	; 255
          down_head %= sizeof(down_fifo);
    11fe:	0f 70       	andi	r16, 0x0F	; 15
      }
      if (up_head != up_tail && (UPSTREAM_USART.STATUS & USART_DREIF_bm)) {
    1200:	ef 14       	cp	r14, r15
    1202:	81 f0       	breq	.+32     	; 0x1224 <BootRelay+0x12e>
    1204:	20 91 a1 0a 	lds	r18, 0x0AA1
    1208:	25 ff       	sbrs	r18, 5
    120a:	0c c0       	rjmp	.+24     	; 0x1224 <BootRelay+0x12e>
          UPSTREAM_USART.DATA = up_fifo[up_tail++];
    120c:	e1 e1       	ldi	r30, 0x11	; 17
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	ec 0f       	add	r30, r28
    1212:	fd 1f       	adc	r31, r29
    1214:	ef 0d       	add	r30, r15
    1216:	f1 1d       	adc	r31, r1
    1218:	20 81       	ld	r18, Z
    121a:	20 93 a0 0a 	sts	0x0AA0, r18
    121e:	f3 94       	inc	r15
          up_tail %= sizeof(up_fifo);
    1220:	2f e0       	ldi	r18, 0x0F	; 15
    1222:	f2 22       	and	r15, r18
      }
      if (down_head != down_tail && (DOWNSTREAM_USART.STATUS & USART_DREIF_bm)) {
    1224:	01 17       	cp	r16, r17
    1226:	79 f0       	breq	.+30     	; 0x1246 <BootRelay+0x150>
    1228:	20 91 a1 09 	lds	r18, 0x09A1
    122c:	25 ff       	sbrs	r18, 5
    122e:	0b c0       	rjmp	.+22     	; 0x1246 <BootRelay+0x150>
          DOWNSTREAM_USART.DATA = down_fifo[down_tail++];
    1230:	e1 e0       	ldi	r30, 0x01	; 1
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	ec 0f       	add	r30, r28
    1236:	fd 1f       	adc	r31, r29
    1238:	e1 0f       	add	r30, r17
    123a:	f1 1d       	adc	r31, r1
    123c:	20 81       	ld	r18, Z
    123e:	20 93 a0 09 	sts	0x09A0, r18
    1242:	1f 5f       	subi	r17, 0xFF	; 255
          down_tail %= sizeof(down_fifo);
    1244:	1f 70       	andi	r17, 0x0F	; 15
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
  uint8_t down_tail = 0;

  // relay chars while waiting for timeout
  while(sec_cnt < 200) 
    1246:	28 ec       	ldi	r18, 0xC8	; 200
    1248:	c2 16       	cp	r12, r18
    124a:	d1 04       	cpc	r13, r1
    124c:	0c f4       	brge	.+2      	; 0x1250 <BootRelay+0x15a>
    124e:	9d cf       	rjmp	.-198    	; 0x118a <BootRelay+0x94>
          down_tail %= sizeof(down_fifo);
      }
  }

  // 30sec timer finished, reset/reboot
  wdt_enable(WDT_PER_8CLK_gc);
    1250:	93 e0       	ldi	r25, 0x03	; 3
    1252:	88 ed       	ldi	r24, 0xD8	; 216
    1254:	08 b6       	in	r0, 0x38	; 56
    1256:	84 bf       	out	0x34, r24	; 52
    1258:	90 93 80 00 	sts	0x0080, r25
    125c:	a8 95       	wdr
    125e:	08 be       	out	0x38, r0	; 56
    1260:	ff cf       	rjmp	.-2      	; 0x1260 <BootRelay+0x16a>

00001262 <processCommand>:
  }
  return 5; // never get here, but keep compiler happy
}

int processCommand(uint8_t *commandPacket,uint8_t *outputBuffer)
{
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
    126e:	cf 93       	push	r28
    1270:	df 93       	push	r29
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
    1276:	68 97       	sbiw	r28, 0x18	; 24
    1278:	cd bf       	out	0x3d, r28	; 61
    127a:	de bf       	out	0x3e, r29	; 62
    127c:	8c 01       	movw	r16, r24
    127e:	6b 01       	movw	r12, r22
  uint8_t opcode;

  opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    1280:	fc 01       	movw	r30, r24
    1282:	81 81       	ldd	r24, Z+1	; 0x01
    1284:	98 2f       	mov	r25, r24
    1286:	90 7f       	andi	r25, 0xF0	; 240

  switch(opcode)
    1288:	90 38       	cpi	r25, 0x80	; 128
    128a:	09 f4       	brne	.+2      	; 0x128e <processCommand+0x2c>
    128c:	aa c0       	rjmp	.+340    	; 0x13e2 <processCommand+0x180>
    128e:	91 38       	cpi	r25, 0x81	; 129
    1290:	48 f4       	brcc	.+18     	; 0x12a4 <processCommand+0x42>
    1292:	90 36       	cpi	r25, 0x60	; 96
    1294:	09 f4       	brne	.+2      	; 0x1298 <processCommand+0x36>
    1296:	a5 c0       	rjmp	.+330    	; 0x13e2 <processCommand+0x180>
    1298:	90 37       	cpi	r25, 0x70	; 112
    129a:	09 f4       	brne	.+2      	; 0x129e <processCommand+0x3c>
    129c:	a2 c0       	rjmp	.+324    	; 0x13e2 <processCommand+0x180>
    129e:	99 23       	and	r25, r25
    12a0:	59 f0       	breq	.+22     	; 0x12b8 <processCommand+0x56>
    12a2:	25 c1       	rjmp	.+586    	; 0x14ee <processCommand+0x28c>
    12a4:	90 3b       	cpi	r25, 0xB0	; 176
    12a6:	09 f4       	brne	.+2      	; 0x12aa <processCommand+0x48>
    12a8:	12 c1       	rjmp	.+548    	; 0x14ce <processCommand+0x26c>
    12aa:	90 3c       	cpi	r25, 0xC0	; 192
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <processCommand+0x4e>
    12ae:	d3 c0       	rjmp	.+422    	; 0x1456 <processCommand+0x1f4>
    12b0:	90 39       	cpi	r25, 0x90	; 144
    12b2:	09 f0       	breq	.+2      	; 0x12b6 <processCommand+0x54>
    12b4:	1c c1       	rjmp	.+568    	; 0x14ee <processCommand+0x28c>
    12b6:	95 c0       	rjmp	.+298    	; 0x13e2 <processCommand+0x180>
    uint16_t collectionBitfield;
    int16_t adcData[7];
    uint8_t accelData[6];
    int16_t encoderData;

    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    12b8:	f8 01       	movw	r30, r16
    12ba:	e2 80       	ldd	r14, Z+2	; 0x02
    12bc:	f3 80       	ldd	r15, Z+3	; 0x03

    if (collectionBitfield & (DATA_COLLECTION_DISTALJOINT_BITMASK | DATA_COLLECTION_DYNAMIC_BITMASK))
    12be:	c7 01       	movw	r24, r14
    12c0:	80 70       	andi	r24, 0x00	; 0
    12c2:	90 75       	andi	r25, 0x50	; 80
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	21 f0       	breq	.+8      	; 0x12d0 <processCommand+0x6e>
    {
        captureSweep(adcData);
    12c8:	ce 01       	movw	r24, r28
    12ca:	0b 96       	adiw	r24, 0x0b	; 11
    12cc:	0e 94 1d 01 	call	0x23a	; 0x23a <captureSweep>
    }

    if(collectionBitfield & DATA_COLLECTION_ACCELERATION_BITMASK)
    12d0:	f7 fe       	sbrs	r15, 7
    12d2:	0f c0       	rjmp	.+30     	; 0x12f2 <processCommand+0x90>
    {
        readAxes(accelData);
    12d4:	ce 01       	movw	r24, r28
    12d6:	05 96       	adiw	r24, 0x05	; 5
    12d8:	0e 94 ce 0a 	call	0x159c	; 0x159c <readAxes>
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &accelData, 6);
    12dc:	f6 01       	movw	r30, r12
    12de:	33 96       	adiw	r30, 0x03	; 3
    12e0:	de 01       	movw	r26, r28
    12e2:	15 96       	adiw	r26, 0x05	; 5
    12e4:	86 e0       	ldi	r24, 0x06	; 6
    12e6:	0d 90       	ld	r0, X+
    12e8:	01 92       	st	Z+, r0
    12ea:	81 50       	subi	r24, 0x01	; 1
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <processCommand+0x84>
        responseSize += 6;
    12ee:	06 e0       	ldi	r16, 0x06	; 6
    12f0:	01 c0       	rjmp	.+2      	; 0x12f4 <processCommand+0x92>
    CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;    //Select 1.024 kHz from internal oscillator for RTC clock source
}

static int handleCollectionCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint8_t responseSize = 0;
    12f2:	00 e0       	ldi	r16, 0x00	; 0
        readAxes(accelData);
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &accelData, 6);
        responseSize += 6;
    }

    if(collectionBitfield & DATA_COLLECTION_DYNAMIC_BITMASK)
    12f4:	f6 fe       	sbrs	r15, 6
    12f6:	0d c0       	rjmp	.+26     	; 0x1312 <processCommand+0xb0>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &adcData[DYNAMIC_OFFSET], 6);
    12f8:	e0 2f       	mov	r30, r16
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	33 96       	adiw	r30, 0x03	; 3
    12fe:	ec 0d       	add	r30, r12
    1300:	fd 1d       	adc	r31, r13
    1302:	de 01       	movw	r26, r28
    1304:	53 96       	adiw	r26, 0x13	; 19
    1306:	86 e0       	ldi	r24, 0x06	; 6
    1308:	0d 90       	ld	r0, X+
    130a:	01 92       	st	Z+, r0
    130c:	81 50       	subi	r24, 0x01	; 1
    130e:	e1 f7       	brne	.-8      	; 0x1308 <processCommand+0xa6>
        responseSize += 6;
    1310:	0a 5f       	subi	r16, 0xFA	; 250
    }

    if(collectionBitfield & DATA_COLLECTION_DISTALJOINT_BITMASK)
    1312:	f4 fe       	sbrs	r15, 4
    1314:	0d c0       	rjmp	.+26     	; 0x1330 <processCommand+0xce>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &adcData[DISTALJOINT_OFFSET], 8);
    1316:	e0 2f       	mov	r30, r16
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	33 96       	adiw	r30, 0x03	; 3
    131c:	ec 0d       	add	r30, r12
    131e:	fd 1d       	adc	r31, r13
    1320:	de 01       	movw	r26, r28
    1322:	1b 96       	adiw	r26, 0x0b	; 11
    1324:	88 e0       	ldi	r24, 0x08	; 8
    1326:	0d 90       	ld	r0, X+
    1328:	01 92       	st	Z+, r0
    132a:	81 50       	subi	r24, 0x01	; 1
    132c:	e1 f7       	brne	.-8      	; 0x1326 <processCommand+0xc4>
        responseSize += 8;
    132e:	08 5f       	subi	r16, 0xF8	; 248
    }

    if(collectionBitfield & DATA_COLLECTION_PROXIMALJOINT_BITMASK)
    1330:	f3 fe       	sbrs	r15, 3
    1332:	08 c0       	rjmp	.+16     	; 0x1344 <processCommand+0xe2>
    {
        encoderData = readEncoder();
    1334:	0e 94 c9 05 	call	0xb92	; 0xb92 <readEncoder>
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &encoderData, 2);
    1338:	f6 01       	movw	r30, r12
    133a:	e0 0f       	add	r30, r16
    133c:	f1 1d       	adc	r31, r1
    133e:	83 83       	std	Z+3, r24	; 0x03
    1340:	94 83       	std	Z+4, r25	; 0x04
        responseSize += 2;
    1342:	0e 5f       	subi	r16, 0xFE	; 254
    }

    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
    1344:	f1 fe       	sbrs	r15, 1
    1346:	12 c0       	rjmp	.+36     	; 0x136c <processCommand+0x10a>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &pressureData, numPressureSensors*2);
    1348:	40 91 01 20 	lds	r20, 0x2001
    134c:	80 2f       	mov	r24, r16
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	03 96       	adiw	r24, 0x03	; 3
    1352:	8c 0d       	add	r24, r12
    1354:	9d 1d       	adc	r25, r13
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	44 0f       	add	r20, r20
    135a:	55 1f       	adc	r21, r21
    135c:	65 eb       	ldi	r22, 0xB5	; 181
    135e:	71 e2       	ldi	r23, 0x21	; 33
    1360:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <memcpy>
        responseSize += numPressureSensors*2;
    1364:	80 91 01 20 	lds	r24, 0x2001
    1368:	88 0f       	add	r24, r24
    136a:	08 0f       	add	r16, r24
    }

    if(collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
    136c:	e1 fe       	sbrs	r14, 1
    136e:	10 c0       	rjmp	.+32     	; 0x1390 <processCommand+0x12e>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &RxCheckSumErrCnt, 4);
    1370:	f6 01       	movw	r30, r12
    1372:	e0 0f       	add	r30, r16
    1374:	f1 1d       	adc	r31, r1
    1376:	80 91 b1 21 	lds	r24, 0x21B1
    137a:	90 91 b2 21 	lds	r25, 0x21B2
    137e:	a0 91 b3 21 	lds	r26, 0x21B3
    1382:	b0 91 b4 21 	lds	r27, 0x21B4
    1386:	83 83       	std	Z+3, r24	; 0x03
    1388:	94 83       	std	Z+4, r25	; 0x04
    138a:	a5 83       	std	Z+5, r26	; 0x05
    138c:	b6 83       	std	Z+6, r27	; 0x06
        responseSize += 4;
    138e:	0c 5f       	subi	r16, 0xFC	; 252
    }
    
    if(collectionBitfield & DATA_COLLECTION_TACTILE_TEMP_BITMASK)
    1390:	e0 fe       	sbrs	r14, 0
    1392:	12 c0       	rjmp	.+36     	; 0x13b8 <processCommand+0x156>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &pressureTempData, numPressureSensors*2);
    1394:	40 91 01 20 	lds	r20, 0x2001
    1398:	80 2f       	mov	r24, r16
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	03 96       	adiw	r24, 0x03	; 3
    139e:	8c 0d       	add	r24, r12
    13a0:	9d 1d       	adc	r25, r13
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	44 0f       	add	r20, r20
    13a6:	55 1f       	adc	r21, r21
    13a8:	69 ed       	ldi	r22, 0xD9	; 217
    13aa:	71 e2       	ldi	r23, 0x21	; 33
    13ac:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <memcpy>
        responseSize += numPressureSensors*2;
    13b0:	80 91 01 20 	lds	r24, 0x2001
    13b4:	88 0f       	add	r24, r24
    13b6:	08 0f       	add	r16, r24
    }
    
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3+responseSize;
    13b8:	80 2f       	mov	r24, r16
    13ba:	8d 5f       	subi	r24, 0xFD	; 253
    13bc:	f6 01       	movw	r30, r12
    13be:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = DATA_COLLECTION_OPCODE;
    13c0:	11 82       	std	Z+1, r1	; 0x01
    outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    13c2:	12 82       	std	Z+2, r1	; 0x02
    outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
    13c4:	10 e0       	ldi	r17, 0x00	; 0
    13c6:	b8 01       	movw	r22, r16
    13c8:	6d 5f       	subi	r22, 0xFD	; 253
    13ca:	7f 4f       	sbci	r23, 0xFF	; 255
    13cc:	76 01       	movw	r14, r12
    13ce:	e6 0e       	add	r14, r22
    13d0:	f7 1e       	adc	r15, r23
    13d2:	c6 01       	movw	r24, r12
    13d4:	0e 94 7e 03 	call	0x6fc	; 0x6fc <computeChecksum>
    13d8:	f7 01       	movw	r30, r14
    13da:	80 83       	st	Z, r24
    return 4+responseSize;
    13dc:	c8 01       	movw	r24, r16
    13de:	04 96       	adiw	r24, 0x04	; 4
  opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;

  switch(opcode)
  {
      case DATA_COLLECTION_OPCODE:
          return handleCollectionCommand(commandPacket,outputBuffer);
    13e0:	95 c0       	rjmp	.+298    	; 0x150c <processCommand+0x2aa>
    uint8_t opcode;
    uint8_t address;
    uint8_t responseSize = 4;

    opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    address = commandPacket[COMMAND_OFFSET] & 0x1F;
    13e2:	8f 71       	andi	r24, 0x1F	; 31

    switch(opcode)
    13e4:	90 37       	cpi	r25, 0x70	; 112
    13e6:	51 f0       	breq	.+20     	; 0x13fc <processCommand+0x19a>
    13e8:	91 37       	cpi	r25, 0x71	; 113
    13ea:	18 f4       	brcc	.+6      	; 0x13f2 <processCommand+0x190>
    13ec:	90 36       	cpi	r25, 0x60	; 96
    13ee:	59 f5       	brne	.+86     	; 0x1446 <processCommand+0x1e4>
    13f0:	05 c0       	rjmp	.+10     	; 0x13fc <processCommand+0x19a>
    13f2:	90 38       	cpi	r25, 0x80	; 128
    13f4:	d1 f0       	breq	.+52     	; 0x142a <processCommand+0x1c8>
    13f6:	90 39       	cpi	r25, 0x90	; 144
    13f8:	31 f5       	brne	.+76     	; 0x1446 <processCommand+0x1e4>
    13fa:	17 c0       	rjmp	.+46     	; 0x142a <processCommand+0x1c8>
    {
        case MOTOR_PARAMETER_RE_L_OPCODE:
        case MOTOR_PARAMETER_RE_H_OPCODE:
            // Read 4 bytes of data
            ReadIntFromEEPROM(address, &outputBuffer[RESPONSE_PAYLOAD_OFFSET]);
    13fc:	b6 01       	movw	r22, r12
    13fe:	6d 5f       	subi	r22, 0xFD	; 253
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ReadIntFromEEPROM>
            // finish up the packet
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3+responseSize;
    1406:	87 e0       	ldi	r24, 0x07	; 7
    1408:	f6 01       	movw	r30, r12
    140a:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
    140c:	f8 01       	movw	r30, r16
    140e:	81 81       	ldd	r24, Z+1	; 0x01
    1410:	f6 01       	movw	r30, r12
    1412:	81 83       	std	Z+1, r24	; 0x01
            outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    1414:	12 82       	std	Z+2, r1	; 0x02
            outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
    1416:	c6 01       	movw	r24, r12
    1418:	67 e0       	ldi	r22, 0x07	; 7
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <computeChecksum>
    1420:	f6 01       	movw	r30, r12
    1422:	87 83       	std	Z+7, r24	; 0x07
            return 4+responseSize;
    1424:	88 e0       	ldi	r24, 0x08	; 8
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	71 c0       	rjmp	.+226    	; 0x150c <processCommand+0x2aa>
        case MOTOR_PARAMETER_WR_L_OPCODE:
        case MOTOR_PARAMETER_WR_H_OPCODE:

            // Write 32 bits of data
            WriteIntToEEPROM(address, &commandPacket[PAYLOAD_OFFSET]);
    142a:	b8 01       	movw	r22, r16
    142c:	6e 5f       	subi	r22, 0xFE	; 254
    142e:	7f 4f       	sbci	r23, 0xFF	; 255
    1430:	0e 94 19 08 	call	0x1032	; 0x1032 <WriteIntToEEPROM>
            
            // re-init our state
            initStateFromEEPROM();
    1434:	0e 94 4c 08 	call	0x1098	; 0x1098 <initStateFromEEPROM>
            
            // ack the command
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	f6 01       	movw	r30, r12
    143c:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
    143e:	f8 01       	movw	r30, r16
    1440:	81 81       	ldd	r24, Z+1	; 0x01
    1442:	f6 01       	movw	r30, r12
    1444:	41 c0       	rjmp	.+130    	; 0x14c8 <processCommand+0x266>
            outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
            outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
            return 4;
        default:
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	f6 01       	movw	r30, r12
    144a:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
    144c:	f8 01       	movw	r30, r16
    144e:	81 81       	ldd	r24, Z+1	; 0x01
    1450:	f6 01       	movw	r30, r12
    1452:	81 83       	std	Z+1, r24	; 0x01
    1454:	50 c0       	rjmp	.+160    	; 0x14f6 <processCommand+0x294>

static int handleCalibrationCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint16_t collectionBitfield;
    
    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    1456:	f8 01       	movw	r30, r16
    1458:	42 81       	ldd	r20, Z+2	; 0x02
    145a:	53 81       	ldd	r21, Z+3	; 0x03
    
    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
    145c:	51 ff       	sbrs	r21, 1
    145e:	10 c0       	rjmp	.+32     	; 0x1480 <processCommand+0x21e>
    1460:	a5 eb       	ldi	r26, 0xB5	; 181
    1462:	b1 e2       	ldi	r27, 0x21	; 33
    1464:	e9 e0       	ldi	r30, 0x09	; 9
    1466:	f2 e2       	ldi	r31, 0x22	; 34
    1468:	60 e0       	ldi	r22, 0x00	; 0
    {
        // zero out pressure readings with an offset
        for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
        {
            pressureDataOffset[i] = pressureData[i] + pressureDataOffset[i];
    146a:	2d 91       	ld	r18, X+
    146c:	3d 91       	ld	r19, X+
    146e:	80 81       	ld	r24, Z
    1470:	91 81       	ldd	r25, Z+1	; 0x01
    1472:	82 0f       	add	r24, r18
    1474:	93 1f       	adc	r25, r19
    1476:	81 93       	st	Z+, r24
    1478:	91 93       	st	Z+, r25
    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    
    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
    {
        // zero out pressure readings with an offset
        for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
    147a:	6f 5f       	subi	r22, 0xFF	; 255
    147c:	6c 30       	cpi	r22, 0x0C	; 12
    147e:	a9 f7       	brne	.-22     	; 0x146a <processCommand+0x208>
        {
            pressureDataOffset[i] = pressureData[i] + pressureDataOffset[i];
        }
    }
    
    if (collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
    1480:	41 ff       	sbrs	r20, 1
    1482:	08 c0       	rjmp	.+16     	; 0x1494 <processCommand+0x232>
    {
        RxCheckSumErrCnt[0] = 0;
    1484:	10 92 b1 21 	sts	0x21B1, r1
    1488:	10 92 b2 21 	sts	0x21B2, r1
        RxCheckSumErrCnt[1] = 0;
    148c:	10 92 b3 21 	sts	0x21B3, r1
    1490:	10 92 b4 21 	sts	0x21B4, r1
    }
    
    if (collectionBitfield & DATA_COLLECTION_PROXIMALJOINT_BITMASK)
    1494:	53 ff       	sbrs	r21, 3
    1496:	14 c0       	rjmp	.+40     	; 0x14c0 <processCommand+0x25e>
    {
        encoderOffset = readRawEncoder();
    1498:	0e 94 92 05 	call	0xb24	; 0xb24 <readRawEncoder>
    149c:	80 93 ad 21 	sts	0x21AD, r24
    14a0:	90 93 ae 21 	sts	0x21AE, r25
        uint32_t temp = encoderOffset;
    14a4:	aa 27       	eor	r26, r26
    14a6:	97 fd       	sbrc	r25, 7
    14a8:	a0 95       	com	r26
    14aa:	ba 2f       	mov	r27, r26
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	ab 83       	std	Y+3, r26	; 0x03
    14b2:	bc 83       	std	Y+4, r27	; 0x04
        WriteIntToEEPROM(EEPROM_ADDRESS_ENCODER_OFFSET, (uint8_t*)&temp);
    14b4:	8c e1       	ldi	r24, 0x1C	; 28
    14b6:	be 01       	movw	r22, r28
    14b8:	6f 5f       	subi	r22, 0xFF	; 255
    14ba:	7f 4f       	sbci	r23, 0xFF	; 255
    14bc:	0e 94 19 08 	call	0x1032	; 0x1032 <WriteIntToEEPROM>
    }
    
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    14c0:	83 e0       	ldi	r24, 0x03	; 3
    14c2:	f6 01       	movw	r30, r12
    14c4:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = CALIBRATION_OPCODE;
    14c6:	80 ec       	ldi	r24, 0xC0	; 192
    14c8:	81 83       	std	Z+1, r24	; 0x01
    outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    14ca:	12 82       	std	Z+2, r1	; 0x02
    14cc:	16 c0       	rjmp	.+44     	; 0x14fa <processCommand+0x298>
}

static int handleBootloaderCommand(uint8_t *commandPacket)
{

  if(0x0f & commandPacket[PAYLOAD_OFFSET]){
    14ce:	f8 01       	movw	r30, r16
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	8f 70       	andi	r24, 0x0F	; 15
    14d4:	19 f0       	breq	.+6      	; 0x14dc <processCommand+0x27a>
    BootRelay(commandPacket);
    14d6:	c8 01       	movw	r24, r16
    14d8:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <BootRelay>
  }
  else {
    // self bootload
    wdt_enable(WDT_PER_8CLK_gc);
    14dc:	93 e0       	ldi	r25, 0x03	; 3
    14de:	88 ed       	ldi	r24, 0xD8	; 216
    14e0:	08 b6       	in	r0, 0x38	; 56
    14e2:	84 bf       	out	0x34, r24	; 52
    14e4:	90 93 80 00 	sts	0x0080, r25
    14e8:	a8 95       	wdr
    14ea:	08 be       	out	0x38, r0	; 56
    14ec:	ff cf       	rjmp	.-2      	; 0x14ec <processCommand+0x28a>

      case BOOTLOADER_OPCODE:
          return handleBootloaderCommand(commandPacket);

      default:
          outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    14ee:	83 e0       	ldi	r24, 0x03	; 3
    14f0:	f6 01       	movw	r30, r12
    14f2:	80 83       	st	Z, r24
          outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = opcode;
    14f4:	91 83       	std	Z+1, r25	; 0x01
          outputBuffer[RESPONSE_STATUSCODE_OFFSET] = UNKNOWN_COMMAND;
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	82 83       	std	Z+2, r24	; 0x02
          outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
    14fa:	c6 01       	movw	r24, r12
    14fc:	63 e0       	ldi	r22, 0x03	; 3
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	0e 94 7e 03 	call	0x6fc	; 0x6fc <computeChecksum>
    1504:	f6 01       	movw	r30, r12
    1506:	83 83       	std	Z+3, r24	; 0x03
          return 4;
    1508:	84 e0       	ldi	r24, 0x04	; 4
    150a:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    150c:	68 96       	adiw	r28, 0x18	; 24
    150e:	cd bf       	out	0x3d, r28	; 61
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	df 90       	pop	r13
    1520:	cf 90       	pop	r12
    1522:	08 95       	ret

00001524 <LEDtoggle>:
    PORTC.OUT |= 0x01;
}

void LEDtoggle(void)
{
    PORTC.OUTTGL = 0x01;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	e0 e4       	ldi	r30, 0x40	; 64
    1528:	f6 e0       	ldi	r31, 0x06	; 6
    152a:	87 83       	std	Z+7, r24	; 0x07
}
    152c:	08 95       	ret

0000152e <writeRegisterSPI>:
 * Abstraction Function for ReadWriting Registers On The Accelerometer
 */
static void writeRegisterSPI(uint8_t addr, uint8_t data)
{
  uint8_t dummy;
  ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK; // chip select
    152e:	90 e8       	ldi	r25, 0x80	; 128
    1530:	e0 e0       	ldi	r30, 0x00	; 0
    1532:	f6 e0       	ldi	r31, 0x06	; 6
    1534:	96 83       	std	Z+6, r25	; 0x06

  //ADDR should be 5 bits in length.  Bit 6 should be low for single write
  //bit 7 should be low to indicate WRITE
  ACCELSPI.DATA = addr;
    1536:	e0 ec       	ldi	r30, 0xC0	; 192
    1538:	f9 e0       	ldi	r31, 0x09	; 9
    153a:	83 83       	std	Z+3, r24	; 0x03
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <writeRegisterSPI+0x14>
    dummy = ACCELSPI.DATA; } //wait for it to finish
    153e:	80 91 c3 09 	lds	r24, 0x09C3
  ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK; // chip select

  //ADDR should be 5 bits in length.  Bit 6 should be low for single write
  //bit 7 should be low to indicate WRITE
  ACCELSPI.DATA = addr;
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
    1542:	80 91 c2 09 	lds	r24, 0x09C2
    1546:	87 ff       	sbrs	r24, 7
    1548:	fa cf       	rjmp	.-12     	; 0x153e <writeRegisterSPI+0x10>
    dummy = ACCELSPI.DATA; } //wait for it to finish

  // the dummy read is needed for the SPI_IF flag to clear

  ACCELSPI.DATA = data;
    154a:	e0 ec       	ldi	r30, 0xC0	; 192
    154c:	f9 e0       	ldi	r31, 0x09	; 9
    154e:	63 83       	std	Z+3, r22	; 0x03
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <writeRegisterSPI+0x28>
    dummy = ACCELSPI.DATA; } //wait for it to finish
    1552:	80 91 c3 09 	lds	r24, 0x09C3
    dummy = ACCELSPI.DATA; } //wait for it to finish

  // the dummy read is needed for the SPI_IF flag to clear

  ACCELSPI.DATA = data;
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
    1556:	80 91 c2 09 	lds	r24, 0x09C2
    155a:	87 ff       	sbrs	r24, 7
    155c:	fa cf       	rjmp	.-12     	; 0x1552 <writeRegisterSPI+0x24>
    dummy = ACCELSPI.DATA; } //wait for it to finish

  ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK; // chip select
    155e:	80 e8       	ldi	r24, 0x80	; 128
    1560:	e0 e0       	ldi	r30, 0x00	; 0
    1562:	f6 e0       	ldi	r31, 0x06	; 6
    1564:	85 83       	std	Z+5, r24	; 0x05
  return;
}
    1566:	08 95       	ret

00001568 <configureSPIModulesAccel>:

static void writeRegisterSPI(uint8_t addr, uint8_t data);

void configureSPIModulesAccel(void)
{
  ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK; // default chip select to high
    1568:	e0 e0       	ldi	r30, 0x00	; 0
    156a:	f6 e0       	ldi	r31, 0x06	; 6
    156c:	80 e8       	ldi	r24, 0x80	; 128
    156e:	85 83       	std	Z+5, r24	; 0x05
  ACCEL_CS_PORT.DIRSET = ACCEL_CS_PIN_MASK; // make sure it is an output
    1570:	81 83       	std	Z+1, r24	; 0x01
  ACCELSPI_PORT.DIRCLR = 0x40;
    1572:	e0 e6       	ldi	r30, 0x60	; 96
    1574:	f6 e0       	ldi	r31, 0x06	; 6
    1576:	80 e4       	ldi	r24, 0x40	; 64
    1578:	82 83       	std	Z+2, r24	; 0x02
  ACCELSPI_PORT.DIRSET = 0xB0;
    157a:	80 eb       	ldi	r24, 0xB0	; 176
    157c:	81 83       	std	Z+1, r24	; 0x01
  //ACCELSPI_PORT.OUTSET = 0x10;
  ACCELSPI.INTCTRL = SPI_INTLVL_OFF_gc;
    157e:	e0 ec       	ldi	r30, 0xC0	; 192
    1580:	f9 e0       	ldi	r31, 0x09	; 9
    1582:	11 82       	std	Z+1, r1	; 0x01
  ACCELSPI.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_3_gc | SPI_PRESCALER_DIV16_gc | SPI_CLK2X_bm;
    1584:	8d ed       	ldi	r24, 0xDD	; 221
    1586:	80 83       	st	Z, r24
}
    1588:	08 95       	ret

0000158a <configAccel>:

 called once in main
 */
void configAccel(void)
{
    writeRegisterSPI(0x2D, 0x08); //switch from standby to measuring
    158a:	8d e2       	ldi	r24, 0x2D	; 45
    158c:	68 e0       	ldi	r22, 0x08	; 8
    158e:	0e 94 97 0a 	call	0x152e	; 0x152e <writeRegisterSPI>
    writeRegisterSPI(0x31, 0x0F); //set to fullscale, full resolution
    1592:	81 e3       	ldi	r24, 0x31	; 49
    1594:	6f e0       	ldi	r22, 0x0F	; 15
    1596:	0e 94 97 0a 	call	0x152e	; 0x152e <writeRegisterSPI>
}
    159a:	08 95       	ret

0000159c <readAxes>:
 * Clockout Six Databytes From ADXL345, Two Bytes Per Axis
 */
void readAxes(uint8_t *dataOut)
{
    //configureSPIModulesAccel();
    ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK;
    159c:	20 e8       	ldi	r18, 0x80	; 128
    159e:	e0 e0       	ldi	r30, 0x00	; 0
    15a0:	f6 e0       	ldi	r31, 0x06	; 6
    15a2:	26 83       	std	Z+6, r18	; 0x06

    ACCELSPI.DATA = (0x32 | 0xC0); //start at the x axis register, addr 0x32, set multibyte read with 0xC0
    15a4:	22 ef       	ldi	r18, 0xF2	; 242
    15a6:	e0 ec       	ldi	r30, 0xC0	; 192
    15a8:	f9 e0       	ldi	r31, 0x09	; 9
    15aa:	23 83       	std	Z+3, r18	; 0x03
    while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for it to finish
    15ac:	20 91 c2 09 	lds	r18, 0x09C2
    15b0:	27 ff       	sbrs	r18, 7
    15b2:	fc cf       	rjmp	.-8      	; 0x15ac <readAxes+0x10>
    15b4:	fc 01       	movw	r30, r24
    15b6:	86 e0       	ldi	r24, 0x06	; 6

    for (uint8_t i = 0; i < 6; i++)
    {
        ACCELSPI.DATA = 0x00; //clockout
    15b8:	a0 ec       	ldi	r26, 0xC0	; 192
    15ba:	b9 e0       	ldi	r27, 0x09	; 9
    15bc:	13 96       	adiw	r26, 0x03	; 3
    15be:	1c 92       	st	X, r1
    15c0:	13 97       	sbiw	r26, 0x03	; 3
        while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for clockout to finish
    15c2:	90 91 c2 09 	lds	r25, 0x09C2
    15c6:	97 ff       	sbrs	r25, 7
    15c8:	fc cf       	rjmp	.-8      	; 0x15c2 <readAxes+0x26>
        dataOut[i] = ACCELSPI.DATA; //store
    15ca:	90 91 c3 09 	lds	r25, 0x09C3
    15ce:	91 93       	st	Z+, r25
    15d0:	81 50       	subi	r24, 0x01	; 1
    ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK;

    ACCELSPI.DATA = (0x32 | 0xC0); //start at the x axis register, addr 0x32, set multibyte read with 0xC0
    while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for it to finish

    for (uint8_t i = 0; i < 6; i++)
    15d2:	a1 f7       	brne	.-24     	; 0x15bc <readAxes+0x20>
        ACCELSPI.DATA = 0x00; //clockout
        while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for clockout to finish
        dataOut[i] = ACCELSPI.DATA; //store
    }

    ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK;
    15d4:	80 e8       	ldi	r24, 0x80	; 128
    15d6:	e0 e0       	ldi	r30, 0x00	; 0
    15d8:	f6 e0       	ldi	r31, 0x06	; 6
    15da:	85 83       	std	Z+5, r24	; 0x05
    return;
}
    15dc:	08 95       	ret

000015de <main>:
*
* This initializes the other port modules and polls a few volatile status
* bits set in ISRs.
************************************************************************/
int main(void)
{
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <main+0x6>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <main+0x8>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    cli();                                    //disable all interrupts for clock reset
    15ea:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ec:	8f e3       	ldi	r24, 0x3F	; 63
    15ee:	9f e1       	ldi	r25, 0x1F	; 31
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <main+0x12>
    15f4:	00 c0       	rjmp	.+0      	; 0x15f6 <main+0x18>
    15f6:	00 00       	nop
* is running.  This will feed a 1.024 kHz clock to the RTC.
* The system clock will use the onboard 32MHz oscillator
************************************************************************/
static void configureClocks(void)
{
    OSC.CTRL = OSC_RC32MEN_bm | OSC_RC32KEN_bm;            //enable the 32MHz ring oscillator and the 32kHz RTC oscillator
    15f8:	86 e0       	ldi	r24, 0x06	; 6
    15fa:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm));                //wait for 32MHz to stabilize
    15fe:	80 91 51 00 	lds	r24, 0x0051
    1602:	81 ff       	sbrs	r24, 1
    1604:	fc cf       	rjmp	.-8      	; 0x15fe <main+0x20>
    while(!(OSC.STATUS & OSC_RC32KRDY_bm));                //wait for 32kHz to stabilize
    1606:	80 91 51 00 	lds	r24, 0x0051
    160a:	82 ff       	sbrs	r24, 2
    160c:	fc cf       	rjmp	.-8      	; 0x1606 <main+0x28>

    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	80 93 60 00 	sts	0x0060, r24
    DFLLRC2M.CTRL = DFLL_ENABLE_bm;
    1614:	80 93 68 00 	sts	0x0068, r24

    CCP = CCP_IOREG_gc;                                    //clock is protected by Configuration Change Protection - must be properly disabled to change clock source
    1618:	98 ed       	ldi	r25, 0xD8	; 216
    161a:	94 bf       	out	0x34, r25	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;                    //switch to 32MHz oscillator
    161c:	80 93 40 00 	sts	0x0040, r24
    CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;    //Select 1.024 kHz from internal oscillator for RTC clock source
    1620:	85 e0       	ldi	r24, 0x05	; 5
    1622:	e0 e4       	ldi	r30, 0x40	; 64
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	83 83       	std	Z+3, r24	; 0x03
    1628:	8f e3       	ldi	r24, 0x3F	; 63
    162a:	9f e1       	ldi	r25, 0x1F	; 31
    162c:	01 97       	sbiw	r24, 0x01	; 1
    162e:	f1 f7       	brne	.-4      	; 0x162c <main+0x4e>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <main+0x54>
    1632:	00 00       	nop
{
    cli();                                    //disable all interrupts for clock reset
    _delay_ms(1); // for stability of supplies
    configureClocks();
    _delay_ms(1); // for stability of clocks
    configurePortIOProximal();
    1634:	0e 94 06 06 	call	0xc0c	; 0xc0c <configurePortIOProximal>

    LEDon();
    1638:	0e 94 40 08 	call	0x1080	; 0x1080 <LEDon>

    //PORTE.OUT &= ~0x01; //BA: turn on sensor board

    configureADC();
    163c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <configureADC>

    configureDaisyUSART();
    1640:	0e 94 07 04 	call	0x80e	; 0x80e <configureDaisyUSART>

    initTactileModule(); // initialize variables of the tactile buffer
    1644:	0e 94 b6 06 	call	0xd6c	; 0xd6c <initTactileModule>

    PMIC.CTRL |= PMIC_LOLVLEN_bm; //tell event system to pay attention to low-priority interrupts
    1648:	80 91 a2 00 	lds	r24, 0x00A2
    164c:	81 60       	ori	r24, 0x01	; 1
    164e:	e0 ea       	ldi	r30, 0xA0	; 160
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	82 83       	std	Z+2, r24	; 0x02
    sei();
    1654:	78 94       	sei

    configureSPIModulesPressure();
    1656:	0e 94 b0 06 	call	0xd60	; 0xd60 <configureSPIModulesPressure>
    collectAllCalibrationValues();
    165a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <collectAllCalibrationValues>

    configureSPIModulesAccel();
    165e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <configureSPIModulesAccel>
    configAccel();
    1662:	0e 94 c5 0a 	call	0x158a	; 0x158a <configAccel>

    LEDoff();
    1666:	0e 94 46 08 	call	0x108c	; 0x108c <LEDoff>

    initStateFromEEPROM();
    166a:	0e 94 4c 08 	call	0x1098	; 0x1098 <initStateFromEEPROM>
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
}

static void verifyVersion(void)
{
    uint32_t readversion = 0;
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	1a 82       	std	Y+2, r1	; 0x02
    1672:	1b 82       	std	Y+3, r1	; 0x03
    1674:	1c 82       	std	Y+4, r1	; 0x04
    ReadIntFromEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    1676:	8d e1       	ldi	r24, 0x1D	; 29
    1678:	be 01       	movw	r22, r28
    167a:	6f 5f       	subi	r22, 0xFF	; 255
    167c:	7f 4f       	sbci	r23, 0xFF	; 255
    167e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <ReadIntFromEEPROM>
    if (readversion != FIRMWARE_VERSION)
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	9a 81       	ldd	r25, Y+2	; 0x02
    1686:	ab 81       	ldd	r26, Y+3	; 0x03
    1688:	bc 81       	ldd	r27, Y+4	; 0x04
    168a:	8d 32       	cpi	r24, 0x2D	; 45
    168c:	21 e0       	ldi	r18, 0x01	; 1
    168e:	92 07       	cpc	r25, r18
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	a2 07       	cpc	r26, r18
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	b2 07       	cpc	r27, r18
    1698:	71 f0       	breq	.+28     	; 0x16b6 <main+0xd8>
    {
        readversion = FIRMWARE_VERSION;
    169a:	8d e2       	ldi	r24, 0x2D	; 45
    169c:	91 e0       	ldi	r25, 0x01	; 1
    169e:	a0 e0       	ldi	r26, 0x00	; 0
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	9a 83       	std	Y+2, r25	; 0x02
    16a6:	ab 83       	std	Y+3, r26	; 0x03
    16a8:	bc 83       	std	Y+4, r27	; 0x04
        WriteIntToEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    16aa:	8d e1       	ldi	r24, 0x1D	; 29
    16ac:	be 01       	movw	r22, r28
    16ae:	6f 5f       	subi	r22, 0xFF	; 255
    16b0:	7f 4f       	sbci	r23, 0xFF	; 255
    16b2:	0e 94 19 08 	call	0x1032	; 0x1032 <WriteIntToEEPROM>
    initStateFromEEPROM();
    verifyVersion();
    
    while(1){
        
        if(notifyDaisy)
    16b6:	80 91 03 20 	lds	r24, 0x2003
    16ba:	88 23       	and	r24, r24
    16bc:	11 f0       	breq	.+4      	; 0x16c2 <main+0xe4>
        {
            doDaisyTask();
    16be:	0e 94 34 04 	call	0x868	; 0x868 <doDaisyTask>
        }
        handleTC();
    16c2:	0e 94 94 02 	call	0x528	; 0x528 <handleTC>

        if(tactReady)
    16c6:	80 91 b0 21 	lds	r24, 0x21B0
    16ca:	88 23       	and	r24, r24
    16cc:	a1 f3       	breq	.-24     	; 0x16b6 <main+0xd8>
        {
            doTactSensors();
    16ce:	0e 94 6b 07 	call	0xed6	; 0xed6 <doTactSensors>
    16d2:	f1 cf       	rjmp	.-30     	; 0x16b6 <main+0xd8>

000016d4 <memcpy>:
    16d4:	fb 01       	movw	r30, r22
    16d6:	dc 01       	movw	r26, r24
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <memcpy+0xa>
    16da:	01 90       	ld	r0, Z+
    16dc:	0d 92       	st	X+, r0
    16de:	41 50       	subi	r20, 0x01	; 1
    16e0:	50 40       	sbci	r21, 0x00	; 0
    16e2:	d8 f7       	brcc	.-10     	; 0x16da <memcpy+0x6>
    16e4:	08 95       	ret

000016e6 <__eerd_byte_x32a4u>:
    16e6:	03 d0       	rcall	.+6      	; 0x16ee <eeprom_mapen>
    16e8:	80 81       	ld	r24, Z
    16ea:	99 27       	eor	r25, r25
    16ec:	08 95       	ret

000016ee <eeprom_mapen>:
    16ee:	e0 ec       	ldi	r30, 0xC0	; 192
    16f0:	f1 e0       	ldi	r31, 0x01	; 1
    16f2:	37 85       	ldd	r19, Z+15	; 0x0f
    16f4:	37 fd       	sbrc	r19, 7
    16f6:	fd cf       	rjmp	.-6      	; 0x16f2 <eeprom_mapen+0x4>
    16f8:	34 85       	ldd	r19, Z+12	; 0x0c
    16fa:	38 60       	ori	r19, 0x08	; 8
    16fc:	34 87       	std	Z+12, r19	; 0x0c
    16fe:	fc 01       	movw	r30, r24
    1700:	e0 50       	subi	r30, 0x00	; 0
    1702:	f0 4f       	sbci	r31, 0xF0	; 240
    1704:	08 95       	ret

00001706 <__eewr_byte_x32a4u>:
    1706:	26 2f       	mov	r18, r22

00001708 <__eewr_r18_x32a4u>:
    1708:	e0 ec       	ldi	r30, 0xC0	; 192
    170a:	f1 e0       	ldi	r31, 0x01	; 1
    170c:	37 85       	ldd	r19, Z+15	; 0x0f
    170e:	37 fd       	sbrc	r19, 7
    1710:	fd cf       	rjmp	.-6      	; 0x170c <__eewr_r18_x32a4u+0x4>
    1712:	34 85       	ldd	r19, Z+12	; 0x0c
    1714:	37 7f       	andi	r19, 0xF7	; 247
    1716:	34 87       	std	Z+12, r19	; 0x0c
    1718:	37 85       	ldd	r19, Z+15	; 0x0f
    171a:	31 ff       	sbrs	r19, 1
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <__eewr_r18_x32a4u+0x28>
    171e:	36 e3       	ldi	r19, 0x36	; 54
    1720:	32 87       	std	Z+10, r19	; 0x0a
    1722:	38 ed       	ldi	r19, 0xD8	; 216
    1724:	34 bf       	out	0x34, r19	; 52
    1726:	31 e0       	ldi	r19, 0x01	; 1
    1728:	33 87       	std	Z+11, r19	; 0x0b
    172a:	37 85       	ldd	r19, Z+15	; 0x0f
    172c:	37 fd       	sbrc	r19, 7
    172e:	fd cf       	rjmp	.-6      	; 0x172a <__eewr_r18_x32a4u+0x22>
    1730:	33 e3       	ldi	r19, 0x33	; 51
    1732:	32 87       	std	Z+10, r19	; 0x0a
    1734:	80 83       	st	Z, r24
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	12 82       	std	Z+2, r1	; 0x02
    173a:	24 83       	std	Z+4, r18	; 0x04
    173c:	25 e3       	ldi	r18, 0x35	; 53
    173e:	22 87       	std	Z+10, r18	; 0x0a
    1740:	28 ed       	ldi	r18, 0xD8	; 216
    1742:	31 e0       	ldi	r19, 0x01	; 1
    1744:	24 bf       	out	0x34, r18	; 52
    1746:	33 87       	std	Z+11, r19	; 0x0b
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	08 95       	ret

0000174c <_exit>:
    174c:	f8 94       	cli

0000174e <__stop_program>:
    174e:	ff cf       	rjmp	.-2      	; 0x174e <__stop_program>
