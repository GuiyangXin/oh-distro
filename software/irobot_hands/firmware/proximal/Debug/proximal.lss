
proximal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  000019fe  00001a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000021f  00802002  00802002  00001a94  2**0
                  ALLOC
  3 .stab         00000a2c  00000000  00000000  00001a94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001ad  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000168  00000000  00000000  00002670  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004992  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e87  00000000  00000000  0000716a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001389  00000000  00000000  00007ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  0000937c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c95  00000000  00000000  00009948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016bb  00000000  00000000  0000c5dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000dc98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 78 03 	jmp	0x6f0	; 0x6f0 <__vector_6>
      1c:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_7>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_14>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__vector_20>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 a3 03 	jmp	0x746	; 0x746 <__vector_60>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_88>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_90>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ee ef       	ldi	r30, 0xFE	; 254
     210:	f9 e1       	ldi	r31, 0x19	; 25
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a2 30       	cpi	r26, 0x02	; 2
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	12 e2       	ldi	r17, 0x22	; 34
     220:	a2 e0       	ldi	r26, 0x02	; 2
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a1 32       	cpi	r26, 0x21	; 33
     22a:	b1 07       	cpc	r27, r17
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 2a 0c 	call	0x1854	; 0x1854 <main>
     232:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <writeRegisterSPI>:
 * Abstraction Function for ReadWriting Registers On The Accelerometer
 */
static void writeRegisterSPI(uint8_t addr, uint8_t data)
{
  uint8_t dummy;
  ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK; // chip select
     23a:	90 e8       	ldi	r25, 0x80	; 128
     23c:	e0 e0       	ldi	r30, 0x00	; 0
     23e:	f6 e0       	ldi	r31, 0x06	; 6
     240:	96 83       	std	Z+6, r25	; 0x06

  //ADDR should be 5 bits in length.  Bit 6 should be low for single write
  //bit 7 should be low to indicate WRITE
  ACCELSPI.DATA = addr;
     242:	e0 ec       	ldi	r30, 0xC0	; 192
     244:	f9 e0       	ldi	r31, 0x09	; 9
     246:	83 83       	std	Z+3, r24	; 0x03
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
     248:	02 c0       	rjmp	.+4      	; 0x24e <writeRegisterSPI+0x14>
    dummy = ACCELSPI.DATA; } //wait for it to finish
     24a:	80 91 c3 09 	lds	r24, 0x09C3
  ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK; // chip select

  //ADDR should be 5 bits in length.  Bit 6 should be low for single write
  //bit 7 should be low to indicate WRITE
  ACCELSPI.DATA = addr;
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
     24e:	80 91 c2 09 	lds	r24, 0x09C2
     252:	87 ff       	sbrs	r24, 7
     254:	fa cf       	rjmp	.-12     	; 0x24a <writeRegisterSPI+0x10>
    dummy = ACCELSPI.DATA; } //wait for it to finish

  // the dummy read is needed for the SPI_IF flag to clear

  ACCELSPI.DATA = data;
     256:	e0 ec       	ldi	r30, 0xC0	; 192
     258:	f9 e0       	ldi	r31, 0x09	; 9
     25a:	63 83       	std	Z+3, r22	; 0x03
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
     25c:	02 c0       	rjmp	.+4      	; 0x262 <writeRegisterSPI+0x28>
    dummy = ACCELSPI.DATA; } //wait for it to finish
     25e:	80 91 c3 09 	lds	r24, 0x09C3
    dummy = ACCELSPI.DATA; } //wait for it to finish

  // the dummy read is needed for the SPI_IF flag to clear

  ACCELSPI.DATA = data;
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
     262:	80 91 c2 09 	lds	r24, 0x09C2
     266:	87 ff       	sbrs	r24, 7
     268:	fa cf       	rjmp	.-12     	; 0x25e <writeRegisterSPI+0x24>
    dummy = ACCELSPI.DATA; } //wait for it to finish

  ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK; // chip select
     26a:	80 e8       	ldi	r24, 0x80	; 128
     26c:	e0 e0       	ldi	r30, 0x00	; 0
     26e:	f6 e0       	ldi	r31, 0x06	; 6
     270:	85 83       	std	Z+5, r24	; 0x05
  return;
}
     272:	08 95       	ret

00000274 <configureSPIModulesAccel>:

static void writeRegisterSPI(uint8_t addr, uint8_t data);

void configureSPIModulesAccel(void)
{
  ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK; // default chip select to high
     274:	e0 e0       	ldi	r30, 0x00	; 0
     276:	f6 e0       	ldi	r31, 0x06	; 6
     278:	80 e8       	ldi	r24, 0x80	; 128
     27a:	85 83       	std	Z+5, r24	; 0x05
  ACCEL_CS_PORT.DIRSET = ACCEL_CS_PIN_MASK; // make sure it is an output
     27c:	81 83       	std	Z+1, r24	; 0x01
  ACCELSPI_PORT.DIRCLR = 0x40;
     27e:	e0 e6       	ldi	r30, 0x60	; 96
     280:	f6 e0       	ldi	r31, 0x06	; 6
     282:	80 e4       	ldi	r24, 0x40	; 64
     284:	82 83       	std	Z+2, r24	; 0x02
  ACCELSPI_PORT.DIRSET = 0xB0;
     286:	80 eb       	ldi	r24, 0xB0	; 176
     288:	81 83       	std	Z+1, r24	; 0x01
  //ACCELSPI_PORT.OUTSET = 0x10;
  ACCELSPI.INTCTRL = SPI_INTLVL_OFF_gc;
     28a:	e0 ec       	ldi	r30, 0xC0	; 192
     28c:	f9 e0       	ldi	r31, 0x09	; 9
     28e:	11 82       	std	Z+1, r1	; 0x01
  ACCELSPI.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_3_gc | SPI_PRESCALER_DIV16_gc | SPI_CLK2X_bm;
     290:	8d ed       	ldi	r24, 0xDD	; 221
     292:	80 83       	st	Z, r24
}
     294:	08 95       	ret

00000296 <configAccel>:

 called once in main
 */
void configAccel(void)
{
    writeRegisterSPI(0x2D, 0x08); //switch from standby to measuring
     296:	8d e2       	ldi	r24, 0x2D	; 45
     298:	68 e0       	ldi	r22, 0x08	; 8
     29a:	0e 94 1d 01 	call	0x23a	; 0x23a <writeRegisterSPI>
    writeRegisterSPI(0x31, 0x0F); //set to fullscale, full resolution
     29e:	81 e3       	ldi	r24, 0x31	; 49
     2a0:	6f e0       	ldi	r22, 0x0F	; 15
     2a2:	0e 94 1d 01 	call	0x23a	; 0x23a <writeRegisterSPI>
}
     2a6:	08 95       	ret

000002a8 <readAxes>:
 * Clockout Six Databytes From ADXL345, Two Bytes Per Axis
 */
void readAxes(uint8_t *dataOut)
{
    //configureSPIModulesAccel();
    ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK;
     2a8:	20 e8       	ldi	r18, 0x80	; 128
     2aa:	e0 e0       	ldi	r30, 0x00	; 0
     2ac:	f6 e0       	ldi	r31, 0x06	; 6
     2ae:	26 83       	std	Z+6, r18	; 0x06

    ACCELSPI.DATA = (0x32 | 0xC0); //start at the x axis register, addr 0x32, set multibyte read with 0xC0
     2b0:	22 ef       	ldi	r18, 0xF2	; 242
     2b2:	e0 ec       	ldi	r30, 0xC0	; 192
     2b4:	f9 e0       	ldi	r31, 0x09	; 9
     2b6:	23 83       	std	Z+3, r18	; 0x03
    while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     2b8:	20 91 c2 09 	lds	r18, 0x09C2
     2bc:	27 ff       	sbrs	r18, 7
     2be:	fc cf       	rjmp	.-8      	; 0x2b8 <readAxes+0x10>
     2c0:	fc 01       	movw	r30, r24
     2c2:	86 e0       	ldi	r24, 0x06	; 6

    for (uint8_t i = 0; i < 6; i++)
    {
        ACCELSPI.DATA = 0x00; //clockout
     2c4:	a0 ec       	ldi	r26, 0xC0	; 192
     2c6:	b9 e0       	ldi	r27, 0x09	; 9
     2c8:	13 96       	adiw	r26, 0x03	; 3
     2ca:	1c 92       	st	X, r1
     2cc:	13 97       	sbiw	r26, 0x03	; 3
        while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for clockout to finish
     2ce:	90 91 c2 09 	lds	r25, 0x09C2
     2d2:	97 ff       	sbrs	r25, 7
     2d4:	fc cf       	rjmp	.-8      	; 0x2ce <readAxes+0x26>
        dataOut[i] = ACCELSPI.DATA; //store
     2d6:	90 91 c3 09 	lds	r25, 0x09C3
     2da:	91 93       	st	Z+, r25
     2dc:	81 50       	subi	r24, 0x01	; 1
    ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK;

    ACCELSPI.DATA = (0x32 | 0xC0); //start at the x axis register, addr 0x32, set multibyte read with 0xC0
    while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for it to finish

    for (uint8_t i = 0; i < 6; i++)
     2de:	a1 f7       	brne	.-24     	; 0x2c8 <readAxes+0x20>
        ACCELSPI.DATA = 0x00; //clockout
        while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for clockout to finish
        dataOut[i] = ACCELSPI.DATA; //store
    }

    ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK;
     2e0:	80 e8       	ldi	r24, 0x80	; 128
     2e2:	e0 e0       	ldi	r30, 0x00	; 0
     2e4:	f6 e0       	ldi	r31, 0x06	; 6
     2e6:	85 83       	std	Z+5, r24	; 0x05
    return;
}
     2e8:	08 95       	ret

000002ea <captureSweep>:
    return;
}
*/

void captureSweep(int16_t *outputData)
{
     2ea:	fc 01       	movw	r30, r24
    //Begin sampling on the Distal
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     2ec:	88 e0       	ldi	r24, 0x08	; 8
     2ee:	80 93 21 02 	sts	0x0221, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     2f2:	80 e1       	ldi	r24, 0x10	; 16
     2f4:	80 93 29 02 	sts	0x0229, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     2f8:	88 e1       	ldi	r24, 0x18	; 24
     2fa:	80 93 31 02 	sts	0x0231, r24
    ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
     2fe:	80 e2       	ldi	r24, 0x20	; 32
     300:	80 93 39 02 	sts	0x0239, r24

    asm("nop"); // delay for mux switch
     304:	00 00       	nop
    asm("nop");
     306:	00 00       	nop

    ADCA.CTRLA = ADC_CH3START_bm | ADC_CH2START_bm | ADC_CH1START_bm | ADC_CH0START_bm | ADC_ENABLE_bm;
     308:	8d e3       	ldi	r24, 0x3D	; 61
     30a:	80 93 00 02 	sts	0x0200, r24

    //Now wait for the conclusion of the sampling
    while(!(ADCA.INTFLAGS & ADC_CH3IF_bm));
     30e:	80 91 06 02 	lds	r24, 0x0206
     312:	83 ff       	sbrs	r24, 3
     314:	fc cf       	rjmp	.-8      	; 0x30e <captureSweep+0x24>
    while(!(ADCA.INTFLAGS & ADC_CH2IF_bm));
     316:	80 91 06 02 	lds	r24, 0x0206
     31a:	82 ff       	sbrs	r24, 2
     31c:	fc cf       	rjmp	.-8      	; 0x316 <captureSweep+0x2c>
    while(!(ADCA.INTFLAGS & ADC_CH1IF_bm));
     31e:	80 91 06 02 	lds	r24, 0x0206
     322:	81 ff       	sbrs	r24, 1
     324:	fc cf       	rjmp	.-8      	; 0x31e <captureSweep+0x34>
    while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
     326:	80 91 06 02 	lds	r24, 0x0206
     32a:	80 ff       	sbrs	r24, 0
     32c:	fc cf       	rjmp	.-8      	; 0x326 <captureSweep+0x3c>

    //Sampling complete
    outputData[0] = ADCA.CH0RES;
     32e:	80 91 10 02 	lds	r24, 0x0210
     332:	90 91 11 02 	lds	r25, 0x0211
     336:	80 83       	st	Z, r24
     338:	91 83       	std	Z+1, r25	; 0x01
    outputData[1] = ADCA.CH1RES;
     33a:	80 91 12 02 	lds	r24, 0x0212
     33e:	90 91 13 02 	lds	r25, 0x0213
     342:	82 83       	std	Z+2, r24	; 0x02
     344:	93 83       	std	Z+3, r25	; 0x03
    outputData[2] = ADCA.CH2RES;
     346:	80 91 14 02 	lds	r24, 0x0214
     34a:	90 91 15 02 	lds	r25, 0x0215
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
    outputData[3] = ADCA.CH3RES;
     352:	80 91 16 02 	lds	r24, 0x0216
     356:	90 91 17 02 	lds	r25, 0x0217
     35a:	86 83       	std	Z+6, r24	; 0x06
     35c:	97 83       	std	Z+7, r25	; 0x07

    ADCA.INTFLAGS = ADC_CH3IF_bm | ADC_CH2IF_bm | ADC_CH1IF_bm | ADC_CH0IF_bm;
     35e:	8f e0       	ldi	r24, 0x0F	; 15
     360:	a0 e0       	ldi	r26, 0x00	; 0
     362:	b2 e0       	ldi	r27, 0x02	; 2
     364:	16 96       	adiw	r26, 0x06	; 6
     366:	8c 93       	st	X, r24
     368:	16 97       	sbiw	r26, 0x06	; 6

    //Begin sampling on the Dynamic
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;
     36a:	88 e2       	ldi	r24, 0x28	; 40
     36c:	80 93 21 02 	sts	0x0221, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN6_gc;
     370:	80 e3       	ldi	r24, 0x30	; 48
     372:	80 93 29 02 	sts	0x0229, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;
     376:	88 e3       	ldi	r24, 0x38	; 56
     378:	80 93 31 02 	sts	0x0231, r24

    asm("nop"); // delay for mux switch
     37c:	00 00       	nop
    asm("nop");
     37e:	00 00       	nop

    ADCA.CTRLA = ADC_CH2START_bm | ADC_CH1START_bm | ADC_CH0START_bm | ADC_ENABLE_bm;
     380:	8d e1       	ldi	r24, 0x1D	; 29
     382:	80 93 00 02 	sts	0x0200, r24

    //Now wait for the conclusion of the sampling
    while(!(ADCA.INTFLAGS & ADC_CH2IF_bm));
     386:	80 91 06 02 	lds	r24, 0x0206
     38a:	82 ff       	sbrs	r24, 2
     38c:	fc cf       	rjmp	.-8      	; 0x386 <captureSweep+0x9c>
    while(!(ADCA.INTFLAGS & ADC_CH1IF_bm));
     38e:	80 91 06 02 	lds	r24, 0x0206
     392:	81 ff       	sbrs	r24, 1
     394:	fc cf       	rjmp	.-8      	; 0x38e <captureSweep+0xa4>
    while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
     396:	80 91 06 02 	lds	r24, 0x0206
     39a:	80 ff       	sbrs	r24, 0
     39c:	fc cf       	rjmp	.-8      	; 0x396 <captureSweep+0xac>

    //Sampling complete
    outputData[4] = ADCA.CH0RES;
     39e:	80 91 10 02 	lds	r24, 0x0210
     3a2:	90 91 11 02 	lds	r25, 0x0211
     3a6:	80 87       	std	Z+8, r24	; 0x08
     3a8:	91 87       	std	Z+9, r25	; 0x09
    outputData[5] = ADCA.CH1RES;
     3aa:	80 91 12 02 	lds	r24, 0x0212
     3ae:	90 91 13 02 	lds	r25, 0x0213
     3b2:	82 87       	std	Z+10, r24	; 0x0a
     3b4:	93 87       	std	Z+11, r25	; 0x0b
    outputData[6] = ADCA.CH2RES;
     3b6:	80 91 14 02 	lds	r24, 0x0214
     3ba:	90 91 15 02 	lds	r25, 0x0215
     3be:	84 87       	std	Z+12, r24	; 0x0c
     3c0:	95 87       	std	Z+13, r25	; 0x0d

    ADCA.INTFLAGS = ADC_CH2IF_bm | ADC_CH1IF_bm | ADC_CH0IF_bm;
     3c2:	87 e0       	ldi	r24, 0x07	; 7
     3c4:	e0 e0       	ldi	r30, 0x00	; 0
     3c6:	f2 e0       	ldi	r31, 0x02	; 2
     3c8:	86 83       	std	Z+6, r24	; 0x06

    return;
}
     3ca:	08 95       	ret

000003cc <configureADC>:
*
* Note that an internal reference is being used in this test setup.
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     3d0:	aa ec       	ldi	r26, 0xCA	; 202
     3d2:	b1 e0       	ldi	r27, 0x01	; 1
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	8c 93       	st	X, r24
    result = pgm_read_byte(index);
     3d8:	e0 e2       	ldi	r30, 0x20	; 32
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     3de:	1c 92       	st	X, r1
* Note that an internal reference is being used in this test setup.
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
    ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     3e0:	c0 e0       	ldi	r28, 0x00	; 0
     3e2:	d2 e0       	ldi	r29, 0x02	; 2
     3e4:	ec 87       	std	Y+12, r30	; 0x0c
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     3e6:	8c 93       	st	X, r24
    result = pgm_read_byte(index);
     3e8:	e1 e2       	ldi	r30, 0x21	; 33
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     3ee:	1c 92       	st	X, r1
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
    ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
    ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     3f0:	ed 87       	std	Y+13, r30	; 0x0d
    //EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;

    //ADCA.EVCTRL = ADC_SWEEP_0123_gc | ADC_EVSEL_3456_gc | ADC_EVACT_SWEEP_gc;

    //Maximum ADC clock is 2 MHz.  This requires a prescaler of 16 on a CPU clock of 32 MHz
    ADCA.PRESCALER = ADC_PRESCALER_DIV16_gc;
     3f2:	8c 83       	std	Y+4, r24	; 0x04
    //CURRENT_ADC.PRESCALER = ADC_PRESCALER_DIV256_gc;

#ifdef USE_INTERNAL_REF
    ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
#else
    ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
     3f4:	20 e2       	ldi	r18, 0x20	; 32
     3f6:	2a 83       	std	Y+2, r18	; 0x02
#endif

#warning The ADC.CH structure is wrong in AU parts.  Just use the ADC_CH0_MUXCTRL, etc. defines instead

    //CH0 is Distal 1 and Dynamic 1
    ADCA_CH0_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	80 93 20 02 	sts	0x0220, r24
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     3fe:	98 e0       	ldi	r25, 0x08	; 8
     400:	90 93 21 02 	sts	0x0221, r25
    ADCA_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     404:	10 92 22 02 	sts	0x0222, r1

    //CH1 is Distal 2 and Dynamic 2
    ADCA_CH1_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     408:	80 93 28 02 	sts	0x0228, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     40c:	90 e1       	ldi	r25, 0x10	; 16
     40e:	90 93 29 02 	sts	0x0229, r25
    ADCA_CH1_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     412:	10 92 2a 02 	sts	0x022A, r1

    //CH2 is Distal 3 and Dynamic 3
    ADCA_CH2_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     416:	80 93 30 02 	sts	0x0230, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     41a:	38 e1       	ldi	r19, 0x18	; 24
     41c:	30 93 31 02 	sts	0x0231, r19
    ADCA_CH2_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     420:	10 92 32 02 	sts	0x0232, r1

    //CH3 is Distal 4 only
    ADCA_CH3_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     424:	80 93 38 02 	sts	0x0238, r24
    ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
     428:	20 93 39 02 	sts	0x0239, r18
    ADCA_CH3_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     42c:	10 92 3a 02 	sts	0x023A, r1

    //Configure for signed operation
    ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
     430:	99 83       	std	Y+1, r25	; 0x01
    ADCA.CTRLA = ADC_ENABLE_bm;
     432:	88 83       	st	Y, r24
    //ADC_TC.CTRLE = 0x00;
    //ADC_TC.PERBUF = 3125;
    //ADC_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
    //ADC_TC.CTRLA = TC_CLKSEL_DIV1024_gc;

}
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	08 95       	ret

0000043a <prepareDMAChannel>:
* it into the buffer targetBuffer.
*
* This should be called before fireDMAChannel()
************************************************************************/
static void prepareDMAChannel(DMA_CH_t *selectedChannel, uint8_t usartTrigger, USART_t *targetUSART, volatile uint8_t *targetBuffer, uint8_t isOutbound)
{
     43a:	0f 93       	push	r16
     43c:	fc 01       	movw	r30, r24
     43e:	da 01       	movw	r26, r20
    //Configure the chosen channel to read from a fixed UART into a linear array
    if(isOutbound)
     440:	00 23       	and	r16, r16
     442:	11 f0       	breq	.+4      	; 0x448 <prepareDMAChannel+0xe>
    {
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | \
     444:	88 ed       	ldi	r24, 0xD8	; 216
     446:	01 c0       	rjmp	.+2      	; 0x44a <prepareDMAChannel+0x10>
                       DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_FIXED_gc;
    } else {
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_FIXED_gc | \
     448:	8d e8       	ldi	r24, 0x8D	; 141
     44a:	82 83       	std	Z+2, r24	; 0x02
                       DMA_CH_DESTRELOAD_TRANSACTION_gc | DMA_CH_DESTDIR_INC_gc;
    }

    //Set to perform one block transfer corresponding to one command packet
    //Technically not necessary because REPEAT will not be set in CTRLA
    selectedChannel->REPCNT = 0x01;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	86 83       	std	Z+6, r24	; 0x06
    //This part has 16 bit pointers, so cast appropriately.
    //Memory addresses are 24 bits to allow for external memory to be mapped into one address space
    //Same with internal EEPROM Data memory.
    //Since these locations are in lower memory, fix the high order address bits to zero.
    //Mapping external memory will require more care.
    if(isOutbound)
     450:	00 23       	and	r16, r16
     452:	31 f0       	breq	.+12     	; 0x460 <prepareDMAChannel+0x26>
    {
        selectedChannel->DESTADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     454:	a4 87       	std	Z+12, r26	; 0x0c
        selectedChannel->DESTADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     456:	b5 87       	std	Z+13, r27	; 0x0d
        selectedChannel->DESTADDR2 = 0;
     458:	16 86       	std	Z+14, r1	; 0x0e

        selectedChannel->SRCADDR0 = (uint16_t)targetBuffer & 0x00FF;
     45a:	20 87       	std	Z+8, r18	; 0x08
        selectedChannel->SRCADDR1 = (uint16_t)targetBuffer >> 8;
     45c:	31 87       	std	Z+9, r19	; 0x09
     45e:	05 c0       	rjmp	.+10     	; 0x46a <prepareDMAChannel+0x30>
        selectedChannel->SRCADDR2 = 0;
    } else {
        selectedChannel->DESTADDR0 = (uint16_t)targetBuffer & 0x00FF;
     460:	24 87       	std	Z+12, r18	; 0x0c
        selectedChannel->DESTADDR1 = (uint16_t)targetBuffer >> 8;
     462:	35 87       	std	Z+13, r19	; 0x0d
        selectedChannel->DESTADDR2 = 0;
     464:	16 86       	std	Z+14, r1	; 0x0e

        selectedChannel->SRCADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     466:	a0 87       	std	Z+8, r26	; 0x08
        selectedChannel->SRCADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     468:	b1 87       	std	Z+9, r27	; 0x09
        selectedChannel->SRCADDR2 = 0;
     46a:	12 86       	std	Z+10, r1	; 0x0a
    }

    //Trigger on received data
    selectedChannel->TRIGSRC = usartTrigger;
     46c:	63 83       	std	Z+3, r22	; 0x03

    //Interrupt on this channel when the transaction is complete, and clear any pending flags
    if(isOutbound)
     46e:	00 23       	and	r16, r16
     470:	59 f0       	breq	.+22     	; 0x488 <prepareDMAChannel+0x4e>
    {
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_OFF_gc | DMA_CH_TRNIF_bm;
     472:	80 e1       	ldi	r24, 0x10	; 16
     474:	81 83       	std	Z+1, r24	; 0x01
        targetUSART->STATUS = USART_TXCIF_bm;
     476:	80 e4       	ldi	r24, 0x40	; 64
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	8c 93       	st	X, r24
     47c:	11 97       	sbiw	r26, 0x01	; 1
        targetUSART->CTRLA = USART_TXCINTLVL_LO_gc | USART_RXCINTLVL_OFF_gc;
     47e:	84 e0       	ldi	r24, 0x04	; 4
     480:	13 96       	adiw	r26, 0x03	; 3
     482:	8c 93       	st	X, r24
     484:	13 97       	sbiw	r26, 0x03	; 3
     486:	02 c0       	rjmp	.+4      	; 0x48c <prepareDMAChannel+0x52>
    } else
    {
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc | DMA_CH_TRNIF_bm;
     488:	81 e1       	ldi	r24, 0x11	; 17
     48a:	81 83       	std	Z+1, r24	; 0x01
    }
}
     48c:	0f 91       	pop	r16
     48e:	08 95       	ret

00000490 <configureHalfDuplexLink>:
 *
 * Configures hardware and DMA channels to support the requested stream configuration
 ************************************************************************/

static void configureHalfDuplexLink(SERIAL_STREAM_t selectedStream, SERIAL_DIRECTION_t selectedDirection)
{
     490:	0f 93       	push	r16
    cli();
     492:	f8 94       	cli
    switch(selectedStream)
     494:	88 23       	and	r24, r24
     496:	21 f0       	breq	.+8      	; 0x4a0 <configureHalfDuplexLink+0x10>
     498:	81 30       	cpi	r24, 0x01	; 1
     49a:	09 f0       	breq	.+2      	; 0x49e <configureHalfDuplexLink+0xe>
     49c:	70 c0       	rjmp	.+224    	; 0x57e <configureHalfDuplexLink+0xee>
     49e:	34 c0       	rjmp	.+104    	; 0x508 <configureHalfDuplexLink+0x78>
    {
        case DOWNSTREAM:
            //Abort any pending DMA transfers
            if(DOWNSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm)
     4a0:	80 91 21 01 	lds	r24, 0x0121
     4a4:	87 ff       	sbrs	r24, 7
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <configureHalfDuplexLink+0x22>
            {
                DOWNSTREAM_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
     4a8:	80 91 20 01 	lds	r24, 0x0120
     4ac:	8f 77       	andi	r24, 0x7F	; 127
     4ae:	80 93 20 01 	sts	0x0120, r24
            }

            //downstreamXmitDone = 0;
            downstreamSizeReceived = 0;
     4b2:	10 92 86 20 	sts	0x2086, r1
            downstreamBusy = 0;
     4b6:	10 92 05 20 	sts	0x2005, r1

            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
     4ba:	66 23       	and	r22, r22
     4bc:	99 f4       	brne	.+38     	; 0x4e4 <configureHalfDuplexLink+0x54>
            {
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_INBOUND_TRIGGER, &DOWNSTREAM_USART, inbound_downstream_data,0);
     4be:	80 e2       	ldi	r24, 0x20	; 32
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	6b e6       	ldi	r22, 0x6B	; 107
     4c4:	40 ea       	ldi	r20, 0xA0	; 160
     4c6:	59 e0       	ldi	r21, 0x09	; 9
     4c8:	2e e0       	ldi	r18, 0x0E	; 14
     4ca:	30 e2       	ldi	r19, 0x20	; 32
     4cc:	00 e0       	ldi	r16, 0x00	; 0
     4ce:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
                DOWNSTREAM_USART.CTRLA |= USART_RXCINTLVL_LO_gc;
     4d2:	80 91 a3 09 	lds	r24, 0x09A3
     4d6:	80 61       	ori	r24, 0x10	; 16
     4d8:	e0 ea       	ldi	r30, 0xA0	; 160
     4da:	f9 e0       	ldi	r31, 0x09	; 9
     4dc:	83 83       	std	Z+3, r24	; 0x03
                DOWNSTREAM_CONFIG = INBOUND;
     4de:	10 92 00 20 	sts	0x2000, r1
     4e2:	4d c0       	rjmp	.+154    	; 0x57e <configureHalfDuplexLink+0xee>
            } else {
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     4e4:	80 e4       	ldi	r24, 0x40	; 64
     4e6:	e0 ea       	ldi	r30, 0xA0	; 160
     4e8:	f9 e0       	ldi	r31, 0x09	; 9
     4ea:	81 83       	std	Z+1, r24	; 0x01
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     4ec:	80 e2       	ldi	r24, 0x20	; 32
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	6c e6       	ldi	r22, 0x6C	; 108
     4f2:	40 ea       	ldi	r20, 0xA0	; 160
     4f4:	59 e0       	ldi	r21, 0x09	; 9
     4f6:	27 e0       	ldi	r18, 0x07	; 7
     4f8:	30 e2       	ldi	r19, 0x20	; 32
     4fa:	01 e0       	ldi	r16, 0x01	; 1
     4fc:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>

                DOWNSTREAM_CONFIG = OUTBOUND;
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	80 93 00 20 	sts	0x2000, r24
     506:	3b c0       	rjmp	.+118    	; 0x57e <configureHalfDuplexLink+0xee>
            }
            break;
        case UPSTREAM:
            //Abort any pending DMA transfers
            if(UPSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm)
     508:	80 91 11 01 	lds	r24, 0x0111
     50c:	87 ff       	sbrs	r24, 7
     50e:	06 c0       	rjmp	.+12     	; 0x51c <configureHalfDuplexLink+0x8c>
            {
                UPSTREAM_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
     510:	80 91 10 01 	lds	r24, 0x0110
     514:	8f 77       	andi	r24, 0x7F	; 127
     516:	e0 e0       	ldi	r30, 0x00	; 0
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	80 8b       	std	Z+16, r24	; 0x10
            }

            upstreamRxDone = 0;
     51c:	10 92 8a 20 	sts	0x208A, r1
     520:	10 92 8b 20 	sts	0x208B, r1
            //upstreamTxDone = 0;
            upstreamBusy = 0;
     524:	10 92 87 20 	sts	0x2087, r1

            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
     528:	66 23       	and	r22, r22
     52a:	b1 f4       	brne	.+44     	; 0x558 <configureHalfDuplexLink+0xc8>
            {
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
     52c:	80 e1       	ldi	r24, 0x10	; 16
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	6b e8       	ldi	r22, 0x8B	; 139
     532:	40 ea       	ldi	r20, 0xA0	; 160
     534:	5a e0       	ldi	r21, 0x0A	; 10
     536:	25 e0       	ldi	r18, 0x05	; 5
     538:	31 e2       	ldi	r19, 0x21	; 33
     53a:	00 e0       	ldi	r16, 0x00	; 0
     53c:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     540:	87 e0       	ldi	r24, 0x07	; 7
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	e0 e1       	ldi	r30, 0x10	; 16
     546:	f1 e0       	ldi	r31, 0x01	; 1
     548:	84 83       	std	Z+4, r24	; 0x04
     54a:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     54c:	84 e8       	ldi	r24, 0x84	; 132
     54e:	80 93 10 01 	sts	0x0110, r24
            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
            {
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
                activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
                UPSTREAM_CONFIG = INBOUND;
     552:	10 92 8c 20 	sts	0x208C, r1
     556:	13 c0       	rjmp	.+38     	; 0x57e <configureHalfDuplexLink+0xee>

            } else {
                UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     558:	e0 ea       	ldi	r30, 0xA0	; 160
     55a:	fa e0       	ldi	r31, 0x0A	; 10
     55c:	80 e4       	ldi	r24, 0x40	; 64
     55e:	81 83       	std	Z+1, r24	; 0x01
                UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc | USART_RXCINTLVL_OFF_gc;
     560:	84 e0       	ldi	r24, 0x04	; 4
     562:	83 83       	std	Z+3, r24	; 0x03
                //Do not send all data through DMA.  Instead send outbound upstream data + 1.  This allows for the insertion of a small delay between size and data
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data + 1,1);
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	6c e8       	ldi	r22, 0x8C	; 140
     56a:	40 ea       	ldi	r20, 0xA0	; 160
     56c:	5a e0       	ldi	r21, 0x0A	; 10
     56e:	2e e8       	ldi	r18, 0x8E	; 142
     570:	30 e2       	ldi	r19, 0x20	; 32
     572:	01 e0       	ldi	r16, 0x01	; 1
     574:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
                UPSTREAM_CONFIG = OUTBOUND;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 8c 20 	sts	0x208C, r24
            break;
        default:
            break;
    }

    sei();
     57e:	78 94       	sei
    return;

}
     580:	0f 91       	pop	r16
     582:	08 95       	ret

00000584 <__vector_88>:
 *
 * The Upstream USART only receives fixed COMMAND_PACKET_SIZE packets, so it simply needs an
 * armed DMA channel
 ************************************************************************/
ISR(DOWNSTREAM_USART_RX_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	0f 93       	push	r16
     590:	2f 93       	push	r18
     592:	3f 93       	push	r19
     594:	4f 93       	push	r20
     596:	5f 93       	push	r21
     598:	6f 93       	push	r22
     59a:	7f 93       	push	r23
     59c:	8f 93       	push	r24
     59e:	9f 93       	push	r25
     5a0:	af 93       	push	r26
     5a2:	bf 93       	push	r27
     5a4:	cf 93       	push	r28
     5a6:	ef 93       	push	r30
     5a8:	ff 93       	push	r31
    uint8_t packetSize;
    //Status bits must be polled before reading the data or they are invalidated
    if(DOWNSTREAM_USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
     5aa:	80 91 a1 09 	lds	r24, 0x09A1
     5ae:	88 71       	andi	r24, 0x18	; 24
     5b0:	19 f0       	breq	.+6      	; 0x5b8 <__vector_88+0x34>
    {
        //Framing or overflow error. Discard and do nothing else
        packetSize = DOWNSTREAM_USART.DATA;
     5b2:	80 91 a0 09 	lds	r24, 0x09A0
        return;
     5b6:	20 c0       	rjmp	.+64     	; 0x5f8 <__vector_88+0x74>

    //Packetsize is defined as the number of additional bytes to arrive
    //The buffer is of size MAX_PACKET_SIZE, so packetSize can be up to
    //MAX_PACKET_SIZE - 1.  If it is equal to MAX_PACKET_SIZE or greater, reject

    packetSize = DOWNSTREAM_USART.DATA;
     5b8:	c0 91 a0 09 	lds	r28, 0x09A0
    if((packetSize >= MAX_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
     5bc:	8c 2f       	mov	r24, r28
     5be:	83 50       	subi	r24, 0x03	; 3
     5c0:	85 37       	cpi	r24, 0x75	; 117
     5c2:	d0 f4       	brcc	.+52     	; 0x5f8 <__vector_88+0x74>
        return;
    }

    //Packet size looks good.  Arm DMA

    prepareDMAChannel(&DOWNSTREAM_DMA,DOWNSTREAM_USART_INBOUND_TRIGGER,&DOWNSTREAM_USART,inbound_downstream_data+1,0);
     5c4:	80 e2       	ldi	r24, 0x20	; 32
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	6b e6       	ldi	r22, 0x6B	; 107
     5ca:	40 ea       	ldi	r20, 0xA0	; 160
     5cc:	59 e0       	ldi	r21, 0x09	; 9
     5ce:	2f e0       	ldi	r18, 0x0F	; 15
     5d0:	30 e2       	ldi	r19, 0x20	; 32
     5d2:	00 e0       	ldi	r16, 0x00	; 0
     5d4:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
    activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
     5d8:	8c 2f       	mov	r24, r28
     5da:	90 e0       	ldi	r25, 0x00	; 0
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     5dc:	e0 e2       	ldi	r30, 0x20	; 32
     5de:	f1 e0       	ldi	r31, 0x01	; 1
     5e0:	84 83       	std	Z+4, r24	; 0x04
     5e2:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     5e4:	84 e8       	ldi	r24, 0x84	; 132
     5e6:	80 93 20 01 	sts	0x0120, r24

    //Packet size looks good.  Arm DMA

    prepareDMAChannel(&DOWNSTREAM_DMA,DOWNSTREAM_USART_INBOUND_TRIGGER,&DOWNSTREAM_USART,inbound_downstream_data+1,0);
    activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
    inbound_downstream_data[0] = packetSize;
     5ea:	c0 93 0e 20 	sts	0x200E, r28

    //Disable all interrupts and let the DMA take command.
    DOWNSTREAM_USART.CTRLA = 0x00;
     5ee:	e0 ea       	ldi	r30, 0xA0	; 160
     5f0:	f9 e0       	ldi	r31, 0x09	; 9
     5f2:	13 82       	std	Z+3, r1	; 0x03

    downstreamBusy = 0;
     5f4:	10 92 05 20 	sts	0x2005, r1
    //activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
    //inbound_downstream_data[0] = packetSize;

    //Disable the RX interrupt for now and let the DMA take control.
    //DOWNSTREAM_USART.CTRLA &= ~USART_RXCINTLVL_OFF_gc;            //Clear the interrupt (assumes that OFF is zeroing it out)
}
     5f8:	ff 91       	pop	r31
     5fa:	ef 91       	pop	r30
     5fc:	cf 91       	pop	r28
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 91       	pop	r16
     614:	0f 90       	pop	r0
     616:	0f be       	out	0x3f, r0	; 63
     618:	0f 90       	pop	r0
     61a:	1f 90       	pop	r1
     61c:	18 95       	reti

0000061e <__vector_14>:

#define DOWNSTREAM_TIMEOUT_MS 15

ISR(DAISY_TC_vect)
{
     61e:	1f 92       	push	r1
     620:	0f 92       	push	r0
     622:	0f b6       	in	r0, 0x3f	; 63
     624:	0f 92       	push	r0
     626:	11 24       	eor	r1, r1
     628:	8f 93       	push	r24
  notifyTC=1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	80 93 02 20 	sts	0x2002, r24
}
     630:	8f 91       	pop	r24
     632:	0f 90       	pop	r0
     634:	0f be       	out	0x3f, r0	; 63
     636:	0f 90       	pop	r0
     638:	1f 90       	pop	r1
     63a:	18 95       	reti

0000063c <handleTC>:

void handleTC(void)
{
     63c:	0f 93       	push	r16
  if(notifyTC)
     63e:	80 91 02 20 	lds	r24, 0x2002
     642:	88 23       	and	r24, r24
     644:	09 f4       	brne	.+2      	; 0x648 <handleTC+0xc>
     646:	52 c0       	rjmp	.+164    	; 0x6ec <handleTC+0xb0>
    {
      notifyTC=0;
     648:	10 92 02 20 	sts	0x2002, r1

      //Check if the DMA is busy and waiting on incoming data
      if(UPSTREAM_CONFIG == OUTBOUND)
     64c:	80 91 8c 20 	lds	r24, 0x208C
     650:	81 30       	cpi	r24, 0x01	; 1
     652:	19 f4       	brne	.+6      	; 0x65a <handleTC+0x1e>
	{
	  //No need to reset DMA
	  upstreamBusy = 0;
     654:	10 92 87 20 	sts	0x2087, r1
     658:	2f c0       	rjmp	.+94     	; 0x6b8 <handleTC+0x7c>
	}
      else
	{
	  if((UPSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm) || !(UPSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm))
     65a:	80 91 11 01 	lds	r24, 0x0111
     65e:	87 fd       	sbrc	r24, 7
     660:	04 c0       	rjmp	.+8      	; 0x66a <handleTC+0x2e>
     662:	80 91 10 01 	lds	r24, 0x0110
     666:	87 fd       	sbrc	r24, 7
     668:	05 c0       	rjmp	.+10     	; 0x674 <handleTC+0x38>
	    {
	      upstreamBusy++;
     66a:	80 91 87 20 	lds	r24, 0x2087
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 93 87 20 	sts	0x2087, r24
	    }
	  
	  if(upstreamBusy > 2)
     674:	80 91 87 20 	lds	r24, 0x2087
     678:	83 30       	cpi	r24, 0x03	; 3
     67a:	f0 f0       	brcs	.+60     	; 0x6b8 <handleTC+0x7c>
	    {
	      //Cancel and rearm the incoming DMA
	      UPSTREAM_DMA.CTRLA = 0x00;
     67c:	e0 e0       	ldi	r30, 0x00	; 0
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	10 8a       	std	Z+16, r1	; 0x10
	      //Wait for it to disable
	      while(UPSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     682:	80 91 10 01 	lds	r24, 0x0110
     686:	87 fd       	sbrc	r24, 7
     688:	fc cf       	rjmp	.-8      	; 0x682 <handleTC+0x46>
	      
	      //Issue a reset
	      UPSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     68a:	80 e4       	ldi	r24, 0x40	; 64
     68c:	e0 e0       	ldi	r30, 0x00	; 0
     68e:	f1 e0       	ldi	r31, 0x01	; 1
     690:	80 8b       	std	Z+16, r24	; 0x10
	      
	      //Re-arm
	      prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
     692:	80 e1       	ldi	r24, 0x10	; 16
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	6b e8       	ldi	r22, 0x8B	; 139
     698:	40 ea       	ldi	r20, 0xA0	; 160
     69a:	5a e0       	ldi	r21, 0x0A	; 10
     69c:	25 e0       	ldi	r18, 0x05	; 5
     69e:	31 e2       	ldi	r19, 0x21	; 33
     6a0:	00 e0       	ldi	r16, 0x00	; 0
     6a2:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     6a6:	87 e0       	ldi	r24, 0x07	; 7
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	e0 e1       	ldi	r30, 0x10	; 16
     6ac:	f1 e0       	ldi	r31, 0x01	; 1
     6ae:	84 83       	std	Z+4, r24	; 0x04
     6b0:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     6b2:	84 e8       	ldi	r24, 0x84	; 132
     6b4:	80 93 10 01 	sts	0x0110, r24
	      prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
	      activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
	    }
	}
      //Check if downstream might be stalled
      if(DOWNSTREAM_CONFIG == OUTBOUND)
     6b8:	80 91 00 20 	lds	r24, 0x2000
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	19 f4       	brne	.+6      	; 0x6c6 <handleTC+0x8a>
	{
	  //No need
	  downstreamBusy = 0;
     6c0:	10 92 05 20 	sts	0x2005, r1
     6c4:	13 c0       	rjmp	.+38     	; 0x6ec <handleTC+0xb0>
	  //if((DOWNSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm) || (passthroughWaiting == 1))
	  //{
	  //    downstreamBusy++;
	  //}

	  if(downstreamBusy++ > (2 * DOWNSTREAM_TIMEOUT_MS))
     6c6:	80 91 05 20 	lds	r24, 0x2005
     6ca:	98 2f       	mov	r25, r24
     6cc:	9f 5f       	subi	r25, 0xFF	; 255
     6ce:	90 93 05 20 	sts	0x2005, r25
     6d2:	8f 31       	cpi	r24, 0x1F	; 31
     6d4:	58 f0       	brcs	.+22     	; 0x6ec <handleTC+0xb0>
	    {
	      
	      
	      //Notify the daisy chain task so that the upstream can potentially be fixed up.
	      notifyDaisy = 1;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	80 93 03 20 	sts	0x2003, r24
	      downstreamTimedout = 1;
     6dc:	80 93 04 20 	sts	0x2004, r24
	      downstreamBusy = 0;
     6e0:	10 92 05 20 	sts	0x2005, r1
	      passthroughWaiting = 0;
     6e4:	10 92 06 20 	sts	0x2006, r1
	      //downstreamXmitDone = 0;
	      downstreamSizeReceived = 0;
     6e8:	10 92 86 20 	sts	0x2086, r1
	    }
	}
    }
}
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <__vector_6>:
/************************************************************************
 * ISRs for the DMA engines.
 * Set flags for the Daisy Chain Task
 ************************************************************************/
ISR(UPSTREAM_USART_DMA_vect)
{
     6f0:	1f 92       	push	r1
     6f2:	0f 92       	push	r0
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	0f 92       	push	r0
     6f8:	11 24       	eor	r1, r1
     6fa:	8f 93       	push	r24
     6fc:	9f 93       	push	r25
     6fe:	ef 93       	push	r30
     700:	ff 93       	push	r31
    if(UPSTREAM_DMA.CTRLB & DMA_CH_ERRIF_bm)
     702:	80 91 11 01 	lds	r24, 0x0111
     706:	85 fd       	sbrc	r24, 5
     708:	15 c0       	rjmp	.+42     	; 0x734 <__vector_6+0x44>
        //UPSTREAM_DMA.CTRLB = UPSTREAM_DMA.CTRLB | DMA_CH_ERRIF_bm;
        //Cancel and rearm the incoming DMA
        return;
    }

    if(UPSTREAM_DMA.CTRLB & DMA_CH_TRNIF_bm)
     70a:	80 91 11 01 	lds	r24, 0x0111
     70e:	84 ff       	sbrs	r24, 4
     710:	11 c0       	rjmp	.+34     	; 0x734 <__vector_6+0x44>
    {
        //The transfer is complete and should be acked
        UPSTREAM_DMA.CTRLB = UPSTREAM_DMA.CTRLB | DMA_CH_TRNIF_bm;
     712:	80 91 11 01 	lds	r24, 0x0111
     716:	80 61       	ori	r24, 0x10	; 16
     718:	e0 e0       	ldi	r30, 0x00	; 0
     71a:	f1 e0       	ldi	r31, 0x01	; 1
     71c:	81 8b       	std	Z+17, r24	; 0x11
        upstreamBusy = 0;
     71e:	10 92 87 20 	sts	0x2087, r1
        notifyDaisy = 1;
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	80 93 03 20 	sts	0x2003, r24
        upstreamRxDone = 1;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	80 93 8a 20 	sts	0x208A, r24
     730:	90 93 8b 20 	sts	0x208B, r25
    }
}
     734:	ff 91       	pop	r31
     736:	ef 91       	pop	r30
     738:	9f 91       	pop	r25
     73a:	8f 91       	pop	r24
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0
     742:	1f 90       	pop	r1
     744:	18 95       	reti

00000746 <__vector_60>:

ISR(UPSTREAM_USART_TXDONE_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	8f 93       	push	r24
     752:	9f 93       	push	r25
     754:	ef 93       	push	r30
     756:	ff 93       	push	r31
    upstreamBusy = 0;
     758:	10 92 87 20 	sts	0x2087, r1
    notifyDaisy = 1;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 03 20 	sts	0x2003, r24
    upstreamTxDone = 1;
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	80 93 88 20 	sts	0x2088, r24
     76a:	90 93 89 20 	sts	0x2089, r25
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc;
     76e:	e0 ea       	ldi	r30, 0xA0	; 160
     770:	fa e0       	ldi	r31, 0x0A	; 10
     772:	13 82       	std	Z+3, r1	; 0x03
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     774:	80 e4       	ldi	r24, 0x40	; 64
     776:	81 83       	std	Z+1, r24	; 0x01
}
     778:	ff 91       	pop	r31
     77a:	ef 91       	pop	r30
     77c:	9f 91       	pop	r25
     77e:	8f 91       	pop	r24
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <__vector_90>:


ISR(DOWNSTREAM_USART_TXDONE_vect)
{
     78a:	1f 92       	push	r1
     78c:	0f 92       	push	r0
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	0f 92       	push	r0
     792:	11 24       	eor	r1, r1
     794:	8f 93       	push	r24
     796:	ef 93       	push	r30
     798:	ff 93       	push	r31
    //prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_INBOUND_TRIGGER, &DOWNSTREAM_USART, inbound_downstream_data,0);
    DOWNSTREAM_CONFIG = INBOUND;
     79a:	10 92 00 20 	sts	0x2000, r1
    //Shut down the TXC interrupt
    //DOWNSTREAM_USART.CTRLA &= ~USART_TXCINTLVL_gm;
    DOWNSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
     79e:	80 e1       	ldi	r24, 0x10	; 16
     7a0:	e0 ea       	ldi	r30, 0xA0	; 160
     7a2:	f9 e0       	ldi	r31, 0x09	; 9
     7a4:	83 83       	std	Z+3, r24	; 0x03
    downstreamBusy = 0;
     7a6:	10 92 05 20 	sts	0x2005, r1
}
     7aa:	ff 91       	pop	r31
     7ac:	ef 91       	pop	r30
     7ae:	8f 91       	pop	r24
     7b0:	0f 90       	pop	r0
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	0f 90       	pop	r0
     7b6:	1f 90       	pop	r1
     7b8:	18 95       	reti

000007ba <__vector_7>:
 * When a OUTBOUND transfer finishes, enable the RX interrupt to capture the reply.
 * When an INBOUND transfer finishes, switch back to outbound mode and notify
 * userspace.
 ************************************************************************/
ISR(DOWNSTREAM_USART_DMA_vect)
{
     7ba:	1f 92       	push	r1
     7bc:	0f 92       	push	r0
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	0f 92       	push	r0
     7c2:	11 24       	eor	r1, r1
     7c4:	8f 93       	push	r24
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
    if(DOWNSTREAM_DMA.CTRLB & DMA_CH_ERRIF_bm)
     7ca:	e0 e2       	ldi	r30, 0x20	; 32
     7cc:	f1 e0       	ldi	r31, 0x01	; 1
     7ce:	80 91 21 01 	lds	r24, 0x0121
     7d2:	85 ff       	sbrs	r24, 5
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <__vector_7+0x26>
    {
        //Acknowledge the error
        //It may be from an aborted transfer, so just return.
        DOWNSTREAM_DMA.CTRLB = DOWNSTREAM_DMA.CTRLB | DMA_CH_ERRIF_bm;
     7d6:	80 91 21 01 	lds	r24, 0x0121
     7da:	80 62       	ori	r24, 0x20	; 32
     7dc:	81 83       	std	Z+1, r24	; 0x01
        return;
     7de:	10 c0       	rjmp	.+32     	; 0x800 <__vector_7+0x46>
    }

    if(DOWNSTREAM_DMA.CTRLB & DMA_CH_TRNIF_bm)
     7e0:	80 91 21 01 	lds	r24, 0x0121
     7e4:	84 ff       	sbrs	r24, 4
     7e6:	0c c0       	rjmp	.+24     	; 0x800 <__vector_7+0x46>
    {
        //The transfer is complete and should be acked
        DOWNSTREAM_DMA.CTRLB = DOWNSTREAM_DMA.CTRLB | DMA_CH_TRNIF_bm;
     7e8:	80 91 21 01 	lds	r24, 0x0121
     7ec:	80 61       	ori	r24, 0x10	; 16
     7ee:	81 83       	std	Z+1, r24	; 0x01
        //
        //if(DOWNSTREAM_CONFIG == INBOUND)
        //{
            //Just finished receiving response into singleDownstreamBuffer.  Signal userspace
            //The number of bytes received is the size field plus 1 (to account for the size field itself)
            downstreamSizeReceived = inbound_downstream_data[0] + 1;
     7f0:	80 91 0e 20 	lds	r24, 0x200E
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	80 93 86 20 	sts	0x2086, r24
            notifyDaisy = 1;
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	80 93 03 20 	sts	0x2003, r24
                downstreamXmitDone = 1;
                break;
        }
        */
    }
}
     800:	ff 91       	pop	r31
     802:	ef 91       	pop	r30
     804:	8f 91       	pop	r24
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <computeChecksum>:
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     810:	fc 01       	movw	r30, r24
    for(int i=0;i<packetSize;i++)
     812:	20 e0       	ldi	r18, 0x00	; 0
     814:	30 e0       	ldi	r19, 0x00	; 0
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     816:	80 e0       	ldi	r24, 0x00	; 0
    for(int i=0;i<packetSize;i++)
     818:	04 c0       	rjmp	.+8      	; 0x822 <computeChecksum+0x12>
    {
        accumulator += packetBuffer[i];
     81a:	91 91       	ld	r25, Z+
     81c:	89 0f       	add	r24, r25
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
    for(int i=0;i<packetSize;i++)
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	3f 4f       	sbci	r19, 0xFF	; 255
     822:	26 17       	cp	r18, r22
     824:	37 07       	cpc	r19, r23
     826:	cc f3       	brlt	.-14     	; 0x81a <computeChecksum+0xa>
    {
        accumulator += packetBuffer[i];
    }

    return (0x00 - accumulator);
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	90 95       	com	r25
     82c:	81 95       	neg	r24
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
}
     830:	08 95       	ret

00000832 <passthroughToUpstream>:
 *
 * Pass the data directly from the downstream INBOUND buffer to the
 * upstream OUTBOUND buffer.  Send a corrupt checksum error if necessary
 ************************************************************************/
static void passthroughToUpstream(void)
{
     832:	0f 93       	push	r16
     834:	1f 93       	push	r17
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
    //It is assumed that the upstream DMA is able to accept additional data at this point
    //A data packet has arrived from downstream.  Validate it
    //The volatile keyword can be discarded because the DMA routines are inactive while this function executes
    if(computeChecksum((uint8_t *)inbound_downstream_data,downstreamSizeReceived) != 0x00)
     83a:	60 91 86 20 	lds	r22, 0x2086
     83e:	ce e0       	ldi	r28, 0x0E	; 14
     840:	d0 e2       	ldi	r29, 0x20	; 32
     842:	ce 01       	movw	r24, r28
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	0e 94 08 04 	call	0x810	; 0x810 <computeChecksum>
     84a:	00 97       	sbiw	r24, 0x00	; 0
     84c:	b1 f1       	breq	.+108    	; 0x8ba <passthroughToUpstream+0x88>
    {
      RxCheckSumErrCnt[1]++;
     84e:	80 91 13 21 	lds	r24, 0x2113
     852:	90 91 14 21 	lds	r25, 0x2114
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	80 93 13 21 	sts	0x2113, r24
     85c:	90 93 14 21 	sts	0x2114, r25
        //Invalid checksum
        outbound_upstream_data[0] = 3; //Packet size
     860:	83 e0       	ldi	r24, 0x03	; 3
     862:	80 93 8d 20 	sts	0x208D, r24
        outbound_upstream_data[1] = inbound_upstream_data[1]; //Reflected command byte
     866:	80 91 06 21 	lds	r24, 0x2106
     86a:	80 93 8e 20 	sts	0x208E, r24
        outbound_upstream_data[2] = CHECKSUM_ERROR; //Checksum error
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	80 93 8f 20 	sts	0x208F, r24
        outbound_upstream_data[3] = computeChecksum((uint8_t *)outbound_upstream_data,3); //checksum
     874:	8d e8       	ldi	r24, 0x8D	; 141
     876:	90 e2       	ldi	r25, 0x20	; 32
     878:	63 e0       	ldi	r22, 0x03	; 3
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	0e 94 08 04 	call	0x810	; 0x810 <computeChecksum>
     880:	80 93 90 20 	sts	0x2090, r24
        //configureHalfDuplexLink(UPSTREAM,OUTBOUND);
        UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     884:	e0 ea       	ldi	r30, 0xA0	; 160
     886:	fa e0       	ldi	r31, 0x0A	; 10
     888:	13 82       	std	Z+3, r1	; 0x03
        UPSTREAM_USART.DATA = outbound_upstream_data[0];// push the first character out
     88a:	80 91 8d 20 	lds	r24, 0x208D
     88e:	80 93 a0 0a 	sts	0x0AA0, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     892:	80 e4       	ldi	r24, 0x40	; 64
     894:	8a 95       	dec	r24
     896:	f1 f7       	brne	.-4      	; 0x894 <passthroughToUpstream+0x62>
        DELAY_ROUTINE();
        //while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
        UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     898:	80 e4       	ldi	r24, 0x40	; 64
     89a:	81 83       	std	Z+1, r24	; 0x01
        UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     89c:	84 e0       	ldi	r24, 0x04	; 4
     89e:	83 83       	std	Z+3, r24	; 0x03
        prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
     8a0:	80 e1       	ldi	r24, 0x10	; 16
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	6c e8       	ldi	r22, 0x8C	; 140
     8a6:	40 ea       	ldi	r20, 0xA0	; 160
     8a8:	5a e0       	ldi	r21, 0x0A	; 10
     8aa:	2e e8       	ldi	r18, 0x8E	; 142
     8ac:	30 e2       	ldi	r19, 0x20	; 32
     8ae:	01 e0       	ldi	r16, 0x01	; 1
     8b0:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	26 c0       	rjmp	.+76     	; 0x906 <passthroughToUpstream+0xd4>
        prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
        activateDMAChannel(&UPSTREAM_DMA,3);
        downstreamSizeReceived = 0;
        return;
    }
    memcpy((uint8_t *)outbound_upstream_data,(uint8_t *)inbound_downstream_data,downstreamSizeReceived);
     8ba:	40 91 86 20 	lds	r20, 0x2086
     8be:	0d e8       	ldi	r16, 0x8D	; 141
     8c0:	10 e2       	ldi	r17, 0x20	; 32
     8c2:	c8 01       	movw	r24, r16
     8c4:	be 01       	movw	r22, r28
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	0e 94 c1 0c 	call	0x1982	; 0x1982 <memcpy>
    //for(int i=0;i<inbound_downstream_data[0];i++)
    //{
    //    outbound_upstream_data[i] = inbound_downstream_data[i];
    //}
    //configureHalfDuplexLink(UPSTREAM,OUTBOUND);
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     8cc:	e0 ea       	ldi	r30, 0xA0	; 160
     8ce:	fa e0       	ldi	r31, 0x0A	; 10
     8d0:	13 82       	std	Z+3, r1	; 0x03
    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     8d2:	80 91 8d 20 	lds	r24, 0x208D
     8d6:	80 93 a0 0a 	sts	0x0AA0, r24
     8da:	80 e4       	ldi	r24, 0x40	; 64
     8dc:	8a 95       	dec	r24
     8de:	f1 f7       	brne	.-4      	; 0x8dc <passthroughToUpstream+0xaa>
    DELAY_ROUTINE();
    //while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     8e0:	80 e4       	ldi	r24, 0x40	; 64
     8e2:	81 83       	std	Z+1, r24	; 0x01
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	83 83       	std	Z+3, r24	; 0x03
    prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	6c e8       	ldi	r22, 0x8C	; 140
     8ee:	40 ea       	ldi	r20, 0xA0	; 160
     8f0:	5a e0       	ldi	r21, 0x0A	; 10
     8f2:	98 01       	movw	r18, r16
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	01 e0       	ldi	r16, 0x01	; 1
     8fa:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
    activateDMAChannel(&UPSTREAM_DMA,downstreamSizeReceived-1);
     8fe:	80 91 86 20 	lds	r24, 0x2086
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	01 97       	sbiw	r24, 0x01	; 1
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     906:	e0 e1       	ldi	r30, 0x10	; 16
     908:	f1 e0       	ldi	r31, 0x01	; 1
     90a:	84 83       	std	Z+4, r24	; 0x04
     90c:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     90e:	84 e8       	ldi	r24, 0x84	; 132
     910:	80 93 10 01 	sts	0x0110, r24
    //while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
    prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
    activateDMAChannel(&UPSTREAM_DMA,downstreamSizeReceived-1);
    downstreamSizeReceived = 0;
     914:	10 92 86 20 	sts	0x2086, r1
    return;
}
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	08 95       	ret

00000922 <configureDaisyUSART>:
        //COMMAND_USART.BAUDCTRLA = 34;                            //Configure for 57600 baud rate with normal baud rate generation
        //COMMAND_USART.BAUDCTRLB = 0;
        targetUSART->BAUDCTRLA = 33;                            //Configure for 115200 with fractional baud rate generation
        targetUSART->BAUDCTRLB = 0xF0;
    } else {
        targetUSART->BAUDCTRLA = 0;                                //Configure for 2 MBaud by setting baud rate to zero
     922:	e0 ea       	ldi	r30, 0xA0	; 160
     924:	fa e0       	ldi	r31, 0x0A	; 10
     926:	16 82       	std	Z+6, r1	; 0x06
        targetUSART->BAUDCTRLB = 0x00;                            //and BSEL to zero
     928:	17 82       	std	Z+7, r1	; 0x07
    }
    targetUSART->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | \
     92a:	93 e0       	ldi	r25, 0x03	; 3
     92c:	95 83       	std	Z+5, r25	; 0x05
                         USART_PMODE_DISABLED_gc | \
                          USART_CHSIZE_8BIT_gc;                //Configure port settings for 8 bits of data, 1 stop bit.
    targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     92e:	84 81       	ldd	r24, Z+4	; 0x04
     930:	88 61       	ori	r24, 0x18	; 24
     932:	84 83       	std	Z+4, r24	; 0x04
************************************************************************/
static void configureUSARTHardware(USART_t *targetUSART, int isPC, int isDownstream)
{
    if(isDownstream)
    {
        targetUSART->CTRLA = USART_RXCINTLVL_LO_gc;            //Enable RX interrupt at LO priority
     934:	e0 ea       	ldi	r30, 0xA0	; 160
     936:	f9 e0       	ldi	r31, 0x09	; 9
     938:	80 e1       	ldi	r24, 0x10	; 16
     93a:	83 83       	std	Z+3, r24	; 0x03
        //COMMAND_USART.BAUDCTRLA = 34;                            //Configure for 57600 baud rate with normal baud rate generation
        //COMMAND_USART.BAUDCTRLB = 0;
        targetUSART->BAUDCTRLA = 33;                            //Configure for 115200 with fractional baud rate generation
        targetUSART->BAUDCTRLB = 0xF0;
    } else {
        targetUSART->BAUDCTRLA = 0;                                //Configure for 2 MBaud by setting baud rate to zero
     93c:	16 82       	std	Z+6, r1	; 0x06
        targetUSART->BAUDCTRLB = 0x00;                            //and BSEL to zero
     93e:	17 82       	std	Z+7, r1	; 0x07
    }
    targetUSART->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | \
     940:	95 83       	std	Z+5, r25	; 0x05
                         USART_PMODE_DISABLED_gc | \
                          USART_CHSIZE_8BIT_gc;                //Configure port settings for 8 bits of data, 1 stop bit.
    targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     942:	84 81       	ldd	r24, Z+4	; 0x04
     944:	88 61       	ori	r24, 0x18	; 24
     946:	84 83       	std	Z+4, r24	; 0x04
    configureUSARTHardware(&UPSTREAM_USART,0,0);
    //Now initialize the downstream
    configureUSARTHardware(&DOWNSTREAM_USART,0,1);

    //Prepare DMA transfers
    DMA.CTRL = DMA_ENABLE_bm;
     948:	80 e8       	ldi	r24, 0x80	; 128
     94a:	80 93 00 01 	sts	0x0100, r24

    //Assume default configuration with downstream OUT and upstream IN
    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>
    configureHalfDuplexLink(UPSTREAM,INBOUND);
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>

    //Activate the heartbeat timer for resetting inbound DMA as necessary
    //Interrupt every half millisecond
    //At 32 MHz internal oscillator with 1024 prescaler,
    DAISY_TC.CTRLB = TC_WGMODE_NORMAL_gc;
     95e:	e0 e0       	ldi	r30, 0x00	; 0
     960:	f8 e0       	ldi	r31, 0x08	; 8
     962:	11 82       	std	Z+1, r1	; 0x01
    DAISY_TC.CTRLC = 0x00;
     964:	12 82       	std	Z+2, r1	; 0x02
    DAISY_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     966:	13 82       	std	Z+3, r1	; 0x03
    DAISY_TC.CTRLE = 0x00;
     968:	14 82       	std	Z+4, r1	; 0x04
    DAISY_TC.PERBUF = 16;
     96a:	80 e1       	ldi	r24, 0x10	; 16
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	86 ab       	sts	0x56, r24
     970:	97 ab       	sts	0x57, r25
    DAISY_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	86 83       	std	Z+6, r24	; 0x06
    DAISY_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	80 83       	st	Z, r24

    //Activate the Upstream DMA for a command packet of data
    //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
}
     97a:	08 95       	ret

0000097c <doDaisyTask>:
 * Maintains system state and manages the transmission/reception of chained data
 * Should be called whenever notifyDaisy is set to 1.
 ************************************************************************/

void doDaisyTask(void)
{
     97c:	0f 93       	push	r16
     97e:	cf 93       	push	r28
    LEDtoggle();//DEBUG
     980:	0e 94 45 09 	call	0x128a	; 0x128a <LEDtoggle>
    //This is set to IDLE when the upstream port is idle and TRANSMITTING when it is in use
    static DAISY_STATE_t daisyState = DAISY_IDLE;
    uint8_t packetSize;

    //First clear the daisy notification flag
    cli();
     984:	f8 94       	cli
    notifyDaisy = 0;
     986:	10 92 03 20 	sts	0x2003, r1
    sei();
     98a:	78 94       	sei

    switch(daisyState)
     98c:	80 91 0c 21 	lds	r24, 0x210C
     990:	88 23       	and	r24, r24
     992:	21 f0       	breq	.+8      	; 0x99c <doDaisyTask+0x20>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	09 f0       	breq	.+2      	; 0x99a <doDaisyTask+0x1e>
     998:	48 c1       	rjmp	.+656    	; 0xc2a <doDaisyTask+0x2ae>
     99a:	ff c0       	rjmp	.+510    	; 0xb9a <doDaisyTask+0x21e>
    {
        case DAISY_IDLE:
            //The daisy chain module is not transmitting, though a passthrough may be waiting

            if(downstreamSizeReceived && passthroughWaiting)
     99c:	80 91 86 20 	lds	r24, 0x2086
     9a0:	88 23       	and	r24, r24
     9a2:	a1 f0       	breq	.+40     	; 0x9cc <doDaisyTask+0x50>
     9a4:	80 91 06 20 	lds	r24, 0x2006
     9a8:	88 23       	and	r24, r24
     9aa:	81 f0       	breq	.+32     	; 0x9cc <doDaisyTask+0x50>
            {
                //Since a downstream reply was heard, pass it through to upstream
                passthroughWaiting = 0;
     9ac:	10 92 06 20 	sts	0x2006, r1
                daisyState = DAISY_TRANSMITTING;
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	80 93 0c 21 	sts	0x210C, r24
                if(UPSTREAM_CONFIG == INBOUND)
     9b6:	80 91 8c 20 	lds	r24, 0x208C
     9ba:	88 23       	and	r24, r24
     9bc:	21 f4       	brne	.+8      	; 0x9c6 <doDaisyTask+0x4a>
                {
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	61 e0       	ldi	r22, 0x01	; 1
     9c2:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>
                }
                passthroughToUpstream();
     9c6:	0e 94 19 04 	call	0x832	; 0x832 <passthroughToUpstream>
     9ca:	0c c0       	rjmp	.+24     	; 0x9e4 <doDaisyTask+0x68>

                cli();
                downstreamTimedout = 0;
                sei();

            } else if(downstreamSizeReceived)
     9cc:	80 91 86 20 	lds	r24, 0x2086
     9d0:	88 23       	and	r24, r24
     9d2:	61 f0       	breq	.+24     	; 0x9ec <doDaisyTask+0x70>
            {
                //Error condition.  Just clear it out and restart
                configureHalfDuplexLink(UPSTREAM,INBOUND);
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>
                //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);

                configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>

                cli();
     9e4:	f8 94       	cli
                downstreamTimedout = 0;
     9e6:	10 92 04 20 	sts	0x2004, r1
                sei();
     9ea:	78 94       	sei

            }

            if(downstreamTimedout)
     9ec:	80 91 04 20 	lds	r24, 0x2004
     9f0:	88 23       	and	r24, r24
     9f2:	29 f1       	breq	.+74     	; 0xa3e <doDaisyTask+0xc2>
            {
                cli();
     9f4:	f8 94       	cli
                downstreamTimedout = 0;
     9f6:	10 92 04 20 	sts	0x2004, r1
                sei();
     9fa:	78 94       	sei

                //Cancel waiting for a downstream
                DOWNSTREAM_DMA.CTRLA = 0x00;
     9fc:	10 92 20 01 	sts	0x0120, r1
                //Wait for it to disable
                while(DOWNSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     a00:	80 91 20 01 	lds	r24, 0x0120
     a04:	87 fd       	sbrc	r24, 7
     a06:	fc cf       	rjmp	.-8      	; 0xa00 <doDaisyTask+0x84>

                //Issue a reset
                DOWNSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     a08:	c0 e4       	ldi	r28, 0x40	; 64
     a0a:	c0 93 20 01 	sts	0x0120, r28

                //Now set back to outbound and wait
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     a0e:	80 e2       	ldi	r24, 0x20	; 32
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	6c e6       	ldi	r22, 0x6C	; 108
     a14:	40 ea       	ldi	r20, 0xA0	; 160
     a16:	59 e0       	ldi	r21, 0x09	; 9
     a18:	27 e0       	ldi	r18, 0x07	; 7
     a1a:	30 e2       	ldi	r19, 0x20	; 32
     a1c:	01 e0       	ldi	r16, 0x01	; 1
     a1e:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     a22:	e0 ea       	ldi	r30, 0xA0	; 160
     a24:	f9 e0       	ldi	r31, 0x09	; 9
     a26:	c1 83       	std	Z+1, r28	; 0x01
                DOWNSTREAM_CONFIG = OUTBOUND;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	80 93 00 20 	sts	0x2000, r24
                DOWNSTREAM_USART.CTRLA = 0x00;
     a2e:	13 82       	std	Z+3, r1	; 0x03

                //Make sure Upstream is facing the proper direction
                if(UPSTREAM_CONFIG == OUTBOUND)
     a30:	80 91 8c 20 	lds	r24, 0x208C
     a34:	81 30       	cpi	r24, 0x01	; 1
     a36:	19 f4       	brne	.+6      	; 0xa3e <doDaisyTask+0xc2>
                {
                    //while(!(UPSTREAM_USART.STATUS & USART_TXCIF_bm));
                    configureHalfDuplexLink(UPSTREAM,INBOUND);
     a38:	60 e0       	ldi	r22, 0x00	; 0
     a3a:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>
                    //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
                }
            }

            if(upstreamRxDone)
     a3e:	80 91 8a 20 	lds	r24, 0x208A
     a42:	90 91 8b 20 	lds	r25, 0x208B
     a46:	00 97       	sbiw	r24, 0x00	; 0
     a48:	09 f4       	brne	.+2      	; 0xa4c <doDaisyTask+0xd0>
     a4a:	ef c0       	rjmp	.+478    	; 0xc2a <doDaisyTask+0x2ae>
            {
                //A packet arrived from upstream.  Parse it and compute some sort of reply.
                cli();
     a4c:	f8 94       	cli
                upstreamRxDone = 0;
     a4e:	10 92 8a 20 	sts	0x208A, r1
     a52:	10 92 8b 20 	sts	0x208B, r1
                sei();
     a56:	78 94       	sei

                //A data packet has arrived from upstream.  Validate it
                if(computeChecksum((uint8_t *)inbound_upstream_data,COMMAND_PACKET_SIZE) != 0x00)
     a58:	85 e0       	ldi	r24, 0x05	; 5
     a5a:	91 e2       	ldi	r25, 0x21	; 33
     a5c:	67 e0       	ldi	r22, 0x07	; 7
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	0e 94 08 04 	call	0x810	; 0x810 <computeChecksum>
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	d9 f1       	breq	.+118    	; 0xade <doDaisyTask+0x162>
                {
                  RxCheckSumErrCnt[0]++;
     a68:	80 91 11 21 	lds	r24, 0x2111
     a6c:	90 91 12 21 	lds	r25, 0x2112
     a70:	01 96       	adiw	r24, 0x01	; 1
     a72:	80 93 11 21 	sts	0x2111, r24
     a76:	90 93 12 21 	sts	0x2112, r25
                    //Invalid checksum
                    outbound_upstream_data[0] = 3; //Packet size
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	80 93 8d 20 	sts	0x208D, r24
                    outbound_upstream_data[1] = inbound_upstream_data[1]; //Reflected command byte
     a80:	80 91 06 21 	lds	r24, 0x2106
     a84:	80 93 8e 20 	sts	0x208E, r24
                    outbound_upstream_data[2] = CHECKSUM_ERROR; //Checksum error
     a88:	c1 e0       	ldi	r28, 0x01	; 1
     a8a:	c0 93 8f 20 	sts	0x208F, r28
                    outbound_upstream_data[3] = computeChecksum((uint8_t *)outbound_upstream_data,3); //checksum
     a8e:	8d e8       	ldi	r24, 0x8D	; 141
     a90:	90 e2       	ldi	r25, 0x20	; 32
     a92:	63 e0       	ldi	r22, 0x03	; 3
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	0e 94 08 04 	call	0x810	; 0x810 <computeChecksum>
     a9a:	80 93 90 20 	sts	0x2090, r24
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	61 e0       	ldi	r22, 0x01	; 1
     aa2:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     aa6:	e0 ea       	ldi	r30, 0xA0	; 160
     aa8:	fa e0       	ldi	r31, 0x0A	; 10
     aaa:	13 82       	std	Z+3, r1	; 0x03
                    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     aac:	80 91 8d 20 	lds	r24, 0x208D
     ab0:	80 93 a0 0a 	sts	0x0AA0, r24
     ab4:	80 e4       	ldi	r24, 0x40	; 64
     ab6:	8a 95       	dec	r24
     ab8:	f1 f7       	brne	.-4      	; 0xab6 <doDaisyTask+0x13a>
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     aba:	80 e4       	ldi	r24, 0x40	; 64
     abc:	81 83       	std	Z+1, r24	; 0x01
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	83 83       	std	Z+3, r24	; 0x03
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	e0 e1       	ldi	r30, 0x10	; 16
     ac8:	f1 e0       	ldi	r31, 0x01	; 1
     aca:	84 83       	std	Z+4, r24	; 0x04
     acc:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     ace:	84 e8       	ldi	r24, 0x84	; 132
     ad0:	80 93 10 01 	sts	0x0110, r24
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
                    activateDMAChannel(&UPSTREAM_DMA,3);
                    daisyState = DAISY_TRANSMITTING;
     ad4:	c0 93 0c 21 	sts	0x210C, r28
                    //No passthrough occurred, so do not wait on a downstream reply.
                    passthroughWaiting = 0;
     ad8:	10 92 06 20 	sts	0x2006, r1
                    break;
     adc:	a6 c0       	rjmp	.+332    	; 0xc2a <doDaisyTask+0x2ae>
                }
                if((inbound_upstream_data[0] & 0x0F) != 0)
     ade:	80 91 05 21 	lds	r24, 0x2105
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	8f 70       	andi	r24, 0x0F	; 15
     ae6:	90 70       	andi	r25, 0x00	; 0
     ae8:	00 97       	sbiw	r24, 0x00	; 0
     aea:	19 f1       	breq	.+70     	; 0xb32 <doDaisyTask+0x1b6>
                {
                    //This packet is going downstream

                    memcpy((uint8_t *)outbound_downstream_data,(uint8_t *)inbound_upstream_data,COMMAND_PACKET_SIZE);
     aec:	a7 e0       	ldi	r26, 0x07	; 7
     aee:	b0 e2       	ldi	r27, 0x20	; 32
     af0:	e5 e0       	ldi	r30, 0x05	; 5
     af2:	f1 e2       	ldi	r31, 0x21	; 33
     af4:	87 e0       	ldi	r24, 0x07	; 7
     af6:	01 90       	ld	r0, Z+
     af8:	0d 92       	st	X+, r0
     afa:	81 50       	subi	r24, 0x01	; 1
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <doDaisyTask+0x17a>

                    //Adjust the Destination Header and the checksum for the new destination
                    outbound_downstream_data[0]--;
     afe:	80 91 07 20 	lds	r24, 0x2007
     b02:	81 50       	subi	r24, 0x01	; 1
     b04:	80 93 07 20 	sts	0x2007, r24
                    outbound_downstream_data[CHECKSUM_OFFSET]++;
     b08:	80 91 0d 20 	lds	r24, 0x200D
     b0c:	8f 5f       	subi	r24, 0xFF	; 255
     b0e:	80 93 0d 20 	sts	0x200D, r24
                    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	e0 e2       	ldi	r30, 0x20	; 32
     b20:	f1 e0       	ldi	r31, 0x01	; 1
     b22:	84 83       	std	Z+4, r24	; 0x04
     b24:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     b26:	84 e8       	ldi	r24, 0x84	; 132
     b28:	80 93 20 01 	sts	0x0120, r24
                    outbound_downstream_data[CHECKSUM_OFFSET]++;
                    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
                    activateDMAChannel(&DOWNSTREAM_DMA,COMMAND_PACKET_SIZE);

                    //A downstream reply will be expected
                    passthroughWaiting = 1;
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	80 93 06 20 	sts	0x2006, r24
                }

                if(((inbound_upstream_data[0] & 0xF0) == 0xF0) || ((inbound_upstream_data[0] & 0x0F) == 0x00))
     b32:	80 91 05 21 	lds	r24, 0x2105
     b36:	80 7f       	andi	r24, 0xF0	; 240
     b38:	80 3f       	cpi	r24, 0xF0	; 240
     b3a:	41 f0       	breq	.+16     	; 0xb4c <doDaisyTask+0x1d0>
     b3c:	80 91 05 21 	lds	r24, 0x2105
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	8f 70       	andi	r24, 0x0F	; 15
     b44:	90 70       	andi	r25, 0x00	; 0
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	09 f0       	breq	.+2      	; 0xb4c <doDaisyTask+0x1d0>
     b4a:	6f c0       	rjmp	.+222    	; 0xc2a <doDaisyTask+0x2ae>
                {
                    //This packet should be responded to
                    packetSize = processCommand((uint8_t *)inbound_upstream_data,(uint8_t *)outbound_upstream_data);
     b4c:	85 e0       	ldi	r24, 0x05	; 5
     b4e:	91 e2       	ldi	r25, 0x21	; 33
     b50:	6d e8       	ldi	r22, 0x8D	; 141
     b52:	70 e2       	ldi	r23, 0x20	; 32
     b54:	0e 94 f8 07 	call	0xff0	; 0xff0 <processCommand>
     b58:	c8 2f       	mov	r28, r24

                    //Assume the command processor handled the packetization
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     b62:	e0 ea       	ldi	r30, 0xA0	; 160
     b64:	fa e0       	ldi	r31, 0x0A	; 10
     b66:	13 82       	std	Z+3, r1	; 0x03
                    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     b68:	80 91 8d 20 	lds	r24, 0x208D
     b6c:	80 93 a0 0a 	sts	0x0AA0, r24
     b70:	80 e4       	ldi	r24, 0x40	; 64
     b72:	8a 95       	dec	r24
     b74:	f1 f7       	brne	.-4      	; 0xb72 <doDaisyTask+0x1f6>
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	81 83       	std	Z+1, r24	; 0x01
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     b7a:	84 e0       	ldi	r24, 0x04	; 4
     b7c:	83 83       	std	Z+3, r24	; 0x03
                    activateDMAChannel(&UPSTREAM_DMA,packetSize-1);
     b7e:	8c 2f       	mov	r24, r28
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	01 97       	sbiw	r24, 0x01	; 1
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     b84:	e0 e1       	ldi	r30, 0x10	; 16
     b86:	f1 e0       	ldi	r31, 0x01	; 1
     b88:	84 83       	std	Z+4, r24	; 0x04
     b8a:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     b8c:	84 e8       	ldi	r24, 0x84	; 132
     b8e:	80 93 10 01 	sts	0x0110, r24
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
                    activateDMAChannel(&UPSTREAM_DMA,packetSize-1);
                    daisyState = DAISY_TRANSMITTING;
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	80 93 0c 21 	sts	0x210C, r24
     b98:	48 c0       	rjmp	.+144    	; 0xc2a <doDaisyTask+0x2ae>
                }
            }
            break;

        case DAISY_TRANSMITTING:
            if(downstreamTimedout)
     b9a:	80 91 04 20 	lds	r24, 0x2004
     b9e:	88 23       	and	r24, r24
     ba0:	f1 f0       	breq	.+60     	; 0xbde <doDaisyTask+0x262>
            {
                cli();
     ba2:	f8 94       	cli
                downstreamTimedout = 0;
     ba4:	10 92 04 20 	sts	0x2004, r1
                sei();
     ba8:	78 94       	sei
                //Downstream timed out, so just finish transmitting upstream and take no further action
                //Cancel waiting for a downstream
                DOWNSTREAM_DMA.CTRLA = 0x00;
     baa:	10 92 20 01 	sts	0x0120, r1
                //Wait for it to disable
                while(DOWNSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     bae:	80 91 20 01 	lds	r24, 0x0120
     bb2:	87 fd       	sbrc	r24, 7
     bb4:	fc cf       	rjmp	.-8      	; 0xbae <doDaisyTask+0x232>

                //Issue a reset
                DOWNSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     bb6:	c0 e4       	ldi	r28, 0x40	; 64
     bb8:	c0 93 20 01 	sts	0x0120, r28

                //Now set back to outbound and wait
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     bbc:	80 e2       	ldi	r24, 0x20	; 32
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	6c e6       	ldi	r22, 0x6C	; 108
     bc2:	40 ea       	ldi	r20, 0xA0	; 160
     bc4:	59 e0       	ldi	r21, 0x09	; 9
     bc6:	27 e0       	ldi	r18, 0x07	; 7
     bc8:	30 e2       	ldi	r19, 0x20	; 32
     bca:	01 e0       	ldi	r16, 0x01	; 1
     bcc:	0e 94 1d 02 	call	0x43a	; 0x43a <prepareDMAChannel>
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     bd0:	e0 ea       	ldi	r30, 0xA0	; 160
     bd2:	f9 e0       	ldi	r31, 0x09	; 9
     bd4:	c1 83       	std	Z+1, r28	; 0x01
                DOWNSTREAM_CONFIG = OUTBOUND;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	80 93 00 20 	sts	0x2000, r24
                DOWNSTREAM_USART.CTRLA = 0x00;
     bdc:	13 82       	std	Z+3, r1	; 0x03
            }
            //System is pushing data upstream, but it might be done
            if(upstreamTxDone)
     bde:	80 91 88 20 	lds	r24, 0x2088
     be2:	90 91 89 20 	lds	r25, 0x2089
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	01 f1       	breq	.+64     	; 0xc2a <doDaisyTask+0x2ae>
            {
                //The upstream transmitter is loaded with data (but possibly not done)

                cli();
     bea:	f8 94       	cli
                upstreamTxDone = 0;
     bec:	10 92 88 20 	sts	0x2088, r1
     bf0:	10 92 89 20 	sts	0x2089, r1
                sei();
     bf4:	78 94       	sei

                if(downstreamSizeReceived && passthroughWaiting)
     bf6:	80 91 86 20 	lds	r24, 0x2086
     bfa:	88 23       	and	r24, r24
     bfc:	61 f0       	breq	.+24     	; 0xc16 <doDaisyTask+0x29a>
     bfe:	80 91 06 20 	lds	r24, 0x2006
     c02:	88 23       	and	r24, r24
     c04:	41 f0       	breq	.+16     	; 0xc16 <doDaisyTask+0x29a>
                {
                    //The passthrough packet has already arrived.  Just send it upstream
                    passthroughWaiting = 0;
     c06:	10 92 06 20 	sts	0x2006, r1
                    daisyState = DAISY_TRANSMITTING;
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	80 93 0c 21 	sts	0x210C, r24
                    passthroughToUpstream();
     c10:	0e 94 19 04 	call	0x832	; 0x832 <passthroughToUpstream>
     c14:	0a c0       	rjmp	.+20     	; 0xc2a <doDaisyTask+0x2ae>
                }
                else if(passthroughWaiting)
     c16:	80 91 06 20 	lds	r24, 0x2006
                {
                    //Just go back to idle.  Another notification will arrive to wake up when the downstream reply is delivered
                    daisyState = DAISY_IDLE;
     c1a:	10 92 0c 21 	sts	0x210C, r1
                    //The passthrough packet has already arrived.  Just send it upstream
                    passthroughWaiting = 0;
                    daisyState = DAISY_TRANSMITTING;
                    passthroughToUpstream();
                }
                else if(passthroughWaiting)
     c1e:	88 23       	and	r24, r24
     c20:	21 f4       	brne	.+8      	; 0xc2a <doDaisyTask+0x2ae>
                } else {
                    //Nothing else is coming  Reset to idle after full transmission complete
                    daisyState = DAISY_IDLE;
                    //Now wait for the transmission to complete entirely
                    //while(!(UPSTREAM_USART.STATUS & USART_TXCIF_bm));
                    configureHalfDuplexLink(UPSTREAM,INBOUND);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	60 e0       	ldi	r22, 0x00	; 0
     c26:	0e 94 48 02 	call	0x490	; 0x490 <configureHalfDuplexLink>

        default:
            break;
    }

}
     c2a:	cf 91       	pop	r28
     c2c:	0f 91       	pop	r16
     c2e:	08 95       	ret

00000c30 <configureSPIModulesEncoder>:

void configureSPIModulesEncoder(void)
{
    //This part expects an idling high SCLK, and it wants to setup data on the RISING clock edge and sample on the FALLING.  This is Mode 2

    ENCODERSPI.INTCTRL = SPI_INTLVL_OFF_gc;
     c30:	e0 ec       	ldi	r30, 0xC0	; 192
     c32:	f8 e0       	ldi	r31, 0x08	; 8
     c34:	11 82       	std	Z+1, r1	; 0x01
    ENCODERSPI.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_2_gc | SPI_PRESCALER_DIV64_gc | SPI_CLK2X_bm;
     c36:	8a ed       	ldi	r24, 0xDA	; 218
     c38:	80 83       	st	Z, r24
}
     c3a:	08 95       	ret

00000c3c <readRawEncoder>:
int16_t readRawEncoder(void)
{
    uint8_t temp;
    uint8_t temp2;

    configureSPIModulesEncoder();
     c3c:	0e 94 18 06 	call	0xc30	; 0xc30 <configureSPIModulesEncoder>
     c40:	8a e0       	ldi	r24, 0x0A	; 10
     c42:	8a 95       	dec	r24
     c44:	f1 f7       	brne	.-4      	; 0xc42 <readRawEncoder+0x6>
     c46:	00 c0       	rjmp	.+0      	; 0xc48 <readRawEncoder+0xc>
    _delay_us(1);
    //ENCODER_CS13_PORT.OUTCLR = ENCODER_CS13_PIN; //Chip select
    PORTC.OUTSET = ENC_PORTC_MUX_ADDR << PORTC_MUX_SHIFT;
     c48:	8c e1       	ldi	r24, 0x1C	; 28
     c4a:	e0 e4       	ldi	r30, 0x40	; 64
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	85 83       	std	Z+5, r24	; 0x05
    PORTA.OUTCLR = PORTA_MUX_EN;
     c50:	80 e4       	ldi	r24, 0x40	; 64
     c52:	e0 e0       	ldi	r30, 0x00	; 0
     c54:	f6 e0       	ldi	r31, 0x06	; 6
     c56:	86 83       	std	Z+6, r24	; 0x06
     c58:	85 e3       	ldi	r24, 0x35	; 53
     c5a:	8a 95       	dec	r24
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <readRawEncoder+0x1e>
     c5e:	00 00       	nop
    _delay_us(5);

    ENCODERSPI.DATA = 0x00;
     c60:	e0 ec       	ldi	r30, 0xC0	; 192
     c62:	f8 e0       	ldi	r31, 0x08	; 8
     c64:	13 82       	std	Z+3, r1	; 0x03
    while(!(ENCODERSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     c66:	80 91 c2 08 	lds	r24, 0x08C2
     c6a:	87 ff       	sbrs	r24, 7
     c6c:	fc cf       	rjmp	.-8      	; 0xc66 <readRawEncoder+0x2a>
    temp = ENCODERSPI.DATA;
     c6e:	20 91 c3 08 	lds	r18, 0x08C3

    ENCODERSPI.DATA = 0x00;
     c72:	e0 ec       	ldi	r30, 0xC0	; 192
     c74:	f8 e0       	ldi	r31, 0x08	; 8
     c76:	13 82       	std	Z+3, r1	; 0x03
    while(!(ENCODERSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     c78:	80 91 c2 08 	lds	r24, 0x08C2
     c7c:	87 ff       	sbrs	r24, 7
     c7e:	fc cf       	rjmp	.-8      	; 0xc78 <readRawEncoder+0x3c>
    temp2 = ENCODERSPI.DATA;
     c80:	80 91 c3 08 	lds	r24, 0x08C3

    //ENCODER_CS13_PORT.OUTSET = ENCODER_CS13_PIN; //Chip select
    PORTA.OUTSET = PORTA_MUX_EN;
     c84:	90 e4       	ldi	r25, 0x40	; 64
     c86:	e0 e0       	ldi	r30, 0x00	; 0
     c88:	f6 e0       	ldi	r31, 0x06	; 6
     c8a:	95 83       	std	Z+5, r25	; 0x05
    PORTC.OUTCLR = PORTC_MUX_MASK;
     c8c:	9c e1       	ldi	r25, 0x1C	; 28
     c8e:	e0 e4       	ldi	r30, 0x40	; 64
     c90:	f6 e0       	ldi	r31, 0x06	; 6
     c92:	96 83       	std	Z+6, r25	; 0x06
    
    //The serial port is likely strange because the encoder will likely have a dummy bit at the front.
    return ((temp << 3) & 0x3F8) | ((temp2 >> 5) & 0x007);
     c94:	82 95       	swap	r24
     c96:	86 95       	lsr	r24
     c98:	87 70       	andi	r24, 0x07	; 7
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	43 e0       	ldi	r20, 0x03	; 3
     ca0:	22 0f       	add	r18, r18
     ca2:	33 1f       	adc	r19, r19
     ca4:	4a 95       	dec	r20
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <readRawEncoder+0x64>
     ca8:	28 7f       	andi	r18, 0xF8	; 248
     caa:	33 70       	andi	r19, 0x03	; 3
     cac:	82 2b       	or	r24, r18
     cae:	93 2b       	or	r25, r19
}
     cb0:	08 95       	ret

00000cb2 <readEncoder>:

int16_t readEncoder(void)
{
    int16_t rawEncoder = readRawEncoder();
     cb2:	0e 94 1e 06 	call	0xc3c	; 0xc3c <readRawEncoder>
     cb6:	9c 01       	movw	r18, r24
    
    int16_t top = (1023 + encoderOffset) - rawEncoder;
     cb8:	80 91 0d 21 	lds	r24, 0x210D
     cbc:	90 91 0e 21 	lds	r25, 0x210E
     cc0:	ac 01       	movw	r20, r24
     cc2:	41 50       	subi	r20, 0x01	; 1
     cc4:	5c 4f       	sbci	r21, 0xFC	; 252
     cc6:	42 1b       	sub	r20, r18
     cc8:	53 0b       	sbc	r21, r19
    int16_t middle = encoderOffset - rawEncoder;
     cca:	dc 01       	movw	r26, r24
     ccc:	a2 1b       	sub	r26, r18
     cce:	b3 0b       	sbc	r27, r19
    int16_t bottom = (encoderOffset - 1023) - rawEncoder;
     cd0:	8f 5f       	subi	r24, 0xFF	; 255
     cd2:	93 40       	sbci	r25, 0x03	; 3
     cd4:	82 1b       	sub	r24, r18
     cd6:	93 0b       	sbc	r25, r19
    
    // find the minimum of the 3 absolute values, then return that value as non-absolute.
    // this only works because the valid range for the sensor is less than 512.
    // this should let you calibrate the joint in any angle and still get valid readings, even negative values.
    if (abs(top) < abs(middle))
     cd8:	ba 01       	movw	r22, r20
     cda:	57 ff       	sbrs	r21, 7
     cdc:	04 c0       	rjmp	.+8      	; 0xce6 <readEncoder+0x34>
     cde:	66 27       	eor	r22, r22
     ce0:	77 27       	eor	r23, r23
     ce2:	64 1b       	sub	r22, r20
     ce4:	75 0b       	sbc	r23, r21
     ce6:	fd 01       	movw	r30, r26
     ce8:	b7 ff       	sbrs	r27, 7
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <readEncoder+0x42>
     cec:	ee 27       	eor	r30, r30
     cee:	ff 27       	eor	r31, r31
     cf0:	ea 1b       	sub	r30, r26
     cf2:	fb 0b       	sbc	r31, r27
    {
        if (abs(top) < abs(bottom)) 
     cf4:	9c 01       	movw	r18, r24
    int16_t bottom = (encoderOffset - 1023) - rawEncoder;
    
    // find the minimum of the 3 absolute values, then return that value as non-absolute.
    // this only works because the valid range for the sensor is less than 512.
    // this should let you calibrate the joint in any angle and still get valid readings, even negative values.
    if (abs(top) < abs(middle))
     cf6:	6e 17       	cp	r22, r30
     cf8:	7f 07       	cpc	r23, r31
     cfa:	54 f4       	brge	.+20     	; 0xd10 <readEncoder+0x5e>
    {
        if (abs(top) < abs(bottom)) 
     cfc:	97 ff       	sbrs	r25, 7
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <readEncoder+0x56>
     d00:	22 27       	eor	r18, r18
     d02:	33 27       	eor	r19, r19
     d04:	28 1b       	sub	r18, r24
     d06:	39 0b       	sbc	r19, r25
     d08:	62 17       	cp	r22, r18
     d0a:	73 07       	cpc	r23, r19
     d0c:	64 f4       	brge	.+24     	; 0xd26 <readEncoder+0x74>
     d0e:	0c c0       	rjmp	.+24     	; 0xd28 <readEncoder+0x76>
             return top; 
        else 
             return bottom;
    }
    else if (abs(middle) < abs(bottom))
     d10:	97 ff       	sbrs	r25, 7
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <readEncoder+0x6a>
     d14:	22 27       	eor	r18, r18
     d16:	33 27       	eor	r19, r19
     d18:	28 1b       	sub	r18, r24
     d1a:	39 0b       	sbc	r19, r25
     d1c:	e2 17       	cp	r30, r18
     d1e:	f3 07       	cpc	r31, r19
     d20:	14 f4       	brge	.+4      	; 0xd26 <readEncoder+0x74>
        return middle;
     d22:	ad 01       	movw	r20, r26
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <readEncoder+0x76>
    else 
        return bottom;
     d26:	ac 01       	movw	r20, r24
}
     d28:	ca 01       	movw	r24, r20
     d2a:	08 95       	ret

00000d2c <configurePortIOProximal>:
    //PA3 - PROXIMAL3
    //PA4 - PROXIMAL4
    //PA5 - nCS6                 nCS12
    //PA6 - MUX nE1              nCS13
    //PA7 - ACC nCS
    PORTA.OUT = 0xE0; //E0
     d2c:	e0 e0       	ldi	r30, 0x00	; 0
     d2e:	f6 e0       	ldi	r31, 0x06	; 6
     d30:	80 ee       	ldi	r24, 0xE0	; 224
     d32:	84 83       	std	Z+4, r24	; 0x04
    PORTA.DIR = 0xE0; //E0
     d34:	80 83       	st	Z, r24

    //PB0 - nCS1
    //PB1 - nCS2
    //PB2 - nCS3
    //PB3 - nCS4
    PORTB.OUT = 0x0F;
     d36:	e0 e2       	ldi	r30, 0x20	; 32
     d38:	f6 e0       	ldi	r31, 0x06	; 6
     d3a:	8f e0       	ldi	r24, 0x0F	; 15
     d3c:	84 83       	std	Z+4, r24	; 0x04
    PORTB.DIR = 0x0F;
     d3e:	80 83       	st	Z, r24
    //PC3 - MUX A1              nCS7
    //PC4 - MUX A2              nCS8
    //PC5 - MOSI
    //PC6 - MISO
    //PC7 - SCK
    PORTC.OUT = 0x1D; //01
     d40:	e0 e4       	ldi	r30, 0x40	; 64
     d42:	f6 e0       	ldi	r31, 0x06	; 6
     d44:	8d e1       	ldi	r24, 0x1D	; 29
     d46:	84 83       	std	Z+4, r24	; 0x04
    PORTC.DIR = 0xA3; //BF
     d48:	83 ea       	ldi	r24, 0xA3	; 163
     d4a:	80 83       	st	Z, r24
    //PD3 - TX_OUTBOUND
    //PD4 - INBOUND_nEN_RX
    //PD5 - ACC MOSI                     INBOUND_EN_TX
    //PD6 - ACC MISO                     RX_INBOUND
    //PD7 - ACC SCK                      TX_INBOUND
    PORTD.OUT = 0x02; //22
     d4c:	e0 e6       	ldi	r30, 0x60	; 96
     d4e:	f6 e0       	ldi	r31, 0x06	; 6
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	84 83       	std	Z+4, r24	; 0x04
    PORTD.DIR = 0xBB; //BB
     d54:	9b eb       	ldi	r25, 0xBB	; 187
     d56:	90 83       	st	Z, r25

    //PE0 - NC                    LED_PWM
    //PE1 - INBOUND_EN_TX         nCS9
    //PE2 - RX_INBOUND            nCS10
    //PE3 - TX_INBOUND            nCS11
    PORTE.OUT = 0x02; //0F
     d58:	e0 e8       	ldi	r30, 0x80	; 128
     d5a:	f6 e0       	ldi	r31, 0x06	; 6
     d5c:	84 83       	std	Z+4, r24	; 0x04
    PORTE.DIR = 0x0A; //0F
     d5e:	8a e0       	ldi	r24, 0x0A	; 10
     d60:	80 83       	st	Z, r24

    //PR0 - ACC INT2
    //PR1 - ACC INT1
    PORTR.OUT = 0x00;
     d62:	e0 ee       	ldi	r30, 0xE0	; 224
     d64:	f7 e0       	ldi	r31, 0x07	; 7
     d66:	14 82       	std	Z+4, r1	; 0x04
    PORTR.DIR = 0x00;
     d68:	10 82       	st	Z, r1

}
     d6a:	08 95       	ret

00000d6c <configurePortIODistal>:
* This function configures the peripheral I/O ports.  The direction,
* default out state, and drivers are set up here.
************************************************************************/
void configurePortIODistal(void)
{
  configurePortIOProximal();
     d6c:	0e 94 96 06 	call	0xd2c	; 0xd2c <configurePortIOProximal>
}
     d70:	08 95       	ret

00000d72 <ReadIntFromEEPROM>:
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	0f 92       	push	r0
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
     d84:	e8 2e       	mov	r14, r24
     d86:	ff 24       	eor	r15, r15
     d88:	ee 0c       	add	r14, r14
     d8a:	ff 1c       	adc	r15, r15
     d8c:	ee 0c       	add	r14, r14
     d8e:	ff 1c       	adc	r15, r15
     d90:	8b 01       	movw	r16, r22
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4; i++)
     d92:	20 e0       	ldi	r18, 0x00	; 0
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
     d94:	c7 01       	movw	r24, r14
     d96:	29 83       	std	Y+1, r18	; 0x01
     d98:	0e 94 ca 0c 	call	0x1994	; 0x1994 <__eerd_byte_x32a4u>
     d9c:	f8 01       	movw	r30, r16
     d9e:	81 93       	st	Z+, r24
     da0:	8f 01       	movw	r16, r30
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4; i++)
     da2:	29 81       	ldd	r18, Y+1	; 0x01
     da4:	2f 5f       	subi	r18, 0xFF	; 255
     da6:	08 94       	sec
     da8:	e1 1c       	adc	r14, r1
     daa:	f1 1c       	adc	r15, r1
     dac:	24 30       	cpi	r18, 0x04	; 4
     dae:	91 f7       	brne	.-28     	; 0xd94 <ReadIntFromEEPROM+0x22>
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
}
     db0:	0f 90       	pop	r0
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	08 95       	ret

00000dc0 <WriteIntToEEPROM>:
    ReadIntFromEEPROM(EEPROM_ADDRESS_ENCODER_OFFSET, (uint8_t*)&temp);
    encoderOffset = temp;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	0f 92       	push	r0
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
     dd2:	8b 01       	movw	r16, r22
     dd4:	e8 2e       	mov	r14, r24
     dd6:	ff 24       	eor	r15, r15
     dd8:	ee 0c       	add	r14, r14
     dda:	ff 1c       	adc	r15, r15
     ddc:	ee 0c       	add	r14, r14
     dde:	ff 1c       	adc	r15, r15
    encoderOffset = temp;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
     de0:	20 e0       	ldi	r18, 0x00	; 0
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
     de2:	f8 01       	movw	r30, r16
     de4:	61 91       	ld	r22, Z+
     de6:	8f 01       	movw	r16, r30
     de8:	c7 01       	movw	r24, r14
     dea:	29 83       	std	Y+1, r18	; 0x01
     dec:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__eewr_byte_x32a4u>
    encoderOffset = temp;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
     df0:	29 81       	ldd	r18, Y+1	; 0x01
     df2:	2f 5f       	subi	r18, 0xFF	; 255
     df4:	08 94       	sec
     df6:	e1 1c       	adc	r14, r1
     df8:	f1 1c       	adc	r15, r1
     dfa:	24 30       	cpi	r18, 0x04	; 4
     dfc:	91 f7       	brne	.-28     	; 0xde2 <WriteIntToEEPROM+0x22>
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}
     dfe:	0f 90       	pop	r0
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	ff 90       	pop	r15
     e0a:	ef 90       	pop	r14
     e0c:	08 95       	ret

00000e0e <LEDon>:
  }
}

void LEDon(void)
{
    PORTC.OUT &= ~0x01;
     e0e:	e0 e4       	ldi	r30, 0x40	; 64
     e10:	f6 e0       	ldi	r31, 0x06	; 6
     e12:	84 81       	ldd	r24, Z+4	; 0x04
     e14:	8e 7f       	andi	r24, 0xFE	; 254
     e16:	84 83       	std	Z+4, r24	; 0x04
}
     e18:	08 95       	ret

00000e1a <LEDoff>:

void LEDoff(void)
{
    PORTC.OUT |= 0x01;
     e1a:	e0 e4       	ldi	r30, 0x40	; 64
     e1c:	f6 e0       	ldi	r31, 0x06	; 6
     e1e:	84 81       	ldd	r24, Z+4	; 0x04
     e20:	81 60       	ori	r24, 0x01	; 1
     e22:	84 83       	std	Z+4, r24	; 0x04
}
     e24:	08 95       	ret

00000e26 <initStateFromEEPROM>:
    outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
    return 4+responseSize;
}

static void initStateFromEEPROM(void)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	00 d0       	rcall	.+0      	; 0xe2c <initStateFromEEPROM+0x6>
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <initStateFromEEPROM+0x8>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
    uint32_t temp = 0;
     e32:	19 82       	std	Y+1, r1	; 0x01
     e34:	1a 82       	std	Y+2, r1	; 0x02
     e36:	1b 82       	std	Y+3, r1	; 0x03
     e38:	1c 82       	std	Y+4, r1	; 0x04
    
    ReadIntFromEEPROM(EEPROM_ADDRESS_LED, (uint8_t*)&temp);
     e3a:	8f e1       	ldi	r24, 0x1F	; 31
     e3c:	be 01       	movw	r22, r28
     e3e:	6f 5f       	subi	r22, 0xFF	; 255
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	0e 94 b9 06 	call	0xd72	; 0xd72 <ReadIntFromEEPROM>
    if(temp)
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	ab 81       	ldd	r26, Y+3	; 0x03
     e4c:	bc 81       	ldd	r27, Y+4	; 0x04
     e4e:	00 97       	sbiw	r24, 0x00	; 0
     e50:	a1 05       	cpc	r26, r1
     e52:	b1 05       	cpc	r27, r1
     e54:	19 f0       	breq	.+6      	; 0xe5c <initStateFromEEPROM+0x36>
        LEDon();
     e56:	0e 94 07 07 	call	0xe0e	; 0xe0e <LEDon>
     e5a:	02 c0       	rjmp	.+4      	; 0xe60 <initStateFromEEPROM+0x3a>
    else
        LEDoff();
     e5c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LEDoff>
    
    ReadIntFromEEPROM(EEPROM_ADDRESS_ENCODER_OFFSET, (uint8_t*)&temp);
     e60:	8c e1       	ldi	r24, 0x1C	; 28
     e62:	be 01       	movw	r22, r28
     e64:	6f 5f       	subi	r22, 0xFF	; 255
     e66:	7f 4f       	sbci	r23, 0xFF	; 255
     e68:	0e 94 b9 06 	call	0xd72	; 0xd72 <ReadIntFromEEPROM>
    encoderOffset = temp;
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	9a 81       	ldd	r25, Y+2	; 0x02
     e70:	80 93 0d 21 	sts	0x210D, r24
     e74:	90 93 0e 21 	sts	0x210E, r25
}
     e78:	24 96       	adiw	r28, 0x04	; 4
     e7a:	cd bf       	out	0x3d, r28	; 61
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <BootRelay>:
    outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
    return 4;
}

void BootRelay(uint8_t *commandPacket)
{
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	a0 97       	sbiw	r28, 0x20	; 32
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	de bf       	out	0x3e, r29	; 62
  // overview: 2)configure for 115200 baud passthrough
  // overview: 3)start a 20 second timer
  // overview: 4)do the serial passthrough, blink LED
  // overview: 5)wait for timer to finish, then reset/reboot

  cli(); // disable all interrupts, nothing else going on
     e92:	f8 94       	cli
  DMA.CTRL = 0; // disable the DMA controller
     e94:	10 92 00 01 	sts	0x0100, r1
  
  // repeat the command to the target
  DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
     e98:	e0 ea       	ldi	r30, 0xA0	; 160
     e9a:	f9 e0       	ldi	r31, 0x09	; 9
     e9c:	13 82       	std	Z+3, r1	; 0x03
  DOWNSTREAM_USART.CTRLB |= USART_RXEN_bm | USART_TXEN_bm; //enable RX and TX
     e9e:	20 91 a4 09 	lds	r18, 0x09A4
     ea2:	28 61       	ori	r18, 0x18	; 24
     ea4:	24 83       	std	Z+4, r18	; 0x04
     ea6:	fc 01       	movw	r30, r24
  for(int i=0;i<COMMAND_PACKET_SIZE;i++)
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
    {
      while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm));
     eac:	20 91 a1 09 	lds	r18, 0x09A1
     eb0:	25 ff       	sbrs	r18, 5
     eb2:	fc cf       	rjmp	.-8      	; 0xeac <BootRelay+0x28>
      DOWNSTREAM_USART.DATA = commandPacket[i];
     eb4:	21 91       	ld	r18, Z+
     eb6:	20 93 a0 09 	sts	0x09A0, r18
  DMA.CTRL = 0; // disable the DMA controller
  
  // repeat the command to the target
  DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
  DOWNSTREAM_USART.CTRLB |= USART_RXEN_bm | USART_TXEN_bm; //enable RX and TX
  for(int i=0;i<COMMAND_PACKET_SIZE;i++)
     eba:	01 96       	adiw	r24, 0x01	; 1
     ebc:	87 30       	cpi	r24, 0x07	; 7
     ebe:	91 05       	cpc	r25, r1
     ec0:	a9 f7       	brne	.-22     	; 0xeac <BootRelay+0x28>
    {
      while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm));
      DOWNSTREAM_USART.DATA = commandPacket[i];
    }
  // dont bother waiting for a response verification
  while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm)); // wait for the data to be read
     ec2:	80 91 a1 09 	lds	r24, 0x09A1
     ec6:	85 ff       	sbrs	r24, 5
     ec8:	fc cf       	rjmp	.-8      	; 0xec2 <BootRelay+0x3e>
  DOWNSTREAM_USART.STATUS = USART_TXCIF_bm; // clear the TX done flag
     eca:	80 e4       	ldi	r24, 0x40	; 64
     ecc:	e0 ea       	ldi	r30, 0xA0	; 160
     ece:	f9 e0       	ldi	r31, 0x09	; 9
     ed0:	81 83       	std	Z+1, r24	; 0x01
  while(!(DOWNSTREAM_USART.STATUS & USART_TXCIF_bm)); // wait for the TX to be done
     ed2:	e0 ea       	ldi	r30, 0xA0	; 160
     ed4:	f9 e0       	ldi	r31, 0x09	; 9
     ed6:	80 91 a1 09 	lds	r24, 0x09A1
     eda:	86 ff       	sbrs	r24, 6
     edc:	fa cf       	rjmp	.-12     	; 0xed2 <BootRelay+0x4e>
  // Reconfigure the serial ports
  //int bsel = 1047;       // 115200 @ 32Mhz as calculated from ProtoTalk.net
  //uint8_t bscale = 10;      // 115200 @ 32Mhz as calculated from ProtoTalk.net
  int bsel = 3269;       // 38,400 @ 32Mhz as calculated from ProtoTalk.net
  uint8_t bscale = -6;      // 38,400 @ 32Mhz as calculated from ProtoTalk.net
  UPSTREAM_USART.CTRLA = 0x00; // disable interrupts
     ede:	a0 ea       	ldi	r26, 0xA0	; 160
     ee0:	ba e0       	ldi	r27, 0x0A	; 10
     ee2:	13 96       	adiw	r26, 0x03	; 3
     ee4:	1c 92       	st	X, r1
     ee6:	13 97       	sbiw	r26, 0x03	; 3
  UPSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
     ee8:	25 ec       	ldi	r18, 0xC5	; 197
     eea:	16 96       	adiw	r26, 0x06	; 6
     eec:	2c 93       	st	X, r18
     eee:	16 97       	sbiw	r26, 0x06	; 6
  UPSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
     ef0:	9c ea       	ldi	r25, 0xAC	; 172
     ef2:	17 96       	adiw	r26, 0x07	; 7
     ef4:	9c 93       	st	X, r25
     ef6:	17 97       	sbiw	r26, 0x07	; 7
  UPSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     ef8:	88 e1       	ldi	r24, 0x18	; 24
     efa:	14 96       	adiw	r26, 0x04	; 4
     efc:	8c 93       	st	X, r24
  DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
     efe:	13 82       	std	Z+3, r1	; 0x03
  DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
     f00:	26 83       	std	Z+6, r18	; 0x06
  DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
     f02:	97 83       	std	Z+7, r25	; 0x07
  DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     f04:	84 83       	std	Z+4, r24	; 0x04
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
  uint8_t down_tail = 0;
     f06:	10 e0       	ldi	r17, 0x00	; 0
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
     f08:	00 e0       	ldi	r16, 0x00	; 0
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
     f0a:	ff 24       	eor	r15, r15
  DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
     f0c:	ee 24       	eor	r14, r14
  DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
  DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
  DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	dc 01       	movw	r26, r24
  DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
  DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
  DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
  DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
     f14:	cc 24       	eor	r12, r12
     f16:	dd 24       	eor	r13, r13
  uint8_t down_head = 0;
  uint8_t down_tail = 0;

  // relay chars while waiting for timeout
  while(sec_cnt < 200) {
    loop_cnt++;
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	a1 1d       	adc	r26, r1
     f1c:	b1 1d       	adc	r27, r1
    if(loop_cnt > 90000L) { // approximately 0.1sec experimentally
     f1e:	81 39       	cpi	r24, 0x91	; 145
     f20:	2f e5       	ldi	r18, 0x5F	; 95
     f22:	92 07       	cpc	r25, r18
     f24:	21 e0       	ldi	r18, 0x01	; 1
     f26:	a2 07       	cpc	r26, r18
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	b2 07       	cpc	r27, r18
     f2c:	88 f0       	brcs	.+34     	; 0xf50 <BootRelay+0xcc>
      loop_cnt=0;
      sec_cnt++;
     f2e:	08 94       	sec
     f30:	c1 1c       	adc	r12, r1
     f32:	d1 1c       	adc	r13, r1
      if((sec_cnt&0x03)==0x03)
     f34:	c6 01       	movw	r24, r12
     f36:	83 70       	andi	r24, 0x03	; 3
     f38:	90 70       	andi	r25, 0x00	; 0
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	19 f4       	brne	.+6      	; 0xf46 <BootRelay+0xc2>
	LEDon();
     f40:	0e 94 07 07 	call	0xe0e	; 0xe0e <LEDon>
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <BootRelay+0xc6>
      else
	LEDoff();
     f46:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LEDoff>

  // relay chars while waiting for timeout
  while(sec_cnt < 200) {
    loop_cnt++;
    if(loop_cnt > 90000L) { // approximately 0.1sec experimentally
      loop_cnt=0;
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	dc 01       	movw	r26, r24
      if((sec_cnt&0x03)==0x03)
	LEDon();
      else
	LEDoff();
    }
    if (DOWNSTREAM_USART.STATUS & USART_RXCIF_bm) {
     f50:	20 91 a1 09 	lds	r18, 0x09A1
     f54:	27 ff       	sbrs	r18, 7
     f56:	0c c0       	rjmp	.+24     	; 0xf70 <BootRelay+0xec>
      up_fifo[up_head++] = DOWNSTREAM_USART.DATA;
     f58:	20 91 a0 09 	lds	r18, 0x09A0
     f5c:	e1 e1       	ldi	r30, 0x11	; 17
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	ec 0f       	add	r30, r28
     f62:	fd 1f       	adc	r31, r29
     f64:	ee 0d       	add	r30, r14
     f66:	f1 1d       	adc	r31, r1
     f68:	20 83       	st	Z, r18
     f6a:	e3 94       	inc	r14
      up_head %= sizeof(up_fifo);
     f6c:	2f e0       	ldi	r18, 0x0F	; 15
     f6e:	e2 22       	and	r14, r18
    }
    if (UPSTREAM_USART.STATUS & USART_RXCIF_bm) {
     f70:	20 91 a1 0a 	lds	r18, 0x0AA1
     f74:	27 ff       	sbrs	r18, 7
     f76:	0b c0       	rjmp	.+22     	; 0xf8e <BootRelay+0x10a>
      down_fifo[down_head++] = UPSTREAM_USART.DATA;
     f78:	20 91 a0 0a 	lds	r18, 0x0AA0
     f7c:	e1 e0       	ldi	r30, 0x01	; 1
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	ec 0f       	add	r30, r28
     f82:	fd 1f       	adc	r31, r29
     f84:	e0 0f       	add	r30, r16
     f86:	f1 1d       	adc	r31, r1
     f88:	20 83       	st	Z, r18
     f8a:	0f 5f       	subi	r16, 0xFF	; 255
      down_head %= sizeof(down_fifo);
     f8c:	0f 70       	andi	r16, 0x0F	; 15
    }
    if (up_head != up_tail && (UPSTREAM_USART.STATUS & USART_DREIF_bm)) {
     f8e:	ef 14       	cp	r14, r15
     f90:	81 f0       	breq	.+32     	; 0xfb2 <BootRelay+0x12e>
     f92:	20 91 a1 0a 	lds	r18, 0x0AA1
     f96:	25 ff       	sbrs	r18, 5
     f98:	0c c0       	rjmp	.+24     	; 0xfb2 <BootRelay+0x12e>
      UPSTREAM_USART.DATA = up_fifo[up_tail++];
     f9a:	e1 e1       	ldi	r30, 0x11	; 17
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	ec 0f       	add	r30, r28
     fa0:	fd 1f       	adc	r31, r29
     fa2:	ef 0d       	add	r30, r15
     fa4:	f1 1d       	adc	r31, r1
     fa6:	20 81       	ld	r18, Z
     fa8:	20 93 a0 0a 	sts	0x0AA0, r18
     fac:	f3 94       	inc	r15
      up_tail %= sizeof(up_fifo);
     fae:	2f e0       	ldi	r18, 0x0F	; 15
     fb0:	f2 22       	and	r15, r18
    }
    if (down_head != down_tail && (DOWNSTREAM_USART.STATUS & USART_DREIF_bm)) {
     fb2:	01 17       	cp	r16, r17
     fb4:	79 f0       	breq	.+30     	; 0xfd4 <BootRelay+0x150>
     fb6:	20 91 a1 09 	lds	r18, 0x09A1
     fba:	25 ff       	sbrs	r18, 5
     fbc:	0b c0       	rjmp	.+22     	; 0xfd4 <BootRelay+0x150>
      DOWNSTREAM_USART.DATA = down_fifo[down_tail++];
     fbe:	e1 e0       	ldi	r30, 0x01	; 1
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	ec 0f       	add	r30, r28
     fc4:	fd 1f       	adc	r31, r29
     fc6:	e1 0f       	add	r30, r17
     fc8:	f1 1d       	adc	r31, r1
     fca:	20 81       	ld	r18, Z
     fcc:	20 93 a0 09 	sts	0x09A0, r18
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
      down_tail %= sizeof(down_fifo);
     fd2:	1f 70       	andi	r17, 0x0F	; 15
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
  uint8_t down_tail = 0;

  // relay chars while waiting for timeout
  while(sec_cnt < 200) {
     fd4:	28 ec       	ldi	r18, 0xC8	; 200
     fd6:	c2 16       	cp	r12, r18
     fd8:	d1 04       	cpc	r13, r1
     fda:	0c f4       	brge	.+2      	; 0xfde <BootRelay+0x15a>
     fdc:	9d cf       	rjmp	.-198    	; 0xf18 <BootRelay+0x94>
      down_tail %= sizeof(down_fifo);
    }
  }

  // 30sec timer finished, reset/reboot
  wdt_enable(WDT_PER_8CLK_gc);
     fde:	93 e0       	ldi	r25, 0x03	; 3
     fe0:	88 ed       	ldi	r24, 0xD8	; 216
     fe2:	08 b6       	in	r0, 0x38	; 56
     fe4:	84 bf       	out	0x34, r24	; 52
     fe6:	90 93 80 00 	sts	0x0080, r25
     fea:	a8 95       	wdr
     fec:	08 be       	out	0x38, r0	; 56
     fee:	ff cf       	rjmp	.-2      	; 0xfee <BootRelay+0x16a>

00000ff0 <processCommand>:
  }
  return 5; // never get here, but keep compiler happy
}

int processCommand(uint8_t *commandPacket,uint8_t *outputBuffer)
{
     ff0:	cf 92       	push	r12
     ff2:	df 92       	push	r13
     ff4:	ef 92       	push	r14
     ff6:	ff 92       	push	r15
     ff8:	0f 93       	push	r16
     ffa:	1f 93       	push	r17
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
    1004:	68 97       	sbiw	r28, 0x18	; 24
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	8c 01       	movw	r16, r24
    100c:	6b 01       	movw	r12, r22
  uint8_t opcode;

  //LEDtoggle();//DEBUG

  opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    100e:	fc 01       	movw	r30, r24
    1010:	81 81       	ldd	r24, Z+1	; 0x01
    1012:	98 2f       	mov	r25, r24
    1014:	90 7f       	andi	r25, 0xF0	; 240

  switch(opcode)
    1016:	90 38       	cpi	r25, 0x80	; 128
    1018:	09 f4       	brne	.+2      	; 0x101c <processCommand+0x2c>
    101a:	96 c0       	rjmp	.+300    	; 0x1148 <processCommand+0x158>
    101c:	91 38       	cpi	r25, 0x81	; 129
    101e:	48 f4       	brcc	.+18     	; 0x1032 <processCommand+0x42>
    1020:	90 36       	cpi	r25, 0x60	; 96
    1022:	09 f4       	brne	.+2      	; 0x1026 <processCommand+0x36>
    1024:	91 c0       	rjmp	.+290    	; 0x1148 <processCommand+0x158>
    1026:	90 37       	cpi	r25, 0x70	; 112
    1028:	09 f4       	brne	.+2      	; 0x102c <processCommand+0x3c>
    102a:	8e c0       	rjmp	.+284    	; 0x1148 <processCommand+0x158>
    102c:	99 23       	and	r25, r25
    102e:	59 f0       	breq	.+22     	; 0x1046 <processCommand+0x56>
    1030:	11 c1       	rjmp	.+546    	; 0x1254 <processCommand+0x264>
    1032:	90 3b       	cpi	r25, 0xB0	; 176
    1034:	09 f4       	brne	.+2      	; 0x1038 <processCommand+0x48>
    1036:	fe c0       	rjmp	.+508    	; 0x1234 <processCommand+0x244>
    1038:	90 3c       	cpi	r25, 0xC0	; 192
    103a:	09 f4       	brne	.+2      	; 0x103e <processCommand+0x4e>
    103c:	bf c0       	rjmp	.+382    	; 0x11bc <processCommand+0x1cc>
    103e:	90 39       	cpi	r25, 0x90	; 144
    1040:	09 f0       	breq	.+2      	; 0x1044 <processCommand+0x54>
    1042:	08 c1       	rjmp	.+528    	; 0x1254 <processCommand+0x264>
    1044:	81 c0       	rjmp	.+258    	; 0x1148 <processCommand+0x158>
    uint16_t collectionBitfield;
    int16_t adcData[7];
    uint8_t accelData[6];
    int16_t encoderData;

    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    1046:	f8 01       	movw	r30, r16
    1048:	e2 80       	ldd	r14, Z+2	; 0x02
    104a:	f3 80       	ldd	r15, Z+3	; 0x03

    if (collectionBitfield & (DATA_COLLECTION_DISTALJOINT_BITMASK | DATA_COLLECTION_DYNAMIC_BITMASK))
    104c:	c7 01       	movw	r24, r14
    104e:	80 70       	andi	r24, 0x00	; 0
    1050:	90 75       	andi	r25, 0x50	; 80
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	21 f0       	breq	.+8      	; 0x105e <processCommand+0x6e>
    {
        captureSweep(adcData);
    1056:	ce 01       	movw	r24, r28
    1058:	0b 96       	adiw	r24, 0x0b	; 11
    105a:	0e 94 75 01 	call	0x2ea	; 0x2ea <captureSweep>
    }

    if(collectionBitfield & DATA_COLLECTION_ACCELERATION_BITMASK)
    105e:	f7 fe       	sbrs	r15, 7
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <processCommand+0x90>
    {
        readAxes(accelData);
    1062:	ce 01       	movw	r24, r28
    1064:	05 96       	adiw	r24, 0x05	; 5
    1066:	0e 94 54 01 	call	0x2a8	; 0x2a8 <readAxes>
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &accelData, 6);
    106a:	f6 01       	movw	r30, r12
    106c:	33 96       	adiw	r30, 0x03	; 3
    106e:	de 01       	movw	r26, r28
    1070:	15 96       	adiw	r26, 0x05	; 5
    1072:	86 e0       	ldi	r24, 0x06	; 6
    1074:	0d 90       	ld	r0, X+
    1076:	01 92       	st	Z+, r0
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	e1 f7       	brne	.-8      	; 0x1074 <processCommand+0x84>
        responseSize += 6;
    107c:	06 e0       	ldi	r16, 0x06	; 6
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <processCommand+0x92>
    CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;    //Select 1.024 kHz from internal oscillator for RTC clock source
}

static int handleCollectionCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint8_t responseSize = 0;
    1080:	00 e0       	ldi	r16, 0x00	; 0
        readAxes(accelData);
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &accelData, 6);
        responseSize += 6;
    }

    if(collectionBitfield & DATA_COLLECTION_DYNAMIC_BITMASK)
    1082:	f6 fe       	sbrs	r15, 6
    1084:	0d c0       	rjmp	.+26     	; 0x10a0 <processCommand+0xb0>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &adcData[DYNAMIC_OFFSET], 6);
    1086:	e0 2f       	mov	r30, r16
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	33 96       	adiw	r30, 0x03	; 3
    108c:	ec 0d       	add	r30, r12
    108e:	fd 1d       	adc	r31, r13
    1090:	de 01       	movw	r26, r28
    1092:	53 96       	adiw	r26, 0x13	; 19
    1094:	86 e0       	ldi	r24, 0x06	; 6
    1096:	0d 90       	ld	r0, X+
    1098:	01 92       	st	Z+, r0
    109a:	81 50       	subi	r24, 0x01	; 1
    109c:	e1 f7       	brne	.-8      	; 0x1096 <processCommand+0xa6>
        responseSize += 6;
    109e:	0a 5f       	subi	r16, 0xFA	; 250
    }

    if(collectionBitfield & DATA_COLLECTION_DISTALJOINT_BITMASK)
    10a0:	f4 fe       	sbrs	r15, 4
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <processCommand+0xce>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &adcData[DISTALJOINT_OFFSET], 8);
    10a4:	e0 2f       	mov	r30, r16
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	33 96       	adiw	r30, 0x03	; 3
    10aa:	ec 0d       	add	r30, r12
    10ac:	fd 1d       	adc	r31, r13
    10ae:	de 01       	movw	r26, r28
    10b0:	1b 96       	adiw	r26, 0x0b	; 11
    10b2:	88 e0       	ldi	r24, 0x08	; 8
    10b4:	0d 90       	ld	r0, X+
    10b6:	01 92       	st	Z+, r0
    10b8:	81 50       	subi	r24, 0x01	; 1
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <processCommand+0xc4>
        responseSize += 8;
    10bc:	08 5f       	subi	r16, 0xF8	; 248
    }

    if(collectionBitfield & DATA_COLLECTION_PROXIMALJOINT_BITMASK)
    10be:	f3 fe       	sbrs	r15, 3
    10c0:	08 c0       	rjmp	.+16     	; 0x10d2 <processCommand+0xe2>
    {
        encoderData = readEncoder();
    10c2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <readEncoder>
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &encoderData, 2);
    10c6:	f6 01       	movw	r30, r12
    10c8:	e0 0f       	add	r30, r16
    10ca:	f1 1d       	adc	r31, r1
    10cc:	83 83       	std	Z+3, r24	; 0x03
    10ce:	94 83       	std	Z+4, r25	; 0x04
        responseSize += 2;
    10d0:	0e 5f       	subi	r16, 0xFE	; 254
    }

    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
    10d2:	f1 fe       	sbrs	r15, 1
    10d4:	12 c0       	rjmp	.+36     	; 0x10fa <processCommand+0x10a>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &pressureData, numPressureSensors*2);
    10d6:	40 91 01 20 	lds	r20, 0x2001
    10da:	80 2f       	mov	r24, r16
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	03 96       	adiw	r24, 0x03	; 3
    10e0:	8c 0d       	add	r24, r12
    10e2:	9d 1d       	adc	r25, r13
    10e4:	50 e0       	ldi	r21, 0x00	; 0
    10e6:	44 0f       	add	r20, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	65 e5       	ldi	r22, 0x55	; 85
    10ec:	71 e2       	ldi	r23, 0x21	; 33
    10ee:	0e 94 c1 0c 	call	0x1982	; 0x1982 <memcpy>
        responseSize += numPressureSensors*2;
    10f2:	80 91 01 20 	lds	r24, 0x2001
    10f6:	88 0f       	add	r24, r24
    10f8:	08 0f       	add	r16, r24
    }

    if(collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
    10fa:	e1 fe       	sbrs	r14, 1
    10fc:	10 c0       	rjmp	.+32     	; 0x111e <processCommand+0x12e>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &RxCheckSumErrCnt, 4);
    10fe:	f6 01       	movw	r30, r12
    1100:	e0 0f       	add	r30, r16
    1102:	f1 1d       	adc	r31, r1
    1104:	80 91 11 21 	lds	r24, 0x2111
    1108:	90 91 12 21 	lds	r25, 0x2112
    110c:	a0 91 13 21 	lds	r26, 0x2113
    1110:	b0 91 14 21 	lds	r27, 0x2114
    1114:	83 83       	std	Z+3, r24	; 0x03
    1116:	94 83       	std	Z+4, r25	; 0x04
    1118:	a5 83       	std	Z+5, r26	; 0x05
    111a:	b6 83       	std	Z+6, r27	; 0x06
        responseSize += 4;
    111c:	0c 5f       	subi	r16, 0xFC	; 252
    }

    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3+responseSize;
    111e:	80 2f       	mov	r24, r16
    1120:	8d 5f       	subi	r24, 0xFD	; 253
    1122:	f6 01       	movw	r30, r12
    1124:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = DATA_COLLECTION_OPCODE;
    1126:	11 82       	std	Z+1, r1	; 0x01
    outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    1128:	12 82       	std	Z+2, r1	; 0x02
    outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	b8 01       	movw	r22, r16
    112e:	6d 5f       	subi	r22, 0xFD	; 253
    1130:	7f 4f       	sbci	r23, 0xFF	; 255
    1132:	76 01       	movw	r14, r12
    1134:	e6 0e       	add	r14, r22
    1136:	f7 1e       	adc	r15, r23
    1138:	c6 01       	movw	r24, r12
    113a:	0e 94 08 04 	call	0x810	; 0x810 <computeChecksum>
    113e:	f7 01       	movw	r30, r14
    1140:	80 83       	st	Z, r24
    return 4+responseSize;
    1142:	c8 01       	movw	r24, r16
    1144:	04 96       	adiw	r24, 0x04	; 4
  opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;

  switch(opcode)
  {
      case DATA_COLLECTION_OPCODE:
          return handleCollectionCommand(commandPacket,outputBuffer);
    1146:	95 c0       	rjmp	.+298    	; 0x1272 <processCommand+0x282>
    uint8_t opcode;
    uint8_t address;
    uint8_t responseSize = 4;

    opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    address = commandPacket[COMMAND_OFFSET] & 0x1F;
    1148:	8f 71       	andi	r24, 0x1F	; 31

    switch(opcode)
    114a:	90 37       	cpi	r25, 0x70	; 112
    114c:	51 f0       	breq	.+20     	; 0x1162 <processCommand+0x172>
    114e:	91 37       	cpi	r25, 0x71	; 113
    1150:	18 f4       	brcc	.+6      	; 0x1158 <processCommand+0x168>
    1152:	90 36       	cpi	r25, 0x60	; 96
    1154:	59 f5       	brne	.+86     	; 0x11ac <processCommand+0x1bc>
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <processCommand+0x172>
    1158:	90 38       	cpi	r25, 0x80	; 128
    115a:	d1 f0       	breq	.+52     	; 0x1190 <processCommand+0x1a0>
    115c:	90 39       	cpi	r25, 0x90	; 144
    115e:	31 f5       	brne	.+76     	; 0x11ac <processCommand+0x1bc>
    1160:	17 c0       	rjmp	.+46     	; 0x1190 <processCommand+0x1a0>
    {
        case MOTOR_PARAMETER_RE_L_OPCODE:
        case MOTOR_PARAMETER_RE_H_OPCODE:
            // Read 4 bytes of data
            ReadIntFromEEPROM(address, &outputBuffer[RESPONSE_PAYLOAD_OFFSET]);
    1162:	b6 01       	movw	r22, r12
    1164:	6d 5f       	subi	r22, 0xFD	; 253
    1166:	7f 4f       	sbci	r23, 0xFF	; 255
    1168:	0e 94 b9 06 	call	0xd72	; 0xd72 <ReadIntFromEEPROM>
            // finish up the packet
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3+responseSize;
    116c:	87 e0       	ldi	r24, 0x07	; 7
    116e:	f6 01       	movw	r30, r12
    1170:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
    1172:	f8 01       	movw	r30, r16
    1174:	81 81       	ldd	r24, Z+1	; 0x01
    1176:	f6 01       	movw	r30, r12
    1178:	81 83       	std	Z+1, r24	; 0x01
            outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    117a:	12 82       	std	Z+2, r1	; 0x02
            outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
    117c:	c6 01       	movw	r24, r12
    117e:	67 e0       	ldi	r22, 0x07	; 7
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	0e 94 08 04 	call	0x810	; 0x810 <computeChecksum>
    1186:	f6 01       	movw	r30, r12
    1188:	87 83       	std	Z+7, r24	; 0x07
            return 4+responseSize;
    118a:	88 e0       	ldi	r24, 0x08	; 8
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	71 c0       	rjmp	.+226    	; 0x1272 <processCommand+0x282>
        case MOTOR_PARAMETER_WR_L_OPCODE:
        case MOTOR_PARAMETER_WR_H_OPCODE:

            // Write 32 bits of data
            WriteIntToEEPROM(address, &commandPacket[PAYLOAD_OFFSET]);
    1190:	b8 01       	movw	r22, r16
    1192:	6e 5f       	subi	r22, 0xFE	; 254
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <WriteIntToEEPROM>
            
            // re-init our state
            initStateFromEEPROM();
    119a:	0e 94 13 07 	call	0xe26	; 0xe26 <initStateFromEEPROM>
            
            // ack the command
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    119e:	83 e0       	ldi	r24, 0x03	; 3
    11a0:	f6 01       	movw	r30, r12
    11a2:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
    11a4:	f8 01       	movw	r30, r16
    11a6:	81 81       	ldd	r24, Z+1	; 0x01
    11a8:	f6 01       	movw	r30, r12
    11aa:	41 c0       	rjmp	.+130    	; 0x122e <processCommand+0x23e>
            outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
            outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
            return 4;
        default:
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    11ac:	83 e0       	ldi	r24, 0x03	; 3
    11ae:	f6 01       	movw	r30, r12
    11b0:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
    11b2:	f8 01       	movw	r30, r16
    11b4:	81 81       	ldd	r24, Z+1	; 0x01
    11b6:	f6 01       	movw	r30, r12
    11b8:	81 83       	std	Z+1, r24	; 0x01
    11ba:	50 c0       	rjmp	.+160    	; 0x125c <processCommand+0x26c>

static int handleCalibrationCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint16_t collectionBitfield;
    
    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    11bc:	f8 01       	movw	r30, r16
    11be:	42 81       	ldd	r20, Z+2	; 0x02
    11c0:	53 81       	ldd	r21, Z+3	; 0x03
    
    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
    11c2:	51 ff       	sbrs	r21, 1
    11c4:	10 c0       	rjmp	.+32     	; 0x11e6 <processCommand+0x1f6>
    11c6:	a5 e5       	ldi	r26, 0x55	; 85
    11c8:	b1 e2       	ldi	r27, 0x21	; 33
    11ca:	e9 ed       	ldi	r30, 0xD9	; 217
    11cc:	f1 e2       	ldi	r31, 0x21	; 33
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    {
        // zero out pressure readings with an offset
        for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
        {
            pressureDataOffset[i] = pressureData[i] + pressureDataOffset[i];
    11d0:	2d 91       	ld	r18, X+
    11d2:	3d 91       	ld	r19, X+
    11d4:	80 81       	ld	r24, Z
    11d6:	91 81       	ldd	r25, Z+1	; 0x01
    11d8:	82 0f       	add	r24, r18
    11da:	93 1f       	adc	r25, r19
    11dc:	81 93       	st	Z+, r24
    11de:	91 93       	st	Z+, r25
    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    
    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
    {
        // zero out pressure readings with an offset
        for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
    11e0:	6f 5f       	subi	r22, 0xFF	; 255
    11e2:	6c 30       	cpi	r22, 0x0C	; 12
    11e4:	a9 f7       	brne	.-22     	; 0x11d0 <processCommand+0x1e0>
        {
            pressureDataOffset[i] = pressureData[i] + pressureDataOffset[i];
        }
    }
    
    if (collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
    11e6:	41 ff       	sbrs	r20, 1
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <processCommand+0x20a>
    {
        RxCheckSumErrCnt[0] = 0;
    11ea:	10 92 11 21 	sts	0x2111, r1
    11ee:	10 92 12 21 	sts	0x2112, r1
        RxCheckSumErrCnt[1] = 0;
    11f2:	10 92 13 21 	sts	0x2113, r1
    11f6:	10 92 14 21 	sts	0x2114, r1
    }
    
    if (collectionBitfield & DATA_COLLECTION_PROXIMALJOINT_BITMASK)
    11fa:	53 ff       	sbrs	r21, 3
    11fc:	14 c0       	rjmp	.+40     	; 0x1226 <processCommand+0x236>
    {
        encoderOffset = readRawEncoder();
    11fe:	0e 94 1e 06 	call	0xc3c	; 0xc3c <readRawEncoder>
    1202:	80 93 0d 21 	sts	0x210D, r24
    1206:	90 93 0e 21 	sts	0x210E, r25
        uint32_t temp = encoderOffset;
    120a:	aa 27       	eor	r26, r26
    120c:	97 fd       	sbrc	r25, 7
    120e:	a0 95       	com	r26
    1210:	ba 2f       	mov	r27, r26
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	ab 83       	std	Y+3, r26	; 0x03
    1218:	bc 83       	std	Y+4, r27	; 0x04
        WriteIntToEEPROM(EEPROM_ADDRESS_ENCODER_OFFSET, (uint8_t*)&temp);
    121a:	8c e1       	ldi	r24, 0x1C	; 28
    121c:	be 01       	movw	r22, r28
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <WriteIntToEEPROM>
    }
    
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    1226:	83 e0       	ldi	r24, 0x03	; 3
    1228:	f6 01       	movw	r30, r12
    122a:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = CALIBRATION_OPCODE;
    122c:	80 ec       	ldi	r24, 0xC0	; 192
    122e:	81 83       	std	Z+1, r24	; 0x01
    outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    1230:	12 82       	std	Z+2, r1	; 0x02
    1232:	16 c0       	rjmp	.+44     	; 0x1260 <processCommand+0x270>
}

static int handleBootloaderCommand(uint8_t *commandPacket)
{

  if(0x0f&commandPacket[PAYLOAD_OFFSET]){
    1234:	f8 01       	movw	r30, r16
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	8f 70       	andi	r24, 0x0F	; 15
    123a:	19 f0       	breq	.+6      	; 0x1242 <processCommand+0x252>
    BootRelay(commandPacket);
    123c:	c8 01       	movw	r24, r16
    123e:	0e 94 42 07 	call	0xe84	; 0xe84 <BootRelay>
  }
  else {
    // self bootload
    wdt_enable(WDT_PER_8CLK_gc);
    1242:	93 e0       	ldi	r25, 0x03	; 3
    1244:	88 ed       	ldi	r24, 0xD8	; 216
    1246:	08 b6       	in	r0, 0x38	; 56
    1248:	84 bf       	out	0x34, r24	; 52
    124a:	90 93 80 00 	sts	0x0080, r25
    124e:	a8 95       	wdr
    1250:	08 be       	out	0x38, r0	; 56
    1252:	ff cf       	rjmp	.-2      	; 0x1252 <processCommand+0x262>

      case BOOTLOADER_OPCODE:
	  return handleBootloaderCommand(commandPacket);

      default:
          outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	f6 01       	movw	r30, r12
    1258:	80 83       	st	Z, r24
          outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = opcode;
    125a:	91 83       	std	Z+1, r25	; 0x01
          outputBuffer[RESPONSE_STATUSCODE_OFFSET] = UNKNOWN_COMMAND;
    125c:	82 e0       	ldi	r24, 0x02	; 2
    125e:	82 83       	std	Z+2, r24	; 0x02
          outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
    1260:	c6 01       	movw	r24, r12
    1262:	63 e0       	ldi	r22, 0x03	; 3
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	0e 94 08 04 	call	0x810	; 0x810 <computeChecksum>
    126a:	f6 01       	movw	r30, r12
    126c:	83 83       	std	Z+3, r24	; 0x03
          return 4;
    126e:	84 e0       	ldi	r24, 0x04	; 4
    1270:	90 e0       	ldi	r25, 0x00	; 0
  }
}
    1272:	68 96       	adiw	r28, 0x18	; 24
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	de bf       	out	0x3e, r29	; 62
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	08 95       	ret

0000128a <LEDtoggle>:
    PORTC.OUT |= 0x01;
}

void LEDtoggle(void)
{
    PORTC.OUTTGL = 0x01;
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	e0 e4       	ldi	r30, 0x40	; 64
    128e:	f6 e0       	ldi	r31, 0x06	; 6
    1290:	87 83       	std	Z+7, r24	; 0x07
}
    1292:	08 95       	ret

00001294 <getDoubleWord>:
}



static void getDoubleWord(uint8_t startingOpcode, uint16_t *firstResponse)
{
    1294:	fb 01       	movw	r30, r22
    uint8_t dummyRead;

    //Send the data.
    SPI0.DATA = startingOpcode;
    1296:	a0 ec       	ldi	r26, 0xC0	; 192
    1298:	b8 e0       	ldi	r27, 0x08	; 8
    129a:	13 96       	adiw	r26, 0x03	; 3
    129c:	8c 93       	st	X, r24
    129e:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
    12a0:	90 91 c2 08 	lds	r25, 0x08C2
    12a4:	97 ff       	sbrs	r25, 7
    12a6:	fc cf       	rjmp	.-8      	; 0x12a0 <getDoubleWord+0xc>

    //Read the dummy data
    dummyRead = SPI0.DATA;
    12a8:	90 91 c3 08 	lds	r25, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
    12ac:	a0 ec       	ldi	r26, 0xC0	; 192
    12ae:	b8 e0       	ldi	r27, 0x08	; 8
    12b0:	13 96       	adiw	r26, 0x03	; 3
    12b2:	1c 92       	st	X, r1
    12b4:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
    12b6:	90 91 c2 08 	lds	r25, 0x08C2
    12ba:	97 ff       	sbrs	r25, 7
    12bc:	fc cf       	rjmp	.-8      	; 0x12b6 <getDoubleWord+0x22>

    //Read the MSB data
    dummyRead = SPI0.DATA;
    12be:	90 91 c3 08 	lds	r25, 0x08C3
    *firstResponse = dummyRead << 8;
    12c2:	10 82       	st	Z, r1
    12c4:	91 83       	std	Z+1, r25	; 0x01

    //Send the data.
    SPI0.DATA = startingOpcode+2;
    12c6:	8e 5f       	subi	r24, 0xFE	; 254
    12c8:	a0 ec       	ldi	r26, 0xC0	; 192
    12ca:	b8 e0       	ldi	r27, 0x08	; 8
    12cc:	13 96       	adiw	r26, 0x03	; 3
    12ce:	8c 93       	st	X, r24
    12d0:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
    12d2:	80 91 c2 08 	lds	r24, 0x08C2
    12d6:	87 ff       	sbrs	r24, 7
    12d8:	fc cf       	rjmp	.-8      	; 0x12d2 <getDoubleWord+0x3e>

    //Read the dummy data
    dummyRead = SPI0.DATA;
    12da:	80 91 c3 08 	lds	r24, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
    12de:	a0 ec       	ldi	r26, 0xC0	; 192
    12e0:	b8 e0       	ldi	r27, 0x08	; 8
    12e2:	13 96       	adiw	r26, 0x03	; 3
    12e4:	1c 92       	st	X, r1
    12e6:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
    12e8:	80 91 c2 08 	lds	r24, 0x08C2
    12ec:	87 ff       	sbrs	r24, 7
    12ee:	fc cf       	rjmp	.-8      	; 0x12e8 <getDoubleWord+0x54>

    //Read the LSB data
    dummyRead = SPI0.DATA;
    12f0:	20 91 c3 08 	lds	r18, 0x08C3
    *firstResponse |= dummyRead;
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	91 81       	ldd	r25, Z+1	; 0x01
    12fa:	82 2b       	or	r24, r18
    12fc:	93 2b       	or	r25, r19
    12fe:	80 83       	st	Z, r24
    1300:	91 83       	std	Z+1, r25	; 0x01

    return;
}
    1302:	08 95       	ret

00001304 <unselectSensors>:
}

// un-set all chip select lines
static void unselectSensors()
{
    PORTA.OUTSET = TACT_PORTA_MASK;
    1304:	80 e6       	ldi	r24, 0x60	; 96
    1306:	e0 e0       	ldi	r30, 0x00	; 0
    1308:	f6 e0       	ldi	r31, 0x06	; 6
    130a:	85 83       	std	Z+5, r24	; 0x05
    PORTB.OUTSET = TACT_PORTB_MASK;
    130c:	8f e0       	ldi	r24, 0x0F	; 15
    130e:	e0 e2       	ldi	r30, 0x20	; 32
    1310:	f6 e0       	ldi	r31, 0x06	; 6
    1312:	85 83       	std	Z+5, r24	; 0x05
    PORTC.OUTSET = TACT_PORTC_MASK;
    1314:	e0 e4       	ldi	r30, 0x40	; 64
    1316:	f6 e0       	ldi	r31, 0x06	; 6
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	85 83       	std	Z+5, r24	; 0x05
    PORTC.OUTCLR = PORTC_MUX_MASK;
    131c:	8c e1       	ldi	r24, 0x1C	; 28
    131e:	86 83       	std	Z+6, r24	; 0x06
}
    1320:	08 95       	ret

00001322 <selectSensor>:
static void selectSensor(uint8_t tactAddress)
{
    uint8_t dummyRead;

    //Now assert the proper chip select
    switch(tactAddress)
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	91 f0       	breq	.+36     	; 0x134a <selectSensor+0x28>
    1326:	84 30       	cpi	r24, 0x04	; 4
    1328:	28 f0       	brcs	.+10     	; 0x1334 <selectSensor+0x12>
    132a:	85 30       	cpi	r24, 0x05	; 5
    132c:	91 f0       	breq	.+36     	; 0x1352 <selectSensor+0x30>
    132e:	8c 30       	cpi	r24, 0x0C	; 12
    1330:	20 f5       	brcc	.+72     	; 0x137a <selectSensor+0x58>
    1332:	14 c0       	rjmp	.+40     	; 0x135c <selectSensor+0x3a>
    {
        case 0x00:
        case 0x01:
        case 0x02:
        case 0x03:
            PORTB.OUTCLR = 1 << tactAddress;
    1334:	21 e0       	ldi	r18, 0x01	; 1
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	02 c0       	rjmp	.+4      	; 0x133e <selectSensor+0x1c>
    133a:	22 0f       	add	r18, r18
    133c:	33 1f       	adc	r19, r19
    133e:	8a 95       	dec	r24
    1340:	e2 f7       	brpl	.-8      	; 0x133a <selectSensor+0x18>
    1342:	e0 e2       	ldi	r30, 0x20	; 32
    1344:	f6 e0       	ldi	r31, 0x06	; 6
    1346:	26 83       	std	Z+6, r18	; 0x06
            break;
    1348:	1b c0       	rjmp	.+54     	; 0x1380 <selectSensor+0x5e>
        case 0x04:
            PORTC.OUTCLR = 0x02;
    134a:	82 e0       	ldi	r24, 0x02	; 2
    134c:	e0 e4       	ldi	r30, 0x40	; 64
    134e:	f6 e0       	ldi	r31, 0x06	; 6
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <selectSensor+0x36>
            break;
        case 0x05:
            PORTA.OUTCLR = 0x20;
    1352:	80 e2       	ldi	r24, 0x20	; 32
    1354:	e0 e0       	ldi	r30, 0x00	; 0
    1356:	f6 e0       	ldi	r31, 0x06	; 6
    1358:	86 83       	std	Z+6, r24	; 0x06
            break;
    135a:	12 c0       	rjmp	.+36     	; 0x1380 <selectSensor+0x5e>
        case 0x07:
        case 0x08:
        case 0x09:
        case 0x0A:
        case 0x0B:
            PORTC.OUTSET = (tactAddress - 0x05) << PORTC_MUX_SHIFT;
    135c:	85 50       	subi	r24, 0x05	; 5
    135e:	88 0f       	add	r24, r24
    1360:	88 0f       	add	r24, r24
    1362:	e0 e4       	ldi	r30, 0x40	; 64
    1364:	f6 e0       	ldi	r31, 0x06	; 6
    1366:	85 83       	std	Z+5, r24	; 0x05
            PORTA.OUTCLR = PORTA_MUX_EN;
    1368:	80 e4       	ldi	r24, 0x40	; 64
    136a:	e0 e0       	ldi	r30, 0x00	; 0
    136c:	f6 e0       	ldi	r31, 0x06	; 6
    136e:	86 83       	std	Z+6, r24	; 0x06
    1370:	85 e3       	ldi	r24, 0x35	; 53
    1372:	8a 95       	dec	r24
    1374:	f1 f7       	brne	.-4      	; 0x1372 <selectSensor+0x50>
    1376:	00 00       	nop
    1378:	03 c0       	rjmp	.+6      	; 0x1380 <selectSensor+0x5e>
            _delay_us(5);
            break;
        default:
            //Should never get here.  Invalid address
            //Reset chip select lines and get out
            unselectSensors();
    137a:	0e 94 82 09 	call	0x1304	; 0x1304 <unselectSensors>
            return;
    137e:	08 95       	ret
    }

    //Make sure transmitters are OK
    if(SPI0.STATUS & SPI_IF_bm)
    1380:	80 91 c2 08 	lds	r24, 0x08C2
    1384:	87 ff       	sbrs	r24, 7
    1386:	02 c0       	rjmp	.+4      	; 0x138c <selectSensor+0x6a>
    {
        dummyRead = SPI0.DATA;
    1388:	80 91 c3 08 	lds	r24, 0x08C3
    138c:	08 95       	ret

0000138e <__vector_20>:
static void unselectSensors();

volatile uint8_t tactReady = 0;

ISR(TACT_TC_vect)
{
    138e:	1f 92       	push	r1
    1390:	0f 92       	push	r0
    1392:	0f b6       	in	r0, 0x3f	; 63
    1394:	0f 92       	push	r0
    1396:	11 24       	eor	r1, r1
    1398:	8f 93       	push	r24
    tactReady = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 10 21 	sts	0x2110, r24
    TACT_TC.CTRLA = TC_CLKSEL_OFF_gc;
    13a0:	10 92 40 08 	sts	0x0840, r1
    return;
}
    13a4:	8f 91       	pop	r24
    13a6:	0f 90       	pop	r0
    13a8:	0f be       	out	0x3f, r0	; 63
    13aa:	0f 90       	pop	r0
    13ac:	1f 90       	pop	r1
    13ae:	18 95       	reti

000013b0 <configureSPIModulesPressure>:

//The system can take 8 MHz.  Peripheral clock is set to 32 MHz internally, so a divide by 4 prescaler is correct
//volatile uint8_t dummyRead;
void configureSPIModulesPressure(void)
{
    SPI0.INTCTRL = SPI_INTLVL_OFF_gc;
    13b0:	e0 ec       	ldi	r30, 0xC0	; 192
    13b2:	f8 e0       	ldi	r31, 0x08	; 8
    13b4:	11 82       	std	Z+1, r1	; 0x01
    SPI0.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV4_gc;
    13b6:	80 e5       	ldi	r24, 0x50	; 80
    13b8:	80 83       	st	Z, r24
}
    13ba:	08 95       	ret

000013bc <initTactileModule>:

//initialization
void initTactileModule(void)
{
    13bc:	6f 92       	push	r6
    13be:	7f 92       	push	r7
    13c0:	8f 92       	push	r8
    13c2:	9f 92       	push	r9
    13c4:	af 92       	push	r10
    13c6:	bf 92       	push	r11
    13c8:	cf 92       	push	r12
    13ca:	df 92       	push	r13
    13cc:	ef 92       	push	r14
    13ce:	ff 92       	push	r15
    13d0:	0f 93       	push	r16
    13d2:	1f 93       	push	r17
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	8d e6       	ldi	r24, 0x6D	; 109
    13da:	68 2e       	mov	r6, r24
    13dc:	81 e2       	ldi	r24, 0x21	; 33
    13de:	78 2e       	mov	r7, r24
    13e0:	a5 e5       	ldi	r26, 0x55	; 85
    13e2:	b1 e2       	ldi	r27, 0x21	; 33
    13e4:	c9 ed       	ldi	r28, 0xD9	; 217
    13e6:	d1 e2       	ldi	r29, 0x21	; 33
    13e8:	29 e7       	ldi	r18, 0x79	; 121
    13ea:	31 e2       	ldi	r19, 0x21	; 33
    13ec:	45 e2       	ldi	r20, 0x25	; 37
    13ee:	51 e2       	ldi	r21, 0x21	; 33
    13f0:	69 e0       	ldi	r22, 0x09	; 9
    13f2:	72 e2       	ldi	r23, 0x22	; 34
    13f4:	01 e9       	ldi	r16, 0x91	; 145
    13f6:	11 e2       	ldi	r17, 0x21	; 33
    13f8:	99 ea       	ldi	r25, 0xA9	; 169
    13fa:	e9 2e       	mov	r14, r25
    13fc:	91 e2       	ldi	r25, 0x21	; 33
    13fe:	f9 2e       	mov	r15, r25
    1400:	ed e3       	ldi	r30, 0x3D	; 61
    1402:	ce 2e       	mov	r12, r30
    1404:	e1 e2       	ldi	r30, 0x21	; 33
    1406:	de 2e       	mov	r13, r30
    1408:	f1 ec       	ldi	r31, 0xC1	; 193
    140a:	af 2e       	mov	r10, r31
    140c:	f1 e2       	ldi	r31, 0x21	; 33
    140e:	bf 2e       	mov	r11, r31
    1410:	81 ef       	ldi	r24, 0xF1	; 241
    1412:	88 2e       	mov	r8, r24
    1414:	81 e2       	ldi	r24, 0x21	; 33
    1416:	98 2e       	mov	r9, r24
    1418:	8c e0       	ldi	r24, 0x0C	; 12
    for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
    {
        pressureCalibrated[i] = 0;
    141a:	f3 01       	movw	r30, r6
    141c:	11 92       	st	Z+, r1
    141e:	3f 01       	movw	r6, r30
        pressureData[i] = 0;
    1420:	1d 92       	st	X+, r1
    1422:	1d 92       	st	X+, r1
        pressureDataOffset[i] = 0;
    1424:	19 92       	st	Y+, r1
    1426:	19 92       	st	Y+, r1
        a0coeff[i] = 0;
    1428:	f9 01       	movw	r30, r18
    142a:	11 92       	st	Z+, r1
    142c:	11 92       	st	Z+, r1
    142e:	9f 01       	movw	r18, r30
        b1coeff[i] = 0;
    1430:	fa 01       	movw	r30, r20
    1432:	11 92       	st	Z+, r1
    1434:	11 92       	st	Z+, r1
    1436:	af 01       	movw	r20, r30
        b2coeff[i] = 0;
    1438:	fb 01       	movw	r30, r22
    143a:	11 92       	st	Z+, r1
    143c:	11 92       	st	Z+, r1
    143e:	bf 01       	movw	r22, r30
        c12coeff[i] = 0;
    1440:	f8 01       	movw	r30, r16
    1442:	11 92       	st	Z+, r1
    1444:	11 92       	st	Z+, r1
    1446:	8f 01       	movw	r16, r30
        rawpressure[i] = 0;
    1448:	f7 01       	movw	r30, r14
    144a:	11 92       	st	Z+, r1
    144c:	11 92       	st	Z+, r1
    144e:	7f 01       	movw	r14, r30
        rawtemp[i] = 0;
    1450:	f6 01       	movw	r30, r12
    1452:	11 92       	st	Z+, r1
    1454:	11 92       	st	Z+, r1
    1456:	6f 01       	movw	r12, r30
        lastPressure[i] = 0;
    1458:	f5 01       	movw	r30, r10
    145a:	11 92       	st	Z+, r1
    145c:	11 92       	st	Z+, r1
    145e:	5f 01       	movw	r10, r30
        adjustedPressure[i] = 0;
    1460:	f4 01       	movw	r30, r8
    1462:	11 92       	st	Z+, r1
    1464:	11 92       	st	Z+, r1
    1466:	4f 01       	movw	r8, r30
    1468:	81 50       	subi	r24, 0x01	; 1
}

//initialization
void initTactileModule(void)
{
    for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
    146a:	b9 f6       	brne	.-82     	; 0x141a <initTactileModule+0x5e>
        rawpressure[i] = 0;
        rawtemp[i] = 0;
        lastPressure[i] = 0;
        adjustedPressure[i] = 0;
    }
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	bf 90       	pop	r11
    147e:	af 90       	pop	r10
    1480:	9f 90       	pop	r9
    1482:	8f 90       	pop	r8
    1484:	7f 90       	pop	r7
    1486:	6f 90       	pop	r6
    1488:	08 95       	ret

0000148a <collectAllCalibrationValues>:

    return;
}

void collectAllCalibrationValues(void)
{
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    //First set the pins to known values to tighten inner reading loops
    unselectSensors();
    1494:	0e 94 82 09 	call	0x1304	; 0x1304 <unselectSensors>

    for(uint8_t i=0; i<numPressureSensors; i++)
    1498:	10 e0       	ldi	r17, 0x00	; 0
    getDoubleWord(READ_COEFFB1_MSB_OPCODE,(uint16_t *)&b1coeff[tactAddress]);
    getDoubleWord(READ_COEFFB2_MSB_OPCODE,(uint16_t *)&b2coeff[tactAddress]);
    getDoubleWord(READ_COEFFA0_MSB_OPCODE,(uint16_t *)&c12coeff[tactAddress]);

    //Send the dummy byte
    SPI0.DATA = 0x00;
    149a:	20 ec       	ldi	r18, 0xC0	; 192
    149c:	e2 2e       	mov	r14, r18
    149e:	28 e0       	ldi	r18, 0x08	; 8
    14a0:	f2 2e       	mov	r15, r18
void collectAllCalibrationValues(void)
{
    //First set the pins to known values to tighten inner reading loops
    unselectSensors();

    for(uint8_t i=0; i<numPressureSensors; i++)
    14a2:	2a c0       	rjmp	.+84     	; 0x14f8 <collectAllCalibrationValues+0x6e>

static void readCoefficient(uint8_t tactAddress)
{
    uint8_t dummyRead;

    selectSensor(tactAddress);
    14a4:	81 2f       	mov	r24, r17
    14a6:	0e 94 91 09 	call	0x1322	; 0x1322 <selectSensor>

    getDoubleWord(READ_COEFFA0_MSB_OPCODE,(uint16_t *)&a0coeff[tactAddress]);
    14aa:	c1 2f       	mov	r28, r17
    14ac:	d0 e0       	ldi	r29, 0x00	; 0
    14ae:	cc 0f       	add	r28, r28
    14b0:	dd 1f       	adc	r29, r29
    14b2:	be 01       	movw	r22, r28
    14b4:	67 58       	subi	r22, 0x87	; 135
    14b6:	7e 4d       	sbci	r23, 0xDE	; 222
    14b8:	88 e8       	ldi	r24, 0x88	; 136
    14ba:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDoubleWord>
    getDoubleWord(READ_COEFFB1_MSB_OPCODE,(uint16_t *)&b1coeff[tactAddress]);
    14be:	be 01       	movw	r22, r28
    14c0:	6b 5d       	subi	r22, 0xDB	; 219
    14c2:	7e 4d       	sbci	r23, 0xDE	; 222
    14c4:	8c e8       	ldi	r24, 0x8C	; 140
    14c6:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDoubleWord>
    getDoubleWord(READ_COEFFB2_MSB_OPCODE,(uint16_t *)&b2coeff[tactAddress]);
    14ca:	be 01       	movw	r22, r28
    14cc:	67 5f       	subi	r22, 0xF7	; 247
    14ce:	7d 4d       	sbci	r23, 0xDD	; 221
    14d0:	80 e9       	ldi	r24, 0x90	; 144
    14d2:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDoubleWord>
    getDoubleWord(READ_COEFFA0_MSB_OPCODE,(uint16_t *)&c12coeff[tactAddress]);
    14d6:	be 01       	movw	r22, r28
    14d8:	6f 56       	subi	r22, 0x6F	; 111
    14da:	7e 4d       	sbci	r23, 0xDE	; 222
    14dc:	88 e8       	ldi	r24, 0x88	; 136
    14de:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDoubleWord>

    //Send the dummy byte
    SPI0.DATA = 0x00;
    14e2:	f7 01       	movw	r30, r14
    14e4:	13 82       	std	Z+3, r1	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
    14e6:	80 91 c2 08 	lds	r24, 0x08C2
    14ea:	87 ff       	sbrs	r24, 7
    14ec:	fc cf       	rjmp	.-8      	; 0x14e6 <collectAllCalibrationValues+0x5c>

    //Read the dummy data
    dummyRead = SPI0.DATA;
    14ee:	80 91 c3 08 	lds	r24, 0x08C3

    //Reset the chip select and address lines
    unselectSensors();
    14f2:	0e 94 82 09 	call	0x1304	; 0x1304 <unselectSensors>
void collectAllCalibrationValues(void)
{
    //First set the pins to known values to tighten inner reading loops
    unselectSensors();

    for(uint8_t i=0; i<numPressureSensors; i++)
    14f6:	1f 5f       	subi	r17, 0xFF	; 255
    14f8:	80 91 01 20 	lds	r24, 0x2001
    14fc:	18 17       	cp	r17, r24
    14fe:	90 f2       	brcs	.-92     	; 0x14a4 <collectAllCalibrationValues+0x1a>
    {
        readCoefficient(i);
    }

    //Set the Tactile Timer to expire at 3 ms
    TACT_TC.CTRLB = TC_WGMODE_NORMAL_gc;
    1500:	e0 e4       	ldi	r30, 0x40	; 64
    1502:	f8 e0       	ldi	r31, 0x08	; 8
    1504:	11 82       	std	Z+1, r1	; 0x01
    TACT_TC.CTRLC = 0x00;
    1506:	12 82       	std	Z+2, r1	; 0x02
    TACT_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    1508:	13 82       	std	Z+3, r1	; 0x03
    TACT_TC.CTRLE = 0x00;
    150a:	14 82       	std	Z+4, r1	; 0x04
    TACT_TC.PERBUF = TACT_TIMEOUT;
    150c:	80 e6       	ldi	r24, 0x60	; 96
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	86 ab       	sts	0x56, r24
    1512:	97 ab       	sts	0x57, r25
    TACT_TC.CNT = 0x0000;
    1514:	10 a2       	lds	r17, 0x90
    1516:	11 a2       	lds	r17, 0x91
    TACT_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	86 83       	std	Z+6, r24	; 0x06
    TACT_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
    151c:	87 e0       	ldi	r24, 0x07	; 7
    151e:	80 93 40 08 	sts	0x0840, r24

    return;
}
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	08 95       	ret

0000152e <compensatePressure>:
 * This routine was pulled from Freescale app note AN3785 and modified
 * for this microprocessor.  The original code assumed two extra parameters
 * that have now been removed.
 ************************************************************************/
void compensatePressure(uint16_t tempReading, uint16_t pressureReading, uint8_t sensorIndex)
{
    152e:	8f 92       	push	r8
    1530:	9f 92       	push	r9
    1532:	af 92       	push	r10
    1534:	bf 92       	push	r11
    1536:	cf 92       	push	r12
    1538:	df 92       	push	r13
    153a:	ef 92       	push	r14
    153c:	ff 92       	push	r15
    153e:	0f 93       	push	r16
    1540:	1f 93       	push	r17
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    int32_t si_a2x2,si_y1,si_a1x1,si_c12x2,si_a1;

    int16_t siPcomp;
    //float decPcomp;

    pressureLocal=pressureReading>>6; //Note that the PressCntdec is the raw value from the MPL115A data address. Its shifted >>6 since its 10 bit.
    1546:	26 e0       	ldi	r18, 0x06	; 6
    1548:	76 95       	lsr	r23
    154a:	67 95       	ror	r22
    154c:	2a 95       	dec	r18
    154e:	e1 f7       	brne	.-8      	; 0x1548 <compensatePressure+0x1a>
    tempLocal=tempReading>>6; //Note that the TempCntdec is the raw value from the MPL115A data address. Its shifted >>6 since its 10 bit.
    1550:	4c 01       	movw	r8, r24
    1552:	36 e0       	ldi	r19, 0x06	; 6
    1554:	96 94       	lsr	r9
    1556:	87 94       	ror	r8
    1558:	3a 95       	dec	r19
    155a:	e1 f7       	brne	.-8      	; 0x1554 <compensatePressure+0x26>

    // since we are operating the sensor outside its normal range, it seems to behave as if it has 11 bytes of data.
    // however, its range is still 10 bits, (0-1023).  So we need to track the "actual" value of the sensor across multiple overflows.
    {
        if (!pressureCalibrated[sensorIndex])
    155c:	04 2f       	mov	r16, r20
    155e:	10 e0       	ldi	r17, 0x00	; 0
    1560:	d8 01       	movw	r26, r16
    1562:	a3 59       	subi	r26, 0x93	; 147
    1564:	be 4d       	sbci	r27, 0xDE	; 222
    1566:	2c 91       	ld	r18, X
    1568:	c8 01       	movw	r24, r16
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	22 23       	and	r18, r18
    1570:	61 f4       	brne	.+24     	; 0x158a <compensatePressure+0x5c>
        {
            lastPressure[sensorIndex] = pressureLocal;
    1572:	fc 01       	movw	r30, r24
    1574:	ef 53       	subi	r30, 0x3F	; 63
    1576:	fe 4d       	sbci	r31, 0xDE	; 222
    1578:	60 83       	st	Z, r22
    157a:	71 83       	std	Z+1, r23	; 0x01
            adjustedPressure[sensorIndex] = pressureLocal;
    157c:	fc 01       	movw	r30, r24
    157e:	ef 50       	subi	r30, 0x0F	; 15
    1580:	fe 4d       	sbci	r31, 0xDE	; 222
    1582:	60 83       	st	Z, r22
    1584:	71 83       	std	Z+1, r23	; 0x01
            pressureCalibrated[sensorIndex] = 1;
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	2c 93       	st	X, r18
        }

        int16_t delta = pressureLocal - lastPressure[sensorIndex];
    158a:	dc 01       	movw	r26, r24
    158c:	af 53       	subi	r26, 0x3F	; 63
    158e:	be 4d       	sbci	r27, 0xDE	; 222
    1590:	4d 91       	ld	r20, X+
    1592:	5c 91       	ld	r21, X
    1594:	11 97       	sbiw	r26, 0x01	; 1
    1596:	9b 01       	movw	r18, r22
    1598:	24 1b       	sub	r18, r20
    159a:	35 0b       	sbc	r19, r21

        if (abs(delta) < 512)
    159c:	e9 01       	movw	r28, r18
    159e:	c1 50       	subi	r28, 0x01	; 1
    15a0:	de 4f       	sbci	r29, 0xFE	; 254
    15a2:	fc 01       	movw	r30, r24
    15a4:	ef 50       	subi	r30, 0x0F	; 15
    15a6:	fe 4d       	sbci	r31, 0xDE	; 222
    15a8:	83 e0       	ldi	r24, 0x03	; 3
    15aa:	cf 3f       	cpi	r28, 0xFF	; 255
    15ac:	d8 07       	cpc	r29, r24
    15ae:	30 f4       	brcc	.+12     	; 0x15bc <compensatePressure+0x8e>
        {
            lastPressure[sensorIndex] = pressureLocal;
    15b0:	6d 93       	st	X+, r22
    15b2:	7c 93       	st	X, r23
    15b4:	11 97       	sbiw	r26, 0x01	; 1
            adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] + delta;
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	11 c0       	rjmp	.+34     	; 0x15de <compensatePressure+0xb0>
        }
        else
        {
            int16_t bottom = lastPressure[sensorIndex] + (1024 - pressureLocal);
    15bc:	46 1b       	sub	r20, r22
    15be:	57 0b       	sbc	r21, r23
    15c0:	40 50       	subi	r20, 0x00	; 0
    15c2:	5c 4f       	sbci	r21, 0xFC	; 252
            int16_t top = pressureLocal + (1024 - lastPressure[sensorIndex]);
    15c4:	20 50       	subi	r18, 0x00	; 0
    15c6:	3c 4f       	sbci	r19, 0xFC	; 252
            lastPressure[sensorIndex] = pressureLocal;
    15c8:	6d 93       	st	X+, r22
    15ca:	7c 93       	st	X, r23
    15cc:	11 97       	sbiw	r26, 0x01	; 1
            if (bottom<top) // crossing 0
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] - bottom;
    15ce:	80 81       	ld	r24, Z
    15d0:	91 81       	ldd	r25, Z+1	; 0x01
        else
        {
            int16_t bottom = lastPressure[sensorIndex] + (1024 - pressureLocal);
            int16_t top = pressureLocal + (1024 - lastPressure[sensorIndex]);
            lastPressure[sensorIndex] = pressureLocal;
            if (bottom<top) // crossing 0
    15d2:	42 17       	cp	r20, r18
    15d4:	53 07       	cpc	r21, r19
    15d6:	1c f4       	brge	.+6      	; 0x15de <compensatePressure+0xb0>
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] - bottom;
    15d8:	84 1b       	sub	r24, r20
    15da:	95 0b       	sbc	r25, r21
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <compensatePressure+0xb4>
            else // crossing 1024
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] + top;
    15de:	82 0f       	add	r24, r18
    15e0:	93 1f       	adc	r25, r19
    15e2:	80 83       	st	Z, r24
    15e4:	91 83       	std	Z+1, r25	; 0x01
    //si_a11 is just b1

    // ******* STEP 3 c12x2= c12 * Tadc
    // sic12 is s(14,13)+9zero pad = s(16,15)+9 => s(16,24) left justified
    lt1 = (S32)c12coeff[sensorIndex]; // s(16,24)
    lt2 = (S32)tempLocal; // u(10,0)
    15e6:	aa 24       	eor	r10, r10
    15e8:	bb 24       	eor	r11, r11

    //si_a11 is just b1

    // ******* STEP 3 c12x2= c12 * Tadc
    // sic12 is s(14,13)+9zero pad = s(16,15)+9 => s(16,24) left justified
    lt1 = (S32)c12coeff[sensorIndex]; // s(16,24)
    15ea:	e8 01       	movw	r28, r16
    15ec:	cc 0f       	add	r28, r28
    15ee:	dd 1f       	adc	r29, r29
    15f0:	fe 01       	movw	r30, r28
    15f2:	ef 56       	subi	r30, 0x6F	; 111
    15f4:	fe 4d       	sbci	r31, 0xDE	; 222
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	88 27       	eor	r24, r24
    15fc:	77 fd       	sbrc	r23, 7
    15fe:	80 95       	com	r24
    1600:	98 2f       	mov	r25, r24
    lt2 = (S32)tempLocal; // u(10,0)
    lt3 = lt1 * lt2; // s(26,24)
    1602:	a5 01       	movw	r20, r10
    1604:	94 01       	movw	r18, r8
    1606:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulsi3>
    160a:	ab 01       	movw	r20, r22
    160c:	bc 01       	movw	r22, r24


    //Changed si_a11 to b1coeff

    // ******* STEP 4 a1= a11 + c12x2
    lt1 = ((S32)b1coeff[sensorIndex]<<11); // s(27,24) This is done by s(16,13) <<11 goes to s(27,24) to match c12x2's F part
    160e:	fe 01       	movw	r30, r28
    1610:	eb 5d       	subi	r30, 0xDB	; 219
    1612:	fe 4d       	sbci	r31, 0xDE	; 222
    1614:	80 81       	ld	r24, Z
    1616:	91 81       	ldd	r25, Z+1	; 0x01
    1618:	aa 27       	eor	r26, r26
    161a:	97 fd       	sbrc	r25, 7
    161c:	a0 95       	com	r26
    161e:	ba 2f       	mov	r27, r26
    1620:	07 2e       	mov	r0, r23
    1622:	7b e0       	ldi	r23, 0x0B	; 11
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	aa 1f       	adc	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	7a 95       	dec	r23
    162e:	d1 f7       	brne	.-12     	; 0x1624 <compensatePressure+0xf6>
    1630:	70 2d       	mov	r23, r0
    lt2 = (S32)si_c12x2; // s(26,24)
    lt3 = lt1 + lt2; // s(27,24) /a11+c12x2
    1632:	84 0f       	add	r24, r20
    1634:	95 1f       	adc	r25, r21
    1636:	a6 1f       	adc	r26, r22
    1638:	b7 1f       	adc	r27, r23
    si_a1 =(S32)(lt3>>11); // s(16,13) - EQ 4 =a1 /check
    163a:	07 2e       	mov	r0, r23
    163c:	7b e0       	ldi	r23, 0x0B	; 11
    163e:	b5 95       	asr	r27
    1640:	a7 95       	ror	r26
    1642:	97 95       	ror	r25
    1644:	87 95       	ror	r24
    1646:	7a 95       	dec	r23
    1648:	d1 f7       	brne	.-12     	; 0x163e <compensatePressure+0x110>
    164a:	70 2d       	mov	r23, r0

    //si_a2 is b2coeff shifted right by 1 bit

    // ******* STEP 7 a1x1= a1 * Padc
    lt1 = (S32)si_a1; // s(16,13)
    lt2 = (S32)adjustedPressure[sensorIndex];  //lt2 = (S32)pressureLocal; // u(10,0)
    164c:	fe 01       	movw	r30, r28
    164e:	ef 50       	subi	r30, 0x0F	; 15
    1650:	fe 4d       	sbci	r31, 0xDE	; 222
    1652:	20 81       	ld	r18, Z
    1654:	31 81       	ldd	r19, Z+1	; 0x01
    1656:	44 27       	eor	r20, r20
    1658:	37 fd       	sbrc	r19, 7
    165a:	40 95       	com	r20
    165c:	54 2f       	mov	r21, r20
    lt3 = lt1 * lt2; // s(26,13) /a1*Padc
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulsi3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    si_a1x1 = (S32)(lt3); // s(26,13) - EQ 7 /=a1x1 /check

    // ******* STEP 8 y1= a0 + a1x1
    // a0 = s(16,3)
    lt1 = ((S32)a0coeff[sensorIndex]<<10); // s(26,13) This is done since has to match a1x1 F value to add. So S(16,3) <<10 = S(26,13)
    166a:	fe 01       	movw	r30, r28
    166c:	e7 58       	subi	r30, 0x87	; 135
    166e:	fe 4d       	sbci	r31, 0xDE	; 222
    1670:	c0 80       	ld	r12, Z
    1672:	d1 80       	ldd	r13, Z+1	; 0x01
    1674:	ee 24       	eor	r14, r14
    1676:	d7 fc       	sbrc	r13, 7
    1678:	e0 94       	com	r14
    167a:	fe 2c       	mov	r15, r14
    167c:	0b 2e       	mov	r0, r27
    167e:	ba e0       	ldi	r27, 0x0A	; 10
    1680:	cc 0c       	add	r12, r12
    1682:	dd 1c       	adc	r13, r13
    1684:	ee 1c       	adc	r14, r14
    1686:	ff 1c       	adc	r15, r15
    1688:	ba 95       	dec	r27
    168a:	d1 f7       	brne	.-12     	; 0x1680 <compensatePressure+0x152>
    168c:	b0 2d       	mov	r27, r0
    lt2 = (S32)si_a1x1; // s(26,13)
    lt3 = lt1 + lt2; // s(26,13) /a0+a1x1
    168e:	c8 0e       	add	r12, r24
    1690:	d9 1e       	adc	r13, r25
    1692:	ea 1e       	adc	r14, r26
    1694:	fb 1e       	adc	r15, r27
    si_y1 = (S32)(lt3>>10); // s(16,3) - EQ 8 /=y1 /check
    1696:	0b 2e       	mov	r0, r27
    1698:	ba e0       	ldi	r27, 0x0A	; 10
    169a:	f5 94       	asr	r15
    169c:	e7 94       	ror	r14
    169e:	d7 94       	ror	r13
    16a0:	c7 94       	ror	r12
    16a2:	ba 95       	dec	r27
    16a4:	d1 f7       	brne	.-12     	; 0x169a <compensatePressure+0x16c>
    16a6:	b0 2d       	mov	r27, r0

    //changed si_a2 to b2coeff.
    //no other changes here

    // ******* STEP 9 a2x2= a2 *Tadc
    lt1 = (S32)b2coeff[sensorIndex]; // s(16,13)
    16a8:	fe 01       	movw	r30, r28
    16aa:	e7 5f       	subi	r30, 0xF7	; 247
    16ac:	fd 4d       	sbci	r31, 0xDD	; 221
    16ae:	60 81       	ld	r22, Z
    16b0:	71 81       	ldd	r23, Z+1	; 0x01
    16b2:	88 27       	eor	r24, r24
    16b4:	77 fd       	sbrc	r23, 7
    16b6:	80 95       	com	r24
    16b8:	98 2f       	mov	r25, r24
    lt2 = (S32)tempLocal; // u(10,0)
    lt3 = lt1 * lt2; // s(26,13) /a2*Tadc
    16ba:	a5 01       	movw	r20, r10
    16bc:	94 01       	movw	r18, r8
    16be:	0e 94 a2 0c 	call	0x1944	; 0x1944 <__mulsi3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    siPcomp = (int16_t)(lt3>>14); //&0x3FF); // goes to no fractional parts since this is an ADC count.
    //decPcomp is defined as a floating point number.
    //Conversion to Decimal value from 1023 ADC count value. ADC counts are 0 to 1023. Pressure is 50 to 115kPa correspondingly.
    //decPcomp = ((65.0/1023.0)*(float)siPcomp)+50.0;

    pressureData[sensorIndex] = siPcomp - pressureDataOffset[sensorIndex];
    16c6:	fe 01       	movw	r30, r28
    16c8:	eb 5a       	subi	r30, 0xAB	; 171
    16ca:	fe 4d       	sbci	r31, 0xDE	; 222

    //Since I didn't shift b2coeff right by 1 above, si_y1 needs to be shifted left by 11 instead of 10 to match si_a2x2

    // ******* STEP 10 pComp = y1 +a2x2
    // y1= s(16,3)
    lt1 = ((S32)si_y1<<11); // s(26,13) This is done to match a2x2 F value so addition can match. s(16,3) <<10
    16cc:	0b 2e       	mov	r0, r27
    16ce:	bb e0       	ldi	r27, 0x0B	; 11
    16d0:	cc 0c       	add	r12, r12
    16d2:	dd 1c       	adc	r13, r13
    16d4:	ee 1c       	adc	r14, r14
    16d6:	ff 1c       	adc	r15, r15
    16d8:	ba 95       	dec	r27
    16da:	d1 f7       	brne	.-12     	; 0x16d0 <compensatePressure+0x1a2>
    16dc:	b0 2d       	mov	r27, r0
    lt2 = (S32)si_a2x2; // s(26,13)
    lt3 = lt1 + lt2; // s(26,13) /y1+a2x2
    16de:	c8 0e       	add	r12, r24
    16e0:	d9 1e       	adc	r13, r25
    16e2:	ea 1e       	adc	r14, r26
    16e4:	fb 1e       	adc	r15, r27

    //The above addition has an extra F bit, so round down by 14

    // FIXED POINT RESULT WITH ROUNDING:
    siPcomp = (int16_t)(lt3>>14); //&0x3FF); // goes to no fractional parts since this is an ADC count.
    16e6:	0b 2e       	mov	r0, r27
    16e8:	be e0       	ldi	r27, 0x0E	; 14
    16ea:	f5 94       	asr	r15
    16ec:	e7 94       	ror	r14
    16ee:	d7 94       	ror	r13
    16f0:	c7 94       	ror	r12
    16f2:	ba 95       	dec	r27
    16f4:	d1 f7       	brne	.-12     	; 0x16ea <compensatePressure+0x1bc>
    16f6:	b0 2d       	mov	r27, r0
    //decPcomp is defined as a floating point number.
    //Conversion to Decimal value from 1023 ADC count value. ADC counts are 0 to 1023. Pressure is 50 to 115kPa correspondingly.
    //decPcomp = ((65.0/1023.0)*(float)siPcomp)+50.0;

    pressureData[sensorIndex] = siPcomp - pressureDataOffset[sensorIndex];
    16f8:	c7 52       	subi	r28, 0x27	; 39
    16fa:	de 4d       	sbci	r29, 0xDE	; 222
    16fc:	88 81       	ld	r24, Y
    16fe:	99 81       	ldd	r25, Y+1	; 0x01
    1700:	c8 1a       	sub	r12, r24
    1702:	d9 0a       	sbc	r13, r25
    1704:	c0 82       	st	Z, r12
    1706:	d1 82       	std	Z+1, r13	; 0x01
    return;
}
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	ff 90       	pop	r15
    1712:	ef 90       	pop	r14
    1714:	df 90       	pop	r13
    1716:	cf 90       	pop	r12
    1718:	bf 90       	pop	r11
    171a:	af 90       	pop	r10
    171c:	9f 90       	pop	r9
    171e:	8f 90       	pop	r8
    1720:	08 95       	ret

00001722 <doTactSensors>:
}

uint8_t activeSensor = 0;

void doTactSensors(void)
{
    1722:	cf 92       	push	r12
    1724:	df 92       	push	r13
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	00 d0       	rcall	.+0      	; 0x1734 <doTactSensors+0x12>
    1734:	00 d0       	rcall	.+0      	; 0x1736 <doTactSensors+0x14>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    uint8_t i;

    //Set all chip selects high
    unselectSensors();
    173a:	0e 94 82 09 	call	0x1304	; 0x1304 <unselectSensors>

    configureSPIModulesPressure();
    173e:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <configureSPIModulesPressure>

    if(activeSensor >= numPressureSensors)
    1742:	00 91 0f 21 	lds	r16, 0x210F
    1746:	80 91 01 20 	lds	r24, 0x2001
    174a:	08 17       	cp	r16, r24
    174c:	e0 f1       	brcs	.+120    	; 0x17c6 <doTactSensors+0xa4>
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
    174e:	f8 94       	cli
        tactReady = 0;
    1750:	10 92 10 21 	sts	0x2110, r1
        for(i=0;i<numPressureSensors;i++)
    1754:	dd 24       	eor	r13, r13
{
    uint8_t dummyRead;
    selectSensor(tactAddress);

    //Send the data.
    SPI0.DATA = CONVERT_OPCODE;
    1756:	00 ec       	ldi	r16, 0xC0	; 192
    1758:	18 e0       	ldi	r17, 0x08	; 8
    175a:	64 e2       	ldi	r22, 0x24	; 36
    175c:	c6 2e       	mov	r12, r22

    while(!(SPI0.STATUS & SPI_IF_bm));
    175e:	70 ec       	ldi	r23, 0xC0	; 192
    1760:	e7 2e       	mov	r14, r23
    1762:	78 e0       	ldi	r23, 0x08	; 8
    1764:	f7 2e       	mov	r15, r23
    if(activeSensor >= numPressureSensors)
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
        tactReady = 0;
        for(i=0;i<numPressureSensors;i++)
    1766:	16 c0       	rjmp	.+44     	; 0x1794 <doTactSensors+0x72>
}

static void convertTactSensor(uint8_t tactAddress)
{
    uint8_t dummyRead;
    selectSensor(tactAddress);
    1768:	8d 2d       	mov	r24, r13
    176a:	0e 94 91 09 	call	0x1322	; 0x1322 <selectSensor>

    //Send the data.
    SPI0.DATA = CONVERT_OPCODE;
    176e:	f8 01       	movw	r30, r16
    1770:	c3 82       	std	Z+3, r12	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
    1772:	80 91 c2 08 	lds	r24, 0x08C2
    1776:	87 ff       	sbrs	r24, 7
    1778:	fc cf       	rjmp	.-8      	; 0x1772 <doTactSensors+0x50>

    //Read the dummy data
    dummyRead = SPI0.DATA;
    177a:	80 91 c3 08 	lds	r24, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
    177e:	f7 01       	movw	r30, r14
    1780:	13 82       	std	Z+3, r1	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
    1782:	80 91 c2 08 	lds	r24, 0x08C2
    1786:	87 ff       	sbrs	r24, 7
    1788:	fc cf       	rjmp	.-8      	; 0x1782 <doTactSensors+0x60>

    //Read the dummy data
    dummyRead = SPI0.DATA;
    178a:	80 91 c3 08 	lds	r24, 0x08C3

    //Reset the chip select and address lines
    unselectSensors();
    178e:	0e 94 82 09 	call	0x1304	; 0x1304 <unselectSensors>
    if(activeSensor >= numPressureSensors)
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
        tactReady = 0;
        for(i=0;i<numPressureSensors;i++)
    1792:	d3 94       	inc	r13
    1794:	80 91 01 20 	lds	r24, 0x2001
    1798:	d8 16       	cp	r13, r24
    179a:	30 f3       	brcs	.-52     	; 0x1768 <doTactSensors+0x46>
        {
            convertTactSensor(i);
        }
        TACT_TC.CTRLB = TC_WGMODE_NORMAL_gc;
    179c:	e0 e4       	ldi	r30, 0x40	; 64
    179e:	f8 e0       	ldi	r31, 0x08	; 8
    17a0:	11 82       	std	Z+1, r1	; 0x01
        TACT_TC.CTRLC = 0x00;
    17a2:	12 82       	std	Z+2, r1	; 0x02
        TACT_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    17a4:	13 82       	std	Z+3, r1	; 0x03
        TACT_TC.CTRLE = 0x00;
    17a6:	14 82       	std	Z+4, r1	; 0x04
        TACT_TC.PERBUF = TACT_TIMEOUT;
    17a8:	80 e6       	ldi	r24, 0x60	; 96
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	86 ab       	sts	0x56, r24
    17ae:	97 ab       	sts	0x57, r25
        TACT_TC.CNT = 0x0000;
    17b0:	10 a2       	lds	r17, 0x90
    17b2:	11 a2       	lds	r17, 0x91
        TACT_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	86 83       	std	Z+6, r24	; 0x06
        TACT_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
    17b8:	87 e0       	ldi	r24, 0x07	; 7
    17ba:	80 93 40 08 	sts	0x0840, r24
        activeSensor = 0;
    17be:	10 92 0f 21 	sts	0x210F, r1
        sei();
    17c2:	78 94       	sei
        return;
    17c4:	3b c0       	rjmp	.+118    	; 0x183c <doTactSensors+0x11a>
{
    uint8_t dummyRead;
    uint16_t firstPressureReading;
    uint16_t firstTempReading;

    selectSensor(tactAddress);
    17c6:	80 2f       	mov	r24, r16
    17c8:	0e 94 91 09 	call	0x1322	; 0x1322 <selectSensor>

    getDoubleWord(READ_PRESSURE_MSB_OPCODE,&firstPressureReading);
    17cc:	80 e8       	ldi	r24, 0x80	; 128
    17ce:	be 01       	movw	r22, r28
    17d0:	6d 5f       	subi	r22, 0xFD	; 253
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDoubleWord>

    getDoubleWord(READ_TEMPERATURE_MSB_OPCODE,&firstTempReading);
    17d8:	84 e8       	ldi	r24, 0x84	; 132
    17da:	be 01       	movw	r22, r28
    17dc:	6f 5f       	subi	r22, 0xFF	; 255
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	0e 94 4a 09 	call	0x1294	; 0x1294 <getDoubleWord>

    //Do a final dummy write

    //Send the data.
    SPI0.DATA = 0x00;
    17e4:	e0 ec       	ldi	r30, 0xC0	; 192
    17e6:	f8 e0       	ldi	r31, 0x08	; 8
    17e8:	13 82       	std	Z+3, r1	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
    17ea:	80 91 c2 08 	lds	r24, 0x08C2
    17ee:	87 ff       	sbrs	r24, 7
    17f0:	fc cf       	rjmp	.-8      	; 0x17ea <doTactSensors+0xc8>

    //Read the dummy data
    dummyRead = SPI0.DATA;
    17f2:	80 91 c3 08 	lds	r24, 0x08C3

    //Reset the chip select and address lines
    unselectSensors();
    17f6:	0e 94 82 09 	call	0x1304	; 0x1304 <unselectSensors>

    // protect against bad data if reading accelerometer
    if (firstPressureReading == 0)
    17fa:	6b 81       	ldd	r22, Y+3	; 0x03
    17fc:	7c 81       	ldd	r23, Y+4	; 0x04
    17fe:	61 15       	cp	r22, r1
    1800:	71 05       	cpc	r23, r1
    1802:	b9 f0       	breq	.+46     	; 0x1832 <doTactSensors+0x110>
        return;

    //floatingPressureData[tactAddress] = compensatePressure(firstTempReading,firstPressureReading,tactAddress);
    compensatePressure(firstTempReading, firstPressureReading, tactAddress);
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	40 2f       	mov	r20, r16
    180a:	0e 94 97 0a 	call	0x152e	; 0x152e <compensatePressure>
    rawtemp[tactAddress] = firstTempReading;
    180e:	80 2f       	mov	r24, r16
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	fc 01       	movw	r30, r24
    1818:	e3 5c       	subi	r30, 0xC3	; 195
    181a:	fe 4d       	sbci	r31, 0xDE	; 222
    181c:	29 81       	ldd	r18, Y+1	; 0x01
    181e:	3a 81       	ldd	r19, Y+2	; 0x02
    1820:	20 83       	st	Z, r18
    1822:	31 83       	std	Z+1, r19	; 0x01
    rawpressure[tactAddress] = firstPressureReading;
    1824:	87 55       	subi	r24, 0x57	; 87
    1826:	9e 4d       	sbci	r25, 0xDE	; 222
    1828:	2b 81       	ldd	r18, Y+3	; 0x03
    182a:	3c 81       	ldd	r19, Y+4	; 0x04
    182c:	fc 01       	movw	r30, r24
    182e:	20 83       	st	Z, r18
    1830:	31 83       	std	Z+1, r19	; 0x01
        sei();
        return;
    }

    readTactSensor(activeSensor);
    activeSensor++;
    1832:	80 91 0f 21 	lds	r24, 0x210F
    1836:	8f 5f       	subi	r24, 0xFF	; 255
    1838:	80 93 0f 21 	sts	0x210F, r24

    //Leave tactReady asserted so that we can quickly return after giving command a chance
}
    183c:	24 96       	adiw	r28, 0x04	; 4
    183e:	cd bf       	out	0x3d, r28	; 61
    1840:	de bf       	out	0x3e, r29	; 62
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	08 95       	ret

00001854 <main>:
*
* This initializes the other port modules and polls a few volatile status
* bits set in ISRs.
************************************************************************/
int main(void)
{
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	00 d0       	rcall	.+0      	; 0x185a <main+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <main+0x8>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    cli();                                    //disable all interrupts for clock reset
    1860:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1862:	8f e3       	ldi	r24, 0x3F	; 63
    1864:	9f e1       	ldi	r25, 0x1F	; 31
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <main+0x12>
    186a:	00 c0       	rjmp	.+0      	; 0x186c <main+0x18>
    186c:	00 00       	nop
* is running.  This will feed a 1.024 kHz clock to the RTC.
* The system clock will use the onboard 32MHz oscillator
************************************************************************/
static void configureClocks(void)
{
    OSC.CTRL = OSC_RC32MEN_bm | OSC_RC32KEN_bm;            //enable the 32MHz ring oscillator and the 32kHz RTC oscillator
    186e:	86 e0       	ldi	r24, 0x06	; 6
    1870:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm));                //wait for 32MHz to stabilize
    1874:	80 91 51 00 	lds	r24, 0x0051
    1878:	81 ff       	sbrs	r24, 1
    187a:	fc cf       	rjmp	.-8      	; 0x1874 <main+0x20>
    while(!(OSC.STATUS & OSC_RC32KRDY_bm));                //wait for 32kHz to stabilize
    187c:	80 91 51 00 	lds	r24, 0x0051
    1880:	82 ff       	sbrs	r24, 2
    1882:	fc cf       	rjmp	.-8      	; 0x187c <main+0x28>

    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	80 93 60 00 	sts	0x0060, r24
    DFLLRC2M.CTRL = DFLL_ENABLE_bm;
    188a:	80 93 68 00 	sts	0x0068, r24

    CCP = CCP_IOREG_gc;                                    //clock is protected by Configuration Change Protection - must be properly disabled to change clock source
    188e:	98 ed       	ldi	r25, 0xD8	; 216
    1890:	94 bf       	out	0x34, r25	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;                    //switch to 32MHz oscillator
    1892:	80 93 40 00 	sts	0x0040, r24
    CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;    //Select 1.024 kHz from internal oscillator for RTC clock source
    1896:	85 e0       	ldi	r24, 0x05	; 5
    1898:	e0 e4       	ldi	r30, 0x40	; 64
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	83 83       	std	Z+3, r24	; 0x03
    189e:	8f e3       	ldi	r24, 0x3F	; 63
    18a0:	9f e1       	ldi	r25, 0x1F	; 31
    18a2:	01 97       	sbiw	r24, 0x01	; 1
    18a4:	f1 f7       	brne	.-4      	; 0x18a2 <main+0x4e>
    18a6:	00 c0       	rjmp	.+0      	; 0x18a8 <main+0x54>
    18a8:	00 00       	nop
{
    cli();                                    //disable all interrupts for clock reset
    _delay_ms(1); // for stability of supplies
    configureClocks();
    _delay_ms(1); // for stability of clocks
    configurePortIOProximal();
    18aa:	0e 94 96 06 	call	0xd2c	; 0xd2c <configurePortIOProximal>

    LEDon();
    18ae:	0e 94 07 07 	call	0xe0e	; 0xe0e <LEDon>

    //PORTE.OUT &= ~0x01; //BA: turn on sensor board

    configureADC();
    18b2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <configureADC>

    configureDaisyUSART();
    18b6:	0e 94 91 04 	call	0x922	; 0x922 <configureDaisyUSART>

    initTactileModule(); // initialize variables of the tactile buffer
    18ba:	0e 94 de 09 	call	0x13bc	; 0x13bc <initTactileModule>

    PMIC.CTRL |= PMIC_LOLVLEN_bm; //tell event system to pay attention to low-priority interrupts
    18be:	80 91 a2 00 	lds	r24, 0x00A2
    18c2:	81 60       	ori	r24, 0x01	; 1
    18c4:	e0 ea       	ldi	r30, 0xA0	; 160
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	82 83       	std	Z+2, r24	; 0x02
    sei();
    18ca:	78 94       	sei

    configureSPIModulesPressure();
    18cc:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <configureSPIModulesPressure>
    collectAllCalibrationValues();
    18d0:	0e 94 45 0a 	call	0x148a	; 0x148a <collectAllCalibrationValues>

    configureSPIModulesAccel();
    18d4:	0e 94 3a 01 	call	0x274	; 0x274 <configureSPIModulesAccel>
    configAccel();
    18d8:	0e 94 4b 01 	call	0x296	; 0x296 <configAccel>

    LEDoff();
    18dc:	0e 94 0d 07 	call	0xe1a	; 0xe1a <LEDoff>

    initStateFromEEPROM();
    18e0:	0e 94 13 07 	call	0xe26	; 0xe26 <initStateFromEEPROM>
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
}

static void verifyVersion(void)
{
    uint32_t readversion = 0;
    18e4:	19 82       	std	Y+1, r1	; 0x01
    18e6:	1a 82       	std	Y+2, r1	; 0x02
    18e8:	1b 82       	std	Y+3, r1	; 0x03
    18ea:	1c 82       	std	Y+4, r1	; 0x04
    ReadIntFromEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    18ec:	8d e1       	ldi	r24, 0x1D	; 29
    18ee:	be 01       	movw	r22, r28
    18f0:	6f 5f       	subi	r22, 0xFF	; 255
    18f2:	7f 4f       	sbci	r23, 0xFF	; 255
    18f4:	0e 94 b9 06 	call	0xd72	; 0xd72 <ReadIntFromEEPROM>
    if (readversion != FIRMWARE_VERSION)
    18f8:	89 81       	ldd	r24, Y+1	; 0x01
    18fa:	9a 81       	ldd	r25, Y+2	; 0x02
    18fc:	ab 81       	ldd	r26, Y+3	; 0x03
    18fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1900:	86 36       	cpi	r24, 0x66	; 102
    1902:	91 05       	cpc	r25, r1
    1904:	a1 05       	cpc	r26, r1
    1906:	b1 05       	cpc	r27, r1
    1908:	71 f0       	breq	.+28     	; 0x1926 <main+0xd2>
    {
        readversion = FIRMWARE_VERSION;
    190a:	86 e6       	ldi	r24, 0x66	; 102
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a0 e0       	ldi	r26, 0x00	; 0
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	ab 83       	std	Y+3, r26	; 0x03
    1918:	bc 83       	std	Y+4, r27	; 0x04
        WriteIntToEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    191a:	8d e1       	ldi	r24, 0x1D	; 29
    191c:	be 01       	movw	r22, r28
    191e:	6f 5f       	subi	r22, 0xFF	; 255
    1920:	7f 4f       	sbci	r23, 0xFF	; 255
    1922:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <WriteIntToEEPROM>
    initStateFromEEPROM();
    verifyVersion();
    
    while(1){
        
        if(notifyDaisy)
    1926:	80 91 03 20 	lds	r24, 0x2003
    192a:	88 23       	and	r24, r24
    192c:	11 f0       	breq	.+4      	; 0x1932 <main+0xde>
        {
            doDaisyTask();
    192e:	0e 94 be 04 	call	0x97c	; 0x97c <doDaisyTask>
        }
        handleTC();
    1932:	0e 94 1e 03 	call	0x63c	; 0x63c <handleTC>

        if(tactReady)
    1936:	80 91 10 21 	lds	r24, 0x2110
    193a:	88 23       	and	r24, r24
    193c:	a1 f3       	breq	.-24     	; 0x1926 <main+0xd2>
        {
            doTactSensors();
    193e:	0e 94 91 0b 	call	0x1722	; 0x1722 <doTactSensors>
    1942:	f1 cf       	rjmp	.-30     	; 0x1926 <main+0xd2>

00001944 <__mulsi3>:
    1944:	62 9f       	mul	r22, r18
    1946:	d0 01       	movw	r26, r0
    1948:	73 9f       	mul	r23, r19
    194a:	f0 01       	movw	r30, r0
    194c:	82 9f       	mul	r24, r18
    194e:	e0 0d       	add	r30, r0
    1950:	f1 1d       	adc	r31, r1
    1952:	64 9f       	mul	r22, r20
    1954:	e0 0d       	add	r30, r0
    1956:	f1 1d       	adc	r31, r1
    1958:	92 9f       	mul	r25, r18
    195a:	f0 0d       	add	r31, r0
    195c:	83 9f       	mul	r24, r19
    195e:	f0 0d       	add	r31, r0
    1960:	74 9f       	mul	r23, r20
    1962:	f0 0d       	add	r31, r0
    1964:	65 9f       	mul	r22, r21
    1966:	f0 0d       	add	r31, r0
    1968:	99 27       	eor	r25, r25
    196a:	72 9f       	mul	r23, r18
    196c:	b0 0d       	add	r27, r0
    196e:	e1 1d       	adc	r30, r1
    1970:	f9 1f       	adc	r31, r25
    1972:	63 9f       	mul	r22, r19
    1974:	b0 0d       	add	r27, r0
    1976:	e1 1d       	adc	r30, r1
    1978:	f9 1f       	adc	r31, r25
    197a:	bd 01       	movw	r22, r26
    197c:	cf 01       	movw	r24, r30
    197e:	11 24       	eor	r1, r1
    1980:	08 95       	ret

00001982 <memcpy>:
    1982:	fb 01       	movw	r30, r22
    1984:	dc 01       	movw	r26, r24
    1986:	02 c0       	rjmp	.+4      	; 0x198c <memcpy+0xa>
    1988:	01 90       	ld	r0, Z+
    198a:	0d 92       	st	X+, r0
    198c:	41 50       	subi	r20, 0x01	; 1
    198e:	50 40       	sbci	r21, 0x00	; 0
    1990:	d8 f7       	brcc	.-10     	; 0x1988 <memcpy+0x6>
    1992:	08 95       	ret

00001994 <__eerd_byte_x32a4u>:
    1994:	03 d0       	rcall	.+6      	; 0x199c <eeprom_mapen>
    1996:	80 81       	ld	r24, Z
    1998:	99 27       	eor	r25, r25
    199a:	08 95       	ret

0000199c <eeprom_mapen>:
    199c:	e0 ec       	ldi	r30, 0xC0	; 192
    199e:	f1 e0       	ldi	r31, 0x01	; 1
    19a0:	37 85       	ldd	r19, Z+15	; 0x0f
    19a2:	37 fd       	sbrc	r19, 7
    19a4:	fd cf       	rjmp	.-6      	; 0x19a0 <eeprom_mapen+0x4>
    19a6:	34 85       	ldd	r19, Z+12	; 0x0c
    19a8:	38 60       	ori	r19, 0x08	; 8
    19aa:	34 87       	std	Z+12, r19	; 0x0c
    19ac:	fc 01       	movw	r30, r24
    19ae:	e0 50       	subi	r30, 0x00	; 0
    19b0:	f0 4f       	sbci	r31, 0xF0	; 240
    19b2:	08 95       	ret

000019b4 <__eewr_byte_x32a4u>:
    19b4:	26 2f       	mov	r18, r22

000019b6 <__eewr_r18_x32a4u>:
    19b6:	e0 ec       	ldi	r30, 0xC0	; 192
    19b8:	f1 e0       	ldi	r31, 0x01	; 1
    19ba:	37 85       	ldd	r19, Z+15	; 0x0f
    19bc:	37 fd       	sbrc	r19, 7
    19be:	fd cf       	rjmp	.-6      	; 0x19ba <__eewr_r18_x32a4u+0x4>
    19c0:	34 85       	ldd	r19, Z+12	; 0x0c
    19c2:	37 7f       	andi	r19, 0xF7	; 247
    19c4:	34 87       	std	Z+12, r19	; 0x0c
    19c6:	37 85       	ldd	r19, Z+15	; 0x0f
    19c8:	31 ff       	sbrs	r19, 1
    19ca:	09 c0       	rjmp	.+18     	; 0x19de <__eewr_r18_x32a4u+0x28>
    19cc:	36 e3       	ldi	r19, 0x36	; 54
    19ce:	32 87       	std	Z+10, r19	; 0x0a
    19d0:	38 ed       	ldi	r19, 0xD8	; 216
    19d2:	34 bf       	out	0x34, r19	; 52
    19d4:	31 e0       	ldi	r19, 0x01	; 1
    19d6:	33 87       	std	Z+11, r19	; 0x0b
    19d8:	37 85       	ldd	r19, Z+15	; 0x0f
    19da:	37 fd       	sbrc	r19, 7
    19dc:	fd cf       	rjmp	.-6      	; 0x19d8 <__eewr_r18_x32a4u+0x22>
    19de:	33 e3       	ldi	r19, 0x33	; 51
    19e0:	32 87       	std	Z+10, r19	; 0x0a
    19e2:	80 83       	st	Z, r24
    19e4:	91 83       	std	Z+1, r25	; 0x01
    19e6:	12 82       	std	Z+2, r1	; 0x02
    19e8:	24 83       	std	Z+4, r18	; 0x04
    19ea:	25 e3       	ldi	r18, 0x35	; 53
    19ec:	22 87       	std	Z+10, r18	; 0x0a
    19ee:	28 ed       	ldi	r18, 0xD8	; 216
    19f0:	31 e0       	ldi	r19, 0x01	; 1
    19f2:	24 bf       	out	0x34, r18	; 52
    19f4:	33 87       	std	Z+11, r19	; 0x0b
    19f6:	01 96       	adiw	r24, 0x01	; 1
    19f8:	08 95       	ret

000019fa <_exit>:
    19fa:	f8 94       	cli

000019fc <__stop_program>:
    19fc:	ff cf       	rjmp	.-2      	; 0x19fc <__stop_program>
