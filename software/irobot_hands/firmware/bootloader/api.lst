   1               		.file	"api.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 438               		.section	.text.xboot_get_version,"ax",@progbits
 441               	.global	xboot_get_version
 443               	xboot_get_version:
   1:api.c         **** /************************************************************************/
   2:api.c         **** /* XBoot Extensible AVR Bootloader API                                  */
   3:api.c         **** /*                                                                      */
   4:api.c         **** /* api.c                                                                */
   5:api.c         **** /*                                                                      */
   6:api.c         **** /* Alex Forencich <alex@alexforencich.com>                              */
   7:api.c         **** /*                                                                      */
   8:api.c         **** /* Copyright (c) 2010 Alex Forencich                                    */
   9:api.c         **** /*                                                                      */
  10:api.c         **** /* Permission is hereby granted, free of charge, to any person          */
  11:api.c         **** /* obtaining a copy of this software and associated documentation       */
  12:api.c         **** /* files(the "Software"), to deal in the Software without restriction,  */
  13:api.c         **** /* including without limitation the rights to use, copy, modify, merge, */
  14:api.c         **** /* publish, distribute, sublicense, and/or sell copies of the Software, */
  15:api.c         **** /* and to permit persons to whom the Software is furnished to do so,    */
  16:api.c         **** /* subject to the following conditions:                                 */
  17:api.c         **** /*                                                                      */
  18:api.c         **** /* The above copyright notice and this permission notice shall be       */
  19:api.c         **** /* included in all copies or substantial portions of the Software.      */
  20:api.c         **** /*                                                                      */
  21:api.c         **** /* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,      */
  22:api.c         **** /* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF   */
  23:api.c         **** /* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                */
  24:api.c         **** /* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS  */
  25:api.c         **** /* BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN   */
  26:api.c         **** /* ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN    */
  27:api.c         **** /* CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE     */
  28:api.c         **** /* SOFTWARE.                                                            */
  29:api.c         **** /*                                                                      */
  30:api.c         **** /************************************************************************/
  31:api.c         **** 
  32:api.c         **** #include "api.h"
  33:api.c         **** 
  34:api.c         **** // jump table
  35:api.c         **** 
  36:api.c         **** #ifdef ENABLE_API
  37:api.c         **** 
  38:api.c         **** #if USE_API_VERSION == 1
  39:api.c         **** 
  40:api.c         **** // Version 1
  41:api.c         **** // XBj\x1
  42:api.c         **** struct xboot_jump_table_s api_jump_table __attribute((section(".vectors"))) = {
  43:api.c         ****         {'X', 'B', 'j'}, 1,
  44:api.c         ****         {
  45:api.c         ****                 // General Functions
  46:api.c         ****                 (uint16_t)(xboot_get_version),
  47:api.c         **** 
  48:api.c         ****                 // Low level flash access
  49:api.c         ****                 #ifdef ENABLE_API_LOW_LEVEL_FLASH
  50:api.c         ****                 #ifdef ENABLE_API_SPM_WRAPPER
  51:api.c         ****                 (uint16_t)(xboot_spm_wrapper),
  52:api.c         ****                 #else // ENABLE_API_SPM_WRAPPER
  53:api.c         ****                 0,
  54:api.c         ****                 #endif // ENABLE_API_SPM_WRAPPER
  55:api.c         ****                 (uint16_t)(xboot_erase_application_page),
  56:api.c         ****                 (uint16_t)(xboot_write_application_page),
  57:api.c         **** #ifdef __AVR_XMEGA__
  58:api.c         ****                 (uint16_t)(xboot_write_user_signature_row),
  59:api.c         **** #else // __AVR_XMEGA__
  60:api.c         ****                 0,
  61:api.c         **** #endif // __AVR_XMEGA__
  62:api.c         ****                 #else // ENABLE_API_LOW_LEVEL_FLASH
  63:api.c         ****                 0,
  64:api.c         ****                 0,
  65:api.c         ****                 0,
  66:api.c         ****                 0,
  67:api.c         ****                 #endif // ENABLE_API_LOW_LEVEL_FLASH
  68:api.c         **** 
  69:api.c         ****                 // Higher level firmware update functions
  70:api.c         ****                 #ifdef ENABLE_API_FIRMWARE_UPDATE
  71:api.c         ****                 (uint16_t)(xboot_app_temp_erase),
  72:api.c         ****                 (uint16_t)(xboot_app_temp_write_page),
  73:api.c         ****                 #else // ENABLE_API_FIRMWARE_UPDATE
  74:api.c         ****                 0,
  75:api.c         ****                 0,
  76:api.c         ****                 #endif // ENABLE_API_FIRMWARE_UPDATE
  77:api.c         ****         }
  78:api.c         **** };
  79:api.c         **** 
  80:api.c         **** #endif // USE_API_VERSION
  81:api.c         **** 
  82:api.c         **** #endif // ENABLE_API
  83:api.c         **** 
  84:api.c         **** // General Functions
  85:api.c         **** uint8_t xboot_get_version(uint16_t *ver)
  86:api.c         **** {
 445               	.LM0:
 446               	.LFBB1:
 447               	/* prologue: function */
 448               	/* frame size = 0 */
 449               	/* stack size = 0 */
 450               	.L__stack_usage = 0
  87:api.c         ****         *ver = (XBOOT_VERSION_MAJOR << 8) | (XBOOT_VERSION_MINOR);
 452               	.LM1:
 453 0000 28E0      		ldi r18,lo8(264)
 454 0002 31E0      		ldi r19,hi8(264)
 455 0004 FC01      		movw r30,r24
 456 0006 2083      		st Z,r18
 457 0008 3183      		std Z+1,r19
  88:api.c         ****         return XB_SUCCESS;
  89:api.c         **** }
 459               	.LM2:
 460 000a 80E0      		ldi r24,lo8(0)
 461               	/* epilogue start */
 462 000c 0895      		ret
 464               	.Lscope1:
 465               		.section	.text.xboot_spm_wrapper,"ax",@progbits
 467               	.global	xboot_spm_wrapper
 469               	xboot_spm_wrapper:
  90:api.c         **** 
  91:api.c         **** // Low level flash access
  92:api.c         **** uint8_t xboot_spm_wrapper(void)
  93:api.c         **** {
 471               	.LM3:
 472               	.LFBB2:
 473               	/* prologue: function */
 474               	/* frame size = 0 */
 475               	/* stack size = 0 */
 476               	.L__stack_usage = 0
  94:api.c         ****         return XB_ERR_NOT_FOUND;
  95:api.c         **** }
 478               	.LM4:
 479 0000 82E0      		ldi r24,lo8(2)
 480               	/* epilogue start */
 481 0002 0895      		ret
 483               	.Lscope2:
 484               		.section	.text.xboot_app_temp_erase,"ax",@progbits
 486               	.global	xboot_app_temp_erase
 488               	xboot_app_temp_erase:
  96:api.c         **** 
  97:api.c         **** uint8_t xboot_erase_application_page(uint32_t address)
  98:api.c         **** {
  99:api.c         ****         uint8_t saved_status = SREG;
 100:api.c         **** 
 101:api.c         ****         if (address > BOOT_SECTION_START)
 102:api.c         ****                 return XB_INVALID_ADDRESS;
 103:api.c         **** 
 104:api.c         ****         cli();
 105:api.c         **** 
 106:api.c         ****         Flash_EraseApplicationPage(address);
 107:api.c         ****         Flash_WaitForSPM();
 108:api.c         **** 
 109:api.c         **** #ifndef __AVR_XMEGA__
 110:api.c         ****         boot_rww_enable();
 111:api.c         **** #endif // __AVR_XMEGA__
 112:api.c         **** 
 113:api.c         **** #ifdef __AVR_XMEGA__
 114:api.c         ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 115:api.c         **** #endif // __AVR_XMEGA__
 116:api.c         **** 
 117:api.c         ****         SREG = saved_status;
 118:api.c         ****         return XB_SUCCESS;
 119:api.c         **** }
 120:api.c         **** 
 121:api.c         **** uint8_t xboot_write_application_page(uint32_t address, uint8_t *data, uint8_t erase)
 122:api.c         **** {
 123:api.c         ****         uint8_t saved_status = SREG;
 124:api.c         **** 
 125:api.c         ****         if (address > BOOT_SECTION_START)
 126:api.c         ****                 return XB_INVALID_ADDRESS;
 127:api.c         **** 
 128:api.c         ****         cli();
 129:api.c         **** 
 130:api.c         ****         Flash_ProgramPage(address, data, erase);
 131:api.c         **** 
 132:api.c         **** #ifdef __AVR_XMEGA__
 133:api.c         ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 134:api.c         **** #endif // __AVR_XMEGA__
 135:api.c         **** 
 136:api.c         ****         SREG = saved_status;
 137:api.c         ****         return XB_SUCCESS;
 138:api.c         **** }
 139:api.c         **** 
 140:api.c         **** #ifdef __AVR_XMEGA__
 141:api.c         **** uint8_t xboot_write_user_signature_row(uint8_t *data)
 142:api.c         **** {
 143:api.c         ****         uint8_t saved_status = SREG;
 144:api.c         ****         cli();
 145:api.c         **** 
 146:api.c         ****         Flash_LoadFlashPage(data);
 147:api.c         ****         Flash_EraseUserSignatureRow();
 148:api.c         ****         Flash_WaitForSPM();
 149:api.c         ****         Flash_WriteUserSignatureRow();
 150:api.c         ****         Flash_WaitForSPM();
 151:api.c         **** 
 152:api.c         ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 153:api.c         **** 
 154:api.c         ****         SREG = saved_status;
 155:api.c         ****         return XB_SUCCESS;
 156:api.c         **** }
 157:api.c         **** #endif // __AVR_XMEGA__
 158:api.c         **** 
 159:api.c         **** // Higher level firmware update functions
 160:api.c         **** uint8_t xboot_app_temp_erase(void)
 161:api.c         **** {
 490               	.LM5:
 491               	.LFBB3:
 492 0000 CF92      		push r12
 493 0002 DF92      		push r13
 494 0004 EF92      		push r14
 495 0006 FF92      		push r15
 496 0008 CF93      		push r28
 497               	/* prologue: function */
 498               	/* frame size = 0 */
 499               	/* stack size = 5 */
 500               	.L__stack_usage = 5
 162:api.c         ****         uint8_t saved_status = SREG;
 502               	.LM6:
 503 000a CFB7      		in r28,__SREG__
 163:api.c         ****         cli();
 505               	.LM7:
 506               	/* #APP */
 507               	 ;  163 "api.c" 1
 508 000c F894      		cli
 509               	 ;  0 "" 2
 164:api.c         **** 
 165:api.c         ****         for (uint32_t addr = XB_APP_TEMP_START; addr < XB_APP_TEMP_END; addr += SPM_PAGESIZE)
 511               	.LM8:
 512               	/* #NOAPP */
 513 000e C12C      		mov r12,__zero_reg__
 514 0010 80E8      		ldi r24,hi8(32768)
 515 0012 D82E      		mov r13,r24
 516 0014 E12C      		mov r14,__zero_reg__
 517 0016 F12C      		mov r15,__zero_reg__
 518               	.L4:
 519               	.LBB2:
 166:api.c         ****         {
 167:api.c         ****                 Flash_EraseApplicationPage(addr);
 521               	.LM9:
 522 0018 C701      		movw r24,r14
 523 001a B601      		movw r22,r12
 524 001c 0E94 0000 		call SP_EraseApplicationPage
 168:api.c         ****                 Flash_WaitForSPM();
 526               	.LM10:
 527 0020 0E94 0000 		call SP_WaitForSPM
 165:api.c         ****         for (uint32_t addr = XB_APP_TEMP_START; addr < XB_APP_TEMP_END; addr += SPM_PAGESIZE)
 529               	.LM11:
 530 0024 80E0      		ldi r24,lo8(256)
 531 0026 91E0      		ldi r25,hi8(256)
 532 0028 A0E0      		ldi r26,hlo8(256)
 533 002a B0E0      		ldi r27,hhi8(256)
 534 002c C80E      		add r12,r24
 535 002e D91E      		adc r13,r25
 536 0030 EA1E      		adc r14,r26
 537 0032 FB1E      		adc r15,r27
 538 0034 90E0      		ldi r25,lo8(65536)
 539 0036 C916      		cp r12,r25
 540 0038 90E0      		ldi r25,hi8(65536)
 541 003a D906      		cpc r13,r25
 542 003c 91E0      		ldi r25,hlo8(65536)
 543 003e E906      		cpc r14,r25
 544 0040 90E0      		ldi r25,hhi8(65536)
 545 0042 F906      		cpc r15,r25
 546 0044 01F4      		brne .L4
 547               	.LBE2:
 169:api.c         ****         }
 170:api.c         **** 
 171:api.c         **** #ifndef __AVR_XMEGA__
 172:api.c         ****         boot_rww_enable();
 173:api.c         **** #endif // __AVR_XMEGA__
 174:api.c         **** 
 175:api.c         **** #ifdef __AVR_XMEGA__
 176:api.c         ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 549               	.LM12:
 550 0046 1092 CA01 		sts 458,__zero_reg__
 177:api.c         **** #endif // __AVR_XMEGA__
 178:api.c         **** 
 179:api.c         ****         SREG = saved_status;
 552               	.LM13:
 553 004a CFBF      		out __SREG__,r28
 180:api.c         ****         return XB_SUCCESS;
 181:api.c         **** }
 555               	.LM14:
 556 004c 80E0      		ldi r24,lo8(0)
 557               	/* epilogue start */
 558 004e CF91      		pop r28
 559 0050 FF90      		pop r15
 560 0052 EF90      		pop r14
 561 0054 DF90      		pop r13
 562 0056 CF90      		pop r12
 563 0058 0895      		ret
 571               	.Lscope3:
 572               		.section	.text.xboot_erase_application_page,"ax",@progbits
 575               	.global	xboot_erase_application_page
 577               	xboot_erase_application_page:
  98:api.c         **** {
 579               	.LM15:
 580               	.LFBB4:
 581 0000 CF93      		push r28
 582               	/* prologue: function */
 583               	/* frame size = 0 */
 584               	/* stack size = 1 */
 585               	.L__stack_usage = 1
  99:api.c         ****         uint8_t saved_status = SREG;
 587               	.LM16:
 588 0002 CFB7      		in r28,__SREG__
 101:api.c         ****         if (address > BOOT_SECTION_START)
 590               	.LM17:
 591 0004 6130      		cpi r22,lo8(65537)
 592 0006 20E0      		ldi r18,hi8(65537)
 593 0008 7207      		cpc r23,r18
 594 000a 21E0      		ldi r18,hlo8(65537)
 595 000c 8207      		cpc r24,r18
 596 000e 20E0      		ldi r18,hhi8(65537)
 597 0010 9207      		cpc r25,r18
 598 0012 00F4      		brsh .L8
 104:api.c         ****         cli();
 600               	.LM18:
 601               	/* #APP */
 602               	 ;  104 "api.c" 1
 603 0014 F894      		cli
 604               	 ;  0 "" 2
 106:api.c         ****         Flash_EraseApplicationPage(address);
 606               	.LM19:
 607               	/* #NOAPP */
 608 0016 0E94 0000 		call SP_EraseApplicationPage
 107:api.c         ****         Flash_WaitForSPM();
 610               	.LM20:
 611 001a 0E94 0000 		call SP_WaitForSPM
 114:api.c         ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 613               	.LM21:
 614 001e 1092 CA01 		sts 458,__zero_reg__
 117:api.c         ****         SREG = saved_status;
 616               	.LM22:
 617 0022 CFBF      		out __SREG__,r28
 118:api.c         ****         return XB_SUCCESS;
 619               	.LM23:
 620 0024 80E0      		ldi r24,lo8(0)
 621 0026 00C0      		rjmp .L7
 622               	.L8:
 102:api.c         ****                 return XB_INVALID_ADDRESS;
 624               	.LM24:
 625 0028 83E0      		ldi r24,lo8(3)
 626               	.L7:
 627               	/* epilogue start */
 119:api.c         **** }
 629               	.LM25:
 630 002a CF91      		pop r28
 631 002c 0895      		ret
 636               	.Lscope4:
 637               		.section	.text.xboot_write_user_signature_row,"ax",@progbits
 640               	.global	xboot_write_user_signature_row
 642               	xboot_write_user_signature_row:
 142:api.c         **** {
 644               	.LM26:
 645               	.LFBB5:
 646 0000 CF93      		push r28
 647               	/* prologue: function */
 648               	/* frame size = 0 */
 649               	/* stack size = 1 */
 650               	.L__stack_usage = 1
 143:api.c         ****         uint8_t saved_status = SREG;
 652               	.LM27:
 653 0002 CFB7      		in r28,__SREG__
 144:api.c         ****         cli();
 655               	.LM28:
 656               	/* #APP */
 657               	 ;  144 "api.c" 1
 658 0004 F894      		cli
 659               	 ;  0 "" 2
 146:api.c         ****         Flash_LoadFlashPage(data);
 661               	.LM29:
 662               	/* #NOAPP */
 663 0006 0E94 0000 		call SP_LoadFlashPage
 147:api.c         ****         Flash_EraseUserSignatureRow();
 665               	.LM30:
 666 000a 0E94 0000 		call SP_EraseUserSignatureRow
 148:api.c         ****         Flash_WaitForSPM();
 668               	.LM31:
 669 000e 0E94 0000 		call SP_WaitForSPM
 149:api.c         ****         Flash_WriteUserSignatureRow();
 671               	.LM32:
 672 0012 0E94 0000 		call SP_WriteUserSignatureRow
 150:api.c         ****         Flash_WaitForSPM();
 674               	.LM33:
 675 0016 0E94 0000 		call SP_WaitForSPM
 152:api.c         ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 677               	.LM34:
 678 001a 1092 CA01 		sts 458,__zero_reg__
 154:api.c         ****         SREG = saved_status;
 680               	.LM35:
 681 001e CFBF      		out __SREG__,r28
 156:api.c         **** }
 683               	.LM36:
 684 0020 80E0      		ldi r24,lo8(0)
 685               	/* epilogue start */
 686 0022 CF91      		pop r28
 687 0024 0895      		ret
 692               	.Lscope5:
 693               		.section	.text.xboot_write_application_page,"ax",@progbits
 698               	.global	xboot_write_application_page
 700               	xboot_write_application_page:
 122:api.c         **** {
 702               	.LM37:
 703               	.LFBB6:
 704 0000 CF93      		push r28
 705               	/* prologue: function */
 706               	/* frame size = 0 */
 707               	/* stack size = 1 */
 708               	.L__stack_usage = 1
 123:api.c         ****         uint8_t saved_status = SREG;
 710               	.LM38:
 711 0002 CFB7      		in r28,__SREG__
 125:api.c         ****         if (address > BOOT_SECTION_START)
 713               	.LM39:
 714 0004 6130      		cpi r22,lo8(65537)
 715 0006 30E0      		ldi r19,hi8(65537)
 716 0008 7307      		cpc r23,r19
 717 000a 31E0      		ldi r19,hlo8(65537)
 718 000c 8307      		cpc r24,r19
 719 000e 30E0      		ldi r19,hhi8(65537)
 720 0010 9307      		cpc r25,r19
 721 0012 00F4      		brsh .L12
 128:api.c         ****         cli();
 723               	.LM40:
 724               	/* #APP */
 725               	 ;  128 "api.c" 1
 726 0014 F894      		cli
 727               	 ;  0 "" 2
 130:api.c         ****         Flash_ProgramPage(address, data, erase);
 729               	.LM41:
 730               	/* #NOAPP */
 731 0016 0E94 0000 		call Flash_ProgramPage
 133:api.c         ****         NVM_CMD = NVM_CMD_NO_OPERATION_gc;
 733               	.LM42:
 734 001a 1092 CA01 		sts 458,__zero_reg__
 136:api.c         ****         SREG = saved_status;
 736               	.LM43:
 737 001e CFBF      		out __SREG__,r28
 137:api.c         ****         return XB_SUCCESS;
 739               	.LM44:
 740 0020 80E0      		ldi r24,lo8(0)
 741 0022 00C0      		rjmp .L11
 742               	.L12:
 126:api.c         ****                 return XB_INVALID_ADDRESS;
 744               	.LM45:
 745 0024 83E0      		ldi r24,lo8(3)
 746               	.L11:
 747               	/* epilogue start */
 138:api.c         **** }
 749               	.LM46:
 750 0026 CF91      		pop r28
 751 0028 0895      		ret
 756               	.Lscope6:
 757               		.section	.text.xboot_app_temp_write_page,"ax",@progbits
 762               	.global	xboot_app_temp_write_page
 764               	xboot_app_temp_write_page:
 182:api.c         **** 
 183:api.c         **** uint8_t xboot_app_temp_write_page(uint32_t addr, uint8_t *data, uint8_t erase)
 184:api.c         **** {
 766               	.LM47:
 767               	.LFBB7:
 768               	/* prologue: function */
 769               	/* frame size = 0 */
 770               	/* stack size = 0 */
 771               	.L__stack_usage = 0
 185:api.c         ****         return xboot_write_application_page(addr + XB_APP_TEMP_START, data, erase);
 773               	.LM48:
 774 0000 6050      		subi r22,lo8(-(32768))
 775 0002 7048      		sbci r23,hi8(-(32768))
 776 0004 8F4F      		sbci r24,hlo8(-(32768))
 777 0006 9F4F      		sbci r25,hhi8(-(32768))
 778 0008 0E94 0000 		call xboot_write_application_page
 779               	/* epilogue start */
 186:api.c         **** }
 781               	.LM49:
 782 000c 0895      		ret
 784               	.Lscope7:
 785               	.global	api_jump_table
 786               		.section	.vectors,"aw",@progbits
 789               	api_jump_table:
 790 0000 58        		.byte	88
 791 0001 42        		.byte	66
 792 0002 6A        		.byte	106
 793 0003 01        		.byte	1
 794 0004 0000      		.word	gs(xboot_get_version)
 795 0006 0000      		.word	gs(xboot_spm_wrapper)
 796 0008 0000      		.word	gs(xboot_erase_application_page)
 797 000a 0000      		.word	gs(xboot_write_application_page)
 798 000c 0000      		.word	gs(xboot_write_user_signature_row)
 799 000e 0000      		.word	gs(xboot_app_temp_erase)
 800 0010 0000      		.word	gs(xboot_app_temp_write_page)
 802               		.text
 804               	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 api.c
     /tmp/ccHiYK9J.s:2      *ABS*:0000003f __SREG__
     /tmp/ccHiYK9J.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccHiYK9J.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccHiYK9J.s:5      *ABS*:00000034 __CCP__
     /tmp/ccHiYK9J.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccHiYK9J.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccHiYK9J.s:443    .text.xboot_get_version:00000000 xboot_get_version
     /tmp/ccHiYK9J.s:469    .text.xboot_spm_wrapper:00000000 xboot_spm_wrapper
     /tmp/ccHiYK9J.s:488    .text.xboot_app_temp_erase:00000000 xboot_app_temp_erase
     /tmp/ccHiYK9J.s:577    .text.xboot_erase_application_page:00000000 xboot_erase_application_page
     /tmp/ccHiYK9J.s:642    .text.xboot_write_user_signature_row:00000000 xboot_write_user_signature_row
     /tmp/ccHiYK9J.s:700    .text.xboot_write_application_page:00000000 xboot_write_application_page
     /tmp/ccHiYK9J.s:764    .text.xboot_app_temp_write_page:00000000 xboot_app_temp_write_page
     /tmp/ccHiYK9J.s:789    .vectors:00000000 api_jump_table

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
SP_EraseApplicationPage
SP_WaitForSPM
SP_LoadFlashPage
SP_EraseUserSignatureRow
SP_WriteUserSignatureRow
Flash_ProgramPage
