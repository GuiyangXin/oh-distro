
palm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ada  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005a  00802000  00002ada  00002b6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001112  0080205a  0080205a  00002bc8  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  00002bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c8  00000000  00000000  00003361  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ffe  00000000  00000000  00003429  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2b  00000000  00000000  00008427  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd9  00000000  00000000  00009052  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a28  00000000  00000000  00009d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000308c  00000000  00000000  0000a754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021ab  00000000  00000000  0000d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000f98b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 27 01 	jmp	0x24e	; 0x24e <__ctors_end>
       4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
       8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
       c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      10:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      14:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      18:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_6>
      1c:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__vector_7>
      20:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__vector_8>
      24:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_9>
      28:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      2c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      30:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      34:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      38:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__vector_14>
      3c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      40:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      44:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      48:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      4c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      50:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      54:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      58:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      5c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      60:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      64:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_25>
      68:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      6c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_27>
      70:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__vector_28>
      74:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      78:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_30>
      7c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      80:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      84:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      88:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      8c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      90:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      94:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      98:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      9c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      a0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      a4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      a8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      ac:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      b0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      b4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      b8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      bc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      c0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      c4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      c8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      cc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      d0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      d4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      d8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      dc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      e0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      e4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      e8:	0c 94 92 05 	jmp	0xb24	; 0xb24 <__vector_58>
      ec:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      f0:	0c 94 88 06 	jmp	0xd10	; 0xd10 <__vector_60>
      f4:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__vector_61>
      f8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
      fc:	0c 94 ab 06 	jmp	0xd56	; 0xd56 <__vector_63>
     100:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     104:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     108:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     10c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     110:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     114:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     118:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     11c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     120:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     124:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     128:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     12c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     130:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     134:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__vector_77>
     138:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     13c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     140:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     144:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     148:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     14c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     150:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     154:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     158:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     15c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     160:	0c 94 5e 05 	jmp	0xabc	; 0xabc <__vector_88>
     164:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     168:	0c 94 65 06 	jmp	0xcca	; 0xcca <__vector_90>
     16c:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_91>
     170:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     174:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__vector_93>
     178:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     17c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     180:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     184:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     188:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     18c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     190:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     194:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     198:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     19c:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1a0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1a4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1a8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1ac:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1b0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1b4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1b8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1bc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1c0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1c4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1c8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1cc:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1d0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1d4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1d8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1dc:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_119>
     1e0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1e4:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1e8:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1ec:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1f0:	0c 94 4d 01 	jmp	0x29a	; 0x29a <__bad_interrupt>
     1f4:	08 00       	.word	0x0008	; ????
     1f6:	00 00       	nop
     1f8:	be 92       	st	-X, r11
     1fa:	24 49       	sbci	r18, 0x94	; 148
     1fc:	12 3e       	cpi	r17, 0xE2	; 226
     1fe:	ab aa       	sts	0x9b, r26
     200:	aa 2a       	or	r10, r26
     202:	be cd       	rjmp	.-1156   	; 0xfffffd80 <__eeprom_end+0xff7efd80>
     204:	cc cc       	rjmp	.-1640   	; 0xfffffb9e <__eeprom_end+0xff7efb9e>
     206:	4c 3e       	cpi	r20, 0xEC	; 236
     208:	00 00       	nop
     20a:	00 80       	ld	r0, Z
     20c:	be ab       	sts	0x5e, r27
     20e:	aa aa       	sts	0x9a, r26
     210:	aa 3e       	cpi	r26, 0xEA	; 234
     212:	00 00       	nop
     214:	00 00       	nop
     216:	bf 00       	.word	0x00bf	; ????
     218:	00 00       	nop
     21a:	80 3f       	cpi	r24, 0xF0	; 240
     21c:	00 00       	nop
     21e:	00 00       	nop
     220:	00 08       	sbc	r0, r0
     222:	41 78       	andi	r20, 0x81	; 129
     224:	d3 bb       	out	0x13, r29	; 19
     226:	43 87       	std	Z+11, r20	; 0x0b
     228:	d1 13       	cpse	r29, r17
     22a:	3d 19       	sub	r19, r13
     22c:	0e 3c       	cpi	r16, 0xCE	; 206
     22e:	c3 bd       	out	0x23, r28	; 35
     230:	42 82       	std	Z+2, r4	; 0x02
     232:	ad 2b       	or	r26, r29
     234:	3e 68       	ori	r19, 0x8E	; 142
     236:	ec 82       	std	Y+4, r14	; 0x04
     238:	76 be       	out	0x36, r7	; 54
     23a:	d9 8f       	std	Y+25, r29	; 0x19
     23c:	e1 a9       	sts	0x41, r30
     23e:	3e 4c       	sbci	r19, 0xCE	; 206
     240:	80 ef       	ldi	r24, 0xF0	; 240
     242:	ff be       	out	0x3f, r15	; 63
     244:	01 c4       	rjmp	.+2050   	; 0xa48 <__vector_91+0x5c>
     246:	ff 7f       	andi	r31, 0xFF	; 255
     248:	3f 00       	.word	0x003f	; ????
     24a:	00 00       	nop
	...

0000024e <__ctors_end>:
     24e:	11 24       	eor	r1, r1
     250:	1f be       	out	0x3f, r1	; 63
     252:	cf ef       	ldi	r28, 0xFF	; 255
     254:	df e3       	ldi	r29, 0x3F	; 63
     256:	de bf       	out	0x3e, r29	; 62
     258:	cd bf       	out	0x3d, r28	; 61
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	0c bf       	out	0x3c, r16	; 60
     25e:	18 be       	out	0x38, r1	; 56
     260:	19 be       	out	0x39, r1	; 57
     262:	1a be       	out	0x3a, r1	; 58
     264:	1b be       	out	0x3b, r1	; 59

00000266 <__do_copy_data>:
     266:	10 e2       	ldi	r17, 0x20	; 32
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e2       	ldi	r27, 0x20	; 32
     26c:	ea ed       	ldi	r30, 0xDA	; 218
     26e:	fa e2       	ldi	r31, 0x2A	; 42
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	0b bf       	out	0x3b, r16	; 59
     274:	02 c0       	rjmp	.+4      	; 0x27a <__do_copy_data+0x14>
     276:	07 90       	elpm	r0, Z+
     278:	0d 92       	st	X+, r0
     27a:	aa 35       	cpi	r26, 0x5A	; 90
     27c:	b1 07       	cpc	r27, r17
     27e:	d9 f7       	brne	.-10     	; 0x276 <__do_copy_data+0x10>
     280:	1b be       	out	0x3b, r1	; 59

00000282 <__do_clear_bss>:
     282:	11 e3       	ldi	r17, 0x31	; 49
     284:	aa e5       	ldi	r26, 0x5A	; 90
     286:	b0 e2       	ldi	r27, 0x20	; 32
     288:	01 c0       	rjmp	.+2      	; 0x28c <.do_clear_bss_start>

0000028a <.do_clear_bss_loop>:
     28a:	1d 92       	st	X+, r1

0000028c <.do_clear_bss_start>:
     28c:	ac 36       	cpi	r26, 0x6C	; 108
     28e:	b1 07       	cpc	r27, r17
     290:	e1 f7       	brne	.-8      	; 0x28a <.do_clear_bss_loop>
     292:	0e 94 99 11 	call	0x2332	; 0x2332 <main>
     296:	0c 94 6b 15 	jmp	0x2ad6	; 0x2ad6 <_exit>

0000029a <__bad_interrupt>:
     29a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000029e <Thermistor_RtoT>:

    return result;
}

float Thermistor_RtoT(float MeasR)
{
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
    float T;

    T = log(MeasR / THERMISTOR_NOMINAL_R);
     2a2:	20 e0       	ldi	r18, 0x00	; 0
     2a4:	30 e4       	ldi	r19, 0x40	; 64
     2a6:	4c e1       	ldi	r20, 0x1C	; 28
     2a8:	56 e4       	ldi	r21, 0x46	; 70
     2aa:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__divsf3>
     2ae:	0e 94 1e 14 	call	0x283c	; 0x283c <log>
    T *= (1/THERMISTOR_B);
     2b2:	26 ef       	ldi	r18, 0xF6	; 246
     2b4:	3d ee       	ldi	r19, 0xED	; 237
     2b6:	43 e8       	ldi	r20, 0x83	; 131
     2b8:	59 e3       	ldi	r21, 0x39	; 57
     2ba:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__mulsf3>
    T += (1/THERMISTOR_NOMINAL_T);
     2be:	46 2f       	mov	r20, r22
     2c0:	57 2f       	mov	r21, r23
     2c2:	68 2f       	mov	r22, r24
     2c4:	79 2f       	mov	r23, r25
     2c6:	cb 01       	movw	r24, r22
     2c8:	ba 01       	movw	r22, r20
     2ca:	2f e0       	ldi	r18, 0x0F	; 15
     2cc:	3f ec       	ldi	r19, 0xCF	; 207
     2ce:	4b e5       	ldi	r20, 0x5B	; 91
     2d0:	5b e3       	ldi	r21, 0x3B	; 59
     2d2:	0e 94 93 12 	call	0x2526	; 0x2526 <__addsf3>
     2d6:	b6 2f       	mov	r27, r22
     2d8:	a7 2f       	mov	r26, r23
     2da:	38 2f       	mov	r19, r24
     2dc:	29 2f       	mov	r18, r25
    T = (1/T);
     2de:	60 e0       	ldi	r22, 0x00	; 0
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	80 e8       	ldi	r24, 0x80	; 128
     2e4:	9f e3       	ldi	r25, 0x3F	; 63
     2e6:	fd 01       	movw	r30, r26
     2e8:	a9 01       	movw	r20, r18
     2ea:	0f 2f       	mov	r16, r31
     2ec:	1e 2f       	mov	r17, r30
     2ee:	25 2f       	mov	r18, r21
     2f0:	34 2f       	mov	r19, r20
     2f2:	a9 01       	movw	r20, r18
     2f4:	98 01       	movw	r18, r16
     2f6:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__divsf3>
    T -= 273.15;         //Convert from K to C
     2fa:	46 2f       	mov	r20, r22
     2fc:	57 2f       	mov	r21, r23
     2fe:	68 2f       	mov	r22, r24
     300:	79 2f       	mov	r23, r25
     302:	cb 01       	movw	r24, r22
     304:	ba 01       	movw	r22, r20
     306:	23 e3       	ldi	r18, 0x33	; 51
     308:	33 e9       	ldi	r19, 0x93	; 147
     30a:	48 e8       	ldi	r20, 0x88	; 136
     30c:	53 e4       	ldi	r21, 0x43	; 67
     30e:	0e 94 92 12 	call	0x2524	; 0x2524 <__subsf3>

    return T;

}
     312:	46 2f       	mov	r20, r22
     314:	57 2f       	mov	r21, r23
     316:	68 2f       	mov	r22, r24
     318:	79 2f       	mov	r23, r25
     31a:	cb 01       	movw	r24, r22
     31c:	ba 01       	movw	r22, r20
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	08 95       	ret

00000324 <Thermistor_VtoR>:

float Thermistor_VtoR(float ThermistorVoltage)
{
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	6b 01       	movw	r12, r22
     336:	7c 01       	movw	r14, r24
    float ThermistorR;

    ThermistorR = ThermistorVoltage * THERMISTOR_FIXED_R;
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e4       	ldi	r19, 0x40	; 64
     33c:	4c e1       	ldi	r20, 0x1C	; 28
     33e:	56 e4       	ldi	r21, 0x46	; 70
     340:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__mulsf3>
     344:	d6 2f       	mov	r29, r22
     346:	c7 2f       	mov	r28, r23
     348:	18 2f       	mov	r17, r24
     34a:	09 2f       	mov	r16, r25
    ThermistorR /= (THERMISTOR_PULLUP_VOLTAGE - ThermistorVoltage);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	70 e0       	ldi	r23, 0x00	; 0
     350:	80 e2       	ldi	r24, 0x20	; 32
     352:	90 e4       	ldi	r25, 0x40	; 64
     354:	a7 01       	movw	r20, r14
     356:	96 01       	movw	r18, r12
     358:	0e 94 92 12 	call	0x2524	; 0x2524 <__subsf3>
     35c:	9b 01       	movw	r18, r22
     35e:	ac 01       	movw	r20, r24
     360:	fe 01       	movw	r30, r28
     362:	b8 01       	movw	r22, r16
     364:	8f 2f       	mov	r24, r31
     366:	9e 2f       	mov	r25, r30
     368:	a7 2f       	mov	r26, r23
     36a:	b6 2f       	mov	r27, r22
     36c:	bc 01       	movw	r22, r24
     36e:	cd 01       	movw	r24, r26
     370:	0e 94 f7 12 	call	0x25ee	; 0x25ee <__divsf3>

    return ThermistorR;

}
     374:	46 2f       	mov	r20, r22
     376:	57 2f       	mov	r21, r23
     378:	68 2f       	mov	r22, r24
     37a:	79 2f       	mov	r23, r25
     37c:	cb 01       	movw	r24, r22
     37e:	ba 01       	movw	r22, r20
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	df 90       	pop	r13
     38e:	cf 90       	pop	r12
     390:	08 95       	ret

00000392 <captureSweep>:
*
* captures an ADC sweep of all connected sensors and places the output
* data in outputData.
************************************************************************/
void captureSweep(int16_t *outputData)
{
     392:	fc 01       	movw	r30, r24
    //Begin sampling on the first wave
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     394:	88 e0       	ldi	r24, 0x08	; 8
     396:	80 93 21 02 	sts	0x0221, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     39a:	88 e1       	ldi	r24, 0x18	; 24
     39c:	80 93 29 02 	sts	0x0229, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;
     3a0:	88 e3       	ldi	r24, 0x38	; 56
     3a2:	80 93 31 02 	sts	0x0231, r24
    //ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN6_gc;
    ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
     3a6:	80 e2       	ldi	r24, 0x20	; 32
     3a8:	80 93 39 02 	sts	0x0239, r24
    
    ADCA.CTRLA = (ADC_CH3START_bm | ADC_CH2START_bm | ADC_CH1START_bm | ADC_CH0START_bm | ADC_ENABLE_bm);
     3ac:	8d e3       	ldi	r24, 0x3D	; 61
     3ae:	80 93 00 02 	sts	0x0200, r24

    //Now wait for the conclusion of the sampling
    while(!(ADCA.INTFLAGS & ADC_CH3IF_bm));
     3b2:	80 91 06 02 	lds	r24, 0x0206
     3b6:	83 ff       	sbrs	r24, 3
     3b8:	fc cf       	rjmp	.-8      	; 0x3b2 <captureSweep+0x20>
    while(!(ADCA.INTFLAGS & ADC_CH2IF_bm));
     3ba:	80 91 06 02 	lds	r24, 0x0206
     3be:	82 ff       	sbrs	r24, 2
     3c0:	fc cf       	rjmp	.-8      	; 0x3ba <captureSweep+0x28>
    while(!(ADCA.INTFLAGS & ADC_CH1IF_bm));
     3c2:	80 91 06 02 	lds	r24, 0x0206
     3c6:	81 ff       	sbrs	r24, 1
     3c8:	fc cf       	rjmp	.-8      	; 0x3c2 <captureSweep+0x30>
    while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
     3ca:	80 91 06 02 	lds	r24, 0x0206
     3ce:	80 ff       	sbrs	r24, 0
     3d0:	fc cf       	rjmp	.-8      	; 0x3ca <captureSweep+0x38>

    //Sampling complete
    outputData[0] = ADCA.CH0RES;
     3d2:	80 91 10 02 	lds	r24, 0x0210
     3d6:	90 91 11 02 	lds	r25, 0x0211
     3da:	80 83       	st	Z, r24
     3dc:	91 83       	std	Z+1, r25	; 0x01
    outputData[1] = ADCA.CH1RES;
     3de:	80 91 12 02 	lds	r24, 0x0212
     3e2:	90 91 13 02 	lds	r25, 0x0213
     3e6:	82 83       	std	Z+2, r24	; 0x02
     3e8:	93 83       	std	Z+3, r25	; 0x03
    outputData[2] = ADCA.CH2RES;
     3ea:	80 91 14 02 	lds	r24, 0x0214
     3ee:	90 91 15 02 	lds	r25, 0x0215
     3f2:	84 83       	std	Z+4, r24	; 0x04
     3f4:	95 83       	std	Z+5, r25	; 0x05
    outputData[3] = 0;
     3f6:	16 82       	std	Z+6, r1	; 0x06
     3f8:	17 82       	std	Z+7, r1	; 0x07
    outputData[4] = ADCA.CH3RES;
     3fa:	80 91 16 02 	lds	r24, 0x0216
     3fe:	90 91 17 02 	lds	r25, 0x0217
     402:	80 87       	std	Z+8, r24	; 0x08
     404:	91 87       	std	Z+9, r25	; 0x09
    outputData[5] = 0;
     406:	12 86       	std	Z+10, r1	; 0x0a
     408:	13 86       	std	Z+11, r1	; 0x0b

    //This channel should be calibrated
    //outputData[3] = ADCA.CH3RES - IMON_ADCOffsetCal;

    ADCA.INTFLAGS = ADC_CH3IF_bm | ADC_CH2IF_bm | ADC_CH1IF_bm | ADC_CH0IF_bm;
     40a:	8f e0       	ldi	r24, 0x0F	; 15
     40c:	e0 e0       	ldi	r30, 0x00	; 0
     40e:	f2 e0       	ldi	r31, 0x02	; 2
     410:	86 83       	std	Z+6, r24	; 0x06
    // outputData[5] = ADCA.CH1RES;

    // ADCA.INTFLAGS = ADC_CH1IF_bm | ADC_CH0IF_bm;

    return;
}
     412:	08 95       	ret

00000414 <configureADC>:
* configureADC
*
* Configure the ADC to capture the analog inputs using the captureSweep routine
************************************************************************/
void configureADC(void)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     418:	aa ec       	ldi	r26, 0xCA	; 202
     41a:	b1 e0       	ldi	r27, 0x01	; 1
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	8c 93       	st	X, r24
    result = pgm_read_byte(index);
     420:	e0 e2       	ldi	r30, 0x20	; 32
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     426:	1c 92       	st	X, r1
*
* Configure the ADC to capture the analog inputs using the captureSweep routine
************************************************************************/
void configureADC(void)
{
    ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     428:	c0 e0       	ldi	r28, 0x00	; 0
     42a:	d2 e0       	ldi	r29, 0x02	; 2
     42c:	ec 87       	std	Y+12, r30	; 0x0c
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     42e:	8c 93       	st	X, r24
    result = pgm_read_byte(index);
     430:	e1 e2       	ldi	r30, 0x21	; 33
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     436:	1c 92       	st	X, r1
* Configure the ADC to capture the analog inputs using the captureSweep routine
************************************************************************/
void configureADC(void)
{
    ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
    ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     438:	ed 87       	std	Y+13, r30	; 0x0d


    //Maximum ADC clock is 2 MHz.  This requires a prescaler of 16 on a CPU clock of 32 MHz
    ADCA.PRESCALER = ADC_PRESCALER_DIV16_gc;
     43a:	8c 83       	std	Y+4, r24	; 0x04

    ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	8a 83       	std	Y+2, r24	; 0x02

#warning The ADC.CH structure is wrong in AU parts.  Just use the ADC_CH0_MUXCTRL, etc. defines instead

    //CH0 is 3.3VMON and EXTTMP_MON
    ADCA_CH0_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	80 93 20 02 	sts	0x0220, r24
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     446:	98 e0       	ldi	r25, 0x08	; 8
     448:	90 93 21 02 	sts	0x0221, r25
    ADCA_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     44c:	10 92 22 02 	sts	0x0222, r1

    //CH1 is 12VMON and TempB5
    ADCA_CH1_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     450:	80 93 28 02 	sts	0x0228, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     454:	98 e1       	ldi	r25, 0x18	; 24
     456:	90 93 29 02 	sts	0x0229, r25
    ADCA_CH1_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     45a:	10 92 2a 02 	sts	0x022A, r1

    //CH2 is 48VMON
    ADCA_CH2_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     45e:	80 93 30 02 	sts	0x0230, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;
     462:	98 e3       	ldi	r25, 0x38	; 56
     464:	90 93 31 02 	sts	0x0231, r25
    ADCA_CH2_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     468:	10 92 32 02 	sts	0x0232, r1

    //CH3 is IMONB5
    ADCA_CH3_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     46c:	80 93 38 02 	sts	0x0238, r24
    ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN6_gc;
     470:	90 e3       	ldi	r25, 0x30	; 48
     472:	90 93 39 02 	sts	0x0239, r25
    ADCA_CH3_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     476:	10 92 3a 02 	sts	0x023A, r1

    //Configure for Unsigned operation
    ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
     47a:	90 e1       	ldi	r25, 0x10	; 16
     47c:	99 83       	std	Y+1, r25	; 0x01
    ADCA.CTRLA = ADC_ENABLE_bm;
     47e:	88 83       	st	Y, r24

}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <configureDAC>:

#include <avr/io.h>

void configureDAC(void)
{
    DACB.TIMCTRL = DAC_CONINTVAL_32CLK_gc | DAC_REFRESH_OFF_gc;
     486:	e0 e2       	ldi	r30, 0x20	; 32
     488:	f3 e0       	ldi	r31, 0x03	; 3
     48a:	8f e5       	ldi	r24, 0x5F	; 95
     48c:	84 83       	std	Z+4, r24	; 0x04
    DACB.CTRLC = DAC_REFSEL_AREFA_gc;
     48e:	80 e1       	ldi	r24, 0x10	; 16
     490:	82 83       	std	Z+2, r24	; 0x02
    DACB.CTRLB = DAC_CHSEL_SINGLE_gc; // | DAC_CH0TRIG_bm;
     492:	11 82       	std	Z+1, r1	; 0x01
    DACB.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;
     494:	85 e0       	ldi	r24, 0x05	; 5
     496:	80 83       	st	Z, r24
    
    // This is set again in handleFingerCommand()
    // before the motor is enabled, but set it here just in case.
    
    //DACB.CH0DATA = 0x0FFF;
    DACB.CH0DATA = 0x0000;
     498:	10 8e       	std	Z+24, r1	; 0x18
     49a:	11 8e       	std	Z+25, r1	; 0x19
}
     49c:	08 95       	ret

0000049e <configureSPIModulesEncoder>:

void configureSPIModulesEncoder(void)
{
    //This part expects an idling high SCLK, and it wants to setup data on the RISING clock edge and sample on the FALLING.  This is Mode 2

    ENCODERSPI.INTCTRL = SPI_INTLVL_OFF_gc;
     49e:	e0 ec       	ldi	r30, 0xC0	; 192
     4a0:	fb e0       	ldi	r31, 0x0B	; 11
     4a2:	11 82       	std	Z+1, r1	; 0x01
    ENCODERSPI.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_2_gc | SPI_PRESCALER_DIV64_gc | SPI_CLK2X_bm;
     4a4:	8a ed       	ldi	r24, 0xDA	; 218
     4a6:	80 83       	st	Z, r24
}
     4a8:	08 95       	ret

000004aa <readEncoder>:

int16_t readEncoder(void)
{
    uint8_t temp;
    uint8_t temp2;
    configureSPIModulesEncoder();
     4aa:	0e 94 4f 02 	call	0x49e	; 0x49e <configureSPIModulesEncoder>
    PORTF.OUTCLR = 0x10;
     4ae:	80 e1       	ldi	r24, 0x10	; 16
     4b0:	e0 ea       	ldi	r30, 0xA0	; 160
     4b2:	f6 e0       	ldi	r31, 0x06	; 6
     4b4:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4b6:	8a e0       	ldi	r24, 0x0A	; 10
     4b8:	8a 95       	dec	r24
     4ba:	f1 f7       	brne	.-4      	; 0x4b8 <readEncoder+0xe>
     4bc:	00 c0       	rjmp	.+0      	; 0x4be <readEncoder+0x14>
    _delay_us(1); // do we need this?

    ENCODERSPI.DATA = 0x00;
     4be:	e0 ec       	ldi	r30, 0xC0	; 192
     4c0:	fb e0       	ldi	r31, 0x0B	; 11
     4c2:	13 82       	std	Z+3, r1	; 0x03
    while(!(ENCODERSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     4c4:	80 91 c2 0b 	lds	r24, 0x0BC2
     4c8:	87 ff       	sbrs	r24, 7
     4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <readEncoder+0x1a>
    temp = ENCODERSPI.DATA;
     4cc:	80 91 c3 0b 	lds	r24, 0x0BC3

    ENCODERSPI.DATA = 0x00;
     4d0:	e0 ec       	ldi	r30, 0xC0	; 192
     4d2:	fb e0       	ldi	r31, 0x0B	; 11
     4d4:	13 82       	std	Z+3, r1	; 0x03
    while(!(ENCODERSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     4d6:	90 91 c2 0b 	lds	r25, 0x0BC2
     4da:	97 ff       	sbrs	r25, 7
     4dc:	fc cf       	rjmp	.-8      	; 0x4d6 <readEncoder+0x2c>
    temp2 = ENCODERSPI.DATA;
     4de:	40 91 c3 0b 	lds	r20, 0x0BC3

    PORTF.OUTSET = 0x10;
     4e2:	90 e1       	ldi	r25, 0x10	; 16
     4e4:	e0 ea       	ldi	r30, 0xA0	; 160
     4e6:	f6 e0       	ldi	r31, 0x06	; 6
     4e8:	95 83       	std	Z+5, r25	; 0x05

    //The serial port is strange because the encoder will likely have a dummy bit at the front.
    rawEncoder = ((temp << 3) & 0x3F8) | ((temp2 >> 5) & 0x007);
     4ea:	42 95       	swap	r20
     4ec:	46 95       	lsr	r20
     4ee:	47 70       	andi	r20, 0x07	; 7
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	23 e0       	ldi	r18, 0x03	; 3
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	2a 95       	dec	r18
     4fc:	e1 f7       	brne	.-8      	; 0x4f6 <readEncoder+0x4c>
     4fe:	88 7f       	andi	r24, 0xF8	; 248
     500:	93 70       	andi	r25, 0x03	; 3
     502:	48 2b       	or	r20, r24
     504:	59 2b       	or	r21, r25
     506:	40 93 5a 20 	sts	0x205A, r20
     50a:	50 93 5b 20 	sts	0x205B, r21

    if (!encoderInitialized)
     50e:	80 91 5c 20 	lds	r24, 0x205C
     512:	88 23       	and	r24, r24
     514:	59 f4       	brne	.+22     	; 0x52c <readEncoder+0x82>
    {
        lastEncoder = rawEncoder;
     516:	40 93 5f 20 	sts	0x205F, r20
     51a:	50 93 60 20 	sts	0x2060, r21
        adjustedEncoder = 0;
     51e:	10 92 5d 20 	sts	0x205D, r1
     522:	10 92 5e 20 	sts	0x205E, r1
        encoderInitialized = 1;
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	80 93 5c 20 	sts	0x205C, r24
    }
    
    int16_t delta = rawEncoder - lastEncoder;
     52c:	80 91 5f 20 	lds	r24, 0x205F
     530:	90 91 60 20 	lds	r25, 0x2060
     534:	ba 01       	movw	r22, r20
     536:	68 1b       	sub	r22, r24
     538:	79 0b       	sbc	r23, r25

    if (abs(delta) < 512)
     53a:	9b 01       	movw	r18, r22
     53c:	21 50       	subi	r18, 0x01	; 1
     53e:	3e 4f       	sbci	r19, 0xFE	; 254
     540:	e3 e0       	ldi	r30, 0x03	; 3
     542:	2f 3f       	cpi	r18, 0xFF	; 255
     544:	3e 07       	cpc	r19, r30
     546:	58 f4       	brcc	.+22     	; 0x55e <readEncoder+0xb4>
    {
        lastEncoder = rawEncoder;
     548:	40 93 5f 20 	sts	0x205F, r20
     54c:	50 93 60 20 	sts	0x2060, r21
        adjustedEncoder = adjustedEncoder + delta;
     550:	80 91 5d 20 	lds	r24, 0x205D
     554:	90 91 5e 20 	lds	r25, 0x205E
     558:	86 0f       	add	r24, r22
     55a:	97 1f       	adc	r25, r23
     55c:	18 c0       	rjmp	.+48     	; 0x58e <readEncoder+0xe4>
    }
    else
    {
        int16_t bottom = lastEncoder + (1024 - rawEncoder);
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	34 e0       	ldi	r19, 0x04	; 4
     562:	b9 01       	movw	r22, r18
     564:	64 1b       	sub	r22, r20
     566:	75 0b       	sbc	r23, r21
     568:	68 0f       	add	r22, r24
     56a:	79 1f       	adc	r23, r25
        int16_t top = rawEncoder + (1024 - lastEncoder);
     56c:	28 1b       	sub	r18, r24
     56e:	39 0b       	sbc	r19, r25
     570:	24 0f       	add	r18, r20
     572:	35 1f       	adc	r19, r21
        lastEncoder = rawEncoder;
     574:	40 93 5f 20 	sts	0x205F, r20
     578:	50 93 60 20 	sts	0x2060, r21
     57c:	80 91 5d 20 	lds	r24, 0x205D
     580:	90 91 5e 20 	lds	r25, 0x205E
        if (bottom<top) // crossing 0
     584:	62 17       	cp	r22, r18
     586:	73 07       	cpc	r23, r19
     588:	3c f4       	brge	.+14     	; 0x598 <readEncoder+0xee>
            adjustedEncoder = adjustedEncoder - bottom;
     58a:	86 1b       	sub	r24, r22
     58c:	97 0b       	sbc	r25, r23
     58e:	80 93 5d 20 	sts	0x205D, r24
     592:	90 93 5e 20 	sts	0x205E, r25
     596:	06 c0       	rjmp	.+12     	; 0x5a4 <readEncoder+0xfa>
        else // crossing 1024
            adjustedEncoder = adjustedEncoder + top;
     598:	28 0f       	add	r18, r24
     59a:	39 1f       	adc	r19, r25
     59c:	20 93 5d 20 	sts	0x205D, r18
     5a0:	30 93 5e 20 	sts	0x205E, r19
    }
    
    return adjustedEncoder;
}
     5a4:	80 91 5d 20 	lds	r24, 0x205D
     5a8:	90 91 5e 20 	lds	r25, 0x205E
     5ac:	08 95       	ret

000005ae <configurePortIO>:
    //PA3 - 12VMON
    //PA4 - EXTMP_MON
    //PA5 - NC
    //PA6 - NC
    //PA7 - 48VMON
    PORTA.OUT = 0x00;
     5ae:	e0 e0       	ldi	r30, 0x00	; 0
     5b0:	f6 e0       	ldi	r31, 0x06	; 6
     5b2:	14 82       	std	Z+4, r1	; 0x04
    PORTA.DIR = 0x00;
     5b4:	10 82       	st	Z, r1
    //PB3 - NC
    //PB4 - NC
    //PB5 - SPARE6
    //PB6 - SPARE1
    //PB7 - SPARE2
    PORTB.OUT = 0x00;
     5b6:	e0 e2       	ldi	r30, 0x20	; 32
     5b8:	f6 e0       	ldi	r31, 0x06	; 6
     5ba:	14 82       	std	Z+4, r1	; 0x04
    PORTB.DIR = 0x04;
     5bc:	84 e0       	ldi	r24, 0x04	; 4
     5be:	80 83       	st	Z, r24
    //PC3 - TX_TAC4
    //PC4 - RX_PROX2_EN
    //PC5 - TX_PROX2_EN
    //PC6 - RX_PROX2
    //PC7 - TX_PROX2
    PORTC.OUT = 0x22;
     5c0:	e0 e4       	ldi	r30, 0x40	; 64
     5c2:	f6 e0       	ldi	r31, 0x06	; 6
     5c4:	92 e2       	ldi	r25, 0x22	; 34
     5c6:	94 83       	std	Z+4, r25	; 0x04
    PORTC.DIR = 0xBB;
     5c8:	8b eb       	ldi	r24, 0xBB	; 187
     5ca:	80 83       	st	Z, r24
    //PD3 - TX_PROX3
    //PD4 - RX_PROX1_EN
    //PD5 - TX_PROX1_EN
    //PD6 - RX_PROX1
    //PD7 - TX_PROX1
    PORTD.OUT = 0x22;
     5cc:	e0 e6       	ldi	r30, 0x60	; 96
     5ce:	f6 e0       	ldi	r31, 0x06	; 6
     5d0:	94 83       	std	Z+4, r25	; 0x04
    PORTD.DIR = 0xBB;
     5d2:	80 83       	st	Z, r24
    //PE3 - TX_MTR5
    //PE4 - RX_MTR6_EN
    //PE5 - TX_MTR6_EN
    //PE6 - RX_MTR6
    //PE7 - TX_MTR6
    PORTE.OUT = 0x22;
     5d4:	e0 e8       	ldi	r30, 0x80	; 128
     5d6:	f6 e0       	ldi	r31, 0x06	; 6
     5d8:	94 83       	std	Z+4, r25	; 0x04
    PORTE.DIR = 0xBB;
     5da:	80 83       	st	Z, r24
    //PF3 - COMM_TX
    //PF4 - nCS
    //PF5 - MOSI
    //PF6 - MISO
    //PF7 - SCK
    PORTF.OUT = 0x00;
     5dc:	e0 ea       	ldi	r30, 0xA0	; 160
     5de:	f6 e0       	ldi	r31, 0x06	; 6
     5e0:	14 82       	std	Z+4, r1	; 0x04
    PORTF.DIR = 0xDB;
     5e2:	8b ed       	ldi	r24, 0xDB	; 219
     5e4:	80 83       	st	Z, r24
    //PH3 - NC
    //PH4 - NC
    //PH5 - NC
    //PH6 - NC
    //PH7 - NC
    PORTH.OUT = 0x00;
     5e6:	e0 ee       	ldi	r30, 0xE0	; 224
     5e8:	f6 e0       	ldi	r31, 0x06	; 6
     5ea:	14 82       	std	Z+4, r1	; 0x04
    PORTH.DIR = 0x00;
     5ec:	10 82       	st	Z, r1
    //PJ3 - NC
    //PJ4 - NC
    //PJ5 - NC
    //PJ6 - NC
    //PJ7 - NC
    PORTJ.OUT = 0x00;
     5ee:	e0 e0       	ldi	r30, 0x00	; 0
     5f0:	f7 e0       	ldi	r31, 0x07	; 7
     5f2:	14 82       	std	Z+4, r1	; 0x04
    PORTJ.DIR = 0x00;
     5f4:	10 82       	st	Z, r1
    //PK3 - LEDC
    //PK4 - NC
    //PK5 - NC
    //PK6 - NC
    //PK7 - NC
    PORTK.OUT = 0x00;
     5f6:	e0 e2       	ldi	r30, 0x20	; 32
     5f8:	f7 e0       	ldi	r31, 0x07	; 7
     5fa:	14 82       	std	Z+4, r1	; 0x04
    PORTK.DIR = 0x08;
     5fc:	88 e0       	ldi	r24, 0x08	; 8
     5fe:	80 83       	st	Z, r24

    //PQ0 - NC
    //PQ1 - NC
    //PQ2 - NC
    //PQ3 - NC
    PORTQ.OUT = 0x00;
     600:	e0 ec       	ldi	r30, 0xC0	; 192
     602:	f7 e0       	ldi	r31, 0x07	; 7
     604:	14 82       	std	Z+4, r1	; 0x04
    PORTQ.DIR = 0x00;
     606:	10 82       	st	Z, r1

    //PR0 - NC
    //PR1 - NC
    PORTR.OUT = 0x00;
     608:	e0 ee       	ldi	r30, 0xE0	; 224
     60a:	f7 e0       	ldi	r31, 0x07	; 7
     60c:	14 82       	std	Z+4, r1	; 0x04
    PORTR.DIR = 0x00;
     60e:	10 82       	st	Z, r1

}
     610:	08 95       	ret

00000612 <doDownstreamDMAISR>:
 * Use the CHANNEL_CONFIGURATION to identify whether the DMA was inbound
 * or outbound.  In each case, notify the correct userspace routine by either
 * setting sizeReceived or setting downstreamDone.
 ************************************************************************/
static inline void doDownstreamDMAISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
     612:	dc 01       	movw	r26, r24
    DMA_CH_t *targetDMA = targetChannelConfig->dma;
     614:	12 96       	adiw	r26, 0x02	; 2
     616:	ed 91       	ld	r30, X+
     618:	fc 91       	ld	r31, X
     61a:	13 97       	sbiw	r26, 0x03	; 3
    if(targetDMA->CTRLB & DMA_CH_ERRIF_bm)
     61c:	81 81       	ldd	r24, Z+1	; 0x01
     61e:	85 ff       	sbrs	r24, 5
     620:	04 c0       	rjmp	.+8      	; 0x62a <doDownstreamDMAISR+0x18>
    {
        //Acknowledge the DMA channel error
        targetDMA->CTRLB = targetDMA->CTRLB | DMA_CH_ERRIF_bm;
     622:	81 81       	ldd	r24, Z+1	; 0x01
     624:	80 62       	ori	r24, 0x20	; 32
     626:	81 83       	std	Z+1, r24	; 0x01
        //It may be from an aborted transfer, so just return.
        return;
     628:	08 95       	ret
    }

    if(targetDMA->CTRLB & DMA_CH_TRNIF_bm)
     62a:	81 81       	ldd	r24, Z+1	; 0x01
     62c:	84 ff       	sbrs	r24, 4
     62e:	0f c0       	rjmp	.+30     	; 0x64e <doDownstreamDMAISR+0x3c>
    {
        //The transfer is complete and should be acked
        targetDMA->CTRLB = targetDMA->CTRLB | DMA_CH_TRNIF_bm;
     630:	81 81       	ldd	r24, Z+1	; 0x01
     632:	80 61       	ori	r24, 0x10	; 16
     634:	81 83       	std	Z+1, r24	; 0x01

        targetChannelConfig->isActive = 0; // BA
     636:	1b 96       	adiw	r26, 0x0b	; 11
     638:	1c 92       	st	X, r1
     63a:	1b 97       	sbiw	r26, 0x0b	; 11

        //Just finished receiving response into singleDownstreamBuffer.  Signal userspace
        //The number of bytes received is the size field plus 2 (to account for the size field itself and the padded packetSize
        targetChannelConfig->sizeReceived = targetChannelConfig->targetBuffer[0] + 2;
     63c:	14 96       	adiw	r26, 0x04	; 4
     63e:	ed 91       	ld	r30, X+
     640:	fc 91       	ld	r31, X
     642:	15 97       	sbiw	r26, 0x05	; 5
     644:	80 81       	ld	r24, Z
     646:	8e 5f       	subi	r24, 0xFE	; 254
     648:	17 96       	adiw	r26, 0x07	; 7
     64a:	8c 93       	st	X, r24
     64c:	17 97       	sbiw	r26, 0x07	; 7
     64e:	08 95       	ret

00000650 <configureUSARTHardware>:
 * When isPC is 0, set to communicate at 2 MBaud
 * using 8 data bits, 1 stop bit.
 *
 ************************************************************************/
static void configureUSARTHardware(USART_t *targetUSART, int isPC, int isDownstream)
{
     650:	fc 01       	movw	r30, r24
    if(isPC)
     652:	61 15       	cp	r22, r1
     654:	71 05       	cpc	r23, r1
     656:	29 f0       	breq	.+10     	; 0x662 <configureUSARTHardware+0x12>
        //COMMAND_USART.BAUDCTRLB = 0;

        //targetUSART->BAUDCTRLA = 33;    //Configure for 115200 with fractional baud rate generation
        //targetUSART->BAUDCTRLB = 0xF0;

        targetUSART->BAUDCTRLA = 41;    //Configure for 1219512.2 Baud for 1152000 Baud for PC
     658:	89 e2       	ldi	r24, 0x29	; 41
     65a:	86 83       	std	Z+6, r24	; 0x06
        targetUSART->BAUDCTRLB = 0xA0;    // BSEL = 41, BSCALE = -6 = 0xC in twos complement
     65c:	80 ea       	ldi	r24, 0xA0	; 160
     65e:	87 83       	std	Z+7, r24	; 0x07
     660:	02 c0       	rjmp	.+4      	; 0x666 <configureUSARTHardware+0x16>
        //targetUSART->BAUDCTRLA = 6;    //Configure for 1818181.8 Baud  for 2000000 Baud for PC
        //targetUSART->BAUDCTRLB = 0xA0;    // BSEL = 6, BSCALE = -6 = 0xA in twos complement
    }
    else
    {
        targetUSART->BAUDCTRLA = 0;    //Configure for 2 MBaud by setting baud rate to zero
     662:	16 82       	std	Z+6, r1	; 0x06
        targetUSART->BAUDCTRLB = 0x00;    //and BSEL to zero
     664:	17 82       	std	Z+7, r1	; 0x07
    }

    targetUSART->CTRLC = (USART_CMODE_ASYNCHRONOUS_gc
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	85 83       	std	Z+5, r24	; 0x05
                          | USART_PMODE_DISABLED_gc
                          | USART_CHSIZE_8BIT_gc);    //Configure port settings for 8 bits of data, 1 stop bit.
    targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     66a:	84 81       	ldd	r24, Z+4	; 0x04
     66c:	88 61       	ori	r24, 0x18	; 24
     66e:	84 83       	std	Z+4, r24	; 0x04

    if(isDownstream)
     670:	41 15       	cp	r20, r1
     672:	51 05       	cpc	r21, r1
     674:	11 f0       	breq	.+4      	; 0x67a <configureUSARTHardware+0x2a>
    {
        targetUSART->CTRLA = USART_RXCINTLVL_MED_gc; //Enable RX interrupt at LO priority
     676:	80 e2       	ldi	r24, 0x20	; 32
     678:	01 c0       	rjmp	.+2      	; 0x67c <configureUSARTHardware+0x2c>
    }
    else
    {
        targetUSART->CTRLA = USART_RXCINTLVL_HI_gc; //Enable RX interrupt at HI priority
     67a:	80 e3       	ldi	r24, 0x30	; 48
     67c:	83 83       	std	Z+3, r24	; 0x03
     67e:	08 95       	ret

00000680 <upstreamTX>:
    return;
}


static void upstreamTX(volatile uint8_t *targetBuffer, uint16_t numBytes)
{
     680:	9c 01       	movw	r18, r24
    // -pavlo todo make this an intterrupt driven process

    //UPSTREAM_USART.CTRLA &= ~USART_TXCINTLVL_LO_gc;
    for(uint16_t i=0; i<numBytes; i++)
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0b c0       	rjmp	.+22     	; 0x69e <upstreamTX+0x1e>
    {
        while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
     688:	40 91 a1 0b 	lds	r20, 0x0BA1
     68c:	45 ff       	sbrs	r20, 5
     68e:	fc cf       	rjmp	.-8      	; 0x688 <upstreamTX+0x8>

    return;
}


static void upstreamTX(volatile uint8_t *targetBuffer, uint16_t numBytes)
     690:	f9 01       	movw	r30, r18
     692:	e8 0f       	add	r30, r24
     694:	f9 1f       	adc	r31, r25

    //UPSTREAM_USART.CTRLA &= ~USART_TXCINTLVL_LO_gc;
    for(uint16_t i=0; i<numBytes; i++)
    {
        while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
        UPSTREAM_USART.DATA = targetBuffer[i];
     696:	40 81       	ld	r20, Z
     698:	40 93 a0 0b 	sts	0x0BA0, r20
static void upstreamTX(volatile uint8_t *targetBuffer, uint16_t numBytes)
{
    // -pavlo todo make this an intterrupt driven process

    //UPSTREAM_USART.CTRLA &= ~USART_TXCINTLVL_LO_gc;
    for(uint16_t i=0; i<numBytes; i++)
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	86 17       	cp	r24, r22
     6a0:	97 07       	cpc	r25, r23
     6a2:	91 f7       	brne	.-28     	; 0x688 <upstreamTX+0x8>
        //if(!(UPSTREAM_USART.STATUS & USART_DREIF_bm))
        //while(UPSTREAM_USART.STATUS & USART_TXCIF_bm);
        //UPSTREAM_USART.STATUS |= USART_TXCIF_bm;  // clear TX interrupt flag
    }
    //UPSTREAM_USART.CTRLA |= USART_TXCINTLVL_LO_gc;
}
     6a4:	08 95       	ret

000006a6 <doDownstreamUSART_RX_ISR>:
 * This routine takes the Configuration struct for the given USART.  It uses
 * the contents of that structure to properly load an assigned DMA channel to receive
 * the rest of the bytes to follow.
 ************************************************************************/
static inline void doDownstreamUSART_RX_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	fc 01       	movw	r30, r24
    uint8_t packetSize;
    USART_t *targetUSART = targetChannelConfig->usart;
     6ac:	c0 81       	ld	r28, Z
     6ae:	d1 81       	ldd	r29, Z+1	; 0x01

    //Status bits must be polled before reading the data or they are invalidated
    if(targetUSART->STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	88 71       	andi	r24, 0x18	; 24
     6b4:	39 f0       	breq	.+14     	; 0x6c4 <doDownstreamUSART_RX_ISR+0x1e>
    {
        //Framing or overflow error. Discard and do nothing else
        Derr_frame++;
     6b6:	80 91 64 20 	lds	r24, 0x2064
     6ba:	8f 5f       	subi	r24, 0xFF	; 255
     6bc:	80 93 64 20 	sts	0x2064, r24
        packetSize = targetUSART->DATA;
     6c0:	88 81       	ld	r24, Y
        //if(targetUSART->STATUS & USART_FERR_bm)
        //if(targetUSART->STATUS & USART_BUFOVF_bm)
        //  LEDtoggle();
        return;
     6c2:	43 c0       	rjmp	.+134    	; 0x74a <doDownstreamUSART_RX_ISR+0xa4>

    //Packetsize is defined as the number of additional bytes to arrive
    //The buffer is of size MAX_DEVICE_PACKET_SIZE, so packetSize can be up to
    //MAX_DEVICE_PACKET_SIZE - 1.  If it is equal to MAX_DEVICE_PACKET_SIZE or greater, reject

    packetSize = targetUSART->DATA;
     6c4:	28 81       	ld	r18, Y
    if((packetSize >= MAX_DEVICE_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
     6c6:	82 2f       	mov	r24, r18
     6c8:	83 50       	subi	r24, 0x03	; 3
     6ca:	85 3c       	cpi	r24, 0xC5	; 197
     6cc:	30 f0       	brcs	.+12     	; 0x6da <doDownstreamUSART_RX_ISR+0x34>
    {
        //Packet size is invalid somehow.  Reject it
        Derr_packetsize++;
     6ce:	80 91 63 20 	lds	r24, 0x2063
     6d2:	8f 5f       	subi	r24, 0xFF	; 255
     6d4:	80 93 63 20 	sts	0x2063, r24
     6d8:	38 c0       	rjmp	.+112    	; 0x74a <doDownstreamUSART_RX_ISR+0xa4>
        return;
    }

    //Packet size looks good.  Arm DMA
    prepareDMAChannel(targetChannelConfig->dma,targetChannelConfig->inboundTrigger,targetUSART,targetChannelConfig->targetBuffer+2,0);
     6da:	a2 81       	ldd	r26, Z+2	; 0x02
     6dc:	b3 81       	ldd	r27, Z+3	; 0x03
     6de:	36 81       	ldd	r19, Z+6	; 0x06
     6e0:	84 81       	ldd	r24, Z+4	; 0x04
     6e2:	95 81       	ldd	r25, Z+5	; 0x05
     6e4:	02 96       	adiw	r24, 0x02	; 2
 ************************************************************************/
static inline void prepareDMAChannel(DMA_CH_t *selectedChannel, uint8_t usartTrigger, USART_t *targetUSART, volatile uint8_t *targetBuffer, uint8_t isOutbound)
{
    //Set to perform one block transfer corresponding to one command packet
    //Technically not necessary because REPEAT will not be set in CTRLA
    selectedChannel->REPCNT = 0x01;
     6e6:	41 e0       	ldi	r20, 0x01	; 1
     6e8:	16 96       	adiw	r26, 0x06	; 6
     6ea:	4c 93       	st	X, r20
     6ec:	16 97       	sbiw	r26, 0x06	; 6

    //Trigger on received data
    selectedChannel->TRIGSRC = usartTrigger;
     6ee:	13 96       	adiw	r26, 0x03	; 3
     6f0:	3c 93       	st	X, r19
     6f2:	13 97       	sbiw	r26, 0x03	; 3
        targetUSART->STATUS = USART_TXCIF_bm;
        targetUSART->CTRLA |= USART_TXCINTLVL_LO_gc;    }
    else
    {
        //Configure the chosen channel to read from a fixed UART into a linear array
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_FIXED_gc |
     6f4:	3d e8       	ldi	r19, 0x8D	; 141
     6f6:	12 96       	adiw	r26, 0x02	; 2
     6f8:	3c 93       	st	X, r19
     6fa:	12 97       	sbiw	r26, 0x02	; 2
            DMA_CH_DESTRELOAD_TRANSACTION_gc | DMA_CH_DESTDIR_INC_gc;

        selectedChannel->DESTADDR0 = (uint16_t)targetBuffer & 0x00FF;
     6fc:	1c 96       	adiw	r26, 0x0c	; 12
     6fe:	8c 93       	st	X, r24
     700:	1c 97       	sbiw	r26, 0x0c	; 12
        selectedChannel->DESTADDR1 = (uint16_t)targetBuffer >> 8;
     702:	1d 96       	adiw	r26, 0x0d	; 13
     704:	9c 93       	st	X, r25
     706:	1d 97       	sbiw	r26, 0x0d	; 13
        selectedChannel->DESTADDR2 = 0;
     708:	1e 96       	adiw	r26, 0x0e	; 14
     70a:	1c 92       	st	X, r1
     70c:	1e 97       	sbiw	r26, 0x0e	; 14

        selectedChannel->SRCADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     70e:	18 96       	adiw	r26, 0x08	; 8
     710:	cc 93       	st	X, r28
     712:	18 97       	sbiw	r26, 0x08	; 8
        selectedChannel->SRCADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     714:	19 96       	adiw	r26, 0x09	; 9
     716:	dc 93       	st	X, r29
     718:	19 97       	sbiw	r26, 0x09	; 9
        selectedChannel->SRCADDR2 = 0;
     71a:	1a 96       	adiw	r26, 0x0a	; 10
     71c:	1c 92       	st	X, r1
     71e:	1a 97       	sbiw	r26, 0x0a	; 10
        //Interrupt on this channel when the transaction is complete
        //selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc;
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc | DMA_CH_TRNIF_bm;
     720:	81 e1       	ldi	r24, 0x11	; 17
     722:	11 96       	adiw	r26, 0x01	; 1
     724:	8c 93       	st	X, r24
        return;
    }

    //Packet size looks good.  Arm DMA
    prepareDMAChannel(targetChannelConfig->dma,targetChannelConfig->inboundTrigger,targetUSART,targetChannelConfig->targetBuffer+2,0);
    activateDMAChannel(targetChannelConfig->dma,packetSize);
     726:	a2 81       	ldd	r26, Z+2	; 0x02
     728:	b3 81       	ldd	r27, Z+3	; 0x03
     72a:	82 2f       	mov	r24, r18
     72c:	90 e0       	ldi	r25, 0x00	; 0
 * with prepareDMAChannel().
 ************************************************************************/
static inline void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     72e:	14 96       	adiw	r26, 0x04	; 4
     730:	8d 93       	st	X+, r24
     732:	9c 93       	st	X, r25
     734:	15 97       	sbiw	r26, 0x05	; 5
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     736:	84 e8       	ldi	r24, 0x84	; 132
     738:	8c 93       	st	X, r24
    }

    //Packet size looks good.  Arm DMA
    prepareDMAChannel(targetChannelConfig->dma,targetChannelConfig->inboundTrigger,targetUSART,targetChannelConfig->targetBuffer+2,0);
    activateDMAChannel(targetChannelConfig->dma,packetSize);
    targetChannelConfig->targetBuffer[0] = packetSize;
     73a:	a4 81       	ldd	r26, Z+4	; 0x04
     73c:	b5 81       	ldd	r27, Z+5	; 0x05
     73e:	2c 93       	st	X, r18

    //Widen the packetSize field
    targetChannelConfig->targetBuffer[1] = 0;
     740:	04 80       	ldd	r0, Z+4	; 0x04
     742:	f5 81       	ldd	r31, Z+5	; 0x05
     744:	e0 2d       	mov	r30, r0
     746:	11 82       	std	Z+1, r1	; 0x01

    //Disable all interrupts and let the DMA take command.
    targetUSART->CTRLA = 0x00;
     748:	1b 82       	std	Y+3, r1	; 0x03
}
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	08 95       	ret

00000750 <doMotorUSART_RX_ISR>:
 * This routine takes the Configuration struct for the given USART.
 * It uses the contents of that structure to properly receive
 * the rest of the bytes to follow.
 ************************************************************************/
static inline void doMotorUSART_RX_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig, uint8_t mtr)
{
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
    static uint8_t packetSize = 0;
    uint8_t temporary;
    USART_t *targetUSART = targetChannelConfig->usart;
     756:	e8 81       	ld	r30, Y
     758:	f9 81       	ldd	r31, Y+1	; 0x01

    //Must check any error bits before reading the data.
    if(targetUSART->STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
     75a:	81 81       	ldd	r24, Z+1	; 0x01
     75c:	88 71       	andi	r24, 0x18	; 24
     75e:	a6 2f       	mov	r26, r22
     760:	b0 e0       	ldi	r27, 0x00	; 0
     762:	51 f0       	breq	.+20     	; 0x778 <doMotorUSART_RX_ISR+0x28>
    {
        //Framing or overflow error. Discard and do nothing else
        temporary = targetUSART->DATA;// read to clear the buffer
     764:	80 81       	ld	r24, Z
        mtRXbyte[mtr]=0;
     766:	fd 01       	movw	r30, r26
     768:	e0 59       	subi	r30, 0x90	; 144
     76a:	ff 4d       	sbci	r31, 0xDF	; 223
     76c:	10 82       	st	Z, r1
        dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
     76e:	a2 59       	subi	r26, 0x92	; 146
     770:	bf 4d       	sbci	r27, 0xDF	; 223
     772:	85 e0       	ldi	r24, 0x05	; 5
     774:	8c 93       	st	X, r24
        //Uerr_frame++;
        return;
     776:	37 c0       	rjmp	.+110    	; 0x7e6 <doMotorUSART_RX_ISR+0x96>
    }

    temporary = targetUSART->DATA;// read to clear the buffer
     778:	20 81       	ld	r18, Z

    if(!(dmaTimeoutCounter[mtr+4]))
     77a:	ad 01       	movw	r20, r26
     77c:	42 59       	subi	r20, 0x92	; 146
     77e:	5f 4d       	sbci	r21, 0xDF	; 223
     780:	fa 01       	movw	r30, r20
     782:	80 81       	ld	r24, Z
     784:	a0 59       	subi	r26, 0x90	; 144
     786:	bf 4d       	sbci	r27, 0xDF	; 223
     788:	88 23       	and	r24, r24
     78a:	19 f4       	brne	.+6      	; 0x792 <doMotorUSART_RX_ISR+0x42>
    {
        //timeout, assume it is the first byte after an old packet timed out
        mtRXbyte[mtr]=0;
     78c:	1c 92       	st	X, r1
        dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
     78e:	85 e0       	ldi	r24, 0x05	; 5
     790:	80 83       	st	Z, r24
        //ertrr_timeout++;
        //return; // return if we wish to discard this byte instead of treating it as a new packet
    }

    targetChannelConfig->targetBuffer[mtRXbyte[mtr]+1] = temporary;
     792:	8c 91       	ld	r24, X
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	01 96       	adiw	r24, 0x01	; 1
     798:	ec 81       	ldd	r30, Y+4	; 0x04
     79a:	fd 81       	ldd	r31, Y+5	; 0x05
     79c:	e8 0f       	add	r30, r24
     79e:	f9 1f       	adc	r31, r25
     7a0:	20 83       	st	Z, r18
    mtRXbyte[mtr]++;
     7a2:	8c 91       	ld	r24, X
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	8c 93       	st	X, r24

    if(mtRXbyte[mtr]==1)        // our first byte
     7a8:	8c 91       	ld	r24, X
     7aa:	81 30       	cpi	r24, 0x01	; 1
     7ac:	61 f4       	brne	.+24     	; 0x7c6 <doMotorUSART_RX_ISR+0x76>
    {
        packetSize=temporary;
     7ae:	20 93 55 31 	sts	0x3155, r18
        targetChannelConfig->targetBuffer[0] = packetSize;
     7b2:	ec 81       	ldd	r30, Y+4	; 0x04
     7b4:	fd 81       	ldd	r31, Y+5	; 0x05
     7b6:	20 83       	st	Z, r18
        targetChannelConfig->targetBuffer[1] = 0;
     7b8:	ec 81       	ldd	r30, Y+4	; 0x04
     7ba:	fd 81       	ldd	r31, Y+5	; 0x05
     7bc:	11 82       	std	Z+1, r1	; 0x01
        if((packetSize >= MAX_DEVICE_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
     7be:	23 50       	subi	r18, 0x03	; 3
     7c0:	25 3c       	cpi	r18, 0xC5	; 197
     7c2:	88 f4       	brcc	.+34     	; 0x7e6 <doMotorUSART_RX_ISR+0x96>
     7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <doMotorUSART_RX_ISR+0x90>
            return;
        }
        dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
        return;
    }
    if(mtRXbyte[mtr]==(packetSize+1))  // last byte
     7c6:	2c 91       	ld	r18, X
     7c8:	60 91 55 31 	lds	r22, 0x3155
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	86 2f       	mov	r24, r22
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	01 96       	adiw	r24, 0x01	; 1
     7d4:	28 17       	cp	r18, r24
     7d6:	39 07       	cpc	r19, r25
     7d8:	31 f4       	brne	.+12     	; 0x7e6 <doMotorUSART_RX_ISR+0x96>
    {
        targetChannelConfig->sizeReceived = packetSize + 2;
     7da:	6e 5f       	subi	r22, 0xFE	; 254
     7dc:	6f 83       	std	Y+7, r22	; 0x07

        mtRXbyte[mtr]=0;       // get ready for the next packet
     7de:	1c 92       	st	X, r1
        dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
     7e0:	85 e0       	ldi	r24, 0x05	; 5
     7e2:	fa 01       	movw	r30, r20
     7e4:	80 83       	st	Z, r24
        return;
    }
}
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <__vector_77>:
uint16_t RxCheckSumErrCnt[7];

uint8_t chainMask = ALL_CHAINS_CHAINMASK;

ISR(ROUTER_TC_vect)
{
     7ec:	1f 92       	push	r1
     7ee:	0f 92       	push	r0
     7f0:	0f b6       	in	r0, 0x3f	; 63
     7f2:	0f 92       	push	r0
     7f4:	08 b6       	in	r0, 0x38	; 56
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	8f 93       	push	r24
    // timers count down to zero. When zero, you are out of time

    // four DMA channels
    if((DownStreamConfig[0].isActive) &&
     7fc:	80 91 17 31 	lds	r24, 0x3117
     800:	88 23       	and	r24, r24
     802:	49 f0       	breq	.+18     	; 0x816 <__vector_77+0x2a>
       (dmaTimeoutCounter[0]))
     804:	80 91 6a 20 	lds	r24, 0x206A
ISR(ROUTER_TC_vect)
{
    // timers count down to zero. When zero, you are out of time

    // four DMA channels
    if((DownStreamConfig[0].isActive) &&
     808:	88 23       	and	r24, r24
     80a:	29 f0       	breq	.+10     	; 0x816 <__vector_77+0x2a>
       (dmaTimeoutCounter[0]))
    {
        dmaTimeoutCounter[0]--;
     80c:	80 91 6a 20 	lds	r24, 0x206A
     810:	81 50       	subi	r24, 0x01	; 1
     812:	80 93 6a 20 	sts	0x206A, r24
    }
    if((DownStreamConfig[1].isActive) &&
     816:	80 91 23 31 	lds	r24, 0x3123
     81a:	88 23       	and	r24, r24
     81c:	49 f0       	breq	.+18     	; 0x830 <__vector_77+0x44>
       (dmaTimeoutCounter[1]))
     81e:	80 91 6b 20 	lds	r24, 0x206B
    if((DownStreamConfig[0].isActive) &&
       (dmaTimeoutCounter[0]))
    {
        dmaTimeoutCounter[0]--;
    }
    if((DownStreamConfig[1].isActive) &&
     822:	88 23       	and	r24, r24
     824:	29 f0       	breq	.+10     	; 0x830 <__vector_77+0x44>
       (dmaTimeoutCounter[1]))
    {
        dmaTimeoutCounter[1]--;
     826:	80 91 6b 20 	lds	r24, 0x206B
     82a:	81 50       	subi	r24, 0x01	; 1
     82c:	80 93 6b 20 	sts	0x206B, r24
    }
    if((DownStreamConfig[2].isActive) &&
     830:	80 91 2f 31 	lds	r24, 0x312F
     834:	88 23       	and	r24, r24
     836:	49 f0       	breq	.+18     	; 0x84a <__vector_77+0x5e>
       (dmaTimeoutCounter[2]))
     838:	80 91 6c 20 	lds	r24, 0x206C
    if((DownStreamConfig[1].isActive) &&
       (dmaTimeoutCounter[1]))
    {
        dmaTimeoutCounter[1]--;
    }
    if((DownStreamConfig[2].isActive) &&
     83c:	88 23       	and	r24, r24
     83e:	29 f0       	breq	.+10     	; 0x84a <__vector_77+0x5e>
       (dmaTimeoutCounter[2]))
    {
        dmaTimeoutCounter[2]--;
     840:	80 91 6c 20 	lds	r24, 0x206C
     844:	81 50       	subi	r24, 0x01	; 1
     846:	80 93 6c 20 	sts	0x206C, r24
    }
    if((DownStreamConfig[3].isActive) &&
     84a:	80 91 3b 31 	lds	r24, 0x313B
     84e:	88 23       	and	r24, r24
     850:	49 f0       	breq	.+18     	; 0x864 <__vector_77+0x78>
       (dmaTimeoutCounter[3]))
     852:	80 91 6d 20 	lds	r24, 0x206D
    if((DownStreamConfig[2].isActive) &&
       (dmaTimeoutCounter[2]))
    {
        dmaTimeoutCounter[2]--;
    }
    if((DownStreamConfig[3].isActive) &&
     856:	88 23       	and	r24, r24
     858:	29 f0       	breq	.+10     	; 0x864 <__vector_77+0x78>
       (dmaTimeoutCounter[3]))
    {
        dmaTimeoutCounter[3]--;
     85a:	80 91 6d 20 	lds	r24, 0x206D
     85e:	81 50       	subi	r24, 0x01	; 1
     860:	80 93 6d 20 	sts	0x206D, r24
    }

    // two interrupt based motor channels
    if((DownStreamConfig[4].isActive) &&
     864:	80 91 47 31 	lds	r24, 0x3147
     868:	88 23       	and	r24, r24
     86a:	49 f0       	breq	.+18     	; 0x87e <__vector_77+0x92>
       (dmaTimeoutCounter[4]))
     86c:	80 91 6e 20 	lds	r24, 0x206E
    {
        dmaTimeoutCounter[3]--;
    }

    // two interrupt based motor channels
    if((DownStreamConfig[4].isActive) &&
     870:	88 23       	and	r24, r24
     872:	29 f0       	breq	.+10     	; 0x87e <__vector_77+0x92>
       (dmaTimeoutCounter[4]))
    {
        dmaTimeoutCounter[4]--;
     874:	80 91 6e 20 	lds	r24, 0x206E
     878:	81 50       	subi	r24, 0x01	; 1
     87a:	80 93 6e 20 	sts	0x206E, r24
    }
    if((DownStreamConfig[5].isActive) &&
     87e:	80 91 53 31 	lds	r24, 0x3153
     882:	88 23       	and	r24, r24
     884:	49 f0       	breq	.+18     	; 0x898 <__vector_77+0xac>
       (dmaTimeoutCounter[5]))
     886:	80 91 6f 20 	lds	r24, 0x206F
    if((DownStreamConfig[4].isActive) &&
       (dmaTimeoutCounter[4]))
    {
        dmaTimeoutCounter[4]--;
    }
    if((DownStreamConfig[5].isActive) &&
     88a:	88 23       	and	r24, r24
     88c:	29 f0       	breq	.+10     	; 0x898 <__vector_77+0xac>
       (dmaTimeoutCounter[5]))
    {
        dmaTimeoutCounter[5]--;
     88e:	80 91 6f 20 	lds	r24, 0x206F
     892:	81 50       	subi	r24, 0x01	; 1
     894:	80 93 6f 20 	sts	0x206F, r24
    }

    // upstream interrupt based channel
    if(upRXtimeoutCounter)
     898:	80 91 69 20 	lds	r24, 0x2069
     89c:	88 23       	and	r24, r24
     89e:	29 f0       	breq	.+10     	; 0x8aa <__vector_77+0xbe>
    {
        upRXtimeoutCounter--;
     8a0:	80 91 69 20 	lds	r24, 0x2069
     8a4:	81 50       	subi	r24, 0x01	; 1
     8a6:	80 93 69 20 	sts	0x2069, r24
    }

    return;
}
     8aa:	8f 91       	pop	r24
     8ac:	0f 90       	pop	r0
     8ae:	08 be       	out	0x38, r0	; 56
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <__vector_119>:
 * This is how commands enter the Palm board from the Overo Gumstix
 *
 ************************************************************************/

ISR(UPSTREAM_USART_RX_vect)
{
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	08 b6       	in	r0, 0x38	; 56
     8c4:	0f 92       	push	r0
     8c6:	0b b6       	in	r0, 0x3b	; 59
     8c8:	0f 92       	push	r0
     8ca:	11 24       	eor	r1, r1
     8cc:	8f 93       	push	r24
     8ce:	9f 93       	push	r25
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
    static uint8_t upRXbyte = 0;
    uint8_t temporary;

    //Must check any error bits before reading the data.
    if(UPSTREAM_USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
     8d4:	80 91 a1 0b 	lds	r24, 0x0BA1
     8d8:	88 71       	andi	r24, 0x18	; 24
     8da:	69 f0       	breq	.+26     	; 0x8f6 <__vector_119+0x3c>
    {
        //Framing or overflow error. Discard and do nothing else
        temporary = UPSTREAM_USART.DATA; // read to clear the buffer
     8dc:	80 91 a0 0b 	lds	r24, 0x0BA0
        upRXbyte=0;
     8e0:	10 92 54 31 	sts	0x3154, r1
        upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
     8e4:	80 e2       	ldi	r24, 0x20	; 32
     8e6:	80 93 69 20 	sts	0x2069, r24
        Uerr_frame++;
     8ea:	80 91 68 20 	lds	r24, 0x2068
     8ee:	8f 5f       	subi	r24, 0xFF	; 255
     8f0:	80 93 68 20 	sts	0x2068, r24
        //if(UPSTREAM_USART.STATUS & USART_BUFOVF_bm)
        //  LEDtoggle();
        return;
     8f4:	3a c0       	rjmp	.+116    	; 0x96a <__vector_119+0xb0>
    }

    temporary = UPSTREAM_USART.DATA; // read to clear the buffer
     8f6:	90 91 a0 0b 	lds	r25, 0x0BA0

    if(commandReady)
     8fa:	80 91 61 20 	lds	r24, 0x2061
     8fe:	88 23       	and	r24, r24
     900:	59 f0       	breq	.+22     	; 0x918 <__vector_119+0x5e>
    {
        //Don't clobber an existing packet, discard
        upRXbyte=0;
     902:	10 92 54 31 	sts	0x3154, r1
        upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
     906:	80 e2       	ldi	r24, 0x20	; 32
     908:	80 93 69 20 	sts	0x2069, r24
        Uerr_busy++;
     90c:	80 91 67 20 	lds	r24, 0x2067
     910:	8f 5f       	subi	r24, 0xFF	; 255
     912:	80 93 67 20 	sts	0x2067, r24
        return;
     916:	29 c0       	rjmp	.+82     	; 0x96a <__vector_119+0xb0>
    }

    if(!(upRXtimeoutCounter))
     918:	80 91 69 20 	lds	r24, 0x2069
     91c:	88 23       	and	r24, r24
     91e:	51 f4       	brne	.+20     	; 0x934 <__vector_119+0x7a>
    {
        //there was a timeout, assume this is a new packet
        upRXbyte=0;
     920:	10 92 54 31 	sts	0x3154, r1
        upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
     924:	80 e2       	ldi	r24, 0x20	; 32
     926:	80 93 69 20 	sts	0x2069, r24
        Uerr_timeout++;
     92a:	80 91 66 20 	lds	r24, 0x2066
     92e:	8f 5f       	subi	r24, 0xFF	; 255
     930:	80 93 66 20 	sts	0x2066, r24
        //return; // if you want to discard and start over
    }

    commandPacketBuffer[upRXbyte] = temporary;
     934:	80 91 54 31 	lds	r24, 0x3154
     938:	e8 2f       	mov	r30, r24
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	e2 51       	subi	r30, 0x12	; 18
     93e:	f6 4d       	sbci	r31, 0xD6	; 214
     940:	90 83       	st	Z, r25
    upRXbyte++;
     942:	8f 5f       	subi	r24, 0xFF	; 255
     944:	80 93 54 31 	sts	0x3154, r24

    if(upRXbyte==1)        // our first byte
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	29 f4       	brne	.+10     	; 0x956 <__vector_119+0x9c>
    {
        // the first byte should contain a valid "Destination Header"
        // a bsic check for validity
        // chain address should be < 8, chain index < 2
        if(temporary & 0x8e)
     94c:	9e 78       	andi	r25, 0x8E	; 142
     94e:	51 f0       	breq	.+20     	; 0x964 <__vector_119+0xaa>
        {
            upRXbyte=0; // discard it
     950:	10 92 54 31 	sts	0x3154, r1
     954:	0a c0       	rjmp	.+20     	; 0x96a <__vector_119+0xb0>
        {
            upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
        }
        return;
    }
    if(upRXbyte==COMMAND_PACKET_SIZE)
     956:	87 30       	cpi	r24, 0x07	; 7
     958:	41 f4       	brne	.+16     	; 0x96a <__vector_119+0xb0>
    {
        commandReady = 1; // signal done
     95a:	81 e0       	ldi	r24, 0x01	; 1
     95c:	80 93 61 20 	sts	0x2061, r24
        upRXbyte=0;       // get ready for the next one
     960:	10 92 54 31 	sts	0x3154, r1
        upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
     964:	80 e2       	ldi	r24, 0x20	; 32
     966:	80 93 69 20 	sts	0x2069, r24
        return;
    }
}
     96a:	ff 91       	pop	r31
     96c:	ef 91       	pop	r30
     96e:	9f 91       	pop	r25
     970:	8f 91       	pop	r24
     972:	0f 90       	pop	r0
     974:	0b be       	out	0x3b, r0	; 59
     976:	0f 90       	pop	r0
     978:	08 be       	out	0x38, r0	; 56
     97a:	0f 90       	pop	r0
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	0f 90       	pop	r0
     980:	1f 90       	pop	r1
     982:	18 95       	reti

00000984 <__vector_25>:
    }
}


ISR(TACT_USART_RX_vect)
{
     984:	1f 92       	push	r1
     986:	0f 92       	push	r0
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	0f 92       	push	r0
     98c:	08 b6       	in	r0, 0x38	; 56
     98e:	0f 92       	push	r0
     990:	09 b6       	in	r0, 0x39	; 57
     992:	0f 92       	push	r0
     994:	0b b6       	in	r0, 0x3b	; 59
     996:	0f 92       	push	r0
     998:	11 24       	eor	r1, r1
     99a:	2f 93       	push	r18
     99c:	3f 93       	push	r19
     99e:	4f 93       	push	r20
     9a0:	5f 93       	push	r21
     9a2:	6f 93       	push	r22
     9a4:	7f 93       	push	r23
     9a6:	8f 93       	push	r24
     9a8:	9f 93       	push	r25
     9aa:	af 93       	push	r26
     9ac:	bf 93       	push	r27
     9ae:	ef 93       	push	r30
     9b0:	ff 93       	push	r31
    doDownstreamUSART_RX_ISR(USARTtoCHANNELS[TACT]);
     9b2:	80 91 05 20 	lds	r24, 0x2005
     9b6:	90 91 06 20 	lds	r25, 0x2006
     9ba:	0e 94 53 03 	call	0x6a6	; 0x6a6 <doDownstreamUSART_RX_ISR>
}
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	bf 91       	pop	r27
     9c4:	af 91       	pop	r26
     9c6:	9f 91       	pop	r25
     9c8:	8f 91       	pop	r24
     9ca:	7f 91       	pop	r23
     9cc:	6f 91       	pop	r22
     9ce:	5f 91       	pop	r21
     9d0:	4f 91       	pop	r20
     9d2:	3f 91       	pop	r19
     9d4:	2f 91       	pop	r18
     9d6:	0f 90       	pop	r0
     9d8:	0b be       	out	0x3b, r0	; 59
     9da:	0f 90       	pop	r0
     9dc:	09 be       	out	0x39, r0	; 57
     9de:	0f 90       	pop	r0
     9e0:	08 be       	out	0x38, r0	; 56
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <__vector_91>:

ISR(PROX1_USART_RX_vect)
{
     9ec:	1f 92       	push	r1
     9ee:	0f 92       	push	r0
     9f0:	0f b6       	in	r0, 0x3f	; 63
     9f2:	0f 92       	push	r0
     9f4:	08 b6       	in	r0, 0x38	; 56
     9f6:	0f 92       	push	r0
     9f8:	09 b6       	in	r0, 0x39	; 57
     9fa:	0f 92       	push	r0
     9fc:	0b b6       	in	r0, 0x3b	; 59
     9fe:	0f 92       	push	r0
     a00:	11 24       	eor	r1, r1
     a02:	2f 93       	push	r18
     a04:	3f 93       	push	r19
     a06:	4f 93       	push	r20
     a08:	5f 93       	push	r21
     a0a:	6f 93       	push	r22
     a0c:	7f 93       	push	r23
     a0e:	8f 93       	push	r24
     a10:	9f 93       	push	r25
     a12:	af 93       	push	r26
     a14:	bf 93       	push	r27
     a16:	ef 93       	push	r30
     a18:	ff 93       	push	r31
    doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX1]);
     a1a:	80 91 07 20 	lds	r24, 0x2007
     a1e:	90 91 08 20 	lds	r25, 0x2008
     a22:	0e 94 53 03 	call	0x6a6	; 0x6a6 <doDownstreamUSART_RX_ISR>
}
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	bf 91       	pop	r27
     a2c:	af 91       	pop	r26
     a2e:	9f 91       	pop	r25
     a30:	8f 91       	pop	r24
     a32:	7f 91       	pop	r23
     a34:	6f 91       	pop	r22
     a36:	5f 91       	pop	r21
     a38:	4f 91       	pop	r20
     a3a:	3f 91       	pop	r19
     a3c:	2f 91       	pop	r18
     a3e:	0f 90       	pop	r0
     a40:	0b be       	out	0x3b, r0	; 59
     a42:	0f 90       	pop	r0
     a44:	09 be       	out	0x39, r0	; 57
     a46:	0f 90       	pop	r0
     a48:	08 be       	out	0x38, r0	; 56
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <__vector_28>:

ISR(PROX2_USART_RX_vect)
{
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	08 b6       	in	r0, 0x38	; 56
     a5e:	0f 92       	push	r0
     a60:	09 b6       	in	r0, 0x39	; 57
     a62:	0f 92       	push	r0
     a64:	0b b6       	in	r0, 0x3b	; 59
     a66:	0f 92       	push	r0
     a68:	11 24       	eor	r1, r1
     a6a:	2f 93       	push	r18
     a6c:	3f 93       	push	r19
     a6e:	4f 93       	push	r20
     a70:	5f 93       	push	r21
     a72:	6f 93       	push	r22
     a74:	7f 93       	push	r23
     a76:	8f 93       	push	r24
     a78:	9f 93       	push	r25
     a7a:	af 93       	push	r26
     a7c:	bf 93       	push	r27
     a7e:	ef 93       	push	r30
     a80:	ff 93       	push	r31
    doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX2]);
     a82:	80 91 09 20 	lds	r24, 0x2009
     a86:	90 91 0a 20 	lds	r25, 0x200A
     a8a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <doDownstreamUSART_RX_ISR>
}
     a8e:	ff 91       	pop	r31
     a90:	ef 91       	pop	r30
     a92:	bf 91       	pop	r27
     a94:	af 91       	pop	r26
     a96:	9f 91       	pop	r25
     a98:	8f 91       	pop	r24
     a9a:	7f 91       	pop	r23
     a9c:	6f 91       	pop	r22
     a9e:	5f 91       	pop	r21
     aa0:	4f 91       	pop	r20
     aa2:	3f 91       	pop	r19
     aa4:	2f 91       	pop	r18
     aa6:	0f 90       	pop	r0
     aa8:	0b be       	out	0x3b, r0	; 59
     aaa:	0f 90       	pop	r0
     aac:	09 be       	out	0x39, r0	; 57
     aae:	0f 90       	pop	r0
     ab0:	08 be       	out	0x38, r0	; 56
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <__vector_88>:

ISR(PROX3_USART_RX_vect)
{
     abc:	1f 92       	push	r1
     abe:	0f 92       	push	r0
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	0f 92       	push	r0
     ac4:	08 b6       	in	r0, 0x38	; 56
     ac6:	0f 92       	push	r0
     ac8:	09 b6       	in	r0, 0x39	; 57
     aca:	0f 92       	push	r0
     acc:	0b b6       	in	r0, 0x3b	; 59
     ace:	0f 92       	push	r0
     ad0:	11 24       	eor	r1, r1
     ad2:	2f 93       	push	r18
     ad4:	3f 93       	push	r19
     ad6:	4f 93       	push	r20
     ad8:	5f 93       	push	r21
     ada:	6f 93       	push	r22
     adc:	7f 93       	push	r23
     ade:	8f 93       	push	r24
     ae0:	9f 93       	push	r25
     ae2:	af 93       	push	r26
     ae4:	bf 93       	push	r27
     ae6:	ef 93       	push	r30
     ae8:	ff 93       	push	r31
    doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX3]);
     aea:	80 91 0b 20 	lds	r24, 0x200B
     aee:	90 91 0c 20 	lds	r25, 0x200C
     af2:	0e 94 53 03 	call	0x6a6	; 0x6a6 <doDownstreamUSART_RX_ISR>
}
     af6:	ff 91       	pop	r31
     af8:	ef 91       	pop	r30
     afa:	bf 91       	pop	r27
     afc:	af 91       	pop	r26
     afe:	9f 91       	pop	r25
     b00:	8f 91       	pop	r24
     b02:	7f 91       	pop	r23
     b04:	6f 91       	pop	r22
     b06:	5f 91       	pop	r21
     b08:	4f 91       	pop	r20
     b0a:	3f 91       	pop	r19
     b0c:	2f 91       	pop	r18
     b0e:	0f 90       	pop	r0
     b10:	0b be       	out	0x3b, r0	; 59
     b12:	0f 90       	pop	r0
     b14:	09 be       	out	0x39, r0	; 57
     b16:	0f 90       	pop	r0
     b18:	08 be       	out	0x38, r0	; 56
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0f 90       	pop	r0
     b20:	1f 90       	pop	r1
     b22:	18 95       	reti

00000b24 <__vector_58>:

ISR(MTR1_USART_RX_vect)
{
     b24:	1f 92       	push	r1
     b26:	0f 92       	push	r0
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	0f 92       	push	r0
     b2c:	08 b6       	in	r0, 0x38	; 56
     b2e:	0f 92       	push	r0
     b30:	09 b6       	in	r0, 0x39	; 57
     b32:	0f 92       	push	r0
     b34:	0b b6       	in	r0, 0x3b	; 59
     b36:	0f 92       	push	r0
     b38:	11 24       	eor	r1, r1
     b3a:	2f 93       	push	r18
     b3c:	3f 93       	push	r19
     b3e:	4f 93       	push	r20
     b40:	5f 93       	push	r21
     b42:	6f 93       	push	r22
     b44:	7f 93       	push	r23
     b46:	8f 93       	push	r24
     b48:	9f 93       	push	r25
     b4a:	af 93       	push	r26
     b4c:	bf 93       	push	r27
     b4e:	ef 93       	push	r30
     b50:	ff 93       	push	r31
    doMotorUSART_RX_ISR(USARTtoCHANNELS[MTR1],0);
     b52:	80 91 0d 20 	lds	r24, 0x200D
     b56:	90 91 0e 20 	lds	r25, 0x200E
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 a8 03 	call	0x750	; 0x750 <doMotorUSART_RX_ISR>
}
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	0b be       	out	0x3b, r0	; 59
     b7c:	0f 90       	pop	r0
     b7e:	09 be       	out	0x39, r0	; 57
     b80:	0f 90       	pop	r0
     b82:	08 be       	out	0x38, r0	; 56
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	0f 90       	pop	r0
     b8a:	1f 90       	pop	r1
     b8c:	18 95       	reti

00000b8e <__vector_61>:

ISR(MTR2_USART_RX_vect)
{
     b8e:	1f 92       	push	r1
     b90:	0f 92       	push	r0
     b92:	0f b6       	in	r0, 0x3f	; 63
     b94:	0f 92       	push	r0
     b96:	08 b6       	in	r0, 0x38	; 56
     b98:	0f 92       	push	r0
     b9a:	09 b6       	in	r0, 0x39	; 57
     b9c:	0f 92       	push	r0
     b9e:	0b b6       	in	r0, 0x3b	; 59
     ba0:	0f 92       	push	r0
     ba2:	11 24       	eor	r1, r1
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
    doMotorUSART_RX_ISR(USARTtoCHANNELS[MTR2],1);
     bbc:	80 91 0f 20 	lds	r24, 0x200F
     bc0:	90 91 10 20 	lds	r25, 0x2010
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	0e 94 a8 03 	call	0x750	; 0x750 <doMotorUSART_RX_ISR>
}
     bca:	ff 91       	pop	r31
     bcc:	ef 91       	pop	r30
     bce:	bf 91       	pop	r27
     bd0:	af 91       	pop	r26
     bd2:	9f 91       	pop	r25
     bd4:	8f 91       	pop	r24
     bd6:	7f 91       	pop	r23
     bd8:	6f 91       	pop	r22
     bda:	5f 91       	pop	r21
     bdc:	4f 91       	pop	r20
     bde:	3f 91       	pop	r19
     be0:	2f 91       	pop	r18
     be2:	0f 90       	pop	r0
     be4:	0b be       	out	0x3b, r0	; 59
     be6:	0f 90       	pop	r0
     be8:	09 be       	out	0x39, r0	; 57
     bea:	0f 90       	pop	r0
     bec:	08 be       	out	0x38, r0	; 56
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <__vector_27>:
    targetChannelConfig->downstreamDoneFlag = 1;
    targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
}

ISR(TACT_USART_TXDONE_vect)
{
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	08 b6       	in	r0, 0x38	; 56
     c02:	0f 92       	push	r0
     c04:	0b b6       	in	r0, 0x3b	; 59
     c06:	0f 92       	push	r0
     c08:	11 24       	eor	r1, r1
     c0a:	8f 93       	push	r24
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
    //TACT_USART.CTRLA |= USART_RXCINTLVL_MED_gc; //redundant?
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[TACT]);
     c10:	e0 91 05 20 	lds	r30, 0x2005
     c14:	f0 91 06 20 	lds	r31, 0x2006
static inline void doDownstreamUSART_TXDONE_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // This interrupt is called when the DMA is done stuffing the TX buffer
    // and the last charachter has been sent.
    // Reconfigure to capture the response.
    targetChannelConfig->downstreamDoneFlag = 1;
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	80 87       	std	Z+8, r24	; 0x08
    targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
     c1c:	01 90       	ld	r0, Z+
     c1e:	f0 81       	ld	r31, Z
     c20:	e0 2d       	mov	r30, r0
     c22:	80 e2       	ldi	r24, 0x20	; 32
     c24:	83 83       	std	Z+3, r24	; 0x03

ISR(TACT_USART_TXDONE_vect)
{
    //TACT_USART.CTRLA |= USART_RXCINTLVL_MED_gc; //redundant?
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[TACT]);
}
     c26:	ff 91       	pop	r31
     c28:	ef 91       	pop	r30
     c2a:	8f 91       	pop	r24
     c2c:	0f 90       	pop	r0
     c2e:	0b be       	out	0x3b, r0	; 59
     c30:	0f 90       	pop	r0
     c32:	08 be       	out	0x38, r0	; 56
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <__vector_93>:

ISR(PROX1_USART_TXDONE_vect)
{
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	0f 92       	push	r0
     c46:	08 b6       	in	r0, 0x38	; 56
     c48:	0f 92       	push	r0
     c4a:	0b b6       	in	r0, 0x3b	; 59
     c4c:	0f 92       	push	r0
     c4e:	11 24       	eor	r1, r1
     c50:	8f 93       	push	r24
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
    //PROX1_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX1]);
     c56:	e0 91 07 20 	lds	r30, 0x2007
     c5a:	f0 91 08 20 	lds	r31, 0x2008
static inline void doDownstreamUSART_TXDONE_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // This interrupt is called when the DMA is done stuffing the TX buffer
    // and the last charachter has been sent.
    // Reconfigure to capture the response.
    targetChannelConfig->downstreamDoneFlag = 1;
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	80 87       	std	Z+8, r24	; 0x08
    targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
     c62:	01 90       	ld	r0, Z+
     c64:	f0 81       	ld	r31, Z
     c66:	e0 2d       	mov	r30, r0
     c68:	80 e2       	ldi	r24, 0x20	; 32
     c6a:	83 83       	std	Z+3, r24	; 0x03

ISR(PROX1_USART_TXDONE_vect)
{
    //PROX1_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX1]);
}
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	8f 91       	pop	r24
     c72:	0f 90       	pop	r0
     c74:	0b be       	out	0x3b, r0	; 59
     c76:	0f 90       	pop	r0
     c78:	08 be       	out	0x38, r0	; 56
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_30>:

ISR(PROX2_USART_TXDONE_vect)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	08 b6       	in	r0, 0x38	; 56
     c8e:	0f 92       	push	r0
     c90:	0b b6       	in	r0, 0x3b	; 59
     c92:	0f 92       	push	r0
     c94:	11 24       	eor	r1, r1
     c96:	8f 93       	push	r24
     c98:	ef 93       	push	r30
     c9a:	ff 93       	push	r31
    //PROX2_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX2]);
     c9c:	e0 91 09 20 	lds	r30, 0x2009
     ca0:	f0 91 0a 20 	lds	r31, 0x200A
static inline void doDownstreamUSART_TXDONE_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // This interrupt is called when the DMA is done stuffing the TX buffer
    // and the last charachter has been sent.
    // Reconfigure to capture the response.
    targetChannelConfig->downstreamDoneFlag = 1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 87       	std	Z+8, r24	; 0x08
    targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
     ca8:	01 90       	ld	r0, Z+
     caa:	f0 81       	ld	r31, Z
     cac:	e0 2d       	mov	r30, r0
     cae:	80 e2       	ldi	r24, 0x20	; 32
     cb0:	83 83       	std	Z+3, r24	; 0x03

ISR(PROX2_USART_TXDONE_vect)
{
    //PROX2_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX2]);
}
     cb2:	ff 91       	pop	r31
     cb4:	ef 91       	pop	r30
     cb6:	8f 91       	pop	r24
     cb8:	0f 90       	pop	r0
     cba:	0b be       	out	0x3b, r0	; 59
     cbc:	0f 90       	pop	r0
     cbe:	08 be       	out	0x38, r0	; 56
     cc0:	0f 90       	pop	r0
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	0f 90       	pop	r0
     cc6:	1f 90       	pop	r1
     cc8:	18 95       	reti

00000cca <__vector_90>:

ISR(PROX3_USART_TXDONE_vect)
{
     cca:	1f 92       	push	r1
     ccc:	0f 92       	push	r0
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	0f 92       	push	r0
     cd2:	08 b6       	in	r0, 0x38	; 56
     cd4:	0f 92       	push	r0
     cd6:	0b b6       	in	r0, 0x3b	; 59
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	8f 93       	push	r24
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
    //PROX3_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX3]);
     ce2:	e0 91 0b 20 	lds	r30, 0x200B
     ce6:	f0 91 0c 20 	lds	r31, 0x200C
static inline void doDownstreamUSART_TXDONE_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // This interrupt is called when the DMA is done stuffing the TX buffer
    // and the last charachter has been sent.
    // Reconfigure to capture the response.
    targetChannelConfig->downstreamDoneFlag = 1;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	80 87       	std	Z+8, r24	; 0x08
    targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
     cee:	01 90       	ld	r0, Z+
     cf0:	f0 81       	ld	r31, Z
     cf2:	e0 2d       	mov	r30, r0
     cf4:	80 e2       	ldi	r24, 0x20	; 32
     cf6:	83 83       	std	Z+3, r24	; 0x03

ISR(PROX3_USART_TXDONE_vect)
{
    //PROX3_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX3]);
}
     cf8:	ff 91       	pop	r31
     cfa:	ef 91       	pop	r30
     cfc:	8f 91       	pop	r24
     cfe:	0f 90       	pop	r0
     d00:	0b be       	out	0x3b, r0	; 59
     d02:	0f 90       	pop	r0
     d04:	08 be       	out	0x38, r0	; 56
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <__vector_60>:

ISR(MTR1_USART_TXDONE_vect)
{
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	08 b6       	in	r0, 0x38	; 56
     d1a:	0f 92       	push	r0
     d1c:	0b b6       	in	r0, 0x3b	; 59
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	8f 93       	push	r24
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
    //MTR1_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[MTR1]);
     d28:	e0 91 0d 20 	lds	r30, 0x200D
     d2c:	f0 91 0e 20 	lds	r31, 0x200E
static inline void doDownstreamUSART_TXDONE_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // This interrupt is called when the DMA is done stuffing the TX buffer
    // and the last charachter has been sent.
    // Reconfigure to capture the response.
    targetChannelConfig->downstreamDoneFlag = 1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	80 87       	std	Z+8, r24	; 0x08
    targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
     d34:	01 90       	ld	r0, Z+
     d36:	f0 81       	ld	r31, Z
     d38:	e0 2d       	mov	r30, r0
     d3a:	80 e2       	ldi	r24, 0x20	; 32
     d3c:	83 83       	std	Z+3, r24	; 0x03

ISR(MTR1_USART_TXDONE_vect)
{
    //MTR1_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[MTR1]);
}
     d3e:	ff 91       	pop	r31
     d40:	ef 91       	pop	r30
     d42:	8f 91       	pop	r24
     d44:	0f 90       	pop	r0
     d46:	0b be       	out	0x3b, r0	; 59
     d48:	0f 90       	pop	r0
     d4a:	08 be       	out	0x38, r0	; 56
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <__vector_63>:

ISR(MTR2_USART_TXDONE_vect)
{
     d56:	1f 92       	push	r1
     d58:	0f 92       	push	r0
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	0f 92       	push	r0
     d5e:	08 b6       	in	r0, 0x38	; 56
     d60:	0f 92       	push	r0
     d62:	0b b6       	in	r0, 0x3b	; 59
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	8f 93       	push	r24
     d6a:	ef 93       	push	r30
     d6c:	ff 93       	push	r31
    //MTR2_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[MTR2]);
     d6e:	e0 91 0f 20 	lds	r30, 0x200F
     d72:	f0 91 10 20 	lds	r31, 0x2010
static inline void doDownstreamUSART_TXDONE_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // This interrupt is called when the DMA is done stuffing the TX buffer
    // and the last charachter has been sent.
    // Reconfigure to capture the response.
    targetChannelConfig->downstreamDoneFlag = 1;
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	80 87       	std	Z+8, r24	; 0x08
    targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
     d7a:	01 90       	ld	r0, Z+
     d7c:	f0 81       	ld	r31, Z
     d7e:	e0 2d       	mov	r30, r0
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	83 83       	std	Z+3, r24	; 0x03

ISR(MTR2_USART_TXDONE_vect)
{
    //MTR2_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
    doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[MTR2]);
}
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	8f 91       	pop	r24
     d8a:	0f 90       	pop	r0
     d8c:	0b be       	out	0x3b, r0	; 59
     d8e:	0f 90       	pop	r0
     d90:	08 be       	out	0x38, r0	; 56
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	0f 90       	pop	r0
     d98:	1f 90       	pop	r1
     d9a:	18 95       	reti

00000d9c <__vector_6>:

/************************************************************************
 * Downstream DMA vectors
 ************************************************************************/
ISR(DOWNSTREAM0_USART_DMA_vect)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	08 b6       	in	r0, 0x38	; 56
     da6:	0f 92       	push	r0
     da8:	09 b6       	in	r0, 0x39	; 57
     daa:	0f 92       	push	r0
     dac:	0b b6       	in	r0, 0x3b	; 59
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	2f 93       	push	r18
     db4:	3f 93       	push	r19
     db6:	4f 93       	push	r20
     db8:	5f 93       	push	r21
     dba:	6f 93       	push	r22
     dbc:	7f 93       	push	r23
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	af 93       	push	r26
     dc4:	bf 93       	push	r27
     dc6:	ef 93       	push	r30
     dc8:	ff 93       	push	r31
    doDownstreamDMAISR(&DownStreamConfig[0]);
     dca:	8c e0       	ldi	r24, 0x0C	; 12
     dcc:	91 e3       	ldi	r25, 0x31	; 49
     dce:	0e 94 09 03 	call	0x612	; 0x612 <doDownstreamDMAISR>
}
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	0f 90       	pop	r0
     dec:	0b be       	out	0x3b, r0	; 59
     dee:	0f 90       	pop	r0
     df0:	09 be       	out	0x39, r0	; 57
     df2:	0f 90       	pop	r0
     df4:	08 be       	out	0x38, r0	; 56
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_7>:
ISR(DOWNSTREAM1_USART_DMA_vect)
{
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	08 b6       	in	r0, 0x38	; 56
     e0a:	0f 92       	push	r0
     e0c:	09 b6       	in	r0, 0x39	; 57
     e0e:	0f 92       	push	r0
     e10:	0b b6       	in	r0, 0x3b	; 59
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	2f 93       	push	r18
     e18:	3f 93       	push	r19
     e1a:	4f 93       	push	r20
     e1c:	5f 93       	push	r21
     e1e:	6f 93       	push	r22
     e20:	7f 93       	push	r23
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
     e26:	af 93       	push	r26
     e28:	bf 93       	push	r27
     e2a:	ef 93       	push	r30
     e2c:	ff 93       	push	r31
    doDownstreamDMAISR(&DownStreamConfig[1]);
     e2e:	88 e1       	ldi	r24, 0x18	; 24
     e30:	91 e3       	ldi	r25, 0x31	; 49
     e32:	0e 94 09 03 	call	0x612	; 0x612 <doDownstreamDMAISR>
}
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0b be       	out	0x3b, r0	; 59
     e52:	0f 90       	pop	r0
     e54:	09 be       	out	0x39, r0	; 57
     e56:	0f 90       	pop	r0
     e58:	08 be       	out	0x38, r0	; 56
     e5a:	0f 90       	pop	r0
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	0f 90       	pop	r0
     e60:	1f 90       	pop	r1
     e62:	18 95       	reti

00000e64 <__vector_8>:
ISR(DOWNSTREAM2_USART_DMA_vect)
{
     e64:	1f 92       	push	r1
     e66:	0f 92       	push	r0
     e68:	0f b6       	in	r0, 0x3f	; 63
     e6a:	0f 92       	push	r0
     e6c:	08 b6       	in	r0, 0x38	; 56
     e6e:	0f 92       	push	r0
     e70:	09 b6       	in	r0, 0x39	; 57
     e72:	0f 92       	push	r0
     e74:	0b b6       	in	r0, 0x3b	; 59
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	2f 93       	push	r18
     e7c:	3f 93       	push	r19
     e7e:	4f 93       	push	r20
     e80:	5f 93       	push	r21
     e82:	6f 93       	push	r22
     e84:	7f 93       	push	r23
     e86:	8f 93       	push	r24
     e88:	9f 93       	push	r25
     e8a:	af 93       	push	r26
     e8c:	bf 93       	push	r27
     e8e:	ef 93       	push	r30
     e90:	ff 93       	push	r31
    doDownstreamDMAISR(&DownStreamConfig[2]);
     e92:	84 e2       	ldi	r24, 0x24	; 36
     e94:	91 e3       	ldi	r25, 0x31	; 49
     e96:	0e 94 09 03 	call	0x612	; 0x612 <doDownstreamDMAISR>
}
     e9a:	ff 91       	pop	r31
     e9c:	ef 91       	pop	r30
     e9e:	bf 91       	pop	r27
     ea0:	af 91       	pop	r26
     ea2:	9f 91       	pop	r25
     ea4:	8f 91       	pop	r24
     ea6:	7f 91       	pop	r23
     ea8:	6f 91       	pop	r22
     eaa:	5f 91       	pop	r21
     eac:	4f 91       	pop	r20
     eae:	3f 91       	pop	r19
     eb0:	2f 91       	pop	r18
     eb2:	0f 90       	pop	r0
     eb4:	0b be       	out	0x3b, r0	; 59
     eb6:	0f 90       	pop	r0
     eb8:	09 be       	out	0x39, r0	; 57
     eba:	0f 90       	pop	r0
     ebc:	08 be       	out	0x38, r0	; 56
     ebe:	0f 90       	pop	r0
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	0f 90       	pop	r0
     ec4:	1f 90       	pop	r1
     ec6:	18 95       	reti

00000ec8 <__vector_9>:
ISR(DOWNSTREAM3_USART_DMA_vect)
{
     ec8:	1f 92       	push	r1
     eca:	0f 92       	push	r0
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	0f 92       	push	r0
     ed0:	08 b6       	in	r0, 0x38	; 56
     ed2:	0f 92       	push	r0
     ed4:	09 b6       	in	r0, 0x39	; 57
     ed6:	0f 92       	push	r0
     ed8:	0b b6       	in	r0, 0x3b	; 59
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
    doDownstreamDMAISR(&DownStreamConfig[3]);
     ef6:	80 e3       	ldi	r24, 0x30	; 48
     ef8:	91 e3       	ldi	r25, 0x31	; 49
     efa:	0e 94 09 03 	call	0x612	; 0x612 <doDownstreamDMAISR>
}
     efe:	ff 91       	pop	r31
     f00:	ef 91       	pop	r30
     f02:	bf 91       	pop	r27
     f04:	af 91       	pop	r26
     f06:	9f 91       	pop	r25
     f08:	8f 91       	pop	r24
     f0a:	7f 91       	pop	r23
     f0c:	6f 91       	pop	r22
     f0e:	5f 91       	pop	r21
     f10:	4f 91       	pop	r20
     f12:	3f 91       	pop	r19
     f14:	2f 91       	pop	r18
     f16:	0f 90       	pop	r0
     f18:	0b be       	out	0x3b, r0	; 59
     f1a:	0f 90       	pop	r0
     f1c:	09 be       	out	0x39, r0	; 57
     f1e:	0f 90       	pop	r0
     f20:	08 be       	out	0x38, r0	; 56
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti

00000f2c <computeChecksum>:
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     f2c:	fc 01       	movw	r30, r24
    for(int i=0;i<packetSize;i++)
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     f32:	80 e0       	ldi	r24, 0x00	; 0
    for(int i=0;i<packetSize;i++)
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <computeChecksum+0x12>
    {
        accumulator += packetBuffer[i];
     f36:	91 91       	ld	r25, Z+
     f38:	89 0f       	add	r24, r25
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
    for(int i=0;i<packetSize;i++)
     f3a:	2f 5f       	subi	r18, 0xFF	; 255
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	26 17       	cp	r18, r22
     f40:	37 07       	cpc	r19, r23
     f42:	cc f3       	brlt	.-14     	; 0xf36 <computeChecksum+0xa>
    {
        accumulator += packetBuffer[i];
    }

    return (0x00 - accumulator);
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	90 95       	com	r25
     f48:	81 95       	neg	r24
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
}
     f4c:	08 95       	ret

00000f4e <simplePassthrough>:
 * USART Stream.  It then waits (with timeout) for a reply from the
 * downstream device.  It then either passes the device back upstream or
 * generate an appropriate error response.
 ************************************************************************/
static void simplePassthrough(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	cf 93       	push	r28
     f54:	df 93       	push	r29
     f56:	ec 01       	movw	r28, r24
    // set up the receive timeout
    cli();
     f58:	f8 94       	cli
    upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
     f5a:	80 e2       	ldi	r24, 0x20	; 32
     f5c:	80 93 69 20 	sts	0x2069, r24
    sei();
     f60:	78 94       	sei
    while((targetChannelConfig->sizeReceived == 0) && (upRXtimeoutCounter));
     f62:	8f 81       	ldd	r24, Y+7	; 0x07
     f64:	88 23       	and	r24, r24
     f66:	21 f4       	brne	.+8      	; 0xf70 <simplePassthrough+0x22>
     f68:	80 91 69 20 	lds	r24, 0x2069
     f6c:	88 23       	and	r24, r24
     f6e:	c9 f7       	brne	.-14     	; 0xf62 <simplePassthrough+0x14>

    if(!(upRXtimeoutCounter))
     f70:	80 91 69 20 	lds	r24, 0x2069
     f74:	88 23       	and	r24, r24
     f76:	c1 f4       	brne	.+48     	; 0xfa8 <simplePassthrough+0x5a>
    {
        //Abort abort: // presumption of DMA1 being always used
        DOWNSTREAM1_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
     f78:	80 91 20 01 	lds	r24, 0x0120
     f7c:	8f 77       	andi	r24, 0x7F	; 127
     f7e:	e0 e0       	ldi	r30, 0x00	; 0
     f80:	f1 e0       	ldi	r31, 0x01	; 1
     f82:	80 a3       	lds	r24, 0x50

        // NEW FROM ZACH

        DownStreamConfig[1].usart->CTRLA = 0x00;
     f84:	e0 91 18 31 	lds	r30, 0x3118
     f88:	f0 91 19 31 	lds	r31, 0x3119
     f8c:	13 82       	std	Z+3, r1	; 0x03
        DownStreamConfig[1].isActive = 0; // BA
     f8e:	10 92 23 31 	sts	0x3123, r1

        responseToOveroC[0] = 3; //Packet size
     f92:	83 e0       	ldi	r24, 0x03	; 3
     f94:	80 93 f5 29 	sts	0x29F5, r24
        responseToOveroC[1] = 0; //Packet size MSB
     f98:	10 92 f6 29 	sts	0x29F6, r1
        responseToOveroC[2] = commandPacketBuffer[COMMAND_OFFSET]; //Reflected command byte
     f9c:	80 91 ef 29 	lds	r24, 0x29EF
     fa0:	80 93 f7 29 	sts	0x29F7, r24
        responseToOveroC[3] = TIMEOUT_ERROR; //Timeout error
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	1e c0       	rjmp	.+60     	; 0xfe4 <simplePassthrough+0x96>
        responseToOveroC[4] = computeChecksum((uint8_t *)responseToOveroC,4); //checksum
        upstreamTX(responseToOveroC, 5);
        return;
    }

    if(computeChecksum((uint8_t *)targetChannelConfig->targetBuffer,targetChannelConfig->sizeReceived) != 0x00)
     fa8:	0c 81       	ldd	r16, Y+4	; 0x04
     faa:	1d 81       	ldd	r17, Y+5	; 0x05
     fac:	6f 81       	ldd	r22, Y+7	; 0x07
     fae:	c8 01       	movw	r24, r16
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	21 f1       	breq	.+72     	; 0x1002 <simplePassthrough+0xb4>
    {
        //Invalid checksum
        RxCheckSumErrCnt[targetChannelConfig->activeStream]++;
     fba:	e9 85       	ldd	r30, Y+9	; 0x09
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	ee 0f       	add	r30, r30
     fc0:	ff 1f       	adc	r31, r31
     fc2:	e2 5a       	subi	r30, 0xA2	; 162
     fc4:	fe 4c       	sbci	r31, 0xCE	; 206
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
        responseToOveroC[0] = 3; //Packet size
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	80 93 f5 29 	sts	0x29F5, r24
        responseToOveroC[1] = 0; //Packet size MSB
     fd6:	10 92 f6 29 	sts	0x29F6, r1
        responseToOveroC[2] = commandPacketBuffer[COMMAND_OFFSET]; //Reflected command byte
     fda:	80 91 ef 29 	lds	r24, 0x29EF
     fde:	80 93 f7 29 	sts	0x29F7, r24
        responseToOveroC[3] = CHECKSUM_ERROR; //Checksum error
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	80 93 f8 29 	sts	0x29F8, r24
        responseToOveroC[4] = computeChecksum((uint8_t *)responseToOveroC,4); //checksum
     fe8:	85 ef       	ldi	r24, 0xF5	; 245
     fea:	99 e2       	ldi	r25, 0x29	; 41
     fec:	64 e0       	ldi	r22, 0x04	; 4
     fee:	70 e0       	ldi	r23, 0x00	; 0
     ff0:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
     ff4:	80 93 f9 29 	sts	0x29F9, r24
        upstreamTX(responseToOveroC, 5);
     ff8:	85 ef       	ldi	r24, 0xF5	; 245
     ffa:	99 e2       	ldi	r25, 0x29	; 41
     ffc:	65 e0       	ldi	r22, 0x05	; 5
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	03 c0       	rjmp	.+6      	; 0x1008 <simplePassthrough+0xba>
        return;
    }

    //Data is ready for shipping upstream
    upstreamTX(targetChannelConfig->targetBuffer,targetChannelConfig->sizeReceived);
    1002:	6f 81       	ldd	r22, Y+7	; 0x07
    1004:	c8 01       	movw	r24, r16
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	0e 94 40 03 	call	0x680	; 0x680 <upstreamTX>
    return;
}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <stuffOutput>:
 * Used in Broadcasts to stuff the response to the Overo based on the collected
 * data in the broadcast.  It confirms an appropriate size and checksum before
 * loading the data.
 ************************************************************************/
static inline uint8_t stuffOutput(uint8_t * outputBuffer, uint8_t *inputBuffer, uint8_t inputSize, uint16_t deviceBitmask)
{
    1016:	8f 92       	push	r8
    1018:	9f 92       	push	r9
    101a:	af 92       	push	r10
    101c:	bf 92       	push	r11
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	f8 2e       	mov	r15, r24
    102e:	e9 2e       	mov	r14, r25
    1030:	5b 01       	movw	r10, r22
    1032:	d4 2e       	mov	r13, r20
    1034:	49 01       	movw	r8, r18
        return inputSize-5;
    }
    return 0;
#endif
    unsigned r = 0;
    uint16_t bitmsk = deviceBitmask;
    1036:	c9 01       	movw	r24, r18
        respondingDevicesBitfield |= deviceBitmask;
        return inputSize-5;
    }
    return 0;
#endif
    unsigned r = 0;
    1038:	00 e0       	ldi	r16, 0x00	; 0
    103a:	10 e0       	ldi	r17, 0x00	; 0
    uint16_t bitmsk = deviceBitmask;
    while (bitmsk >>= 1)  // find index from bitmask
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <stuffOutput+0x2c>
    {
        r++;
    103e:	0f 5f       	subi	r16, 0xFF	; 255
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    }
    return 0;
#endif
    unsigned r = 0;
    uint16_t bitmsk = deviceBitmask;
    while (bitmsk >>= 1)  // find index from bitmask
    1042:	96 95       	lsr	r25
    1044:	87 95       	ror	r24
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	d1 f7       	brne	.-12     	; 0x103e <stuffOutput+0x28>
    {
        r++;
    }

    if (inputSize >= 5) {
    104a:	84 e0       	ldi	r24, 0x04	; 4
    104c:	8d 15       	cp	r24, r13
    104e:	68 f5       	brcc	.+90     	; 0x10aa <stuffOutput+0x94>
        if (inputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] == STATUS_OK) 
    1050:	f5 01       	movw	r30, r10
    1052:	83 81       	ldd	r24, Z+3	; 0x03
    1054:	88 23       	and	r24, r24
    1056:	49 f5       	brne	.+82     	; 0x10aa <stuffOutput+0x94>
        {
            if (computeChecksum(inputBuffer,inputSize) == 0) 
    1058:	cd 2d       	mov	r28, r13
    105a:	d0 e0       	ldi	r29, 0x00	; 0
    105c:	c5 01       	movw	r24, r10
    105e:	be 01       	movw	r22, r28
    1060:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	b9 f4       	brne	.+46     	; 0x1096 <stuffOutput+0x80>
            {
                // normal valid packet
                memcpy(outputBuffer,&inputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM],inputSize-5);
    1068:	ae 01       	movw	r20, r28
    106a:	45 50       	subi	r20, 0x05	; 5
    106c:	50 40       	sbci	r21, 0x00	; 0
    106e:	b5 01       	movw	r22, r10
    1070:	6c 5f       	subi	r22, 0xFC	; 252
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	8f 2d       	mov	r24, r15
    1076:	9e 2d       	mov	r25, r14
    1078:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <memcpy>
                respondingDevicesBitfield |= deviceBitmask;
    107c:	80 91 de 29 	lds	r24, 0x29DE
    1080:	90 91 df 29 	lds	r25, 0x29DF
    1084:	88 29       	or	r24, r8
    1086:	99 29       	or	r25, r9
    1088:	80 93 de 29 	sts	0x29DE, r24
    108c:	90 93 df 29 	sts	0x29DF, r25
                return inputSize-5;
    1090:	8d 2d       	mov	r24, r13
    1092:	85 50       	subi	r24, 0x05	; 5
    1094:	0b c0       	rjmp	.+22     	; 0x10ac <stuffOutput+0x96>
            }
            else {
                // bad checksum
                RxCheckSumErrCnt[r]++;
    1096:	f8 01       	movw	r30, r16
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	e2 5a       	subi	r30, 0xA2	; 162
    109e:	fe 4c       	sbci	r31, 0xCE	; 206
    10a0:	80 81       	ld	r24, Z
    10a2:	91 81       	ldd	r25, Z+1	; 0x01
    10a4:	01 96       	adiw	r24, 0x01	; 1
    10a6:	80 83       	st	Z, r24
    10a8:	91 83       	std	Z+1, r25	; 0x01
                return 0;
            }
        }
        else{
            // bad status
            return 0;
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    else{
        // input size<5
        return 0;
    }

}
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	bf 90       	pop	r11
    10bc:	af 90       	pop	r10
    10be:	9f 90       	pop	r9
    10c0:	8f 90       	pop	r8
    10c2:	08 95       	ret

000010c4 <startChain>:
 * startChain()
 *
 * Begins a Stream transmission.  Used in both passthroughs and broadcasts
 ************************************************************************/
void startChain(uint8_t chainIndex, uint8_t DMAchannel, uint8_t *outboundBuffer)
{
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    DMA_CH_t *targetDMA;
    CHANNEL_CONFIGURATION_t *targetChannelConfig;

    switch( DMAchannel)
    10d0:	61 30       	cpi	r22, 0x01	; 1
    10d2:	b9 f0       	breq	.+46     	; 0x1102 <startChain+0x3e>
    10d4:	61 30       	cpi	r22, 0x01	; 1
    10d6:	30 f0       	brcs	.+12     	; 0x10e4 <startChain+0x20>
    10d8:	62 30       	cpi	r22, 0x02	; 2
    10da:	49 f0       	breq	.+18     	; 0x10ee <startChain+0x2a>
    10dc:	63 30       	cpi	r22, 0x03	; 3
    10de:	09 f0       	breq	.+2      	; 0x10e2 <startChain+0x1e>
    10e0:	76 c0       	rjmp	.+236    	; 0x11ce <startChain+0x10a>
    10e2:	0a c0       	rjmp	.+20     	; 0x10f8 <startChain+0x34>
    {
        case 0:
            targetDMA = &DOWNSTREAM0_DMA;
            targetChannelConfig = &DownStreamConfig[0];
    10e4:	cc e0       	ldi	r28, 0x0C	; 12
    10e6:	d1 e3       	ldi	r29, 0x31	; 49
    CHANNEL_CONFIGURATION_t *targetChannelConfig;

    switch( DMAchannel)
    {
        case 0:
            targetDMA = &DOWNSTREAM0_DMA;
    10e8:	a0 e1       	ldi	r26, 0x10	; 16
    10ea:	b1 e0       	ldi	r27, 0x01	; 1
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <startChain+0x46>
            targetDMA = &DOWNSTREAM1_DMA;
            targetChannelConfig = &DownStreamConfig[1];
            break;
        case 2:
            targetDMA = &DOWNSTREAM2_DMA;
            targetChannelConfig = &DownStreamConfig[2];
    10ee:	c4 e2       	ldi	r28, 0x24	; 36
    10f0:	d1 e3       	ldi	r29, 0x31	; 49
        case 1:
            targetDMA = &DOWNSTREAM1_DMA;
            targetChannelConfig = &DownStreamConfig[1];
            break;
        case 2:
            targetDMA = &DOWNSTREAM2_DMA;
    10f2:	a0 e3       	ldi	r26, 0x30	; 48
    10f4:	b1 e0       	ldi	r27, 0x01	; 1
            targetChannelConfig = &DownStreamConfig[2];
            break;
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <startChain+0x46>
        case 3:
            targetDMA = &DOWNSTREAM3_DMA;
            targetChannelConfig = &DownStreamConfig[3];
    10f8:	c0 e3       	ldi	r28, 0x30	; 48
    10fa:	d1 e3       	ldi	r29, 0x31	; 49
        case 2:
            targetDMA = &DOWNSTREAM2_DMA;
            targetChannelConfig = &DownStreamConfig[2];
            break;
        case 3:
            targetDMA = &DOWNSTREAM3_DMA;
    10fc:	a0 e4       	ldi	r26, 0x40	; 64
    10fe:	b1 e0       	ldi	r27, 0x01	; 1
            targetChannelConfig = &DownStreamConfig[3];
            break;
    1100:	04 c0       	rjmp	.+8      	; 0x110a <startChain+0x46>
            targetDMA = &DOWNSTREAM0_DMA;
            targetChannelConfig = &DownStreamConfig[0];
            break;
        case 1:
            targetDMA = &DOWNSTREAM1_DMA;
            targetChannelConfig = &DownStreamConfig[1];
    1102:	c8 e1       	ldi	r28, 0x18	; 24
    1104:	d1 e3       	ldi	r29, 0x31	; 49
        case 0:
            targetDMA = &DOWNSTREAM0_DMA;
            targetChannelConfig = &DownStreamConfig[0];
            break;
        case 1:
            targetDMA = &DOWNSTREAM1_DMA;
    1106:	a0 e2       	ldi	r26, 0x20	; 32
    1108:	b1 e0       	ldi	r27, 0x01	; 1
            // should record an error here, or block
            return;
    }

    //Configure the CHANNEL_CONFIGURATION_t structure
    targetChannelConfig->usart = allUSARTS[chainIndex];
    110a:	e8 2e       	mov	r14, r24
    110c:	ff 24       	eor	r15, r15
    110e:	87 01       	movw	r16, r14
    1110:	00 0f       	add	r16, r16
    1112:	11 1f       	adc	r17, r17
    1114:	f8 01       	movw	r30, r16
    1116:	ef 5e       	subi	r30, 0xEF	; 239
    1118:	ff 4d       	sbci	r31, 0xDF	; 223
    111a:	20 81       	ld	r18, Z
    111c:	31 81       	ldd	r19, Z+1	; 0x01
    111e:	28 83       	st	Y, r18
    1120:	39 83       	std	Y+1, r19	; 0x01
    targetChannelConfig->sizeReceived = 0;
    1122:	1f 82       	std	Y+7, r1	; 0x07
    targetChannelConfig->downstreamDoneFlag = 0;
    1124:	18 86       	std	Y+8, r1	; 0x08

    targetChannelConfig->dma = targetDMA;
    1126:	aa 83       	std	Y+2, r26	; 0x02
    1128:	bb 83       	std	Y+3, r27	; 0x03
    targetChannelConfig->targetBuffer = allFirstSlaveBuffers[chainIndex];
    112a:	f8 01       	movw	r30, r16
    112c:	e3 5e       	subi	r30, 0xE3	; 227
    112e:	ff 4d       	sbci	r31, 0xDF	; 223
    1130:	01 90       	ld	r0, Z+
    1132:	f0 81       	ld	r31, Z
    1134:	e0 2d       	mov	r30, r0
    1136:	ec 83       	std	Y+4, r30	; 0x04
    1138:	fd 83       	std	Y+5, r31	; 0x05
    targetChannelConfig->inboundTrigger = allInboundTriggers[chainIndex];
    113a:	f7 01       	movw	r30, r14
    113c:	e7 5d       	subi	r30, 0xD7	; 215
    113e:	ff 4d       	sbci	r31, 0xDF	; 223
    1140:	90 81       	ld	r25, Z
    1142:	9e 83       	std	Y+6, r25	; 0x06
    targetChannelConfig->activeStream = chainIndex;
    1144:	89 87       	std	Y+9, r24	; 0x09
    targetChannelConfig->isFirst = 1;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	8a 87       	std	Y+10, r24	; 0x0a
    targetChannelConfig->isActive = 1;
    114a:	8b 87       	std	Y+11, r24	; 0x0b

    USARTtoCHANNELS[chainIndex] = targetChannelConfig;
    114c:	f8 01       	movw	r30, r16
    114e:	eb 5f       	subi	r30, 0xFB	; 251
    1150:	ff 4d       	sbci	r31, 0xDF	; 223
    1152:	c0 83       	st	Z, r28
    1154:	d1 83       	std	Z+1, r29	; 0x01
    allUSARTS[chainIndex]->STATUS = USART_TXCIF_bm;
    1156:	90 e4       	ldi	r25, 0x40	; 64
    1158:	f9 01       	movw	r30, r18
    115a:	91 83       	std	Z+1, r25	; 0x01

    prepareDMAChannel(targetDMA, allOutboundTriggers[chainIndex], allUSARTS[chainIndex], outboundBuffer,1);
    115c:	f7 01       	movw	r30, r14
    115e:	e1 5d       	subi	r30, 0xD1	; 209
    1160:	ff 4d       	sbci	r31, 0xDF	; 223
    1162:	70 81       	ld	r23, Z
 ************************************************************************/
static inline void prepareDMAChannel(DMA_CH_t *selectedChannel, uint8_t usartTrigger, USART_t *targetUSART, volatile uint8_t *targetBuffer, uint8_t isOutbound)
{
    //Set to perform one block transfer corresponding to one command packet
    //Technically not necessary because REPEAT will not be set in CTRLA
    selectedChannel->REPCNT = 0x01;
    1164:	16 96       	adiw	r26, 0x06	; 6
    1166:	8c 93       	st	X, r24
    1168:	16 97       	sbiw	r26, 0x06	; 6

    //Trigger on received data
    selectedChannel->TRIGSRC = usartTrigger;
    116a:	13 96       	adiw	r26, 0x03	; 3
    116c:	7c 93       	st	X, r23
    116e:	13 97       	sbiw	r26, 0x03	; 3

    if(isOutbound)
    {
        //Configure the chosen channel to read from a fixed UART into a linear array
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc |
    1170:	88 ed       	ldi	r24, 0xD8	; 216
    1172:	12 96       	adiw	r26, 0x02	; 2
    1174:	8c 93       	st	X, r24
    1176:	12 97       	sbiw	r26, 0x02	; 2
        //This part has 16 bit pointers, so cast appropriately.
        //Memory addresses are 24 bits to allow for external memory to be mapped into one address space
        //Same with internal EEPROM Data memory.
        //Since these locations are in lower memory, fix the high order address bits to zero.
        //Mapping external memory will require more care.
        selectedChannel->DESTADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
    1178:	1c 96       	adiw	r26, 0x0c	; 12
    117a:	2c 93       	st	X, r18
    117c:	1c 97       	sbiw	r26, 0x0c	; 12
        selectedChannel->DESTADDR1 = (uint16_t) &targetUSART->DATA >> 8;
    117e:	1d 96       	adiw	r26, 0x0d	; 13
    1180:	3c 93       	st	X, r19
    1182:	1d 97       	sbiw	r26, 0x0d	; 13
        selectedChannel->DESTADDR2 = 0;
    1184:	1e 96       	adiw	r26, 0x0e	; 14
    1186:	1c 92       	st	X, r1
    1188:	1e 97       	sbiw	r26, 0x0e	; 14

        selectedChannel->SRCADDR0 = (uint16_t)targetBuffer & 0x00FF;
    118a:	18 96       	adiw	r26, 0x08	; 8
    118c:	4c 93       	st	X, r20
    118e:	18 97       	sbiw	r26, 0x08	; 8
        selectedChannel->SRCADDR1 = (uint16_t)targetBuffer >> 8;
    1190:	19 96       	adiw	r26, 0x09	; 9
    1192:	5c 93       	st	X, r21
    1194:	19 97       	sbiw	r26, 0x09	; 9
        selectedChannel->SRCADDR2 = 0;
    1196:	1a 96       	adiw	r26, 0x0a	; 10
    1198:	1c 92       	st	X, r1
    119a:	1a 97       	sbiw	r26, 0x0a	; 10
        //Interrupt on this channel when the transaction is complete
        //selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc;
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_OFF_gc | DMA_CH_TRNIF_bm;
    119c:	80 e1       	ldi	r24, 0x10	; 16
    119e:	11 96       	adiw	r26, 0x01	; 1
    11a0:	8c 93       	st	X, r24
    11a2:	11 97       	sbiw	r26, 0x01	; 1
        targetUSART->STATUS = USART_TXCIF_bm;
    11a4:	f9 01       	movw	r30, r18
    11a6:	91 83       	std	Z+1, r25	; 0x01
        targetUSART->CTRLA |= USART_TXCINTLVL_LO_gc;    }
    11a8:	83 81       	ldd	r24, Z+3	; 0x03
    11aa:	84 60       	ori	r24, 0x04	; 4
    11ac:	83 83       	std	Z+3, r24	; 0x03
 * with prepareDMAChannel().
 ************************************************************************/
static inline void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
    11ae:	87 e0       	ldi	r24, 0x07	; 7
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	14 96       	adiw	r26, 0x04	; 4
    11b4:	8d 93       	st	X+, r24
    11b6:	9c 93       	st	X, r25
    11b8:	15 97       	sbiw	r26, 0x05	; 5
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
    11ba:	84 e8       	ldi	r24, 0x84	; 132
    11bc:	8c 93       	st	X, r24
    allUSARTS[chainIndex]->STATUS = USART_TXCIF_bm;

    prepareDMAChannel(targetDMA, allOutboundTriggers[chainIndex], allUSARTS[chainIndex], outboundBuffer,1);
    activateDMAChannel(targetDMA,COMMAND_PACKET_SIZE);

    cli();
    11be:	f8 94       	cli
    dmaTimeoutCounter[DMAchannel] = DOWNSTREAM_TIMEOUT_4KHZ;
    11c0:	e6 2f       	mov	r30, r22
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	e6 59       	subi	r30, 0x96	; 150
    11c6:	ff 4d       	sbci	r31, 0xDF	; 223
    11c8:	85 e0       	ldi	r24, 0x05	; 5
    11ca:	80 83       	st	Z, r24
    sei();
    11cc:	78 94       	sei
}
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	ff 90       	pop	r15
    11d8:	ef 90       	pop	r14
    11da:	08 95       	ret

000011dc <startMtrChain>:

void startMtrChain(uint8_t chainIndex)
{
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    CHANNEL_CONFIGURATION_t *targetChannelConfig;

    targetChannelConfig = &DownStreamConfig[chainIndex];
    11e0:	48 2f       	mov	r20, r24
    11e2:	50 e0       	ldi	r21, 0x00	; 0
    11e4:	9a 01       	movw	r18, r20
    11e6:	22 0f       	add	r18, r18
    11e8:	33 1f       	adc	r19, r19
    11ea:	d9 01       	movw	r26, r18
    11ec:	a4 0f       	add	r26, r20
    11ee:	b5 1f       	adc	r27, r21
    11f0:	aa 0f       	add	r26, r26
    11f2:	bb 1f       	adc	r27, r27
    11f4:	aa 0f       	add	r26, r26
    11f6:	bb 1f       	adc	r27, r27
    11f8:	a4 5f       	subi	r26, 0xF4	; 244
    11fa:	be 4c       	sbci	r27, 0xCE	; 206

    //Configure the CHANNEL_CONFIGURATION_t structure
    targetChannelConfig->usart = allUSARTS[chainIndex];
    11fc:	f9 01       	movw	r30, r18
    11fe:	ef 5e       	subi	r30, 0xEF	; 239
    1200:	ff 4d       	sbci	r31, 0xDF	; 223
    1202:	c0 81       	ld	r28, Z
    1204:	d1 81       	ldd	r29, Z+1	; 0x01
    1206:	cd 93       	st	X+, r28
    1208:	dc 93       	st	X, r29
    120a:	11 97       	sbiw	r26, 0x01	; 1
    targetChannelConfig->sizeReceived = 0;
    120c:	17 96       	adiw	r26, 0x07	; 7
    120e:	1c 92       	st	X, r1
    1210:	17 97       	sbiw	r26, 0x07	; 7
    targetChannelConfig->downstreamDoneFlag = 0;
    1212:	18 96       	adiw	r26, 0x08	; 8
    1214:	1c 92       	st	X, r1
    1216:	18 97       	sbiw	r26, 0x08	; 8

    targetChannelConfig->targetBuffer = allFirstSlaveBuffers[chainIndex];
    1218:	f9 01       	movw	r30, r18
    121a:	e3 5e       	subi	r30, 0xE3	; 227
    121c:	ff 4d       	sbci	r31, 0xDF	; 223
    121e:	60 81       	ld	r22, Z
    1220:	71 81       	ldd	r23, Z+1	; 0x01
    1222:	14 96       	adiw	r26, 0x04	; 4
    1224:	6d 93       	st	X+, r22
    1226:	7c 93       	st	X, r23
    1228:	15 97       	sbiw	r26, 0x05	; 5
    targetChannelConfig->inboundTrigger = allInboundTriggers[chainIndex];
    122a:	fa 01       	movw	r30, r20
    122c:	e7 5d       	subi	r30, 0xD7	; 215
    122e:	ff 4d       	sbci	r31, 0xDF	; 223
    1230:	90 81       	ld	r25, Z
    1232:	16 96       	adiw	r26, 0x06	; 6
    1234:	9c 93       	st	X, r25
    1236:	16 97       	sbiw	r26, 0x06	; 6
    targetChannelConfig->activeStream = chainIndex;
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	8c 93       	st	X, r24
    123c:	19 97       	sbiw	r26, 0x09	; 9
    targetChannelConfig->isFirst = 1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	1a 96       	adiw	r26, 0x0a	; 10
    1242:	8c 93       	st	X, r24
    1244:	1a 97       	sbiw	r26, 0x0a	; 10
    targetChannelConfig->isActive = 1;
    1246:	1b 96       	adiw	r26, 0x0b	; 11
    1248:	8c 93       	st	X, r24
    124a:	1b 97       	sbiw	r26, 0x0b	; 11

    USARTtoCHANNELS[chainIndex] = targetChannelConfig;
    124c:	2b 5f       	subi	r18, 0xFB	; 251
    124e:	3f 4d       	sbci	r19, 0xDF	; 223
    1250:	f9 01       	movw	r30, r18
    1252:	a0 83       	st	Z, r26
    1254:	b1 83       	std	Z+1, r27	; 0x01
    allUSARTS[chainIndex]->STATUS = USART_TXCIF_bm;
    1256:	80 e4       	ldi	r24, 0x40	; 64
    1258:	89 83       	std	Y+1, r24	; 0x01

}
    125a:	df 91       	pop	r29
    125c:	cf 91       	pop	r28
    125e:	08 95       	ret

00001260 <configureRouterUSARTs>:
 * configureRouterUSARTs()
 *
 * Configures the router system
 ************************************************************************/
void configureRouterUSARTs(void)
{
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    // set the RX buffers to a reasonable value
    for(uint8_t i=0;i<6;i++)
    1266:	10 e0       	ldi	r17, 0x00	; 0
        startMtrChain(i);
    1268:	81 2f       	mov	r24, r17
    126a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <startMtrChain>
 * Configures the router system
 ************************************************************************/
void configureRouterUSARTs(void)
{
    // set the RX buffers to a reasonable value
    for(uint8_t i=0;i<6;i++)
    126e:	1f 5f       	subi	r17, 0xFF	; 255
    1270:	16 30       	cpi	r17, 0x06	; 6
    1272:	d1 f7       	brne	.-12     	; 0x1268 <configureRouterUSARTs+0x8>
        startMtrChain(i);

    //First initialize the upstream to the Overo or PC
    configureUSARTHardware(&UPSTREAM_USART,USE_PC_BITRATE,0);
    1274:	80 ea       	ldi	r24, 0xA0	; 160
    1276:	9b e0       	ldi	r25, 0x0B	; 11
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	0e 94 28 03 	call	0x650	; 0x650 <configureUSARTHardware>

    //Now initialize the various downstream units
    configureUSARTHardware(&TACT_USART,0,1);
    1284:	80 ea       	ldi	r24, 0xA0	; 160
    1286:	98 e0       	ldi	r25, 0x08	; 8
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	70 e0       	ldi	r23, 0x00	; 0
    128c:	41 e0       	ldi	r20, 0x01	; 1
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	0e 94 28 03 	call	0x650	; 0x650 <configureUSARTHardware>
    configureUSARTHardware(&PROX1_USART,0,1);
    1294:	80 eb       	ldi	r24, 0xB0	; 176
    1296:	99 e0       	ldi	r25, 0x09	; 9
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	41 e0       	ldi	r20, 0x01	; 1
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	0e 94 28 03 	call	0x650	; 0x650 <configureUSARTHardware>
    configureUSARTHardware(&PROX2_USART,0,1);
    12a4:	80 eb       	ldi	r24, 0xB0	; 176
    12a6:	98 e0       	ldi	r25, 0x08	; 8
    12a8:	60 e0       	ldi	r22, 0x00	; 0
    12aa:	70 e0       	ldi	r23, 0x00	; 0
    12ac:	41 e0       	ldi	r20, 0x01	; 1
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	0e 94 28 03 	call	0x650	; 0x650 <configureUSARTHardware>
    configureUSARTHardware(&PROX3_USART,0,1);
    12b4:	80 ea       	ldi	r24, 0xA0	; 160
    12b6:	99 e0       	ldi	r25, 0x09	; 9
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	50 e0       	ldi	r21, 0x00	; 0
    12c0:	0e 94 28 03 	call	0x650	; 0x650 <configureUSARTHardware>
    configureUSARTHardware(&MTR1_USART,0,1);
    12c4:	80 ea       	ldi	r24, 0xA0	; 160
    12c6:	9a e0       	ldi	r25, 0x0A	; 10
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	41 e0       	ldi	r20, 0x01	; 1
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	0e 94 28 03 	call	0x650	; 0x650 <configureUSARTHardware>
    configureUSARTHardware(&MTR2_USART,0,1);
    12d4:	80 eb       	ldi	r24, 0xB0	; 176
    12d6:	9a e0       	ldi	r25, 0x0A	; 10
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	41 e0       	ldi	r20, 0x01	; 1
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	0e 94 28 03 	call	0x650	; 0x650 <configureUSARTHardware>

    //Enable DMA transfers, but do not prepare any for now.
    DMA.CTRL = DMA_ENABLE_bm;
    12e4:	80 e8       	ldi	r24, 0x80	; 128
    12e6:	80 93 00 01 	sts	0x0100, r24

    //Assume default configuration with downstream OUT and upstream IN
    SET_TACT_INBOUND();
    12ea:	c0 e4       	ldi	r28, 0x40	; 64
    12ec:	d6 e0       	ldi	r29, 0x06	; 6
    12ee:	80 91 44 06 	lds	r24, 0x0644
    12f2:	8e 7f       	andi	r24, 0xFE	; 254
    12f4:	8c 83       	std	Y+4, r24	; 0x04
    SET_PROX1_INBOUND();
    12f6:	a0 e6       	ldi	r26, 0x60	; 96
    12f8:	b6 e0       	ldi	r27, 0x06	; 6
    12fa:	80 e1       	ldi	r24, 0x10	; 16
    12fc:	16 96       	adiw	r26, 0x06	; 6
    12fe:	8c 93       	st	X, r24
    1300:	16 97       	sbiw	r26, 0x06	; 6
    SET_PROX2_INBOUND();
    1302:	80 91 44 06 	lds	r24, 0x0644
    1306:	8f 7e       	andi	r24, 0xEF	; 239
    1308:	8c 83       	std	Y+4, r24	; 0x04
    SET_PROX3_INBOUND();
    130a:	21 e0       	ldi	r18, 0x01	; 1
    130c:	16 96       	adiw	r26, 0x06	; 6
    130e:	2c 93       	st	X, r18
    1310:	16 97       	sbiw	r26, 0x06	; 6
    SET_MTR1_INBOUND();
    1312:	e0 e8       	ldi	r30, 0x80	; 128
    1314:	f6 e0       	ldi	r31, 0x06	; 6
    1316:	80 91 84 06 	lds	r24, 0x0684
    131a:	8e 7f       	andi	r24, 0xFE	; 254
    131c:	84 83       	std	Z+4, r24	; 0x04
    SET_MTR2_INBOUND();
    131e:	80 91 84 06 	lds	r24, 0x0684
    1322:	8f 7e       	andi	r24, 0xEF	; 239
    1324:	84 83       	std	Z+4, r24	; 0x04
    SET_TACT_OUTBOUND();
    1326:	80 91 44 06 	lds	r24, 0x0644
    132a:	82 60       	ori	r24, 0x02	; 2
    132c:	8c 83       	std	Y+4, r24	; 0x04
    SET_PROX1_OUTBOUND();
    132e:	80 e2       	ldi	r24, 0x20	; 32
    1330:	15 96       	adiw	r26, 0x05	; 5
    1332:	8c 93       	st	X, r24
    1334:	15 97       	sbiw	r26, 0x05	; 5
    SET_PROX2_OUTBOUND();
    1336:	80 91 44 06 	lds	r24, 0x0644
    133a:	80 62       	ori	r24, 0x20	; 32
    133c:	8c 83       	std	Y+4, r24	; 0x04
    SET_PROX3_OUTBOUND();
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	15 96       	adiw	r26, 0x05	; 5
    1342:	8c 93       	st	X, r24
    1344:	15 97       	sbiw	r26, 0x05	; 5
    SET_MTR1_OUTBOUND();
    1346:	80 91 84 06 	lds	r24, 0x0684
    134a:	82 60       	ori	r24, 0x02	; 2
    134c:	84 83       	std	Z+4, r24	; 0x04
    SET_MTR2_OUTBOUND();
    134e:	80 91 84 06 	lds	r24, 0x0684
    1352:	80 62       	ori	r24, 0x20	; 32
    1354:	84 83       	std	Z+4, r24	; 0x04

    //Setup the router timeout counter to about 0.25 ms periods
    // 32MHz/256/32: 4KHz (0.25ms)
    ROUTER_TC.CTRLB = TC_WGMODE_NORMAL_gc;
    1356:	e0 e0       	ldi	r30, 0x00	; 0
    1358:	f9 e0       	ldi	r31, 0x09	; 9
    135a:	11 82       	std	Z+1, r1	; 0x01
    ROUTER_TC.CTRLC = 0x00;
    135c:	12 82       	std	Z+2, r1	; 0x02
    ROUTER_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    135e:	13 82       	std	Z+3, r1	; 0x03
    ROUTER_TC.CTRLE = 0x00;
    1360:	14 82       	std	Z+4, r1	; 0x04
    ROUTER_TC.PERBUF = 32;
    1362:	80 e2       	ldi	r24, 0x20	; 32
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	86 ab       	sts	0x56, r24
    1368:	97 ab       	sts	0x57, r25
    ROUTER_TC.CNT = 0x0000;
    136a:	10 a2       	lds	r17, 0x90
    136c:	11 a2       	lds	r17, 0x91
    ROUTER_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
    136e:	26 83       	std	Z+6, r18	; 0x06
    ROUTER_TC.CTRLA = TC_CLKSEL_DIV256_gc;
    1370:	10 93 00 09 	sts	0x0900, r17
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	08 95       	ret

0000137c <tendDMAchain>:
    }
    return;
}

uint8_t tendDMAchain(uint8_t i)
{
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	48 2f       	mov	r20, r24
    if(DownStreamConfig[i].downstreamDoneFlag == 1)
    1382:	68 2f       	mov	r22, r24
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	cb 01       	movw	r24, r22
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	fc 01       	movw	r30, r24
    138e:	e6 0f       	add	r30, r22
    1390:	f7 1f       	adc	r31, r23
    1392:	ee 0f       	add	r30, r30
    1394:	ff 1f       	adc	r31, r31
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	e4 5f       	subi	r30, 0xF4	; 244
    139c:	fe 4c       	sbci	r31, 0xCE	; 206
    139e:	20 85       	ldd	r18, Z+8	; 0x08
    13a0:	21 30       	cpi	r18, 0x01	; 1
    13a2:	41 f4       	brne	.+16     	; 0x13b4 <tendDMAchain+0x38>
    {
        // DMA is done transmitting,
        // automagically starts receiving, see doDownstreamUSART_TXDONE_ISR()
        // clear the flag, reset the timeout counter
        DownStreamConfig[i].downstreamDoneFlag = 0;
    13a4:	10 86       	std	Z+8, r1	; 0x08
        cli();
    13a6:	f8 94       	cli
        dmaTimeoutCounter[i] = DOWNSTREAM_TIMEOUT_4KHZ;
    13a8:	fb 01       	movw	r30, r22
    13aa:	e6 59       	subi	r30, 0x96	; 150
    13ac:	ff 4d       	sbci	r31, 0xDF	; 223
    13ae:	25 e0       	ldi	r18, 0x05	; 5
    13b0:	20 83       	st	Z, r18
        sei();
    13b2:	78 94       	sei
    }
  
    if(DownStreamConfig[i].sizeReceived > 0)
    13b4:	86 0f       	add	r24, r22
    13b6:	97 1f       	adc	r25, r23
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	84 5f       	subi	r24, 0xF4	; 244
    13c2:	9e 4c       	sbci	r25, 0xCE	; 206
    13c4:	dc 01       	movw	r26, r24
    13c6:	17 96       	adiw	r26, 0x07	; 7
    13c8:	8c 91       	ld	r24, X
    13ca:	17 97       	sbiw	r26, 0x07	; 7
    13cc:	88 23       	and	r24, r24
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <tendDMAchain+0x56>
    13d0:	51 c0       	rjmp	.+162    	; 0x1474 <tendDMAchain+0xf8>
    {
        //DMA is done receiving
        // continueChain() will zero out .sizeReceived[]
        // check if a second response is expected
        if(continueChain(&DownStreamConfig[i]))
    13d2:	84 2f       	mov	r24, r20
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	fc 01       	movw	r30, r24
    13d8:	ee 0f       	add	r30, r30
    13da:	ff 1f       	adc	r31, r31
    13dc:	e8 0f       	add	r30, r24
    13de:	f9 1f       	adc	r31, r25
    13e0:	ee 0f       	add	r30, r30
    13e2:	ff 1f       	adc	r31, r31
    13e4:	ee 0f       	add	r30, r30
    13e6:	ff 1f       	adc	r31, r31
    13e8:	e4 5f       	subi	r30, 0xF4	; 244
    13ea:	fe 4c       	sbci	r31, 0xCE	; 206
 * coming.  In either case it will set up for the next reply or properly shut
 * down the stream.
 ************************************************************************/
static uint8_t continueChain(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    SERIAL_STREAM_t activeStream = targetChannelConfig->activeStream;
    13ec:	81 85       	ldd	r24, Z+9	; 0x09

    //Store the size received
    if(targetChannelConfig->isFirst)
    13ee:	92 85       	ldd	r25, Z+10	; 0x0a
    13f0:	a8 2f       	mov	r26, r24
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    {
        *(allFirstSlaveSizes[activeStream]) = targetChannelConfig->sizeReceived;
    13f4:	aa 0f       	add	r26, r26
    13f6:	bb 1f       	adc	r27, r27
static uint8_t continueChain(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    SERIAL_STREAM_t activeStream = targetChannelConfig->activeStream;

    //Store the size received
    if(targetChannelConfig->isFirst)
    13f8:	99 23       	and	r25, r25
    13fa:	19 f0       	breq	.+6      	; 0x1402 <tendDMAchain+0x86>
    {
        *(allFirstSlaveSizes[activeStream]) = targetChannelConfig->sizeReceived;
    13fc:	ab 5c       	subi	r26, 0xCB	; 203
    13fe:	bf 4d       	sbci	r27, 0xDF	; 223
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <tendDMAchain+0x8a>
    }
    else
    {
        *(allSecondSlaveSizes[activeStream]) = targetChannelConfig->sizeReceived;
    1402:	af 5b       	subi	r26, 0xBF	; 191
    1404:	bf 4d       	sbci	r27, 0xDF	; 223
    1406:	0d 90       	ld	r0, X+
    1408:	bc 91       	ld	r27, X
    140a:	a0 2d       	mov	r26, r0
    140c:	97 81       	ldd	r25, Z+7	; 0x07
    140e:	9c 93       	st	X, r25
    }

    //Clean out the structure
    targetChannelConfig->sizeReceived = 0;
    1410:	17 82       	std	Z+7, r1	; 0x07
    targetChannelConfig->downstreamDoneFlag = 0;
    1412:	10 86       	std	Z+8, r1	; 0x08

    if((allSecondSlaveBuffers[activeStream] == NULL) || (targetChannelConfig->isFirst == 0))
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	dc 01       	movw	r26, r24
    141c:	a3 5b       	subi	r26, 0xB3	; 179
    141e:	bf 4d       	sbci	r27, 0xDF	; 223
    1420:	2d 91       	ld	r18, X+
    1422:	3c 91       	ld	r19, X
    1424:	11 97       	sbiw	r26, 0x01	; 1
    1426:	21 15       	cp	r18, r1
    1428:	31 05       	cpc	r19, r1
    142a:	09 f4       	brne	.+2      	; 0x142e <tendDMAchain+0xb2>
    142c:	69 c0       	rjmp	.+210    	; 0x1500 <tendDMAchain+0x184>
    142e:	52 85       	ldd	r21, Z+10	; 0x0a
    1430:	55 23       	and	r21, r21
    1432:	09 f4       	brne	.+2      	; 0x1436 <tendDMAchain+0xba>
    1434:	65 c0       	rjmp	.+202    	; 0x1500 <tendDMAchain+0x184>
        //No continuation.  Chain is done
        return 1;
    }

    //Another reply is expected.  Rearm the channel
    targetChannelConfig->isFirst = 0;
    1436:	12 86       	std	Z+10, r1	; 0x0a
    targetChannelConfig->isActive = 1;
    1438:	51 e0       	ldi	r21, 0x01	; 1
    143a:	53 87       	std	Z+11, r21	; 0x0b
    targetChannelConfig->targetBuffer = allSecondSlaveBuffers[activeStream];
    143c:	24 83       	std	Z+4, r18	; 0x04
    143e:	35 83       	std	Z+5, r19	; 0x05
    USARTtoCHANNELS[activeStream] = targetChannelConfig;
    1440:	dc 01       	movw	r26, r24
    1442:	ab 5f       	subi	r26, 0xFB	; 251
    1444:	bf 4d       	sbci	r27, 0xDF	; 223
    1446:	ed 93       	st	X+, r30
    1448:	fc 93       	st	X, r31
    allUSARTS[activeStream]->STATUS = USART_TXCIF_bm;
    144a:	8f 5e       	subi	r24, 0xEF	; 239
    144c:	9f 4d       	sbci	r25, 0xDF	; 223
    144e:	ec 01       	movw	r28, r24
    1450:	a8 81       	ld	r26, Y
    1452:	b9 81       	ldd	r27, Y+1	; 0x01
    1454:	80 e4       	ldi	r24, 0x40	; 64
    1456:	11 96       	adiw	r26, 0x01	; 1
    1458:	8c 93       	st	X, r24
    targetChannelConfig->usart->CTRLA |= USART_RXCINTLVL_MED_gc;
    145a:	01 90       	ld	r0, Z+
    145c:	f0 81       	ld	r31, Z
    145e:	e0 2d       	mov	r30, r0
    1460:	83 81       	ldd	r24, Z+3	; 0x03
    1462:	80 62       	ori	r24, 0x20	; 32
    1464:	83 83       	std	Z+3, r24	; 0x03
            return(1);
        }
        else
        {
            // wait for the second response
            cli();
    1466:	f8 94       	cli
            dmaTimeoutCounter[i] = DOWNSTREAM_TIMEOUT_4KHZ;
    1468:	fb 01       	movw	r30, r22
    146a:	e6 59       	subi	r30, 0x96	; 150
    146c:	ff 4d       	sbci	r31, 0xDF	; 223
    146e:	85 e0       	ldi	r24, 0x05	; 5
    1470:	80 83       	st	Z, r24
            sei();
    1472:	78 94       	sei
        }
    }
  
    if(!(dmaTimeoutCounter[i]))
    1474:	db 01       	movw	r26, r22
    1476:	a6 59       	subi	r26, 0x96	; 150
    1478:	bf 4d       	sbci	r27, 0xDF	; 223
    147a:	8c 91       	ld	r24, X
    147c:	88 23       	and	r24, r24
    147e:	09 f0       	breq	.+2      	; 0x1482 <tendDMAchain+0x106>
    1480:	41 c0       	rjmp	.+130    	; 0x1504 <tendDMAchain+0x188>
    {
        //DMA timed out.  Reset it and mark done
        DownStreamConfig[i].isActive = 0;
    1482:	cb 01       	movw	r24, r22
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	fc 01       	movw	r30, r24
    148a:	e6 0f       	add	r30, r22
    148c:	f7 1f       	adc	r31, r23
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	e4 5f       	subi	r30, 0xF4	; 244
    1498:	fe 4c       	sbci	r31, 0xCE	; 206
    149a:	13 86       	std	Z+11, r1	; 0x0b
        dmaTimeoutCounter[i] = DOWNSTREAM_TIMEOUT_4KHZ;
    149c:	25 e0       	ldi	r18, 0x05	; 5
    149e:	2c 93       	st	X, r18
        switch(i)
    14a0:	41 30       	cpi	r20, 0x01	; 1
    14a2:	71 f0       	breq	.+28     	; 0x14c0 <tendDMAchain+0x144>
    14a4:	41 30       	cpi	r20, 0x01	; 1
    14a6:	28 f0       	brcs	.+10     	; 0x14b2 <tendDMAchain+0x136>
    14a8:	42 30       	cpi	r20, 0x02	; 2
    14aa:	89 f0       	breq	.+34     	; 0x14ce <tendDMAchain+0x152>
    14ac:	43 30       	cpi	r20, 0x03	; 3
    14ae:	d9 f4       	brne	.+54     	; 0x14e6 <tendDMAchain+0x16a>
    14b0:	15 c0       	rjmp	.+42     	; 0x14dc <tendDMAchain+0x160>
        {
            case 0 :
                DOWNSTREAM0_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
    14b2:	20 91 10 01 	lds	r18, 0x0110
    14b6:	2f 77       	andi	r18, 0x7F	; 127
    14b8:	e0 e0       	ldi	r30, 0x00	; 0
    14ba:	f1 e0       	ldi	r31, 0x01	; 1
    14bc:	20 8b       	std	Z+16, r18	; 0x10
                break;
    14be:	13 c0       	rjmp	.+38     	; 0x14e6 <tendDMAchain+0x16a>
            case 1 :
                DOWNSTREAM1_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
    14c0:	20 91 20 01 	lds	r18, 0x0120
    14c4:	2f 77       	andi	r18, 0x7F	; 127
    14c6:	e0 e0       	ldi	r30, 0x00	; 0
    14c8:	f1 e0       	ldi	r31, 0x01	; 1
    14ca:	20 a3       	lds	r18, 0x50
                break;
    14cc:	0c c0       	rjmp	.+24     	; 0x14e6 <tendDMAchain+0x16a>
            case 2 :
                DOWNSTREAM2_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
    14ce:	20 91 30 01 	lds	r18, 0x0130
    14d2:	2f 77       	andi	r18, 0x7F	; 127
    14d4:	e0 e0       	ldi	r30, 0x00	; 0
    14d6:	f1 e0       	ldi	r31, 0x01	; 1
    14d8:	20 ab       	sts	0x50, r18
                break;
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <tendDMAchain+0x16a>
            case 3 :
                DOWNSTREAM3_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
    14dc:	20 91 40 01 	lds	r18, 0x0140
    14e0:	2f 77       	andi	r18, 0x7F	; 127
    14e2:	20 93 40 01 	sts	0x0140, r18
                break;
        }
        //Disable interrupts on the USART
        DownStreamConfig[i].usart->CTRLA = 0x00;
    14e6:	86 0f       	add	r24, r22
    14e8:	97 1f       	adc	r25, r23
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	84 5f       	subi	r24, 0xF4	; 244
    14f4:	9e 4c       	sbci	r25, 0xCE	; 206
    14f6:	dc 01       	movw	r26, r24
    14f8:	ed 91       	ld	r30, X+
    14fa:	fc 91       	ld	r31, X
    14fc:	11 97       	sbiw	r26, 0x01	; 1
    14fe:	13 82       	std	Z+3, r1	; 0x03
        // continueChain() will zero out .sizeReceived[]
        // check if a second response is expected
        if(continueChain(&DownStreamConfig[i]))
        {
            //This chain is done.
            return(1);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <tendDMAchain+0x18a>
        //Disable interrupts on the USART
        DownStreamConfig[i].usart->CTRLA = 0x00;
        return(1);
    }

    return(0);
    1504:	80 e0       	ldi	r24, 0x00	; 0
}
    1506:	df 91       	pop	r29
    1508:	cf 91       	pop	r28
    150a:	08 95       	ret

0000150c <tendMTRchain>:

uint8_t tendMTRchain(uint8_t i)
{
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	28 2f       	mov	r18, r24
    // are the motors done?
    if(DownStreamConfig[i].sizeReceived > 0)
    1512:	68 2f       	mov	r22, r24
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	ab 01       	movw	r20, r22
    1518:	44 0f       	add	r20, r20
    151a:	55 1f       	adc	r21, r21
    151c:	fa 01       	movw	r30, r20
    151e:	e6 0f       	add	r30, r22
    1520:	f7 1f       	adc	r31, r23
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	ee 0f       	add	r30, r30
    1528:	ff 1f       	adc	r31, r31
    152a:	e4 5f       	subi	r30, 0xF4	; 244
    152c:	fe 4c       	sbci	r31, 0xCE	; 206
    152e:	87 81       	ldd	r24, Z+7	; 0x07
    1530:	88 23       	and	r24, r24
    1532:	09 f4       	brne	.+2      	; 0x1536 <tendMTRchain+0x2a>
    1534:	61 c0       	rjmp	.+194    	; 0x15f8 <tendMTRchain+0xec>
    {
        //preserve the length
        if(DownStreamConfig[i].isFirst)
    1536:	82 85       	ldd	r24, Z+10	; 0x0a
        {
            *(allFirstSlaveSizes[i]) = DownStreamConfig[i].sizeReceived;
    1538:	da 01       	movw	r26, r20
{
    // are the motors done?
    if(DownStreamConfig[i].sizeReceived > 0)
    {
        //preserve the length
        if(DownStreamConfig[i].isFirst)
    153a:	88 23       	and	r24, r24
    153c:	19 f0       	breq	.+6      	; 0x1544 <tendMTRchain+0x38>
        {
            *(allFirstSlaveSizes[i]) = DownStreamConfig[i].sizeReceived;
    153e:	ab 5c       	subi	r26, 0xCB	; 203
    1540:	bf 4d       	sbci	r27, 0xDF	; 223
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <tendMTRchain+0x3c>
        }
        else
        {
            *(allSecondSlaveSizes[i]) = DownStreamConfig[i].sizeReceived;
    1544:	af 5b       	subi	r26, 0xBF	; 191
    1546:	bf 4d       	sbci	r27, 0xDF	; 223
    1548:	0d 90       	ld	r0, X+
    154a:	bc 91       	ld	r27, X
    154c:	a0 2d       	mov	r26, r0
    154e:	87 81       	ldd	r24, Z+7	; 0x07
    1550:	8c 93       	st	X, r24
        }
      
        //Clean out the structure
        DownStreamConfig[i].sizeReceived=0;
    1552:	fa 01       	movw	r30, r20
    1554:	e6 0f       	add	r30, r22
    1556:	f7 1f       	adc	r31, r23
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	ee 0f       	add	r30, r30
    155e:	ff 1f       	adc	r31, r31
    1560:	e4 5f       	subi	r30, 0xF4	; 244
    1562:	fe 4c       	sbci	r31, 0xCE	; 206
    1564:	17 82       	std	Z+7, r1	; 0x07
        DownStreamConfig[i].downstreamDoneFlag=0;
    1566:	10 86       	std	Z+8, r1	; 0x08
      
        //is another reply expected?
        if((allSecondSlaveBuffers[i] == NULL) || (DownStreamConfig[i].isFirst == 0))
    1568:	da 01       	movw	r26, r20
    156a:	a3 5b       	subi	r26, 0xB3	; 179
    156c:	bf 4d       	sbci	r27, 0xDF	; 223
    156e:	8d 91       	ld	r24, X+
    1570:	9c 91       	ld	r25, X
    1572:	11 97       	sbiw	r26, 0x01	; 1
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	19 f0       	breq	.+6      	; 0x157e <tendMTRchain+0x72>
    1578:	32 85       	ldd	r19, Z+10	; 0x0a
    157a:	33 23       	and	r19, r19
    157c:	69 f4       	brne	.+26     	; 0x1598 <tendMTRchain+0x8c>
        {
            //No continuation.  Chain is done
            DownStreamConfig[i].isActive = 0;
    157e:	fb 01       	movw	r30, r22
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	e6 0f       	add	r30, r22
    1586:	f7 1f       	adc	r31, r23
    1588:	ee 0f       	add	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	ee 0f       	add	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	e4 5f       	subi	r30, 0xF4	; 244
    1592:	fe 4c       	sbci	r31, 0xCE	; 206
    1594:	13 86       	std	Z+11, r1	; 0x0b
    1596:	39 c0       	rjmp	.+114    	; 0x160a <tendMTRchain+0xfe>
            return(1);
        }
        else
        {
            //Another reply is expected.  Rearm the channel
            DownStreamConfig[i].isFirst = 0;
    1598:	12 86       	std	Z+10, r1	; 0x0a
            DownStreamConfig[i].isActive = 1;
    159a:	31 e0       	ldi	r19, 0x01	; 1
    159c:	33 87       	std	Z+11, r19	; 0x0b
            DownStreamConfig[i].targetBuffer = allSecondSlaveBuffers[i];
    159e:	84 83       	std	Z+4, r24	; 0x04
    15a0:	95 83       	std	Z+5, r25	; 0x05
            USARTtoCHANNELS[i] = &DownStreamConfig[i];
    15a2:	da 01       	movw	r26, r20
    15a4:	ab 5f       	subi	r26, 0xFB	; 251
    15a6:	bf 4d       	sbci	r27, 0xDF	; 223
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	c9 01       	movw	r24, r18
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	82 0f       	add	r24, r18
    15b2:	93 1f       	adc	r25, r19
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	84 5f       	subi	r24, 0xF4	; 244
    15be:	9e 4c       	sbci	r25, 0xCE	; 206
    15c0:	8d 93       	st	X+, r24
    15c2:	9c 93       	st	X, r25
            allUSARTS[i]->STATUS = USART_TXCIF_bm; // clear the transmission done bit
    15c4:	4f 5e       	subi	r20, 0xEF	; 239
    15c6:	5f 4d       	sbci	r21, 0xDF	; 223
    15c8:	ea 01       	movw	r28, r20
    15ca:	a8 81       	ld	r26, Y
    15cc:	b9 81       	ldd	r27, Y+1	; 0x01
    15ce:	80 e4       	ldi	r24, 0x40	; 64
    15d0:	11 96       	adiw	r26, 0x01	; 1
    15d2:	8c 93       	st	X, r24
    15d4:	11 97       	sbiw	r26, 0x01	; 1
            //DownStreamConfig[i].usart->CTRLA |= USART_RXCINTLVL_MED_gc;
            DownStreamConfig[i].usart->CTRLA = USART_RXCINTLVL_LO_gc;
    15d6:	01 90       	ld	r0, Z+
    15d8:	f0 81       	ld	r31, Z
    15da:	e0 2d       	mov	r30, r0
    15dc:	80 e1       	ldi	r24, 0x10	; 16
    15de:	83 83       	std	Z+3, r24	; 0x03
            cli();
    15e0:	f8 94       	cli
            mtRXbyte[i-4]=0;       // get ready for start of packet
    15e2:	fb 01       	movw	r30, r22
    15e4:	e4 59       	subi	r30, 0x94	; 148
    15e6:	ff 4d       	sbci	r31, 0xDF	; 223
    15e8:	10 82       	st	Z, r1
            dmaTimeoutCounter[i]=DOWNSTREAM_TIMEOUT_4KHZ;
    15ea:	66 59       	subi	r22, 0x96	; 150
    15ec:	7f 4d       	sbci	r23, 0xDF	; 223
    15ee:	85 e0       	ldi	r24, 0x05	; 5
    15f0:	fb 01       	movw	r30, r22
    15f2:	80 83       	st	Z, r24
            sei();
    15f4:	78 94       	sei
    15f6:	0b c0       	rjmp	.+22     	; 0x160e <tendMTRchain+0x102>
            return(0);
        }
    }
  
    if(!(dmaTimeoutCounter[i]))
    15f8:	db 01       	movw	r26, r22
    15fa:	a6 59       	subi	r26, 0x96	; 150
    15fc:	bf 4d       	sbci	r27, 0xDF	; 223
    15fe:	8c 91       	ld	r24, X
    1600:	88 23       	and	r24, r24
    1602:	29 f4       	brne	.+10     	; 0x160e <tendMTRchain+0x102>
    {
        DownStreamConfig[i].isActive = 0;
    1604:	13 86       	std	Z+11, r1	; 0x0b
        dmaTimeoutCounter[i]=DOWNSTREAM_TIMEOUT_4KHZ;
    1606:	85 e0       	ldi	r24, 0x05	; 5
    1608:	8c 93       	st	X, r24
        // timeout: mark chain done, move on.
        return(1);
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <tendMTRchain+0x104>
    }
    return(0);
    160e:	80 e0       	ldi	r24, 0x00	; 0
}
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	08 95       	ret

00001616 <doBroadcast>:
 * streams for transmission.  When all are finished, the final response to the Overo
 * is combined and delivered by Upstream DMA.  The response itself is ping-ponged
 * at a higher level.
 ************************************************************************/
void doBroadcast(volatile uint8_t *activeUpstreamBuffer, volatile uint8_t *commandPacketBuffer)
{
    1616:	ef 92       	push	r14
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	7c 01       	movw	r14, r24
    1624:	8b 01       	movw	r16, r22
    uint16_t packetSize;
    uint8_t chainsDone = 0;

    //The packet is a broadcast.  Create the two different variants for transmission (to length 1 and length 2 chains)
    memcpy((uint8_t *)shortXmitBuffer,(uint8_t *)commandPacketBuffer,COMMAND_PACKET_SIZE);
    1626:	a7 ee       	ldi	r26, 0xE7	; 231
    1628:	b9 e2       	ldi	r27, 0x29	; 41
    162a:	fb 01       	movw	r30, r22
    162c:	87 e0       	ldi	r24, 0x07	; 7
    162e:	01 90       	ld	r0, Z+
    1630:	0d 92       	st	X+, r0
    1632:	81 50       	subi	r24, 0x01	; 1
    1634:	e1 f7       	brne	.-8      	; 0x162e <doBroadcast+0x18>
    memcpy((uint8_t *)longXmitBuffer,(uint8_t *)commandPacketBuffer,COMMAND_PACKET_SIZE);
    1636:	a0 ee       	ldi	r26, 0xE0	; 224
    1638:	b9 e2       	ldi	r27, 0x29	; 41
    163a:	f8 01       	movw	r30, r16
    163c:	87 e0       	ldi	r24, 0x07	; 7
    163e:	01 90       	ld	r0, Z+
    1640:	0d 92       	st	X+, r0
    1642:	81 50       	subi	r24, 0x01	; 1
    1644:	e1 f7       	brne	.-8      	; 0x163e <doBroadcast+0x28>

    shortXmitBuffer[DESTINATION_HEADER_OFFSET] = 0xF0;
    1646:	80 ef       	ldi	r24, 0xF0	; 240
    1648:	80 93 e7 29 	sts	0x29E7, r24
    //Now fix the checksum
    shortXmitBuffer[CHECKSUM_OFFSET] += 0x0F;
    164c:	80 91 ed 29 	lds	r24, 0x29ED
    1650:	81 5f       	subi	r24, 0xF1	; 241
    1652:	80 93 ed 29 	sts	0x29ED, r24

    longXmitBuffer[DESTINATION_HEADER_OFFSET] = 0xF1;
    1656:	81 ef       	ldi	r24, 0xF1	; 241
    1658:	80 93 e0 29 	sts	0x29E0, r24
    //Now fix the checksum
    longXmitBuffer[CHECKSUM_OFFSET] += 0x0E;
    165c:	80 91 e6 29 	lds	r24, 0x29E6
    1660:	82 5f       	subi	r24, 0xF2	; 242
    1662:	80 93 e6 29 	sts	0x29E6, r24

    //Now send down finger chains
    respondingDevicesBitfield = 0x0000;
    1666:	10 92 de 29 	sts	0x29DE, r1
    166a:	10 92 df 29 	sts	0x29DF, r1
    166e:	a5 e3       	ldi	r26, 0x35	; 53
    1670:	b0 e2       	ldi	r27, 0x20	; 32
    1672:	c1 e4       	ldi	r28, 0x41	; 65
    1674:	d0 e2       	ldi	r29, 0x20	; 32
    1676:	81 e1       	ldi	r24, 0x11	; 17
    1678:	90 e2       	ldi	r25, 0x20	; 32
        *(allFirstSlaveSizes[i]) = 0;
        if(allSecondSlaveSizes[i] != NULL)
        {
            *(allSecondSlaveSizes[i]) = 0;
        }
        allUSARTS[i]->STATUS = USART_TXCIF_bm;
    167a:	20 e4       	ldi	r18, 0x40	; 64
    respondingDevicesBitfield = 0x0000;

    //Zero out the various flags
    for(int i=0;i<NUMCHAINS;i++)
    {
        *(allFirstSlaveSizes[i]) = 0;
    167c:	ed 91       	ld	r30, X+
    167e:	fd 91       	ld	r31, X+
    1680:	10 82       	st	Z, r1
        if(allSecondSlaveSizes[i] != NULL)
    1682:	e9 91       	ld	r30, Y+
    1684:	f9 91       	ld	r31, Y+
    1686:	30 97       	sbiw	r30, 0x00	; 0
    1688:	09 f0       	breq	.+2      	; 0x168c <doBroadcast+0x76>
        {
            *(allSecondSlaveSizes[i]) = 0;
    168a:	10 82       	st	Z, r1
        }
        allUSARTS[i]->STATUS = USART_TXCIF_bm;
    168c:	fc 01       	movw	r30, r24
    168e:	41 91       	ld	r20, Z+
    1690:	51 91       	ld	r21, Z+
    1692:	cf 01       	movw	r24, r30
    1694:	fa 01       	movw	r30, r20
    1696:	21 83       	std	Z+1, r18	; 0x01

    //Now send down finger chains
    respondingDevicesBitfield = 0x0000;

    //Zero out the various flags
    for(int i=0;i<NUMCHAINS;i++)
    1698:	f0 e2       	ldi	r31, 0x20	; 32
    169a:	a1 34       	cpi	r26, 0x41	; 65
    169c:	bf 07       	cpc	r27, r31
    169e:	71 f7       	brne	.-36     	; 0x167c <doBroadcast+0x66>
    }

#define NOT_PARALLEL 1
#ifdef NOT_PARALLEL
    // fire off all four DMA channels
    if (chainMask & TACTILE_CHAINMASK)
    16a0:	80 91 00 20 	lds	r24, 0x2000
    16a4:	80 ff       	sbrs	r24, 0
    16a6:	0b c0       	rjmp	.+22     	; 0x16be <doBroadcast+0xa8>
    {
        startChain(0,0,(uint8_t *)shortXmitBuffer); //TACT 0
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	47 ee       	ldi	r20, 0xE7	; 231
    16ae:	59 e2       	ldi	r21, 0x29	; 41
    16b0:	0e 94 62 08 	call	0x10c4	; 0x10c4 <startChain>
        while(0==tendDMAchain(0));
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	0e 94 be 09 	call	0x137c	; 0x137c <tendDMAchain>
    16ba:	88 23       	and	r24, r24
    16bc:	d9 f3       	breq	.-10     	; 0x16b4 <doBroadcast+0x9e>
    }
    if (chainMask & FINGER_1_CHAINMASK)
    16be:	80 91 00 20 	lds	r24, 0x2000
    16c2:	81 ff       	sbrs	r24, 1
    16c4:	0b c0       	rjmp	.+22     	; 0x16dc <doBroadcast+0xc6>
    {
        startChain(1,1,(uint8_t *)longXmitBuffer); //DIST1 1
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	61 e0       	ldi	r22, 0x01	; 1
    16ca:	40 ee       	ldi	r20, 0xE0	; 224
    16cc:	59 e2       	ldi	r21, 0x29	; 41
    16ce:	0e 94 62 08 	call	0x10c4	; 0x10c4 <startChain>
        while(0==tendDMAchain(1));
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	0e 94 be 09 	call	0x137c	; 0x137c <tendDMAchain>
    16d8:	88 23       	and	r24, r24
    16da:	d9 f3       	breq	.-10     	; 0x16d2 <doBroadcast+0xbc>
    }
    if (chainMask & FINGER_2_CHAINMASK)
    16dc:	80 91 00 20 	lds	r24, 0x2000
    16e0:	82 ff       	sbrs	r24, 2
    16e2:	0b c0       	rjmp	.+22     	; 0x16fa <doBroadcast+0xe4>
    {
        startChain(2,2,(uint8_t *)longXmitBuffer); //DIST2 2
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	40 ee       	ldi	r20, 0xE0	; 224
    16ea:	59 e2       	ldi	r21, 0x29	; 41
    16ec:	0e 94 62 08 	call	0x10c4	; 0x10c4 <startChain>
        while(0==tendDMAchain(2));
    16f0:	82 e0       	ldi	r24, 0x02	; 2
    16f2:	0e 94 be 09 	call	0x137c	; 0x137c <tendDMAchain>
    16f6:	88 23       	and	r24, r24
    16f8:	d9 f3       	breq	.-10     	; 0x16f0 <doBroadcast+0xda>
    }
    if (chainMask & FINGER_3_CHAINMASK)
    16fa:	80 91 00 20 	lds	r24, 0x2000
    16fe:	83 ff       	sbrs	r24, 3
    1700:	0b c0       	rjmp	.+22     	; 0x1718 <doBroadcast+0x102>
    {
        startChain(3,3,(uint8_t *)longXmitBuffer); //DIST3 3
    1702:	83 e0       	ldi	r24, 0x03	; 3
    1704:	63 e0       	ldi	r22, 0x03	; 3
    1706:	40 ee       	ldi	r20, 0xE0	; 224
    1708:	59 e2       	ldi	r21, 0x29	; 41
    170a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <startChain>
        while(0==tendDMAchain(3));
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	0e 94 be 09 	call	0x137c	; 0x137c <tendDMAchain>
    1714:	88 23       	and	r24, r24
    1716:	d9 f3       	breq	.-10     	; 0x170e <doBroadcast+0xf8>
                    chainsDone |= (1<<i);
    } // block until all four DMAs are done
#endif

#ifdef NOT_PARALLEL
    if (chainMask & MOTORS_1_2_CHAINMASK)
    1718:	80 91 00 20 	lds	r24, 0x2000
    171c:	84 ff       	sbrs	r24, 4
    171e:	2b c0       	rjmp	.+86     	; 0x1776 <doBroadcast+0x160>
    {
        startMtrChain(4);
    1720:	84 e0       	ldi	r24, 0x04	; 4
    1722:	0e 94 ee 08 	call	0x11dc	; 0x11dc <startMtrChain>
        for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
        {
            while(!(MTR1_USART.STATUS & USART_DREIF_bm));
    172a:	20 91 a1 0a 	lds	r18, 0x0AA1
    172e:	25 ff       	sbrs	r18, 5
    1730:	fc cf       	rjmp	.-8      	; 0x172a <doBroadcast+0x114>
            MTR1_USART.DATA = longXmitBuffer[i];
    1732:	fc 01       	movw	r30, r24
    1734:	e0 52       	subi	r30, 0x20	; 32
    1736:	f6 4d       	sbci	r31, 0xD6	; 214
    1738:	20 81       	ld	r18, Z
    173a:	20 93 a0 0a 	sts	0x0AA0, r18

#ifdef NOT_PARALLEL
    if (chainMask & MOTORS_1_2_CHAINMASK)
    {
        startMtrChain(4);
        for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    173e:	01 96       	adiw	r24, 0x01	; 1
    1740:	87 30       	cpi	r24, 0x07	; 7
    1742:	91 05       	cpc	r25, r1
    1744:	91 f7       	brne	.-28     	; 0x172a <doBroadcast+0x114>
        {
            while(!(MTR1_USART.STATUS & USART_DREIF_bm));
            MTR1_USART.DATA = longXmitBuffer[i];
        }
        while(!(MTR1_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
    1746:	e0 ea       	ldi	r30, 0xA0	; 160
    1748:	fa e0       	ldi	r31, 0x0A	; 10
    174a:	80 91 a1 0a 	lds	r24, 0x0AA1
    174e:	85 ff       	sbrs	r24, 5
    1750:	fa cf       	rjmp	.-12     	; 0x1746 <doBroadcast+0x130>
        chainsDone = MTR1_USART.DATA; // dummy read to clear the RXCIF bit
    1752:	80 91 a0 0a 	lds	r24, 0x0AA0
        MTR1_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
    1756:	80 e8       	ldi	r24, 0x80	; 128
    1758:	81 83       	std	Z+1, r24	; 0x01
        //MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
        MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
    175a:	80 e1       	ldi	r24, 0x10	; 16
    175c:	83 83       	std	Z+3, r24	; 0x03
        cli();
    175e:	f8 94       	cli
        mtRXbyte[0]=0;       // get ready for start of packet
    1760:	10 92 70 20 	sts	0x2070, r1
        dmaTimeoutCounter[4]=DOWNSTREAM_TIMEOUT_4KHZ;
    1764:	85 e0       	ldi	r24, 0x05	; 5
    1766:	80 93 6e 20 	sts	0x206E, r24
        sei();
    176a:	78 94       	sei
        while(0==tendMTRchain(4));
    176c:	84 e0       	ldi	r24, 0x04	; 4
    176e:	0e 94 86 0a 	call	0x150c	; 0x150c <tendMTRchain>
    1772:	88 23       	and	r24, r24
    1774:	d9 f3       	breq	.-10     	; 0x176c <doBroadcast+0x156>
    }
    
    if (chainMask & MOTORS_3_4_CHAINMASK)
    1776:	80 91 00 20 	lds	r24, 0x2000
    177a:	85 ff       	sbrs	r24, 5
    177c:	2b c0       	rjmp	.+86     	; 0x17d4 <doBroadcast+0x1be>
    {
        startMtrChain(5);
    177e:	85 e0       	ldi	r24, 0x05	; 5
    1780:	0e 94 ee 08 	call	0x11dc	; 0x11dc <startMtrChain>
        for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
        {
            while(!(MTR2_USART.STATUS & USART_DREIF_bm));
    1788:	20 91 b1 0a 	lds	r18, 0x0AB1
    178c:	25 ff       	sbrs	r18, 5
    178e:	fc cf       	rjmp	.-8      	; 0x1788 <doBroadcast+0x172>
            MTR2_USART.DATA = longXmitBuffer[i];
    1790:	fc 01       	movw	r30, r24
    1792:	e0 52       	subi	r30, 0x20	; 32
    1794:	f6 4d       	sbci	r31, 0xD6	; 214
    1796:	20 81       	ld	r18, Z
    1798:	20 93 b0 0a 	sts	0x0AB0, r18
    }
    
    if (chainMask & MOTORS_3_4_CHAINMASK)
    {
        startMtrChain(5);
        for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	87 30       	cpi	r24, 0x07	; 7
    17a0:	91 05       	cpc	r25, r1
    17a2:	91 f7       	brne	.-28     	; 0x1788 <doBroadcast+0x172>
        {
            while(!(MTR2_USART.STATUS & USART_DREIF_bm));
            MTR2_USART.DATA = longXmitBuffer[i];
        }
        while(!(MTR2_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
    17a4:	e0 eb       	ldi	r30, 0xB0	; 176
    17a6:	fa e0       	ldi	r31, 0x0A	; 10
    17a8:	80 91 b1 0a 	lds	r24, 0x0AB1
    17ac:	85 ff       	sbrs	r24, 5
    17ae:	fa cf       	rjmp	.-12     	; 0x17a4 <doBroadcast+0x18e>
        chainsDone = MTR2_USART.DATA; // dummy read to clear the RXCIF bit
    17b0:	80 91 b0 0a 	lds	r24, 0x0AB0
        MTR2_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
    17b4:	80 e8       	ldi	r24, 0x80	; 128
    17b6:	81 83       	std	Z+1, r24	; 0x01
        //MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
        MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
    17b8:	80 e1       	ldi	r24, 0x10	; 16
    17ba:	83 83       	std	Z+3, r24	; 0x03
        cli();
    17bc:	f8 94       	cli
        mtRXbyte[1]=0;       // get ready for start of packet
    17be:	10 92 71 20 	sts	0x2071, r1
        dmaTimeoutCounter[5]=DOWNSTREAM_TIMEOUT_4KHZ;
    17c2:	85 e0       	ldi	r24, 0x05	; 5
    17c4:	80 93 6f 20 	sts	0x206F, r24
        sei();
    17c8:	78 94       	sei
        while(0==tendMTRchain(5));
    17ca:	85 e0       	ldi	r24, 0x05	; 5
    17cc:	0e 94 86 0a 	call	0x150c	; 0x150c <tendMTRchain>
    17d0:	88 23       	and	r24, r24
    17d2:	d9 f3       	breq	.-10     	; 0x17ca <doBroadcast+0x1b4>
                    chainsDone |= (1<<i);
    }
#endif

    //collect the data from the palm sensor
    palm_packet_size = processCommand((uint8_t *)commandPacketBuffer,(uint8_t *)palm_packet);
    17d4:	c8 01       	movw	r24, r16
    17d6:	63 e7       	ldi	r22, 0x73	; 115
    17d8:	70 e2       	ldi	r23, 0x20	; 32
    17da:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <processCommand>
    17de:	80 93 72 20 	sts	0x2072, r24

    //Now compute checksums and collect input

    packetSize = 0;
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    17e2:	40 91 72 20 	lds	r20, 0x2072
    17e6:	c7 01       	movw	r24, r14
    17e8:	05 96       	adiw	r24, 0x05	; 5
    17ea:	63 e7       	ldi	r22, 0x73	; 115
    17ec:	70 e2       	ldi	r23, 0x20	; 32
    17ee:	21 e0       	ldi	r18, 0x01	; 1
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    17f6:	c8 2f       	mov	r28, r24
    17f8:	d0 e0       	ldi	r29, 0x00	; 0
                              (uint8_t *)palm_packet, palm_packet_size, RESPONDING_DEVICES_PALM_BITMASK);

    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    17fa:	40 91 f1 25 	lds	r20, 0x25F1
    17fe:	ce 01       	movw	r24, r28
    1800:	05 96       	adiw	r24, 0x05	; 5
    1802:	8e 0d       	add	r24, r14
    1804:	9f 1d       	adc	r25, r15
    1806:	62 ef       	ldi	r22, 0xF2	; 242
    1808:	75 e2       	ldi	r23, 0x25	; 37
    180a:	22 e0       	ldi	r18, 0x02	; 2
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    1812:	c8 0f       	add	r28, r24
    1814:	d1 1d       	adc	r29, r1
                              (uint8_t *)prox1_packet, prox1_packet_size, RESPONDING_DEVICES_FIRST_PROX_BITMASK);
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    1816:	40 91 96 23 	lds	r20, 0x2396
    181a:	ce 01       	movw	r24, r28
    181c:	05 96       	adiw	r24, 0x05	; 5
    181e:	8e 0d       	add	r24, r14
    1820:	9f 1d       	adc	r25, r15
    1822:	67 e9       	ldi	r22, 0x97	; 151
    1824:	73 e2       	ldi	r23, 0x23	; 35
    1826:	24 e0       	ldi	r18, 0x04	; 4
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    182e:	c8 0f       	add	r28, r24
    1830:	d1 1d       	adc	r29, r1
                              (uint8_t *)distal1_packet, distal1_packet_size, RESPONDING_DEVICES_FIRST_DIST_BITMASK);
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    1832:	40 91 28 25 	lds	r20, 0x2528
    1836:	ce 01       	movw	r24, r28
    1838:	05 96       	adiw	r24, 0x05	; 5
    183a:	8e 0d       	add	r24, r14
    183c:	9f 1d       	adc	r25, r15
    183e:	69 e2       	ldi	r22, 0x29	; 41
    1840:	75 e2       	ldi	r23, 0x25	; 37
    1842:	28 e0       	ldi	r18, 0x08	; 8
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    184a:	c8 0f       	add	r28, r24
    184c:	d1 1d       	adc	r29, r1
                              (uint8_t *)prox2_packet, prox2_packet_size, RESPONDING_DEVICES_SECOND_PROX_BITMASK);
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    184e:	40 91 cd 22 	lds	r20, 0x22CD
    1852:	ce 01       	movw	r24, r28
    1854:	05 96       	adiw	r24, 0x05	; 5
    1856:	8e 0d       	add	r24, r14
    1858:	9f 1d       	adc	r25, r15
    185a:	6e ec       	ldi	r22, 0xCE	; 206
    185c:	72 e2       	ldi	r23, 0x22	; 34
    185e:	20 e1       	ldi	r18, 0x10	; 16
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    1866:	c8 0f       	add	r28, r24
    1868:	d1 1d       	adc	r29, r1
                              (uint8_t *)distal2_packet, distal2_packet_size, RESPONDING_DEVICES_SECOND_DIST_BITMASK);
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    186a:	40 91 5f 24 	lds	r20, 0x245F
    186e:	ce 01       	movw	r24, r28
    1870:	05 96       	adiw	r24, 0x05	; 5
    1872:	8e 0d       	add	r24, r14
    1874:	9f 1d       	adc	r25, r15
    1876:	60 e6       	ldi	r22, 0x60	; 96
    1878:	74 e2       	ldi	r23, 0x24	; 36
    187a:	20 e2       	ldi	r18, 0x20	; 32
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    1882:	c8 0f       	add	r28, r24
    1884:	d1 1d       	adc	r29, r1
                              (uint8_t *)prox3_packet, prox3_packet_size, RESPONDING_DEVICES_THIRD_PROX_BITMASK);
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    1886:	40 91 04 22 	lds	r20, 0x2204
    188a:	ce 01       	movw	r24, r28
    188c:	05 96       	adiw	r24, 0x05	; 5
    188e:	8e 0d       	add	r24, r14
    1890:	9f 1d       	adc	r25, r15
    1892:	65 e0       	ldi	r22, 0x05	; 5
    1894:	72 e2       	ldi	r23, 0x22	; 34
    1896:	20 e4       	ldi	r18, 0x40	; 64
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    189e:	c8 0f       	add	r28, r24
    18a0:	d1 1d       	adc	r29, r1
                              (uint8_t *)distal3_packet, distal3_packet_size, RESPONDING_DEVICES_THIRD_DIST_BITMASK);

    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    18a2:	40 91 15 29 	lds	r20, 0x2915
    18a6:	ce 01       	movw	r24, r28
    18a8:	05 96       	adiw	r24, 0x05	; 5
    18aa:	8e 0d       	add	r24, r14
    18ac:	9f 1d       	adc	r25, r15
    18ae:	66 e1       	ldi	r22, 0x16	; 22
    18b0:	79 e2       	ldi	r23, 0x29	; 41
    18b2:	20 e8       	ldi	r18, 0x80	; 128
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    18ba:	c8 0f       	add	r28, r24
    18bc:	d1 1d       	adc	r29, r1
                              (uint8_t *)mtr1_packet, mtr1_packet_size, RESPONDING_DEVICES_FIRST_MOTOR1_BITMASK);
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    18be:	40 91 4c 28 	lds	r20, 0x284C
    18c2:	ce 01       	movw	r24, r28
    18c4:	05 96       	adiw	r24, 0x05	; 5
    18c6:	8e 0d       	add	r24, r14
    18c8:	9f 1d       	adc	r25, r15
    18ca:	6d e4       	ldi	r22, 0x4D	; 77
    18cc:	78 e2       	ldi	r23, 0x28	; 40
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	31 e0       	ldi	r19, 0x01	; 1
    18d2:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    18d6:	c8 0f       	add	r28, r24
    18d8:	d1 1d       	adc	r29, r1
                              (uint8_t *)mtr2_packet, mtr2_packet_size, RESPONDING_DEVICES_FIRST_MOTOR2_BITMASK);
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    18da:	40 91 83 27 	lds	r20, 0x2783
    18de:	ce 01       	movw	r24, r28
    18e0:	05 96       	adiw	r24, 0x05	; 5
    18e2:	8e 0d       	add	r24, r14
    18e4:	9f 1d       	adc	r25, r15
    18e6:	64 e8       	ldi	r22, 0x84	; 132
    18e8:	77 e2       	ldi	r23, 0x27	; 39
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	32 e0       	ldi	r19, 0x02	; 2
    18ee:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    18f2:	c8 0f       	add	r28, r24
    18f4:	d1 1d       	adc	r29, r1
                              (uint8_t *)mtr3_packet, mtr3_packet_size, RESPONDING_DEVICES_SECOND_MOTOR1_BITMASK);
    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    18f6:	40 91 ba 26 	lds	r20, 0x26BA
    18fa:	ce 01       	movw	r24, r28
    18fc:	05 96       	adiw	r24, 0x05	; 5
    18fe:	8e 0d       	add	r24, r14
    1900:	9f 1d       	adc	r25, r15
    1902:	6b eb       	ldi	r22, 0xBB	; 187
    1904:	76 e2       	ldi	r23, 0x26	; 38
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	34 e0       	ldi	r19, 0x04	; 4
    190a:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    190e:	c8 0f       	add	r28, r24
    1910:	d1 1d       	adc	r29, r1
                              (uint8_t *)mtr4_packet, mtr4_packet_size, RESPONDING_DEVICES_SECOND_MOTOR2_BITMASK);

    packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetSize], 
    1912:	40 91 3b 21 	lds	r20, 0x213B
    1916:	ce 01       	movw	r24, r28
    1918:	05 96       	adiw	r24, 0x05	; 5
    191a:	8e 0d       	add	r24, r14
    191c:	9f 1d       	adc	r25, r15
    191e:	6c e3       	ldi	r22, 0x3C	; 60
    1920:	71 e2       	ldi	r23, 0x21	; 33
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	38 e0       	ldi	r19, 0x08	; 8
    1926:	0e 94 0b 08 	call	0x1016	; 0x1016 <stuffOutput>
    192a:	c8 0f       	add	r28, r24
    192c:	d1 1d       	adc	r29, r1
                              (uint8_t *)tactile_packet, tactile_packet_size, RESPONDING_DEVICES_TACTILE_BITMASK);

    //This area is where the packetSize is widened to 16 bits and other parts are pushed down appropriately.
    //Packetsize only contains payload bytes now.
    // plus 2 for the responding devices, plus 1 for the reflected opcode, plus 1 for the checksum
    packetSize += 4;
    192e:	ce 01       	movw	r24, r28
    1930:	04 96       	adiw	r24, 0x04	; 4

    memcpy((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PACKETSIZE_LSB],&packetSize,2);
    1932:	f7 01       	movw	r30, r14
    1934:	80 83       	st	Z, r24
    1936:	91 83       	std	Z+1, r25	; 0x01

    activeUpstreamBuffer[RESPONSE_BROADCAST_REFLECTEDOPCODE] = commandPacketBuffer[COMMAND_OFFSET];
    1938:	f8 01       	movw	r30, r16
    193a:	81 81       	ldd	r24, Z+1	; 0x01
    193c:	f7 01       	movw	r30, r14
    193e:	82 83       	std	Z+2, r24	; 0x02
    memcpy((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_RESPONDINGDEVICES],(uint8_t *)&respondingDevicesBitfield,2);
    1940:	80 91 de 29 	lds	r24, 0x29DE
    1944:	90 91 df 29 	lds	r25, 0x29DF
    1948:	83 83       	std	Z+3, r24	; 0x03
    194a:	94 83       	std	Z+4, r25	; 0x04

    //Plus 1 required here to cover the two bytes of packetSize field
    activeUpstreamBuffer[packetSize+1] = computeChecksum((uint8_t *)activeUpstreamBuffer,packetSize+1);
    194c:	be 01       	movw	r22, r28
    194e:	6b 5f       	subi	r22, 0xFB	; 251
    1950:	7f 4f       	sbci	r23, 0xFF	; 255
    1952:	87 01       	movw	r16, r14
    1954:	06 0f       	add	r16, r22
    1956:	17 1f       	adc	r17, r23
    1958:	c7 01       	movw	r24, r14
    195a:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    195e:	f8 01       	movw	r30, r16
    1960:	80 83       	st	Z, r24

    upstreamTX(activeUpstreamBuffer, packetSize+2); //this blocks till TX is complete
    1962:	be 01       	movw	r22, r28
    1964:	6a 5f       	subi	r22, 0xFA	; 250
    1966:	7f 4f       	sbci	r23, 0xFF	; 255
    1968:	c7 01       	movw	r24, r14
    196a:	0e 94 40 03 	call	0x680	; 0x680 <upstreamTX>

    return;
}
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	1f 91       	pop	r17
    1974:	0f 91       	pop	r16
    1976:	ff 90       	pop	r15
    1978:	ef 90       	pop	r14
    197a:	08 95       	ret

0000197c <doFreerunTask>:
 * This is called from main() whenever the freerun timer indicates that
 * another broadcast should be performed.  It synthesizes a DATA_COLLECTION
 * command and passes it to the broadcast routine for delivery downstream
 ************************************************************************/
void doFreerunTask(void)
{
    197c:	cf 93       	push	r28
    197e:	df 93       	push	r29
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
    1984:	27 97       	sbiw	r28, 0x07	; 7
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	de bf       	out	0x3e, r29	; 62
    uint8_t smallCommandPacketBuffer[COMMAND_PACKET_SIZE];

    smallCommandPacketBuffer[DESTINATION_HEADER_OFFSET] = DESTINATION_BROADCAST;
    198a:	8f ef       	ldi	r24, 0xFF	; 255
    198c:	89 83       	std	Y+1, r24	; 0x01
    smallCommandPacketBuffer[COMMAND_OFFSET] = DATA_COLLECTION_OPCODE;
    198e:	1a 82       	std	Y+2, r1	; 0x02
    memcpy(&smallCommandPacketBuffer[PAYLOAD_OFFSET],&sampleArgument,2);
    1990:	80 91 01 20 	lds	r24, 0x2001
    1994:	90 91 02 20 	lds	r25, 0x2002
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	9c 83       	std	Y+4, r25	; 0x04
    smallCommandPacketBuffer[CHECKSUM_OFFSET] = computeChecksum(smallCommandPacketBuffer,6);
    199c:	ce 01       	movw	r24, r28
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	66 e0       	ldi	r22, 0x06	; 6
    19a2:	70 e0       	ldi	r23, 0x00	; 0
    19a4:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    19a8:	8f 83       	std	Y+7, r24	; 0x07

    if(activePingPong)
    19aa:	80 91 62 20 	lds	r24, 0x2062
    19ae:	88 23       	and	r24, r24
    19b0:	51 f0       	breq	.+20     	; 0x19c6 <doFreerunTask+0x4a>
    {
        doBroadcast(responseToOveroB,smallCommandPacketBuffer);
    19b2:	82 e5       	ldi	r24, 0x52	; 82
    19b4:	9c e2       	ldi	r25, 0x2C	; 44
    19b6:	be 01       	movw	r22, r28
    19b8:	6f 5f       	subi	r22, 0xFF	; 255
    19ba:	7f 4f       	sbci	r23, 0xFF	; 255
    19bc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <doBroadcast>
        activePingPong = 0;
    19c0:	10 92 62 20 	sts	0x2062, r1
    19c4:	0a c0       	rjmp	.+20     	; 0x19da <doFreerunTask+0x5e>
    }
    else
    {
        doBroadcast(responseToOveroA,smallCommandPacketBuffer);
    19c6:	8f ea       	ldi	r24, 0xAF	; 175
    19c8:	9e e2       	ldi	r25, 0x2E	; 46
    19ca:	be 01       	movw	r22, r28
    19cc:	6f 5f       	subi	r22, 0xFF	; 255
    19ce:	7f 4f       	sbci	r23, 0xFF	; 255
    19d0:	0e 94 0b 0b 	call	0x1616	; 0x1616 <doBroadcast>
        activePingPong = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 62 20 	sts	0x2062, r24
    }
    return;
}
    19da:	27 96       	adiw	r28, 0x07	; 7
    19dc:	cd bf       	out	0x3d, r28	; 61
    19de:	de bf       	out	0x3e, r29	; 62
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	08 95       	ret

000019e6 <doRouterTask>:
{
    uint8_t packetSize;
    uint8_t dummy;

    //First clear the commandReady flag that got us here
    commandReady = 0;
    19e6:	10 92 61 20 	sts	0x2061, r1

    //A data packet has arrived from upstream.  Validate it
    if(computeChecksum((uint8_t *)commandPacketBuffer,COMMAND_PACKET_SIZE) != 0x00)
    19ea:	8e ee       	ldi	r24, 0xEE	; 238
    19ec:	99 e2       	ldi	r25, 0x29	; 41
    19ee:	67 e0       	ldi	r22, 0x07	; 7
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	11 f1       	breq	.+68     	; 0x1a3e <doRouterTask+0x58>
    {
        //Invalid checksum
        RxCheckSumErrCnt[6]++;
    19fa:	80 91 6a 31 	lds	r24, 0x316A
    19fe:	90 91 6b 31 	lds	r25, 0x316B
    1a02:	01 96       	adiw	r24, 0x01	; 1
    1a04:	80 93 6a 31 	sts	0x316A, r24
    1a08:	90 93 6b 31 	sts	0x316B, r25
        responseToOveroC[0] = 3; //Packet size
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	80 93 f5 29 	sts	0x29F5, r24
        responseToOveroC[1] = 3; //Packet size MSB
    1a12:	80 93 f6 29 	sts	0x29F6, r24
        responseToOveroC[2] = commandPacketBuffer[COMMAND_OFFSET]; //Reflected command byte
    1a16:	80 91 ef 29 	lds	r24, 0x29EF
    1a1a:	80 93 f7 29 	sts	0x29F7, r24
        responseToOveroC[3] = CHECKSUM_ERROR; //Checksum error
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	80 93 f8 29 	sts	0x29F8, r24
        responseToOveroC[4] = computeChecksum((uint8_t *)responseToOveroC,4); //checksum
    1a24:	85 ef       	ldi	r24, 0xF5	; 245
    1a26:	99 e2       	ldi	r25, 0x29	; 41
    1a28:	64 e0       	ldi	r22, 0x04	; 4
    1a2a:	70 e0       	ldi	r23, 0x00	; 0
    1a2c:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    1a30:	80 93 f9 29 	sts	0x29F9, r24
        upstreamTX(responseToOveroC, 5);
    1a34:	85 ef       	ldi	r24, 0xF5	; 245
    1a36:	99 e2       	ldi	r25, 0x29	; 41
    1a38:	65 e0       	ldi	r22, 0x05	; 5
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	3b c0       	rjmp	.+118    	; 0x1ab4 <doRouterTask+0xce>
        return;
    }

    //Command is valid.  Identify the destination
    if(commandPacketBuffer[DESTINATION_HEADER_OFFSET] == DESTINATION_BROADCAST)
    1a3e:	80 91 ee 29 	lds	r24, 0x29EE
    1a42:	8f 3f       	cpi	r24, 0xFF	; 255
    1a44:	39 f4       	brne	.+14     	; 0x1a54 <doRouterTask+0x6e>
    {
        doBroadcast(responseToOveroC,commandPacketBuffer);
    1a46:	85 ef       	ldi	r24, 0xF5	; 245
    1a48:	99 e2       	ldi	r25, 0x29	; 41
    1a4a:	6e ee       	ldi	r22, 0xEE	; 238
    1a4c:	79 e2       	ldi	r23, 0x29	; 41
    1a4e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <doBroadcast>
        return;
    1a52:	08 95       	ret
    }

    // set up the receive timeout
    cli();
    1a54:	f8 94       	cli
    upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
    1a56:	80 e2       	ldi	r24, 0x20	; 32
    1a58:	80 93 69 20 	sts	0x2069, r24
    sei();
    1a5c:	78 94       	sei

    switch(commandPacketBuffer[DESTINATION_HEADER_OFFSET] & CHAINADDRESS_BITMASK)
    1a5e:	80 91 ee 29 	lds	r24, 0x29EE
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	80 7f       	andi	r24, 0xF0	; 240
    1a66:	90 70       	andi	r25, 0x00	; 0
    1a68:	80 33       	cpi	r24, 0x30	; 48
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <doRouterTask+0x8a>
    1a6e:	46 c0       	rjmp	.+140    	; 0x1afc <doRouterTask+0x116>
    1a70:	81 33       	cpi	r24, 0x31	; 49
    1a72:	91 05       	cpc	r25, r1
    1a74:	4c f4       	brge	.+18     	; 0x1a88 <doRouterTask+0xa2>
    1a76:	80 31       	cpi	r24, 0x10	; 16
    1a78:	91 05       	cpc	r25, r1
    1a7a:	51 f1       	breq	.+84     	; 0x1ad0 <doRouterTask+0xea>
    1a7c:	80 32       	cpi	r24, 0x20	; 32
    1a7e:	91 05       	cpc	r25, r1
    1a80:	91 f1       	breq	.+100    	; 0x1ae6 <doRouterTask+0x100>
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	69 f0       	breq	.+26     	; 0x1aa0 <doRouterTask+0xba>
    1a86:	08 95       	ret
    1a88:	80 35       	cpi	r24, 0x50	; 80
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <doRouterTask+0xaa>
    1a8e:	69 c0       	rjmp	.+210    	; 0x1b62 <doRouterTask+0x17c>
    1a90:	80 36       	cpi	r24, 0x60	; 96
    1a92:	91 05       	cpc	r25, r1
    1a94:	91 f0       	breq	.+36     	; 0x1aba <doRouterTask+0xd4>
    1a96:	80 34       	cpi	r24, 0x40	; 64
    1a98:	91 05       	cpc	r25, r1
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <doRouterTask+0xb8>
    1a9c:	85 c0       	rjmp	.+266    	; 0x1ba8 <doRouterTask+0x1c2>
    1a9e:	3d c0       	rjmp	.+122    	; 0x1b1a <doRouterTask+0x134>
    {
        case PALM_CHAINADDRESS:
            packetSize = processCommand((uint8_t *)commandPacketBuffer,(uint8_t *)responseToOveroC);
    1aa0:	8e ee       	ldi	r24, 0xEE	; 238
    1aa2:	99 e2       	ldi	r25, 0x29	; 41
    1aa4:	65 ef       	ldi	r22, 0xF5	; 245
    1aa6:	79 e2       	ldi	r23, 0x29	; 41
    1aa8:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <processCommand>
    1aac:	68 2f       	mov	r22, r24
            upstreamTX(responseToOveroC, packetSize);
    1aae:	85 ef       	ldi	r24, 0xF5	; 245
    1ab0:	99 e2       	ldi	r25, 0x29	; 41
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	0e 94 40 03 	call	0x680	; 0x680 <upstreamTX>
            return;
    1ab8:	08 95       	ret
        case TACTILE_CHAINADDRESS:
            startChain(TACT,1,(uint8_t *)commandPacketBuffer);
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	61 e0       	ldi	r22, 0x01	; 1
    1abe:	4e ee       	ldi	r20, 0xEE	; 238
    1ac0:	59 e2       	ldi	r21, 0x29	; 41
    1ac2:	0e 94 62 08 	call	0x10c4	; 0x10c4 <startChain>

static void waitDMAChain(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // The Transmit has been initated before this function was called
    // when the transmit DMA is done, downstreamDoneFlag is set
    while( (targetChannelConfig->downstreamDoneFlag == 0) );
    1ac6:	80 91 20 31 	lds	r24, 0x3120
    1aca:	88 23       	and	r24, r24
    1acc:	e1 f3       	breq	.-8      	; 0x1ac6 <doRouterTask+0xe0>
    1ace:	20 c0       	rjmp	.+64     	; 0x1b10 <doRouterTask+0x12a>
            startChain(TACT,1,(uint8_t *)commandPacketBuffer);
            waitDMAChain(&DownStreamConfig[1]);
            simplePassthrough(&DownStreamConfig[1]);
            break;
        case FINGER1_CHAINADDRESS:
            startChain(PROX1,1,(uint8_t *)commandPacketBuffer);
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	61 e0       	ldi	r22, 0x01	; 1
    1ad4:	4e ee       	ldi	r20, 0xEE	; 238
    1ad6:	59 e2       	ldi	r21, 0x29	; 41
    1ad8:	0e 94 62 08 	call	0x10c4	; 0x10c4 <startChain>

static void waitDMAChain(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // The Transmit has been initated before this function was called
    // when the transmit DMA is done, downstreamDoneFlag is set
    while( (targetChannelConfig->downstreamDoneFlag == 0) );
    1adc:	80 91 20 31 	lds	r24, 0x3120
    1ae0:	88 23       	and	r24, r24
    1ae2:	e1 f3       	breq	.-8      	; 0x1adc <doRouterTask+0xf6>
    1ae4:	15 c0       	rjmp	.+42     	; 0x1b10 <doRouterTask+0x12a>
            startChain(PROX1,1,(uint8_t *)commandPacketBuffer);
            waitDMAChain(&DownStreamConfig[1]);
            simplePassthrough(&DownStreamConfig[1]);
            break;
        case FINGER2_CHAINADDRESS:
            startChain(PROX2,1,(uint8_t *)commandPacketBuffer);
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	4e ee       	ldi	r20, 0xEE	; 238
    1aec:	59 e2       	ldi	r21, 0x29	; 41
    1aee:	0e 94 62 08 	call	0x10c4	; 0x10c4 <startChain>

static void waitDMAChain(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // The Transmit has been initated before this function was called
    // when the transmit DMA is done, downstreamDoneFlag is set
    while( (targetChannelConfig->downstreamDoneFlag == 0) );
    1af2:	80 91 20 31 	lds	r24, 0x3120
    1af6:	88 23       	and	r24, r24
    1af8:	e1 f3       	breq	.-8      	; 0x1af2 <doRouterTask+0x10c>
    1afa:	0a c0       	rjmp	.+20     	; 0x1b10 <doRouterTask+0x12a>
            startChain(PROX2,1,(uint8_t *)commandPacketBuffer);
            waitDMAChain(&DownStreamConfig[1]);
            simplePassthrough(&DownStreamConfig[1]);
            break;
        case FINGER3_CHAINADDRESS:
            startChain(PROX3,1,(uint8_t *)commandPacketBuffer);
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	61 e0       	ldi	r22, 0x01	; 1
    1b00:	4e ee       	ldi	r20, 0xEE	; 238
    1b02:	59 e2       	ldi	r21, 0x29	; 41
    1b04:	0e 94 62 08 	call	0x10c4	; 0x10c4 <startChain>

static void waitDMAChain(CHANNEL_CONFIGURATION_t *targetChannelConfig)
{
    // The Transmit has been initated before this function was called
    // when the transmit DMA is done, downstreamDoneFlag is set
    while( (targetChannelConfig->downstreamDoneFlag == 0) );
    1b08:	80 91 20 31 	lds	r24, 0x3120
    1b0c:	88 23       	and	r24, r24
    1b0e:	e1 f3       	breq	.-8      	; 0x1b08 <doRouterTask+0x122>

    //Now the DMA is done, but the transmission is not yet done
    targetChannelConfig->downstreamDoneFlag = 0;
    1b10:	10 92 20 31 	sts	0x3120, r1
            simplePassthrough(&DownStreamConfig[1]);
            break;
        case FINGER3_CHAINADDRESS:
            startChain(PROX3,1,(uint8_t *)commandPacketBuffer);
            waitDMAChain(&DownStreamConfig[1]);
            simplePassthrough(&DownStreamConfig[1]);
    1b14:	88 e1       	ldi	r24, 0x18	; 24
    1b16:	91 e3       	ldi	r25, 0x31	; 49
    1b18:	21 c0       	rjmp	.+66     	; 0x1b5c <doRouterTask+0x176>
            break;
        case MOTOR1_CHAINADDRESS:
            //startChain(MTR1,1,(uint8_t *)commandPacketBuffer);
            startMtrChain(4);
    1b1a:	84 e0       	ldi	r24, 0x04	; 4
    1b1c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <startMtrChain>
            for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
            {
                while(!(MTR1_USART.STATUS & USART_DREIF_bm));
    1b24:	20 91 a1 0a 	lds	r18, 0x0AA1
    1b28:	25 ff       	sbrs	r18, 5
    1b2a:	fc cf       	rjmp	.-8      	; 0x1b24 <doRouterTask+0x13e>
                MTR1_USART.DATA = commandPacketBuffer[i];
    1b2c:	fc 01       	movw	r30, r24
    1b2e:	e2 51       	subi	r30, 0x12	; 18
    1b30:	f6 4d       	sbci	r31, 0xD6	; 214
    1b32:	20 81       	ld	r18, Z
    1b34:	20 93 a0 0a 	sts	0x0AA0, r18
            simplePassthrough(&DownStreamConfig[1]);
            break;
        case MOTOR1_CHAINADDRESS:
            //startChain(MTR1,1,(uint8_t *)commandPacketBuffer);
            startMtrChain(4);
            for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    1b38:	01 96       	adiw	r24, 0x01	; 1
    1b3a:	87 30       	cpi	r24, 0x07	; 7
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	91 f7       	brne	.-28     	; 0x1b24 <doRouterTask+0x13e>
            {
                while(!(MTR1_USART.STATUS & USART_DREIF_bm));
                MTR1_USART.DATA = commandPacketBuffer[i];
            }
            while(!(MTR1_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
    1b40:	e0 ea       	ldi	r30, 0xA0	; 160
    1b42:	fa e0       	ldi	r31, 0x0A	; 10
    1b44:	80 91 a1 0a 	lds	r24, 0x0AA1
    1b48:	85 ff       	sbrs	r24, 5
    1b4a:	fa cf       	rjmp	.-12     	; 0x1b40 <doRouterTask+0x15a>
            dummy = MTR1_USART.DATA; // dummy read to clear the RXCIF bit
    1b4c:	80 91 a0 0a 	lds	r24, 0x0AA0
            MTR1_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
    1b50:	80 e8       	ldi	r24, 0x80	; 128
    1b52:	81 83       	std	Z+1, r24	; 0x01
            //MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
            MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
    1b54:	80 e1       	ldi	r24, 0x10	; 16
    1b56:	83 83       	std	Z+3, r24	; 0x03
            simplePassthrough(&DownStreamConfig[4]);
    1b58:	8c e3       	ldi	r24, 0x3C	; 60
    1b5a:	91 e3       	ldi	r25, 0x31	; 49
    1b5c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <simplePassthrough>
            break;
    1b60:	08 95       	ret
        case MOTOR2_CHAINADDRESS:
            //startChain(MTR2,1,(uint8_t *)commandPacketBuffer);
            startMtrChain(5);
    1b62:	85 e0       	ldi	r24, 0x05	; 5
    1b64:	0e 94 ee 08 	call	0x11dc	; 0x11dc <startMtrChain>
            for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
            {
                while(!(MTR2_USART.STATUS & USART_DREIF_bm));
    1b6c:	20 91 b1 0a 	lds	r18, 0x0AB1
    1b70:	25 ff       	sbrs	r18, 5
    1b72:	fc cf       	rjmp	.-8      	; 0x1b6c <doRouterTask+0x186>
                MTR2_USART.DATA = commandPacketBuffer[i];
    1b74:	fc 01       	movw	r30, r24
    1b76:	e2 51       	subi	r30, 0x12	; 18
    1b78:	f6 4d       	sbci	r31, 0xD6	; 214
    1b7a:	20 81       	ld	r18, Z
    1b7c:	20 93 b0 0a 	sts	0x0AB0, r18
            simplePassthrough(&DownStreamConfig[4]);
            break;
        case MOTOR2_CHAINADDRESS:
            //startChain(MTR2,1,(uint8_t *)commandPacketBuffer);
            startMtrChain(5);
            for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	87 30       	cpi	r24, 0x07	; 7
    1b84:	91 05       	cpc	r25, r1
    1b86:	91 f7       	brne	.-28     	; 0x1b6c <doRouterTask+0x186>
            {
                while(!(MTR2_USART.STATUS & USART_DREIF_bm));
                MTR2_USART.DATA = commandPacketBuffer[i];
            }
            while(!(MTR2_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
    1b88:	e0 eb       	ldi	r30, 0xB0	; 176
    1b8a:	fa e0       	ldi	r31, 0x0A	; 10
    1b8c:	80 91 b1 0a 	lds	r24, 0x0AB1
    1b90:	85 ff       	sbrs	r24, 5
    1b92:	fa cf       	rjmp	.-12     	; 0x1b88 <doRouterTask+0x1a2>
            dummy = MTR2_USART.DATA; // dummy read to clear the RXCIF bit
    1b94:	80 91 b0 0a 	lds	r24, 0x0AB0
            MTR2_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
    1b98:	80 e8       	ldi	r24, 0x80	; 128
    1b9a:	81 83       	std	Z+1, r24	; 0x01
            //MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
            MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
    1b9c:	80 e1       	ldi	r24, 0x10	; 16
    1b9e:	83 83       	std	Z+3, r24	; 0x03
            simplePassthrough(&DownStreamConfig[5]);
    1ba0:	88 e4       	ldi	r24, 0x48	; 72
    1ba2:	91 e3       	ldi	r25, 0x31	; 49
    1ba4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <simplePassthrough>
    1ba8:	08 95       	ret

00001baa <ReadIntFromEEPROM>:
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
    //eeprom_write_dword((uint32_t *) (address*4), *(value));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	0f 92       	push	r0
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
    1bbc:	e8 2e       	mov	r14, r24
    1bbe:	ff 24       	eor	r15, r15
    1bc0:	ee 0c       	add	r14, r14
    1bc2:	ff 1c       	adc	r15, r15
    1bc4:	ee 0c       	add	r14, r14
    1bc6:	ff 1c       	adc	r15, r15
    1bc8:	8b 01       	movw	r16, r22
    //eeprom_write_dword((uint32_t *) (address*4), *(value));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4; i++)
    1bca:	20 e0       	ldi	r18, 0x00	; 0
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
    1bcc:	c7 01       	movw	r24, r14
    1bce:	29 83       	std	Y+1, r18	; 0x01
    1bd0:	0e 94 38 15 	call	0x2a70	; 0x2a70 <__eerd_byte_x128a1>
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	81 93       	st	Z+, r24
    1bd8:	8f 01       	movw	r16, r30
    //eeprom_write_dword((uint32_t *) (address*4), *(value));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4; i++)
    1bda:	29 81       	ldd	r18, Y+1	; 0x01
    1bdc:	2f 5f       	subi	r18, 0xFF	; 255
    1bde:	08 94       	sec
    1be0:	e1 1c       	adc	r14, r1
    1be2:	f1 1c       	adc	r15, r1
    1be4:	24 30       	cpi	r18, 0x04	; 4
    1be6:	91 f7       	brne	.-28     	; 0x1bcc <ReadIntFromEEPROM+0x22>
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
    //*destination = eeprom_read_dword((uint32_t *) (address*4));
}
    1be8:	0f 90       	pop	r0
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	ff 90       	pop	r15
    1bf4:	ef 90       	pop	r14
    1bf6:	08 95       	ret

00001bf8 <initStateFromEEPROM>:
        WriteIntToEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&temp);
    }
}

static void initStateFromEEPROM(void)
{
    1bf8:	cf 93       	push	r28
    1bfa:	df 93       	push	r29
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <initStateFromEEPROM+0x6>
    1bfe:	0f 92       	push	r0
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    uint32_t temp = 0;
    1c04:	19 82       	std	Y+1, r1	; 0x01
    1c06:	1a 82       	std	Y+2, r1	; 0x02
    1c08:	1b 82       	std	Y+3, r1	; 0x03
    1c0a:	1c 82       	std	Y+4, r1	; 0x04
    ReadIntFromEEPROM(EEPROM_ADDRESS_LED, (uint8_t*)&temp);
    1c0c:	8f e1       	ldi	r24, 0x1F	; 31
    1c0e:	be 01       	movw	r22, r28
    1c10:	6f 5f       	subi	r22, 0xFF	; 255
    1c12:	7f 4f       	sbci	r23, 0xFF	; 255
    1c14:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ReadIntFromEEPROM>
    if (temp)
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	ab 81       	ldd	r26, Y+3	; 0x03
    1c1e:	bc 81       	ldd	r27, Y+4	; 0x04
    1c20:	00 97       	sbiw	r24, 0x00	; 0
    1c22:	a1 05       	cpc	r26, r1
    1c24:	b1 05       	cpc	r27, r1
    1c26:	29 f0       	breq	.+10     	; 0x1c32 <initStateFromEEPROM+0x3a>
    }
}

void LEDon()
{
  PORTK.OUTSET = 0x08; //LED
    1c28:	88 e0       	ldi	r24, 0x08	; 8
    1c2a:	e0 e2       	ldi	r30, 0x20	; 32
    1c2c:	f7 e0       	ldi	r31, 0x07	; 7
    1c2e:	85 83       	std	Z+5, r24	; 0x05
    1c30:	04 c0       	rjmp	.+8      	; 0x1c3a <initStateFromEEPROM+0x42>
}
void LEDoff()
{
  PORTK.OUTCLR = 0x08; //LED
    1c32:	88 e0       	ldi	r24, 0x08	; 8
    1c34:	e0 e2       	ldi	r30, 0x20	; 32
    1c36:	f7 e0       	ldi	r31, 0x07	; 7
    1c38:	86 83       	std	Z+6, r24	; 0x06
    if (temp)
        LEDon();
    else
        LEDoff();
    
    ReadIntFromEEPROM(EEPROM_ADDRESS_ENCODER_OFFSET, (uint8_t*)&temp);
    1c3a:	8c e1       	ldi	r24, 0x1C	; 28
    1c3c:	be 01       	movw	r22, r28
    1c3e:	6f 5f       	subi	r22, 0xFF	; 255
    1c40:	7f 4f       	sbci	r23, 0xFF	; 255
    1c42:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ReadIntFromEEPROM>
    lastEncoder = (int16_t)temp;
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	80 93 5f 20 	sts	0x205F, r24
    1c4e:	90 93 60 20 	sts	0x2060, r25
    
    ReadIntFromEEPROM(EEPROM_ADDRESS_SPREAD_DEADBAND, (uint8_t*)&temp);
    1c52:	8b e1       	ldi	r24, 0x1B	; 27
    1c54:	be 01       	movw	r22, r28
    1c56:	6f 5f       	subi	r22, 0xFF	; 255
    1c58:	7f 4f       	sbci	r23, 0xFF	; 255
    1c5a:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ReadIntFromEEPROM>
    spreadDeadband = (int16_t)temp;
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	80 93 58 31 	sts	0x3158, r24
    1c66:	90 93 59 31 	sts	0x3159, r25

    ReadIntFromEEPROM(EEPROM_ADDRESS_SPREAD_P, (uint8_t*)&temp);
    1c6a:	8a e1       	ldi	r24, 0x1A	; 26
    1c6c:	be 01       	movw	r22, r28
    1c6e:	6f 5f       	subi	r22, 0xFF	; 255
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ReadIntFromEEPROM>
    spreadP = (int16_t)temp;
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	80 93 56 31 	sts	0x3156, r24
    1c7e:	90 93 57 31 	sts	0x3157, r25
}
    1c82:	24 96       	adiw	r28, 0x04	; 4
    1c84:	cd bf       	out	0x3d, r28	; 61
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	df 91       	pop	r29
    1c8a:	cf 91       	pop	r28
    1c8c:	08 95       	ret

00001c8e <WriteIntToEEPROM>:
    outputBuffer[4] = computeChecksum(outputBuffer,4); //this is the checksum
    return 5;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	0f 92       	push	r0
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
    1ca0:	8b 01       	movw	r16, r22
    1ca2:	e8 2e       	mov	r14, r24
    1ca4:	ff 24       	eor	r15, r15
    1ca6:	ee 0c       	add	r14, r14
    1ca8:	ff 1c       	adc	r15, r15
    1caa:	ee 0c       	add	r14, r14
    1cac:	ff 1c       	adc	r15, r15
    return 5;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
    1cae:	20 e0       	ldi	r18, 0x00	; 0
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
    1cb0:	f8 01       	movw	r30, r16
    1cb2:	61 91       	ld	r22, Z+
    1cb4:	8f 01       	movw	r16, r30
    1cb6:	c7 01       	movw	r24, r14
    1cb8:	29 83       	std	Y+1, r18	; 0x01
    1cba:	0e 94 48 15 	call	0x2a90	; 0x2a90 <__eewr_byte_x128a1>
    return 5;
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
    1cbe:	29 81       	ldd	r18, Y+1	; 0x01
    1cc0:	2f 5f       	subi	r18, 0xFF	; 255
    1cc2:	08 94       	sec
    1cc4:	e1 1c       	adc	r14, r1
    1cc6:	f1 1c       	adc	r15, r1
    1cc8:	24 30       	cpi	r18, 0x04	; 4
    1cca:	91 f7       	brne	.-28     	; 0x1cb0 <WriteIntToEEPROM+0x22>
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
    //eeprom_write_dword((uint32_t *) (address*4), *(value));
}
    1ccc:	0f 90       	pop	r0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	ff 90       	pop	r15
    1cd8:	ef 90       	pop	r14
    1cda:	08 95       	ret

00001cdc <__vector_14>:
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;        //switch to 32MHz oscillator
    CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;    //Select 1.024 kHz from internal oscillator for RTC clock source
}

ISR(FREERUN_TC_vect)
{
    1cdc:	1f 92       	push	r1
    1cde:	0f 92       	push	r0
    1ce0:	0f b6       	in	r0, 0x3f	; 63
    1ce2:	0f 92       	push	r0
    1ce4:	08 b6       	in	r0, 0x38	; 56
    1ce6:	0f 92       	push	r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	8f 93       	push	r24
    freerun_flag = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	80 93 5d 31 	sts	0x315D, r24
}
    1cf2:	8f 91       	pop	r24
    1cf4:	0f 90       	pop	r0
    1cf6:	08 be       	out	0x38, r0	; 56
    1cf8:	0f 90       	pop	r0
    1cfa:	0f be       	out	0x3f, r0	; 63
    1cfc:	0f 90       	pop	r0
    1cfe:	1f 90       	pop	r1
    1d00:	18 95       	reti

00001d02 <BootRelay>:
      UPSTREAM_USART.DATA = targetBuffer[i];
    }
}

void BootRelay(USART_t *targetUSART, uint8_t *commandPacket)
{
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
    1d0a:	a0 97       	sbiw	r28, 0x20	; 32
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	de bf       	out	0x3e, r29	; 62
    1d10:	fc 01       	movw	r30, r24
  // overview: 2)configure for 115200 baud passthrough
  // overview: 3)start a 20 second timer
  // overview: 4)do the serial passthrough, blink LED
  // overview: 5)wait for timer to finish, then reset/reboot

  cli(); // disable all interrupts, nothing else going on
    1d12:	f8 94       	cli
  DMA.CTRL = 0; // disable the DMA controller
    1d14:	10 92 00 01 	sts	0x0100, r1
  
  // repeat the command to the target
  targetUSART->CTRLA = 0x00; // disable interrupts
    1d18:	13 82       	std	Z+3, r1	; 0x03
  targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm; //enable RX and TX
    1d1a:	84 81       	ldd	r24, Z+4	; 0x04
    1d1c:	88 61       	ori	r24, 0x18	; 24
    1d1e:	84 83       	std	Z+4, r24	; 0x04
    1d20:	db 01       	movw	r26, r22
  for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    {
      while(!(targetUSART->STATUS & USART_DREIF_bm));
    1d26:	21 81       	ldd	r18, Z+1	; 0x01
    1d28:	25 ff       	sbrs	r18, 5
    1d2a:	fd cf       	rjmp	.-6      	; 0x1d26 <BootRelay+0x24>
      targetUSART->DATA = commandPacket[i];
    1d2c:	2d 91       	ld	r18, X+
    1d2e:	20 83       	st	Z, r18
  DMA.CTRL = 0; // disable the DMA controller
  
  // repeat the command to the target
  targetUSART->CTRLA = 0x00; // disable interrupts
  targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm; //enable RX and TX
  for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    1d30:	01 96       	adiw	r24, 0x01	; 1
    1d32:	87 30       	cpi	r24, 0x07	; 7
    1d34:	91 05       	cpc	r25, r1
    1d36:	b9 f7       	brne	.-18     	; 0x1d26 <BootRelay+0x24>
    {
      while(!(targetUSART->STATUS & USART_DREIF_bm));
      targetUSART->DATA = commandPacket[i];
    }
  // dont bother waiting for a response verification
  while(!(targetUSART->STATUS & USART_DREIF_bm)); // wait for the data to be read
    1d38:	81 81       	ldd	r24, Z+1	; 0x01
    1d3a:	85 ff       	sbrs	r24, 5
    1d3c:	fd cf       	rjmp	.-6      	; 0x1d38 <BootRelay+0x36>
  targetUSART->STATUS = USART_TXCIF_bm; // clear the TX done flag
    1d3e:	80 e4       	ldi	r24, 0x40	; 64
    1d40:	81 83       	std	Z+1, r24	; 0x01
  while(!(targetUSART->STATUS & USART_TXCIF_bm)); // wait for the TX to be done
    1d42:	81 81       	ldd	r24, Z+1	; 0x01
    1d44:	86 ff       	sbrs	r24, 6
    1d46:	fd cf       	rjmp	.-6      	; 0x1d42 <BootRelay+0x40>
  // Reconfigure the serial ports
  //int bsel = 1047;       // 115200 @ 32Mhz as calculated from ProtoTalk.net
  //uint8_t bscale = 10;      // 115200 @ 32Mhz as calculated from ProtoTalk.net
  int bsel = 3269;       // 38,400 @ 32Mhz as calculated from ProtoTalk.net
  uint8_t bscale = -6;      // 38,400 @ 32Mhz as calculated from ProtoTalk.net
  UPSTREAM_USART.CTRLA = 0x00; // disable interrupts
    1d48:	a0 ea       	ldi	r26, 0xA0	; 160
    1d4a:	bb e0       	ldi	r27, 0x0B	; 11
    1d4c:	13 96       	adiw	r26, 0x03	; 3
    1d4e:	1c 92       	st	X, r1
    1d50:	13 97       	sbiw	r26, 0x03	; 3
  UPSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
    1d52:	25 ec       	ldi	r18, 0xC5	; 197
    1d54:	16 96       	adiw	r26, 0x06	; 6
    1d56:	2c 93       	st	X, r18
    1d58:	16 97       	sbiw	r26, 0x06	; 6
  UPSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
    1d5a:	9c ea       	ldi	r25, 0xAC	; 172
    1d5c:	17 96       	adiw	r26, 0x07	; 7
    1d5e:	9c 93       	st	X, r25
    1d60:	17 97       	sbiw	r26, 0x07	; 7
  UPSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
    1d62:	88 e1       	ldi	r24, 0x18	; 24
    1d64:	14 96       	adiw	r26, 0x04	; 4
    1d66:	8c 93       	st	X, r24
    1d68:	14 97       	sbiw	r26, 0x04	; 4
  targetUSART->CTRLA = 0x00; // disable interrupts
    1d6a:	13 82       	std	Z+3, r1	; 0x03
  targetUSART->BAUDCTRLA = (uint8_t) bsel;
    1d6c:	26 83       	std	Z+6, r18	; 0x06
  targetUSART->BAUDCTRLB = (bscale << 4) | (bsel >> 8);
    1d6e:	97 83       	std	Z+7, r25	; 0x07
  targetUSART->CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
    1d70:	84 83       	std	Z+4, r24	; 0x04
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
  uint8_t down_tail = 0;
    1d72:	20 e0       	ldi	r18, 0x00	; 0
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
    1d74:	30 e0       	ldi	r19, 0x00	; 0
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
  uint8_t up_tail = 0;
    1d76:	10 e0       	ldi	r17, 0x00	; 0
  targetUSART->CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
  uint8_t up_fifo[16];
  uint8_t up_head = 0;
    1d78:	00 e0       	ldi	r16, 0x00	; 0
  targetUSART->BAUDCTRLA = (uint8_t) bsel;
  targetUSART->BAUDCTRLB = (bscale << 4) | (bsel >> 8);
  targetUSART->CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
  uint32_t loop_cnt=0;
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	ba 01       	movw	r22, r20
  targetUSART->CTRLA = 0x00; // disable interrupts
  targetUSART->BAUDCTRLA = (uint8_t) bsel;
  targetUSART->BAUDCTRLB = (bscale << 4) | (bsel >> 8);
  targetUSART->CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
  int sec_cnt=0;
    1d80:	ee 24       	eor	r14, r14
    1d82:	ff 24       	eor	r15, r15
      loop_cnt=0;
      sec_cnt++;
      if((sec_cnt&0x03)==0x03)
	PORTK.OUTSET = 0x08; //LED debug
      else
	PORTK.OUTCLR = 0x08; //LED debug
    1d84:	80 e2       	ldi	r24, 0x20	; 32
    1d86:	a8 2e       	mov	r10, r24
    1d88:	87 e0       	ldi	r24, 0x07	; 7
    1d8a:	b8 2e       	mov	r11, r24
    1d8c:	98 e0       	ldi	r25, 0x08	; 8
    1d8e:	d9 2e       	mov	r13, r25
  uint8_t down_head = 0;
  uint8_t down_tail = 0;

  // relay chars while waiting for timeout
  while(sec_cnt < 200) {
    loop_cnt++;
    1d90:	4f 5f       	subi	r20, 0xFF	; 255
    1d92:	5f 4f       	sbci	r21, 0xFF	; 255
    1d94:	6f 4f       	sbci	r22, 0xFF	; 255
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    if(loop_cnt > 90000L) { // approximately 0.1sec experimentally
    1d98:	41 39       	cpi	r20, 0x91	; 145
    1d9a:	8f e5       	ldi	r24, 0x5F	; 95
    1d9c:	58 07       	cpc	r21, r24
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	68 07       	cpc	r22, r24
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	78 07       	cpc	r23, r24
    1da6:	a0 f0       	brcs	.+40     	; 0x1dd0 <BootRelay+0xce>
      loop_cnt=0;
      sec_cnt++;
    1da8:	08 94       	sec
    1daa:	e1 1c       	adc	r14, r1
    1dac:	f1 1c       	adc	r15, r1
      if((sec_cnt&0x03)==0x03)
    1dae:	c7 01       	movw	r24, r14
    1db0:	83 70       	andi	r24, 0x03	; 3
    1db2:	90 70       	andi	r25, 0x00	; 0
	PORTK.OUTSET = 0x08; //LED debug
    1db4:	d5 01       	movw	r26, r10
  while(sec_cnt < 200) {
    loop_cnt++;
    if(loop_cnt > 90000L) { // approximately 0.1sec experimentally
      loop_cnt=0;
      sec_cnt++;
      if((sec_cnt&0x03)==0x03)
    1db6:	83 30       	cpi	r24, 0x03	; 3
    1db8:	91 05       	cpc	r25, r1
    1dba:	21 f4       	brne	.+8      	; 0x1dc4 <BootRelay+0xc2>
	PORTK.OUTSET = 0x08; //LED debug
    1dbc:	15 96       	adiw	r26, 0x05	; 5
    1dbe:	dc 92       	st	X, r13
    1dc0:	15 97       	sbiw	r26, 0x05	; 5
    1dc2:	03 c0       	rjmp	.+6      	; 0x1dca <BootRelay+0xc8>
      else
	PORTK.OUTCLR = 0x08; //LED debug
    1dc4:	16 96       	adiw	r26, 0x06	; 6
    1dc6:	dc 92       	st	X, r13
    1dc8:	16 97       	sbiw	r26, 0x06	; 6

  // relay chars while waiting for timeout
  while(sec_cnt < 200) {
    loop_cnt++;
    if(loop_cnt > 90000L) { // approximately 0.1sec experimentally
      loop_cnt=0;
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	50 e0       	ldi	r21, 0x00	; 0
    1dce:	ba 01       	movw	r22, r20
      if((sec_cnt&0x03)==0x03)
	PORTK.OUTSET = 0x08; //LED debug
      else
	PORTK.OUTCLR = 0x08; //LED debug
    }
    if (targetUSART->STATUS & USART_RXCIF_bm) {
    1dd0:	81 81       	ldd	r24, Z+1	; 0x01
    1dd2:	87 ff       	sbrs	r24, 7
    1dd4:	0a c0       	rjmp	.+20     	; 0x1dea <BootRelay+0xe8>
      up_fifo[up_head++] = targetUSART->DATA;
    1dd6:	80 81       	ld	r24, Z
    1dd8:	a1 e1       	ldi	r26, 0x11	; 17
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	ac 0f       	add	r26, r28
    1dde:	bd 1f       	adc	r27, r29
    1de0:	a0 0f       	add	r26, r16
    1de2:	b1 1d       	adc	r27, r1
    1de4:	8c 93       	st	X, r24
    1de6:	0f 5f       	subi	r16, 0xFF	; 255
      up_head %= sizeof(up_fifo);
    1de8:	0f 70       	andi	r16, 0x0F	; 15
    }
    if (UPSTREAM_USART.STATUS & USART_RXCIF_bm) {
    1dea:	80 91 a1 0b 	lds	r24, 0x0BA1
    1dee:	87 ff       	sbrs	r24, 7
    1df0:	0b c0       	rjmp	.+22     	; 0x1e08 <BootRelay+0x106>
      down_fifo[down_head++] = UPSTREAM_USART.DATA;
    1df2:	80 91 a0 0b 	lds	r24, 0x0BA0
    1df6:	a1 e0       	ldi	r26, 0x01	; 1
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	ac 0f       	add	r26, r28
    1dfc:	bd 1f       	adc	r27, r29
    1dfe:	a3 0f       	add	r26, r19
    1e00:	b1 1d       	adc	r27, r1
    1e02:	8c 93       	st	X, r24
    1e04:	3f 5f       	subi	r19, 0xFF	; 255
      down_head %= sizeof(down_fifo);
    1e06:	3f 70       	andi	r19, 0x0F	; 15
    }
    if (up_head != up_tail && (UPSTREAM_USART.STATUS & USART_DREIF_bm)) {
    1e08:	01 17       	cp	r16, r17
    1e0a:	79 f0       	breq	.+30     	; 0x1e2a <BootRelay+0x128>
    1e0c:	80 91 a1 0b 	lds	r24, 0x0BA1
    1e10:	85 ff       	sbrs	r24, 5
    1e12:	0b c0       	rjmp	.+22     	; 0x1e2a <BootRelay+0x128>
      UPSTREAM_USART.DATA = up_fifo[up_tail++];
    1e14:	a1 e1       	ldi	r26, 0x11	; 17
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	ac 0f       	add	r26, r28
    1e1a:	bd 1f       	adc	r27, r29
    1e1c:	a1 0f       	add	r26, r17
    1e1e:	b1 1d       	adc	r27, r1
    1e20:	8c 91       	ld	r24, X
    1e22:	80 93 a0 0b 	sts	0x0BA0, r24
    1e26:	1f 5f       	subi	r17, 0xFF	; 255
      up_tail %= sizeof(up_fifo);
    1e28:	1f 70       	andi	r17, 0x0F	; 15
    }
    if (down_head != down_tail && (targetUSART->STATUS & USART_DREIF_bm)) {
    1e2a:	32 17       	cp	r19, r18
    1e2c:	69 f0       	breq	.+26     	; 0x1e48 <BootRelay+0x146>
    1e2e:	81 81       	ldd	r24, Z+1	; 0x01
    1e30:	85 ff       	sbrs	r24, 5
    1e32:	0a c0       	rjmp	.+20     	; 0x1e48 <BootRelay+0x146>
      targetUSART->DATA = down_fifo[down_tail++];
    1e34:	a1 e0       	ldi	r26, 0x01	; 1
    1e36:	b0 e0       	ldi	r27, 0x00	; 0
    1e38:	ac 0f       	add	r26, r28
    1e3a:	bd 1f       	adc	r27, r29
    1e3c:	a2 0f       	add	r26, r18
    1e3e:	b1 1d       	adc	r27, r1
    1e40:	8c 91       	ld	r24, X
    1e42:	80 83       	st	Z, r24
    1e44:	2f 5f       	subi	r18, 0xFF	; 255
      down_tail %= sizeof(down_fifo);
    1e46:	2f 70       	andi	r18, 0x0F	; 15
  uint8_t down_fifo[16];
  uint8_t down_head = 0;
  uint8_t down_tail = 0;

  // relay chars while waiting for timeout
  while(sec_cnt < 200) {
    1e48:	b8 ec       	ldi	r27, 0xC8	; 200
    1e4a:	eb 16       	cp	r14, r27
    1e4c:	f1 04       	cpc	r15, r1
    1e4e:	0c f4       	brge	.+2      	; 0x1e52 <BootRelay+0x150>
    1e50:	9f cf       	rjmp	.-194    	; 0x1d90 <BootRelay+0x8e>
      down_tail %= sizeof(down_fifo);
    }
  }

  // 30sec timer finished, reset/reboot
  wdt_enable(WDT_PER_256CLK_gc);
    1e52:	97 e1       	ldi	r25, 0x17	; 23
    1e54:	88 ed       	ldi	r24, 0xD8	; 216
    1e56:	08 b6       	in	r0, 0x38	; 56
    1e58:	84 bf       	out	0x34, r24	; 52
    1e5a:	90 93 80 00 	sts	0x0080, r25
    1e5e:	a8 95       	wdr
    1e60:	08 be       	out	0x38, r0	; 56
    1e62:	ff cf       	rjmp	.-2      	; 0x1e62 <BootRelay+0x160>

00001e64 <processCommand>:
            return 5;
    }
}

int processCommand(uint8_t *commandPacket,uint8_t *outputBuffer)
{
    1e64:	af 92       	push	r10
    1e66:	bf 92       	push	r11
    1e68:	cf 92       	push	r12
    1e6a:	df 92       	push	r13
    1e6c:	ef 92       	push	r14
    1e6e:	ff 92       	push	r15
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
    1e7c:	60 97       	sbiw	r28, 0x10	; 16
    1e7e:	cd bf       	out	0x3d, r28	; 61
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	8c 01       	movw	r16, r24
    1e84:	6b 01       	movw	r12, r22
    uint8_t opcode;

    opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    1e86:	fc 01       	movw	r30, r24
    1e88:	81 81       	ldd	r24, Z+1	; 0x01
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	20 7f       	andi	r18, 0xF0	; 240

    switch(opcode)
    1e8e:	20 36       	cpi	r18, 0x60	; 96
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <processCommand+0x30>
    1e92:	df c1       	rjmp	.+958    	; 0x2252 <processCommand+0x3ee>
    1e94:	21 36       	cpi	r18, 0x61	; 97
    1e96:	a8 f4       	brcc	.+42     	; 0x1ec2 <processCommand+0x5e>
    1e98:	20 32       	cpi	r18, 0x20	; 32
    1e9a:	09 f4       	brne	.+2      	; 0x1e9e <processCommand+0x3a>
    1e9c:	a8 c0       	rjmp	.+336    	; 0x1fee <processCommand+0x18a>
    1e9e:	21 32       	cpi	r18, 0x21	; 33
    1ea0:	30 f4       	brcc	.+12     	; 0x1eae <processCommand+0x4a>
    1ea2:	22 23       	and	r18, r18
    1ea4:	21 f1       	breq	.+72     	; 0x1eee <processCommand+0x8a>
    1ea6:	20 31       	cpi	r18, 0x10	; 16
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <processCommand+0x48>
    1eaa:	16 c2       	rjmp	.+1068   	; 0x22d8 <processCommand+0x474>
    1eac:	98 c0       	rjmp	.+304    	; 0x1fde <processCommand+0x17a>
    1eae:	20 34       	cpi	r18, 0x40	; 64
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <processCommand+0x50>
    1eb2:	c1 c0       	rjmp	.+386    	; 0x2036 <processCommand+0x1d2>
    1eb4:	20 35       	cpi	r18, 0x50	; 80
    1eb6:	09 f4       	brne	.+2      	; 0x1eba <processCommand+0x56>
    1eb8:	c6 c0       	rjmp	.+396    	; 0x2046 <processCommand+0x1e2>
    1eba:	20 33       	cpi	r18, 0x30	; 48
    1ebc:	09 f0       	breq	.+2      	; 0x1ec0 <processCommand+0x5c>
    1ebe:	0c c2       	rjmp	.+1048   	; 0x22d8 <processCommand+0x474>
    1ec0:	9e c0       	rjmp	.+316    	; 0x1ffe <processCommand+0x19a>
    1ec2:	20 39       	cpi	r18, 0x90	; 144
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <processCommand+0x64>
    1ec6:	c5 c1       	rjmp	.+906    	; 0x2252 <processCommand+0x3ee>
    1ec8:	21 39       	cpi	r18, 0x91	; 145
    1eca:	38 f4       	brcc	.+14     	; 0x1eda <processCommand+0x76>
    1ecc:	20 37       	cpi	r18, 0x70	; 112
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <processCommand+0x6e>
    1ed0:	c0 c1       	rjmp	.+896    	; 0x2252 <processCommand+0x3ee>
    1ed2:	20 38       	cpi	r18, 0x80	; 128
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <processCommand+0x74>
    1ed6:	00 c2       	rjmp	.+1024   	; 0x22d8 <processCommand+0x474>
    1ed8:	bc c1       	rjmp	.+888    	; 0x2252 <processCommand+0x3ee>
    1eda:	20 3c       	cpi	r18, 0xC0	; 192
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <processCommand+0x7c>
    1ede:	6b c1       	rjmp	.+726    	; 0x21b6 <processCommand+0x352>
    1ee0:	20 3d       	cpi	r18, 0xD0	; 208
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <processCommand+0x82>
    1ee4:	f4 c1       	rjmp	.+1000   	; 0x22ce <processCommand+0x46a>
    1ee6:	20 3b       	cpi	r18, 0xB0	; 176
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <processCommand+0x88>
    1eea:	f6 c1       	rjmp	.+1004   	; 0x22d8 <processCommand+0x474>
    1eec:	07 c1       	rjmp	.+526    	; 0x20fc <processCommand+0x298>
    uint8_t responseSize = 0;

    int16_t adcData[6];
    uint16_t roundedTemperature;

    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    1eee:	f8 01       	movw	r30, r16
    1ef0:	a2 80       	ldd	r10, Z+2	; 0x02
    1ef2:	b3 80       	ldd	r11, Z+3	; 0x03

    if (collectionBitfield & (DATA_COLLECTION_EXTERNALSUPPLY_BITMASK
    1ef4:	c5 01       	movw	r24, r10
    1ef6:	80 73       	andi	r24, 0x30	; 48
    1ef8:	90 70       	andi	r25, 0x00	; 0
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	21 f0       	breq	.+8      	; 0x1f06 <processCommand+0xa2>
                              //| DATA_COLLECTION_MOTORSTATORTEMP_BITMASK
                              //| DATA_COLLECTION_MOTORCURRENT_BITMASK
                              | DATA_COLLECTION_AIRTEMPERATURE_BITMASK))

    {
      captureSweep(adcData); // gather all the adc data, then pick out the specifics below
    1efe:	ce 01       	movw	r24, r28
    1f00:	05 96       	adiw	r24, 0x05	; 5
    1f02:	0e 94 c9 01 	call	0x392	; 0x392 <captureSweep>
    }

    if(collectionBitfield & DATA_COLLECTION_FINGERROTATION_BITMASK)
    1f06:	b2 fe       	sbrs	r11, 2
    1f08:	09 c0       	rjmp	.+18     	; 0x1f1c <processCommand+0xb8>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM+responseSize], &adjustedEncoder, 2);
    1f0a:	80 91 5d 20 	lds	r24, 0x205D
    1f0e:	90 91 5e 20 	lds	r25, 0x205E
    1f12:	f6 01       	movw	r30, r12
    1f14:	84 83       	std	Z+4, r24	; 0x04
    1f16:	95 83       	std	Z+5, r25	; 0x05
        responseSize += 2;
    1f18:	02 e0       	ldi	r16, 0x02	; 2
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <processCommand+0xba>
static int handleCollectionCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint16_t collectionBitfield;
    float thermistorVoltage;
    float thermistorTemperature;
    uint8_t responseSize = 0;
    1f1c:	00 e0       	ldi	r16, 0x00	; 0

    //     memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM+responseSize], &roundedTemperature, 2);
    //     responseSize += 2;
    // }

    if(collectionBitfield & DATA_COLLECTION_EXTERNALSUPPLY_BITMASK)
    1f1e:	a5 fe       	sbrs	r10, 5
    1f20:	0d c0       	rjmp	.+26     	; 0x1f3c <processCommand+0xd8>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM+responseSize],&adcData[EXTERNAL_MONITOR_OFFSET], 6);
    1f22:	e0 2f       	mov	r30, r16
    1f24:	f0 e0       	ldi	r31, 0x00	; 0
    1f26:	34 96       	adiw	r30, 0x04	; 4
    1f28:	ec 0d       	add	r30, r12
    1f2a:	fd 1d       	adc	r31, r13
    1f2c:	de 01       	movw	r26, r28
    1f2e:	15 96       	adiw	r26, 0x05	; 5
    1f30:	86 e0       	ldi	r24, 0x06	; 6
    1f32:	0d 90       	ld	r0, X+
    1f34:	01 92       	st	Z+, r0
    1f36:	81 50       	subi	r24, 0x01	; 1
    1f38:	e1 f7       	brne	.-8      	; 0x1f32 <processCommand+0xce>
        responseSize += 6;
    1f3a:	0a 5f       	subi	r16, 0xFA	; 250
    }

    if(collectionBitfield & DATA_COLLECTION_AIRTEMPERATURE_BITMASK)
    1f3c:	a4 fe       	sbrs	r10, 4
    1f3e:	2b c0       	rjmp	.+86     	; 0x1f96 <processCommand+0x132>
    {
        thermistorVoltage = ADC_CODES_TO_VOLTS_SIGNED(adcData[EXTERNALTEMP_MONITOR_OFFSET]);
    1f40:	6d 85       	ldd	r22, Y+13	; 0x0d
    1f42:	7e 85       	ldd	r23, Y+14	; 0x0e
    1f44:	88 27       	eor	r24, r24
    1f46:	77 fd       	sbrc	r23, 7
    1f48:	80 95       	com	r24
    1f4a:	98 2f       	mov	r25, r24
    1f4c:	0e 94 8d 13 	call	0x271a	; 0x271a <__floatsisf>
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e2       	ldi	r20, 0x20	; 32
    1f56:	50 e4       	ldi	r21, 0x40	; 64
    1f58:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__mulsf3>
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	40 e0       	ldi	r20, 0x00	; 0
    1f62:	5a e3       	ldi	r21, 0x3A	; 58
    1f64:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__mulsf3>
        thermistorTemperature = Thermistor_RtoT(Thermistor_VtoR(thermistorVoltage));
    1f68:	0e 94 92 01 	call	0x324	; 0x324 <Thermistor_VtoR>
    1f6c:	0e 94 4f 01 	call	0x29e	; 0x29e <Thermistor_RtoT>
        roundedTemperature = round(thermistorTemperature * 100.0);
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	48 ec       	ldi	r20, 0xC8	; 200
    1f76:	52 e4       	ldi	r21, 0x42	; 66
    1f78:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__mulsf3>
    1f7c:	0e 94 c1 14 	call	0x2982	; 0x2982 <round>
        
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM+responseSize],&roundedTemperature, 2);
    1f80:	76 01       	movw	r14, r12
    1f82:	e0 0e       	add	r14, r16
    1f84:	f1 1c       	adc	r15, r1

    if(collectionBitfield & DATA_COLLECTION_AIRTEMPERATURE_BITMASK)
    {
        thermistorVoltage = ADC_CODES_TO_VOLTS_SIGNED(adcData[EXTERNALTEMP_MONITOR_OFFSET]);
        thermistorTemperature = Thermistor_RtoT(Thermistor_VtoR(thermistorVoltage));
        roundedTemperature = round(thermistorTemperature * 100.0);
    1f86:	0e 94 5f 13 	call	0x26be	; 0x26be <__fixunssfsi>
    1f8a:	dc 01       	movw	r26, r24
    1f8c:	cb 01       	movw	r24, r22
    1f8e:	f7 01       	movw	r30, r14
    1f90:	84 83       	std	Z+4, r24	; 0x04
    1f92:	95 83       	std	Z+5, r25	; 0x05
        
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM+responseSize],&roundedTemperature, 2);
        responseSize += 2;
    1f94:	0e 5f       	subi	r16, 0xFE	; 254
    }

    if(collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
    1f96:	a1 fe       	sbrs	r10, 1
    1f98:	0c c0       	rjmp	.+24     	; 0x1fb2 <processCommand+0x14e>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM+responseSize], &RxCheckSumErrCnt, 14);
    1f9a:	f6 01       	movw	r30, r12
    1f9c:	e0 0f       	add	r30, r16
    1f9e:	f1 1d       	adc	r31, r1
    1fa0:	34 96       	adiw	r30, 0x04	; 4
    1fa2:	ae e5       	ldi	r26, 0x5E	; 94
    1fa4:	b1 e3       	ldi	r27, 0x31	; 49
    1fa6:	8e e0       	ldi	r24, 0x0E	; 14
    1fa8:	0d 90       	ld	r0, X+
    1faa:	01 92       	st	Z+, r0
    1fac:	81 50       	subi	r24, 0x01	; 1
    1fae:	e1 f7       	brne	.-8      	; 0x1fa8 <processCommand+0x144>
        responseSize += 14;
    1fb0:	02 5f       	subi	r16, 0xF2	; 242
    }

    outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 3+responseSize;
    1fb2:	80 2f       	mov	r24, r16
    1fb4:	8d 5f       	subi	r24, 0xFD	; 253
    1fb6:	f6 01       	movw	r30, r12
    1fb8:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    1fba:	11 82       	std	Z+1, r1	; 0x01
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = DATA_COLLECTION_OPCODE;
    1fbc:	12 82       	std	Z+2, r1	; 0x02
    outputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] = STATUS_OK;
    1fbe:	13 82       	std	Z+3, r1	; 0x03
    outputBuffer[4+responseSize] = computeChecksum(outputBuffer, 4+responseSize); //this is the checksum
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	b8 01       	movw	r22, r16
    1fc4:	6c 5f       	subi	r22, 0xFC	; 252
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	76 01       	movw	r14, r12
    1fca:	e6 0e       	add	r14, r22
    1fcc:	f7 1e       	adc	r15, r23
    1fce:	c6 01       	movw	r24, r12
    1fd0:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    1fd4:	f7 01       	movw	r30, r14
    1fd6:	80 83       	st	Z, r24
    return 5+responseSize;
    1fd8:	c8 01       	movw	r24, r16
    1fda:	05 96       	adiw	r24, 0x05	; 5

    switch(opcode)
    {

        case DATA_COLLECTION_OPCODE:
            return handleCollectionCommand(commandPacket,outputBuffer);
    1fdc:	8d c1       	rjmp	.+794    	; 0x22f8 <processCommand+0x494>
* Handles a command to set the untriggered roll period.
* Generates a proper reply in outputBuffer
************************************************************************/
static int handleSetSamplePeriodCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    memcpy(&samplePeriod, &commandPacket[PAYLOAD_OFFSET], 2);
    1fde:	f8 01       	movw	r30, r16
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	80 93 03 20 	sts	0x2003, r24
    1fe8:	90 93 04 20 	sts	0x2004, r25
    1fec:	1d c0       	rjmp	.+58     	; 0x2028 <processCommand+0x1c4>
* Handles a command to set the untriggered roll argument.
* Generates a proper reply in outputBuffer
************************************************************************/
static int handleSetSampleArgumentCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    memcpy(&sampleArgument,&commandPacket[PAYLOAD_OFFSET],2);
    1fee:	f8 01       	movw	r30, r16
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	80 93 01 20 	sts	0x2001, r24
    1ff8:	90 93 02 20 	sts	0x2002, r25
    1ffc:	15 c0       	rjmp	.+42     	; 0x2028 <processCommand+0x1c4>
static int handleStartCollectionCommand(uint8_t *outputBuffer)
{
    //Activate the freerun timer for generating data collection packets
    //At 32 MHz internal oscillator with 64 prescaler, each tick of the clock is half a microsecond.

    freerun_flag = 1;
    1ffe:	31 e0       	ldi	r19, 0x01	; 1
    2000:	30 93 5d 31 	sts	0x315D, r19

    FREERUN_TC.CTRLB = TC_WGMODE_NORMAL_gc;
    2004:	e0 e0       	ldi	r30, 0x00	; 0
    2006:	f8 e0       	ldi	r31, 0x08	; 8
    2008:	11 82       	std	Z+1, r1	; 0x01
    FREERUN_TC.CTRLC = 0x00;
    200a:	12 82       	std	Z+2, r1	; 0x02
    FREERUN_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    200c:	13 82       	std	Z+3, r1	; 0x03
    FREERUN_TC.CTRLE = 0x00;
    200e:	14 82       	std	Z+4, r1	; 0x04
    FREERUN_TC.PERBUF = samplePeriod >> 1; //BA: fix bit shift direction
    2010:	80 91 03 20 	lds	r24, 0x2003
    2014:	90 91 04 20 	lds	r25, 0x2004
    2018:	96 95       	lsr	r25
    201a:	87 95       	ror	r24
    201c:	86 ab       	sts	0x56, r24
    201e:	97 ab       	sts	0x57, r25
    FREERUN_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
    2020:	36 83       	std	Z+6, r19	; 0x06
    FREERUN_TC.CTRLA = TC_CLKSEL_DIV64_gc;
    2022:	85 e0       	ldi	r24, 0x05	; 5
    2024:	80 93 00 08 	sts	0x0800, r24


    outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 3;
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	f6 01       	movw	r30, r12
    202c:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    202e:	11 82       	std	Z+1, r1	; 0x01
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = START_COLLECTION_OPCODE;
    2030:	22 83       	std	Z+2, r18	; 0x02
    outputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] = STATUS_OK;
    2032:	13 82       	std	Z+3, r1	; 0x03
    2034:	58 c1       	rjmp	.+688    	; 0x22e6 <processCommand+0x482>
* Generates a proper reply in outputBuffer
************************************************************************/
static int handleStopCollectionCommand(uint8_t *outputBuffer)
{
    //Shutdown the freerun timer for generating data collection packets
    FREERUN_TC.INTCTRLA = TC_OVFINTLVL_OFF_gc;
    2036:	e0 e0       	ldi	r30, 0x00	; 0
    2038:	f8 e0       	ldi	r31, 0x08	; 8
    203a:	16 82       	std	Z+6, r1	; 0x06
    FREERUN_TC.CTRLA = TC_CLKSEL_OFF_gc;
    203c:	10 92 00 08 	sts	0x0800, r1

    freerun_flag = 0;
    2040:	10 92 5d 31 	sts	0x315D, r1
    2044:	f1 cf       	rjmp	.-30     	; 0x2028 <processCommand+0x1c4>
{
    uint8_t status = STATUS_OK;
    uint16_t dac = 0;

    // position control
    if ((commandPacket[COMMAND_OFFSET] & MOTOR_COMMAND_SCHEME_BITMASK) == MOTOR_COMMAND_POSITION)
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	9c 01       	movw	r18, r24
    204a:	23 70       	andi	r18, 0x03	; 3
    204c:	30 70       	andi	r19, 0x00	; 0
    204e:	8c 70       	andi	r24, 0x0C	; 12
    2050:	90 70       	andi	r25, 0x00	; 0
    2052:	21 15       	cp	r18, r1
    2054:	31 05       	cpc	r19, r1
    2056:	f9 f4       	brne	.+62     	; 0x2096 <processCommand+0x232>
    {
        // don't go into position mode if stop direction
        if ((commandPacket[COMMAND_OFFSET] & MOTOR_COMMAND_DIRECTION_BITMASK) == MOTOR_COMMAND_STOP)
    2058:	00 97       	sbiw	r24, 0x00	; 0
    205a:	39 f4       	brne	.+14     	; 0x206a <processCommand+0x206>
}

static void spreadMotorStop(void)
{
    //MOTOR_EN_PORT.OUTCLR = MOTOR_EN_BITMASK;
    MOTOR_DIR_PORT.OUTCLR = MOTOR_DIR_BITMASK | MOTOR_nDIR_BITMASK;
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	e0 ea       	ldi	r30, 0xA0	; 160
    2060:	f6 e0       	ldi	r31, 0x06	; 6
    2062:	86 83       	std	Z+6, r24	; 0x06
    {
        // don't go into position mode if stop direction
        if ((commandPacket[COMMAND_OFFSET] & MOTOR_COMMAND_DIRECTION_BITMASK) == MOTOR_COMMAND_STOP)
        {
            spreadMotorStop();
            spreadMotorMode = SPREAD_MODE_NONE;
    2064:	10 92 5c 31 	sts	0x315C, r1
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <processCommand+0x284>
        }
        else
        {
            memcpy(&targetEncoder, &commandPacket[PAYLOAD_OFFSET], 2);
    206a:	f8 01       	movw	r30, r16
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	80 93 5a 31 	sts	0x315A, r24
    2074:	90 93 5b 31 	sts	0x315B, r25
            
            if ((commandPacket[COMMAND_OFFSET] & MOTOR_COMMAND_DIRECTION_BITMASK) == MOTOR_COMMAND_REVERSE)
    2078:	21 81       	ldd	r18, Z+1	; 0x01
    207a:	2c 70       	andi	r18, 0x0C	; 12
    207c:	24 30       	cpi	r18, 0x04	; 4
    207e:	39 f4       	brne	.+14     	; 0x208e <processCommand+0x22a>
                targetEncoder = -targetEncoder;
    2080:	90 95       	com	r25
    2082:	81 95       	neg	r24
    2084:	9f 4f       	sbci	r25, 0xFF	; 255
    2086:	80 93 5a 31 	sts	0x315A, r24
    208a:	90 93 5b 31 	sts	0x315B, r25
            
            spreadMotorMode = SPREAD_MODE_POSITION;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	80 93 5c 31 	sts	0x315C, r24
    2094:	29 c0       	rjmp	.+82     	; 0x20e8 <processCommand+0x284>
        }
    }
    else
    {
        spreadMotorMode = SPREAD_MODE_NONE;
    2096:	10 92 5c 31 	sts	0x315C, r1
        
        switch(commandPacket[COMMAND_OFFSET] & MOTOR_COMMAND_DIRECTION_BITMASK)
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	91 05       	cpc	r25, r1
    209e:	51 f0       	breq	.+20     	; 0x20b4 <processCommand+0x250>
    20a0:	88 30       	cpi	r24, 0x08	; 8
    20a2:	91 05       	cpc	r25, r1
    20a4:	a1 f0       	breq	.+40     	; 0x20ce <processCommand+0x26a>
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	09 f5       	brne	.+66     	; 0x20ec <processCommand+0x288>
}

static void spreadMotorStop(void)
{
    //MOTOR_EN_PORT.OUTCLR = MOTOR_EN_BITMASK;
    MOTOR_DIR_PORT.OUTCLR = MOTOR_DIR_BITMASK | MOTOR_nDIR_BITMASK;
    20aa:	83 e0       	ldi	r24, 0x03	; 3
    20ac:	e0 ea       	ldi	r30, 0xA0	; 160
    20ae:	f6 e0       	ldi	r31, 0x06	; 6
    20b0:	86 83       	std	Z+6, r24	; 0x06
    20b2:	1a c0       	rjmp	.+52     	; 0x20e8 <processCommand+0x284>
        {
            case MOTOR_COMMAND_STOP:
                spreadMotorStop();
                break;
            case MOTOR_COMMAND_REVERSE:
                memcpy(&dac, &commandPacket[PAYLOAD_OFFSET], 2);
    20b4:	f8 01       	movw	r30, r16
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    //MOTOR_EN_PORT.OUTSET = MOTOR_EN_BITMASK;   
}

static void spreadMotorReverse(uint16_t dac)
{
    DACB.CH0DATA = dac;
    20ba:	e0 e2       	ldi	r30, 0x20	; 32
    20bc:	f3 e0       	ldi	r31, 0x03	; 3
    20be:	80 8f       	std	Z+24, r24	; 0x18
    20c0:	91 8f       	std	Z+25, r25	; 0x19
    
    MOTOR_DIR_PORT.OUTCLR = MOTOR_nDIR_BITMASK;
    20c2:	e0 ea       	ldi	r30, 0xA0	; 160
    20c4:	f6 e0       	ldi	r31, 0x06	; 6
    20c6:	82 e0       	ldi	r24, 0x02	; 2
    20c8:	86 83       	std	Z+6, r24	; 0x06
    MOTOR_DIR_PORT.OUTSET = MOTOR_DIR_BITMASK;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	0c c0       	rjmp	.+24     	; 0x20e6 <processCommand+0x282>
            case MOTOR_COMMAND_REVERSE:
                memcpy(&dac, &commandPacket[PAYLOAD_OFFSET], 2);
                spreadMotorReverse(dac);
                break;
            case MOTOR_COMMAND_FORWARD:
                memcpy(&dac, &commandPacket[PAYLOAD_OFFSET], 2);
    20ce:	f8 01       	movw	r30, r16
    20d0:	82 81       	ldd	r24, Z+2	; 0x02
    20d2:	93 81       	ldd	r25, Z+3	; 0x03
    MOTOR_DIR_PORT.OUTCLR = MOTOR_DIR_BITMASK | MOTOR_nDIR_BITMASK;
}

static void spreadMotorForward(uint16_t dac)
{
    DACB.CH0DATA = dac;
    20d4:	e0 e2       	ldi	r30, 0x20	; 32
    20d6:	f3 e0       	ldi	r31, 0x03	; 3
    20d8:	80 8f       	std	Z+24, r24	; 0x18
    20da:	91 8f       	std	Z+25, r25	; 0x19
    
    MOTOR_DIR_PORT.OUTCLR = MOTOR_DIR_BITMASK;
    20dc:	e0 ea       	ldi	r30, 0xA0	; 160
    20de:	f6 e0       	ldi	r31, 0x06	; 6
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	86 83       	std	Z+6, r24	; 0x06
    MOTOR_DIR_PORT.OUTSET = MOTOR_nDIR_BITMASK;
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	85 83       	std	Z+5, r24	; 0x05
* Handles a command to drive the Finger Motor either Forward, Reverse,
* or Stopped.  Generates a proper reply in outputBuffer
************************************************************************/
static int handleFingerCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint8_t status = STATUS_OK;
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <processCommand+0x28a>
            case MOTOR_COMMAND_FORWARD:
                memcpy(&dac, &commandPacket[PAYLOAD_OFFSET], 2);
                spreadMotorForward(dac);
                break;
            default:
                status = UNKNOWN_COMMAND;
    20ec:	82 e0       	ldi	r24, 0x02	; 2
                break;
        }
    }
    
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 3;
    20ee:	93 e0       	ldi	r25, 0x03	; 3
    20f0:	f6 01       	movw	r30, r12
    20f2:	90 83       	st	Z, r25
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    20f4:	11 82       	std	Z+1, r1	; 0x01
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = FINGER_COMMAND_OPCODE;
    20f6:	90 e5       	ldi	r25, 0x50	; 80
    20f8:	92 83       	std	Z+2, r25	; 0x02
    20fa:	f4 c0       	rjmp	.+488    	; 0x22e4 <processCommand+0x480>
}

static int handleBootloaderCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
  // prepare to echo back the command for verify
  outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 4;
    20fc:	84 e0       	ldi	r24, 0x04	; 4
    20fe:	fb 01       	movw	r30, r22
    2100:	80 83       	st	Z, r24
  outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    2102:	11 82       	std	Z+1, r1	; 0x01
  outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = BOOTLOADER_OPCODE;
    2104:	22 83       	std	Z+2, r18	; 0x02
  outputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] = STATUS_OK;
    2106:	13 82       	std	Z+3, r1	; 0x03
  outputBuffer[4] = commandPacket[PAYLOAD_OFFSET];
    2108:	f8 01       	movw	r30, r16
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	fb 01       	movw	r30, r22
    210e:	84 83       	std	Z+4, r24	; 0x04
  outputBuffer[5] = computeChecksum(outputBuffer,5); //this is the checksum
    2110:	cb 01       	movw	r24, r22
    2112:	65 e0       	ldi	r22, 0x05	; 5
    2114:	70 e0       	ldi	r23, 0x00	; 0
    2116:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    211a:	f6 01       	movw	r30, r12
    211c:	85 83       	std	Z+5, r24	; 0x05

static void upstreamTX(volatile uint8_t *targetBuffer, int numBytes)
{
  int16_t i;

  for(i=0;i<numBytes;i++)
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    {
      while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
    2122:	20 91 a1 0b 	lds	r18, 0x0BA1
    2126:	25 ff       	sbrs	r18, 5
    2128:	fc cf       	rjmp	.-8      	; 0x2122 <processCommand+0x2be>
            outputBuffer[4] = computeChecksum(outputBuffer, 4); //this is the checksum
            return 5;
    }
}

int processCommand(uint8_t *commandPacket,uint8_t *outputBuffer)
    212a:	f6 01       	movw	r30, r12
    212c:	e8 0f       	add	r30, r24
    212e:	f9 1f       	adc	r31, r25
  int16_t i;

  for(i=0;i<numBytes;i++)
    {
      while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
      UPSTREAM_USART.DATA = targetBuffer[i];
    2130:	20 81       	ld	r18, Z
    2132:	20 93 a0 0b 	sts	0x0BA0, r18

static void upstreamTX(volatile uint8_t *targetBuffer, int numBytes)
{
  int16_t i;

  for(i=0;i<numBytes;i++)
    2136:	01 96       	adiw	r24, 0x01	; 1
    2138:	86 30       	cpi	r24, 0x06	; 6
    213a:	91 05       	cpc	r25, r1
    213c:	91 f7       	brne	.-28     	; 0x2122 <processCommand+0x2be>
  outputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] = STATUS_OK;
  outputBuffer[4] = commandPacket[PAYLOAD_OFFSET];
  outputBuffer[5] = computeChecksum(outputBuffer,5); //this is the checksum
  upstreamTX(outputBuffer, 6);

  switch(0xf0 & commandPacket[PAYLOAD_OFFSET])
    213e:	f8 01       	movw	r30, r16
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	80 7f       	andi	r24, 0xF0	; 240
    2146:	90 70       	andi	r25, 0x00	; 0
    2148:	80 33       	cpi	r24, 0x30	; 48
    214a:	91 05       	cpc	r25, r1
    214c:	41 f1       	breq	.+80     	; 0x219e <processCommand+0x33a>
    214e:	81 33       	cpi	r24, 0x31	; 49
    2150:	91 05       	cpc	r25, r1
    2152:	4c f4       	brge	.+18     	; 0x2166 <processCommand+0x302>
    2154:	80 31       	cpi	r24, 0x10	; 16
    2156:	91 05       	cpc	r25, r1
    2158:	d1 f0       	breq	.+52     	; 0x218e <processCommand+0x32a>
    215a:	80 32       	cpi	r24, 0x20	; 32
    215c:	91 05       	cpc	r25, r1
    215e:	d1 f0       	breq	.+52     	; 0x2194 <processCommand+0x330>
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	61 f0       	breq	.+24     	; 0x217c <processCommand+0x318>
    2164:	c7 c0       	rjmp	.+398    	; 0x22f4 <processCommand+0x490>
    2166:	80 35       	cpi	r24, 0x50	; 80
    2168:	91 05       	cpc	r25, r1
    216a:	f9 f0       	breq	.+62     	; 0x21aa <processCommand+0x346>
    216c:	80 36       	cpi	r24, 0x60	; 96
    216e:	91 05       	cpc	r25, r1
    2170:	f9 f0       	breq	.+62     	; 0x21b0 <processCommand+0x34c>
    2172:	80 34       	cpi	r24, 0x40	; 64
    2174:	91 05       	cpc	r25, r1
    2176:	09 f0       	breq	.+2      	; 0x217a <processCommand+0x316>
    2178:	bd c0       	rjmp	.+378    	; 0x22f4 <processCommand+0x490>
    217a:	14 c0       	rjmp	.+40     	; 0x21a4 <processCommand+0x340>
  {
  case PALM_CHAINADDRESS:
    // self bootload
    wdt_enable(WDT_PER_256CLK_gc);
    217c:	97 e1       	ldi	r25, 0x17	; 23
    217e:	88 ed       	ldi	r24, 0xD8	; 216
    2180:	08 b6       	in	r0, 0x38	; 56
    2182:	84 bf       	out	0x34, r24	; 52
    2184:	90 93 80 00 	sts	0x0080, r25
    2188:	a8 95       	wdr
    218a:	08 be       	out	0x38, r0	; 56
    218c:	ff cf       	rjmp	.-2      	; 0x218c <processCommand+0x328>
    while(1);  // use watchdog timer to trigger a reset                                     
    break;
  case FINGER1_CHAINADDRESS:
    BootRelay(&PROX1_USART,commandPacket);
    218e:	80 eb       	ldi	r24, 0xB0	; 176
    2190:	99 e0       	ldi	r25, 0x09	; 9
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <processCommand+0x334>
    break;
  case FINGER2_CHAINADDRESS:
    BootRelay(&PROX2_USART,commandPacket);
    2194:	80 eb       	ldi	r24, 0xB0	; 176
    2196:	98 e0       	ldi	r25, 0x08	; 8
    2198:	b8 01       	movw	r22, r16
    219a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <BootRelay>
    break;
  case FINGER3_CHAINADDRESS:
    BootRelay(&PROX3_USART,commandPacket);
    219e:	80 ea       	ldi	r24, 0xA0	; 160
    21a0:	99 e0       	ldi	r25, 0x09	; 9
    21a2:	fa cf       	rjmp	.-12     	; 0x2198 <processCommand+0x334>
    break;
  case MOTOR1_CHAINADDRESS:
    BootRelay(&MTR1_USART,commandPacket);
    21a4:	80 ea       	ldi	r24, 0xA0	; 160
    21a6:	9a e0       	ldi	r25, 0x0A	; 10
    21a8:	f7 cf       	rjmp	.-18     	; 0x2198 <processCommand+0x334>
    break;
  case MOTOR2_CHAINADDRESS:
    BootRelay(&MTR2_USART,commandPacket);
    21aa:	80 eb       	ldi	r24, 0xB0	; 176
    21ac:	9a e0       	ldi	r25, 0x0A	; 10
    21ae:	f4 cf       	rjmp	.-24     	; 0x2198 <processCommand+0x334>
    break;
  case TACTILE_CHAINADDRESS:
    BootRelay(&TACT_USART,commandPacket);
    21b0:	80 ea       	ldi	r24, 0xA0	; 160
    21b2:	98 e0       	ldi	r25, 0x08	; 8
    21b4:	f1 cf       	rjmp	.-30     	; 0x2198 <processCommand+0x334>
}

static int handleCalibrationCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint16_t collectionBitfield;
    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    21b6:	f8 01       	movw	r30, r16
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03

    if (collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
    21bc:	81 ff       	sbrs	r24, 1
    21be:	1c c0       	rjmp	.+56     	; 0x21f8 <processCommand+0x394>
    {
        RxCheckSumErrCnt[0] = 0;
    21c0:	10 92 5e 31 	sts	0x315E, r1
    21c4:	10 92 5f 31 	sts	0x315F, r1
        RxCheckSumErrCnt[1] = 0;
    21c8:	10 92 60 31 	sts	0x3160, r1
    21cc:	10 92 61 31 	sts	0x3161, r1
        RxCheckSumErrCnt[2] = 0;
    21d0:	10 92 62 31 	sts	0x3162, r1
    21d4:	10 92 63 31 	sts	0x3163, r1
        RxCheckSumErrCnt[3] = 0;
    21d8:	10 92 64 31 	sts	0x3164, r1
    21dc:	10 92 65 31 	sts	0x3165, r1
        RxCheckSumErrCnt[4] = 0;
    21e0:	10 92 66 31 	sts	0x3166, r1
    21e4:	10 92 67 31 	sts	0x3167, r1
        RxCheckSumErrCnt[5] = 0;
    21e8:	10 92 68 31 	sts	0x3168, r1
    21ec:	10 92 69 31 	sts	0x3169, r1
        RxCheckSumErrCnt[6] = 0;
    21f0:	10 92 6a 31 	sts	0x316A, r1
    21f4:	10 92 6b 31 	sts	0x316B, r1
    }
    
    if (collectionBitfield & DATA_COLLECTION_FINGERROTATION_BITMASK)
    21f8:	92 ff       	sbrs	r25, 2
    21fa:	25 c0       	rjmp	.+74     	; 0x2246 <processCommand+0x3e2>
    {
        uint32_t temp = rawEncoder;
    21fc:	80 91 5a 20 	lds	r24, 0x205A
    2200:	90 91 5b 20 	lds	r25, 0x205B
    2204:	aa 27       	eor	r26, r26
    2206:	97 fd       	sbrc	r25, 7
    2208:	a0 95       	com	r26
    220a:	ba 2f       	mov	r27, r26
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	9a 83       	std	Y+2, r25	; 0x02
    2210:	ab 83       	std	Y+3, r26	; 0x03
    2212:	bc 83       	std	Y+4, r27	; 0x04
        WriteIntToEEPROM(EEPROM_ADDRESS_ENCODER_OFFSET, (uint8_t*)&temp);
    2214:	8c e1       	ldi	r24, 0x1C	; 28
    2216:	be 01       	movw	r22, r28
    2218:	6f 5f       	subi	r22, 0xFF	; 255
    221a:	7f 4f       	sbci	r23, 0xFF	; 255
    221c:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <WriteIntToEEPROM>
        lastEncoder = rawEncoder;
    2220:	80 91 5a 20 	lds	r24, 0x205A
    2224:	90 91 5b 20 	lds	r25, 0x205B
    2228:	80 93 5f 20 	sts	0x205F, r24
    222c:	90 93 60 20 	sts	0x2060, r25
        adjustedEncoder = 0;
    2230:	10 92 5d 20 	sts	0x205D, r1
    2234:	10 92 5e 20 	sts	0x205E, r1
        encoderInitialized = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	80 93 5c 20 	sts	0x205C, r24
        targetEncoder = 0;
    223e:	10 92 5a 31 	sts	0x315A, r1
    2242:	10 92 5b 31 	sts	0x315B, r1
    }
    
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 3;
    2246:	83 e0       	ldi	r24, 0x03	; 3
    2248:	f6 01       	movw	r30, r12
    224a:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    224c:	11 82       	std	Z+1, r1	; 0x01
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = CALIBRATION_OPCODE;
    224e:	80 ec       	ldi	r24, 0xC0	; 192
    2250:	33 c0       	rjmp	.+102    	; 0x22b8 <processCommand+0x454>
static int handleEEPROMCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint8_t responseSize = 4;

    uint8_t opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    uint8_t address = commandPacket[COMMAND_OFFSET] & 0x1F;
    2252:	8f 71       	andi	r24, 0x1F	; 31

    switch(opcode)
    2254:	20 37       	cpi	r18, 0x70	; 112
    2256:	51 f0       	breq	.+20     	; 0x226c <processCommand+0x408>
    2258:	21 37       	cpi	r18, 0x71	; 113
    225a:	18 f4       	brcc	.+6      	; 0x2262 <processCommand+0x3fe>
    225c:	20 36       	cpi	r18, 0x60	; 96
    225e:	71 f5       	brne	.+92     	; 0x22bc <processCommand+0x458>
    2260:	05 c0       	rjmp	.+10     	; 0x226c <processCommand+0x408>
    2262:	20 38       	cpi	r18, 0x80	; 128
    2264:	d9 f0       	breq	.+54     	; 0x229c <processCommand+0x438>
    2266:	20 39       	cpi	r18, 0x90	; 144
    2268:	49 f5       	brne	.+82     	; 0x22bc <processCommand+0x458>
    226a:	18 c0       	rjmp	.+48     	; 0x229c <processCommand+0x438>
    {
        case MOTOR_PARAMETER_RE_L_OPCODE:
        case MOTOR_PARAMETER_RE_H_OPCODE:
            // Read 4 bytes of data
            ReadIntFromEEPROM(address, &outputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM]);
    226c:	b6 01       	movw	r22, r12
    226e:	6c 5f       	subi	r22, 0xFC	; 252
    2270:	7f 4f       	sbci	r23, 0xFF	; 255
    2272:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ReadIntFromEEPROM>
            // finish up the packet
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 3+responseSize;
    2276:	87 e0       	ldi	r24, 0x07	; 7
    2278:	f6 01       	movw	r30, r12
    227a:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    227c:	11 82       	std	Z+1, r1	; 0x01
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = commandPacket[COMMAND_OFFSET];
    227e:	f8 01       	movw	r30, r16
    2280:	81 81       	ldd	r24, Z+1	; 0x01
    2282:	f6 01       	movw	r30, r12
    2284:	82 83       	std	Z+2, r24	; 0x02
            outputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] = STATUS_OK;
    2286:	13 82       	std	Z+3, r1	; 0x03
            outputBuffer[4+responseSize] = computeChecksum(outputBuffer, 4+responseSize); //this is the checksum
    2288:	c6 01       	movw	r24, r12
    228a:	68 e0       	ldi	r22, 0x08	; 8
    228c:	70 e0       	ldi	r23, 0x00	; 0
    228e:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    2292:	f6 01       	movw	r30, r12
    2294:	80 87       	std	Z+8, r24	; 0x08
            return 5+responseSize;
    2296:	89 e0       	ldi	r24, 0x09	; 9
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	2e c0       	rjmp	.+92     	; 0x22f8 <processCommand+0x494>
        case MOTOR_PARAMETER_WR_L_OPCODE:
        case MOTOR_PARAMETER_WR_H_OPCODE:
            
            // Write 32 bits of data
            WriteIntToEEPROM(address, &commandPacket[PAYLOAD_OFFSET]);
    229c:	b8 01       	movw	r22, r16
    229e:	6e 5f       	subi	r22, 0xFE	; 254
    22a0:	7f 4f       	sbci	r23, 0xFF	; 255
    22a2:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <WriteIntToEEPROM>
            
            // re-init state
            initStateFromEEPROM();
    22a6:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <initStateFromEEPROM>
            
            // ack the command
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 3;
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	f6 01       	movw	r30, r12
    22ae:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    22b0:	11 82       	std	Z+1, r1	; 0x01
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = commandPacket[COMMAND_OFFSET];
    22b2:	f8 01       	movw	r30, r16
    22b4:	81 81       	ldd	r24, Z+1	; 0x01
    22b6:	f6 01       	movw	r30, r12
    22b8:	82 83       	std	Z+2, r24	; 0x02
    22ba:	bb ce       	rjmp	.-650    	; 0x2032 <processCommand+0x1ce>
            outputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] = STATUS_OK;
            outputBuffer[4] = computeChecksum(outputBuffer, 4); //this is the checksum
            return 5;
        default:
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 3;
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	f6 01       	movw	r30, r12
    22c0:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    22c2:	11 82       	std	Z+1, r1	; 0x01
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = commandPacket[COMMAND_OFFSET];
    22c4:	f8 01       	movw	r30, r16
    22c6:	81 81       	ldd	r24, Z+1	; 0x01
    22c8:	f6 01       	movw	r30, r12
    22ca:	82 83       	std	Z+2, r24	; 0x02
    22cc:	0a c0       	rjmp	.+20     	; 0x22e2 <processCommand+0x47e>
    return 5;
}

static int handleSetChainMaskCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    memcpy(&chainMask, &commandPacket[PAYLOAD_OFFSET], 1);
    22ce:	f8 01       	movw	r30, r16
    22d0:	82 81       	ldd	r24, Z+2	; 0x02
    22d2:	80 93 00 20 	sts	0x2000, r24
    22d6:	a8 ce       	rjmp	.-688    	; 0x2028 <processCommand+0x1c4>

        case SET_CHAIN_MASK_OPCODE:
            return handleSetChainMaskCommand(commandPacket, outputBuffer);

        default:
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_LSB] = 3;
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	f6 01       	movw	r30, r12
    22dc:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET_PALM_MSB] = 0;
    22de:	11 82       	std	Z+1, r1	; 0x01
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = opcode;
    22e0:	22 83       	std	Z+2, r18	; 0x02
            outputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] = UNKNOWN_COMMAND;
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	83 83       	std	Z+3, r24	; 0x03
            outputBuffer[4] = computeChecksum(outputBuffer, 4); //this is the checksum
    22e6:	c6 01       	movw	r24, r12
    22e8:	64 e0       	ldi	r22, 0x04	; 4
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	0e 94 96 07 	call	0xf2c	; 0xf2c <computeChecksum>
    22f0:	f6 01       	movw	r30, r12
    22f2:	84 83       	std	Z+4, r24	; 0x04

        case FINGER_COMMAND_OPCODE:
            return handleFingerCommand(commandPacket,outputBuffer);

        case BOOTLOADER_OPCODE:
            return handleBootloaderCommand(commandPacket,outputBuffer);
    22f4:	85 e0       	ldi	r24, 0x05	; 5
    22f6:	90 e0       	ldi	r25, 0x00	; 0
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET_PALM] = opcode;
            outputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] = UNKNOWN_COMMAND;
            outputBuffer[4] = computeChecksum(outputBuffer, 4); //this is the checksum
            return 5;
    }
}
    22f8:	60 96       	adiw	r28, 0x10	; 16
    22fa:	cd bf       	out	0x3d, r28	; 61
    22fc:	de bf       	out	0x3e, r29	; 62
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	bf 90       	pop	r11
    2310:	af 90       	pop	r10
    2312:	08 95       	ret

00002314 <LEDon>:

void LEDon()
{
  PORTK.OUTSET = 0x08; //LED
    2314:	88 e0       	ldi	r24, 0x08	; 8
    2316:	e0 e2       	ldi	r30, 0x20	; 32
    2318:	f7 e0       	ldi	r31, 0x07	; 7
    231a:	85 83       	std	Z+5, r24	; 0x05
}
    231c:	08 95       	ret

0000231e <LEDoff>:
void LEDoff()
{
  PORTK.OUTCLR = 0x08; //LED
    231e:	88 e0       	ldi	r24, 0x08	; 8
    2320:	e0 e2       	ldi	r30, 0x20	; 32
    2322:	f7 e0       	ldi	r31, 0x07	; 7
    2324:	86 83       	std	Z+6, r24	; 0x06
}
    2326:	08 95       	ret

00002328 <LEDtoggle>:
void LEDtoggle()
{
  PORTK.OUTTGL = 0x08; //LED
    2328:	88 e0       	ldi	r24, 0x08	; 8
    232a:	e0 e2       	ldi	r30, 0x20	; 32
    232c:	f7 e0       	ldi	r31, 0x07	; 7
    232e:	87 83       	std	Z+7, r24	; 0x07
}
    2330:	08 95       	ret

00002332 <main>:
*
* This initializes the other port modules and polls a few volatile status
* bits set in ISRs.
************************************************************************/
int main(void)
{
    2332:	cf 93       	push	r28
    2334:	df 93       	push	r29
    2336:	00 d0       	rcall	.+0      	; 0x2338 <main+0x6>
    2338:	0f 92       	push	r0
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    configurePortIO();
    233e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <configurePortIO>
    }
}

void LEDon()
{
  PORTK.OUTSET = 0x08; //LED
    2342:	88 e0       	ldi	r24, 0x08	; 8
    2344:	e0 e2       	ldi	r30, 0x20	; 32
    2346:	f7 e0       	ldi	r31, 0x07	; 7
    2348:	85 83       	std	Z+5, r24	; 0x05
************************************************************************/
int main(void)
{
    configurePortIO();
    LEDon();
    cli(); //disable all interrupts for clock reset
    234a:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    234c:	8f e3       	ldi	r24, 0x3F	; 63
    234e:	9f e1       	ldi	r25, 0x1F	; 31
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <main+0x1e>
    2354:	00 c0       	rjmp	.+0      	; 0x2356 <main+0x24>
    2356:	00 00       	nop
* is running.  This will feed a 1.024 kHz clock to the RTC.
* The system clock will use the onboard 32MHz oscillator
************************************************************************/
static void configureClocks(void)
{
    OSC.CTRL = OSC_RC32MEN_bm | OSC_RC32KEN_bm;    //enable the 32MHz ring oscillator and the 32kHz RTC oscillator
    2358:	86 e0       	ldi	r24, 0x06	; 6
    235a:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm));        //wait for 32MHz to stabilize
    235e:	80 91 51 00 	lds	r24, 0x0051
    2362:	81 ff       	sbrs	r24, 1
    2364:	fc cf       	rjmp	.-8      	; 0x235e <main+0x2c>
    while(!(OSC.STATUS & OSC_RC32KRDY_bm));        //wait for 32kHz to stabilize
    2366:	80 91 51 00 	lds	r24, 0x0051
    236a:	82 ff       	sbrs	r24, 2
    236c:	fc cf       	rjmp	.-8      	; 0x2366 <main+0x34>

    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    236e:	01 e0       	ldi	r16, 0x01	; 1
    2370:	00 93 60 00 	sts	0x0060, r16
    DFLLRC2M.CTRL = DFLL_ENABLE_bm;
    2374:	00 93 68 00 	sts	0x0068, r16

    CCP = CCP_IOREG_gc;                //clock is protected by Configuration Change Protection - must be properly disabled to change clock source
    2378:	88 ed       	ldi	r24, 0xD8	; 216
    237a:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;        //switch to 32MHz oscillator
    237c:	00 93 40 00 	sts	0x0040, r16
    CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;    //Select 1.024 kHz from internal oscillator for RTC clock source
    2380:	85 e0       	ldi	r24, 0x05	; 5
    2382:	e0 e4       	ldi	r30, 0x40	; 64
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	83 83       	std	Z+3, r24	; 0x03
    2388:	af e3       	ldi	r26, 0x3F	; 63
    238a:	bf e1       	ldi	r27, 0x1F	; 31
    238c:	11 97       	sbiw	r26, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <main+0x5a>
    2390:	00 c0       	rjmp	.+0      	; 0x2392 <main+0x60>
    2392:	00 00       	nop
    LEDon();
    cli(); //disable all interrupts for clock reset
    _delay_ms(1); // for stability of supplies
    configureClocks();
    _delay_ms(1); // for stability of clocks
    configureADC();
    2394:	0e 94 0a 02 	call	0x414	; 0x414 <configureADC>
    configureRouterUSARTs();
    2398:	0e 94 30 09 	call	0x1260	; 0x1260 <configureRouterUSARTs>
    configureDAC();
    239c:	0e 94 43 02 	call	0x486	; 0x486 <configureDAC>

    // i don't know why a dummy read is required, but it is
    readEncoder(); //dummy read
    23a0:	0e 94 55 02 	call	0x4aa	; 0x4aa <readEncoder>
    encoderInitialized = 0; // re-initialize
    23a4:	10 92 5c 20 	sts	0x205C, r1
    23a8:	8f ef       	ldi	r24, 0xFF	; 255
    23aa:	93 ec       	ldi	r25, 0xC3	; 195
    23ac:	a9 e0       	ldi	r26, 0x09	; 9
    23ae:	81 50       	subi	r24, 0x01	; 1
    23b0:	90 40       	sbci	r25, 0x00	; 0
    23b2:	a0 40       	sbci	r26, 0x00	; 0
    23b4:	e1 f7       	brne	.-8      	; 0x23ae <main+0x7c>
    23b6:	00 c0       	rjmp	.+0      	; 0x23b8 <main+0x86>
    23b8:	00 00       	nop
{
  PORTK.OUTSET = 0x08; //LED
}
void LEDoff()
{
  PORTK.OUTCLR = 0x08; //LED
    23ba:	88 e0       	ldi	r24, 0x08	; 8
    23bc:	e0 e2       	ldi	r30, 0x20	; 32
    23be:	f7 e0       	ldi	r31, 0x07	; 7
    23c0:	86 83       	std	Z+6, r24	; 0x06

    _delay_ms(100); // for stability of inputs
    //calibrateIMON_ADCOffset();
    LEDoff();
  
    initStateFromEEPROM();
    23c2:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <initStateFromEEPROM>
    encoderInitialized = 1;
    23c6:	00 93 5c 20 	sts	0x205C, r16
    //*destination = eeprom_read_dword((uint32_t *) (address*4));
}

static void verifyVersion(void)
{
    uint32_t temp = 0;
    23ca:	19 82       	std	Y+1, r1	; 0x01
    23cc:	1a 82       	std	Y+2, r1	; 0x02
    23ce:	1b 82       	std	Y+3, r1	; 0x03
    23d0:	1c 82       	std	Y+4, r1	; 0x04
    ReadIntFromEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&temp);
    23d2:	8d e1       	ldi	r24, 0x1D	; 29
    23d4:	be 01       	movw	r22, r28
    23d6:	6f 5f       	subi	r22, 0xFF	; 255
    23d8:	7f 4f       	sbci	r23, 0xFF	; 255
    23da:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <ReadIntFromEEPROM>
    if (temp != FIRMWARE_VERSION)
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	ab 81       	ldd	r26, Y+3	; 0x03
    23e4:	bc 81       	ldd	r27, Y+4	; 0x04
    23e6:	8d 32       	cpi	r24, 0x2D	; 45
    23e8:	e1 e0       	ldi	r30, 0x01	; 1
    23ea:	9e 07       	cpc	r25, r30
    23ec:	e0 e0       	ldi	r30, 0x00	; 0
    23ee:	ae 07       	cpc	r26, r30
    23f0:	e0 e0       	ldi	r30, 0x00	; 0
    23f2:	be 07       	cpc	r27, r30
    23f4:	71 f0       	breq	.+28     	; 0x2412 <main+0xe0>
    {
        temp = FIRMWARE_VERSION;
    23f6:	8d e2       	ldi	r24, 0x2D	; 45
    23f8:	91 e0       	ldi	r25, 0x01	; 1
    23fa:	a0 e0       	ldi	r26, 0x00	; 0
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	9a 83       	std	Y+2, r25	; 0x02
    2402:	ab 83       	std	Y+3, r26	; 0x03
    2404:	bc 83       	std	Y+4, r27	; 0x04
        WriteIntToEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&temp);
    2406:	8d e1       	ldi	r24, 0x1D	; 29
    2408:	be 01       	movw	r22, r28
    240a:	6f 5f       	subi	r22, 0xFF	; 255
    240c:	7f 4f       	sbci	r23, 0xFF	; 255
    240e:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <WriteIntToEEPROM>
    encoderInitialized = 1;
    
    verifyVersion();

    //tell event system to pay attention to low-priority and high-priority interrupts
    PMIC.CTRL |= PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
    2412:	e0 ea       	ldi	r30, 0xA0	; 160
    2414:	f0 e0       	ldi	r31, 0x00	; 0
    2416:	80 91 a2 00 	lds	r24, 0x00A2
    241a:	87 60       	ori	r24, 0x07	; 7
    241c:	82 83       	std	Z+2, r24	; 0x02
    PMIC.CTRL |= PMIC_RREN_bm; // enable round robin for low level interrupts
    241e:	80 91 a2 00 	lds	r24, 0x00A2
    2422:	80 68       	ori	r24, 0x80	; 128
    2424:	82 83       	std	Z+2, r24	; 0x02
    sei();
    2426:	78 94       	sei
}

static void spreadMotorStop(void)
{
    //MOTOR_EN_PORT.OUTCLR = MOTOR_EN_BITMASK;
    MOTOR_DIR_PORT.OUTCLR = MOTOR_DIR_BITMASK | MOTOR_nDIR_BITMASK;
    2428:	00 ea       	ldi	r16, 0xA0	; 160
    242a:	16 e0       	ldi	r17, 0x06	; 6
    242c:	53 e0       	ldi	r21, 0x03	; 3
    242e:	b5 2e       	mov	r11, r21
    //MOTOR_EN_PORT.OUTSET = MOTOR_EN_BITMASK;   
}

static void spreadMotorReverse(uint16_t dac)
{
    DACB.CH0DATA = dac;
    2430:	60 e2       	ldi	r22, 0x20	; 32
    2432:	c6 2e       	mov	r12, r22
    2434:	63 e0       	ldi	r22, 0x03	; 3
    2436:	d6 2e       	mov	r13, r22
    
    MOTOR_DIR_PORT.OUTCLR = MOTOR_nDIR_BITMASK;
    2438:	72 e0       	ldi	r23, 0x02	; 2
    243a:	f7 2e       	mov	r15, r23
    MOTOR_DIR_PORT.OUTSET = MOTOR_DIR_BITMASK;
    243c:	ee 24       	eor	r14, r14
    243e:	e3 94       	inc	r14
    PMIC.CTRL |= PMIC_RREN_bm; // enable round robin for low level interrupts
    sei();

    while(1)
    {
        readEncoder();
    2440:	0e 94 55 02 	call	0x4aa	; 0x4aa <readEncoder>
        
        // position mode for spread motor
        if (spreadMotorMode == SPREAD_MODE_POSITION)
    2444:	80 91 5c 31 	lds	r24, 0x315C
    2448:	81 30       	cpi	r24, 0x01	; 1
    244a:	09 f0       	breq	.+2      	; 0x244e <main+0x11c>
    244c:	5b c0       	rjmp	.+182    	; 0x2504 <main+0x1d2>
        {
            if (targetEncoder - adjustedEncoder > spreadDeadband)
    244e:	20 91 5a 31 	lds	r18, 0x315A
    2452:	30 91 5b 31 	lds	r19, 0x315B
    2456:	80 91 5d 20 	lds	r24, 0x205D
    245a:	90 91 5e 20 	lds	r25, 0x205E
    245e:	a9 01       	movw	r20, r18
    2460:	48 1b       	sub	r20, r24
    2462:	59 0b       	sbc	r21, r25
    2464:	60 91 58 31 	lds	r22, 0x3158
    2468:	70 91 59 31 	lds	r23, 0x3159
    246c:	64 17       	cp	r22, r20
    246e:	75 07       	cpc	r23, r21
    2470:	04 f5       	brge	.+64     	; 0x24b2 <main+0x180>
            {
                uint16_t speed = abs(targetEncoder - adjustedEncoder) * spreadP;
    2472:	ca 01       	movw	r24, r20
    2474:	57 ff       	sbrs	r21, 7
    2476:	03 c0       	rjmp	.+6      	; 0x247e <main+0x14c>
    2478:	90 95       	com	r25
    247a:	81 95       	neg	r24
    247c:	9f 4f       	sbci	r25, 0xFF	; 255
    247e:	40 91 56 31 	lds	r20, 0x3156
    2482:	50 91 57 31 	lds	r21, 0x3157
    2486:	84 9f       	mul	r24, r20
    2488:	90 01       	movw	r18, r0
    248a:	85 9f       	mul	r24, r21
    248c:	30 0d       	add	r19, r0
    248e:	94 9f       	mul	r25, r20
    2490:	30 0d       	add	r19, r0
    2492:	11 24       	eor	r1, r1
    2494:	f0 e1       	ldi	r31, 0x10	; 16
    2496:	20 30       	cpi	r18, 0x00	; 0
    2498:	3f 07       	cpc	r19, r31
    249a:	10 f0       	brcs	.+4      	; 0x24a0 <main+0x16e>
    249c:	2f ef       	ldi	r18, 0xFF	; 255
    249e:	3f e0       	ldi	r19, 0x0F	; 15
    MOTOR_DIR_PORT.OUTCLR = MOTOR_DIR_BITMASK | MOTOR_nDIR_BITMASK;
}

static void spreadMotorForward(uint16_t dac)
{
    DACB.CH0DATA = dac;
    24a0:	d6 01       	movw	r26, r12
    24a2:	58 96       	adiw	r26, 0x18	; 24
    24a4:	2d 93       	st	X+, r18
    24a6:	3c 93       	st	X, r19
    24a8:	59 97       	sbiw	r26, 0x19	; 25
    
    MOTOR_DIR_PORT.OUTCLR = MOTOR_DIR_BITMASK;
    24aa:	f8 01       	movw	r30, r16
    24ac:	e6 82       	std	Z+6, r14	; 0x06
    MOTOR_DIR_PORT.OUTSET = MOTOR_nDIR_BITMASK;
    24ae:	f5 82       	std	Z+5, r15	; 0x05
    24b0:	29 c0       	rjmp	.+82     	; 0x2504 <main+0x1d2>
                uint16_t speed = abs(targetEncoder - adjustedEncoder) * spreadP;
                if (speed > 4095) // 12 bit DAC
                    speed = 4095;
                spreadMotorForward(speed);
            }
            else if (adjustedEncoder - targetEncoder > spreadDeadband)
    24b2:	82 1b       	sub	r24, r18
    24b4:	93 0b       	sbc	r25, r19
    24b6:	68 17       	cp	r22, r24
    24b8:	79 07       	cpc	r23, r25
    24ba:	04 f5       	brge	.+64     	; 0x24fc <main+0x1ca>
            {
                uint16_t speed = abs(targetEncoder - adjustedEncoder) * spreadP;
    24bc:	ca 01       	movw	r24, r20
    24be:	57 ff       	sbrs	r21, 7
    24c0:	03 c0       	rjmp	.+6      	; 0x24c8 <main+0x196>
    24c2:	90 95       	com	r25
    24c4:	81 95       	neg	r24
    24c6:	9f 4f       	sbci	r25, 0xFF	; 255
    24c8:	40 91 56 31 	lds	r20, 0x3156
    24cc:	50 91 57 31 	lds	r21, 0x3157
    24d0:	84 9f       	mul	r24, r20
    24d2:	90 01       	movw	r18, r0
    24d4:	85 9f       	mul	r24, r21
    24d6:	30 0d       	add	r19, r0
    24d8:	94 9f       	mul	r25, r20
    24da:	30 0d       	add	r19, r0
    24dc:	11 24       	eor	r1, r1
    24de:	f0 e1       	ldi	r31, 0x10	; 16
    24e0:	20 30       	cpi	r18, 0x00	; 0
    24e2:	3f 07       	cpc	r19, r31
    24e4:	10 f0       	brcs	.+4      	; 0x24ea <main+0x1b8>
    24e6:	2f ef       	ldi	r18, 0xFF	; 255
    24e8:	3f e0       	ldi	r19, 0x0F	; 15
    //MOTOR_EN_PORT.OUTSET = MOTOR_EN_BITMASK;   
}

static void spreadMotorReverse(uint16_t dac)
{
    DACB.CH0DATA = dac;
    24ea:	d6 01       	movw	r26, r12
    24ec:	58 96       	adiw	r26, 0x18	; 24
    24ee:	2d 93       	st	X+, r18
    24f0:	3c 93       	st	X, r19
    24f2:	59 97       	sbiw	r26, 0x19	; 25
    
    MOTOR_DIR_PORT.OUTCLR = MOTOR_nDIR_BITMASK;
    24f4:	f8 01       	movw	r30, r16
    24f6:	f6 82       	std	Z+6, r15	; 0x06
    MOTOR_DIR_PORT.OUTSET = MOTOR_DIR_BITMASK;
    24f8:	e5 82       	std	Z+5, r14	; 0x05
    24fa:	04 c0       	rjmp	.+8      	; 0x2504 <main+0x1d2>
}

static void spreadMotorStop(void)
{
    //MOTOR_EN_PORT.OUTCLR = MOTOR_EN_BITMASK;
    MOTOR_DIR_PORT.OUTCLR = MOTOR_DIR_BITMASK | MOTOR_nDIR_BITMASK;
    24fc:	d8 01       	movw	r26, r16
    24fe:	16 96       	adiw	r26, 0x06	; 6
    2500:	bc 92       	st	X, r11
    2502:	16 97       	sbiw	r26, 0x06	; 6
            {
                spreadMotorStop();
            }
        }
        
        if(commandReady)
    2504:	80 91 61 20 	lds	r24, 0x2061
    2508:	88 23       	and	r24, r24
    250a:	11 f0       	breq	.+4      	; 0x2510 <main+0x1de>
        {
            doRouterTask();
    250c:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <doRouterTask>
        }

        if(freerun_flag)
    2510:	80 91 5d 31 	lds	r24, 0x315D
    2514:	88 23       	and	r24, r24
    2516:	09 f4       	brne	.+2      	; 0x251a <main+0x1e8>
    2518:	93 cf       	rjmp	.-218    	; 0x2440 <main+0x10e>
        {
            freerun_flag = 0;
    251a:	10 92 5d 31 	sts	0x315D, r1
            doFreerunTask();
    251e:	0e 94 be 0c 	call	0x197c	; 0x197c <doFreerunTask>
    2522:	8e cf       	rjmp	.-228    	; 0x2440 <main+0x10e>

00002524 <__subsf3>:
    2524:	50 58       	subi	r21, 0x80	; 128

00002526 <__addsf3>:
    2526:	bb 27       	eor	r27, r27
    2528:	aa 27       	eor	r26, r26
    252a:	0e d0       	rcall	.+28     	; 0x2548 <__addsf3x>
    252c:	48 c1       	rjmp	.+656    	; 0x27be <__fp_round>
    252e:	39 d1       	rcall	.+626    	; 0x27a2 <__fp_pscA>
    2530:	30 f0       	brcs	.+12     	; 0x253e <__addsf3+0x18>
    2532:	3e d1       	rcall	.+636    	; 0x27b0 <__fp_pscB>
    2534:	20 f0       	brcs	.+8      	; 0x253e <__addsf3+0x18>
    2536:	31 f4       	brne	.+12     	; 0x2544 <__addsf3+0x1e>
    2538:	9f 3f       	cpi	r25, 0xFF	; 255
    253a:	11 f4       	brne	.+4      	; 0x2540 <__addsf3+0x1a>
    253c:	1e f4       	brtc	.+6      	; 0x2544 <__addsf3+0x1e>
    253e:	2e c1       	rjmp	.+604    	; 0x279c <__fp_nan>
    2540:	0e f4       	brtc	.+2      	; 0x2544 <__addsf3+0x1e>
    2542:	e0 95       	com	r30
    2544:	e7 fb       	bst	r30, 7
    2546:	24 c1       	rjmp	.+584    	; 0x2790 <__fp_inf>

00002548 <__addsf3x>:
    2548:	e9 2f       	mov	r30, r25
    254a:	4a d1       	rcall	.+660    	; 0x27e0 <__fp_split3>
    254c:	80 f3       	brcs	.-32     	; 0x252e <__addsf3+0x8>
    254e:	ba 17       	cp	r27, r26
    2550:	62 07       	cpc	r22, r18
    2552:	73 07       	cpc	r23, r19
    2554:	84 07       	cpc	r24, r20
    2556:	95 07       	cpc	r25, r21
    2558:	18 f0       	brcs	.+6      	; 0x2560 <__addsf3x+0x18>
    255a:	71 f4       	brne	.+28     	; 0x2578 <__addsf3x+0x30>
    255c:	9e f5       	brtc	.+102    	; 0x25c4 <__addsf3x+0x7c>
    255e:	62 c1       	rjmp	.+708    	; 0x2824 <__fp_zero>
    2560:	0e f4       	brtc	.+2      	; 0x2564 <__addsf3x+0x1c>
    2562:	e0 95       	com	r30
    2564:	0b 2e       	mov	r0, r27
    2566:	ba 2f       	mov	r27, r26
    2568:	a0 2d       	mov	r26, r0
    256a:	0b 01       	movw	r0, r22
    256c:	b9 01       	movw	r22, r18
    256e:	90 01       	movw	r18, r0
    2570:	0c 01       	movw	r0, r24
    2572:	ca 01       	movw	r24, r20
    2574:	a0 01       	movw	r20, r0
    2576:	11 24       	eor	r1, r1
    2578:	ff 27       	eor	r31, r31
    257a:	59 1b       	sub	r21, r25
    257c:	99 f0       	breq	.+38     	; 0x25a4 <__addsf3x+0x5c>
    257e:	59 3f       	cpi	r21, 0xF9	; 249
    2580:	50 f4       	brcc	.+20     	; 0x2596 <__addsf3x+0x4e>
    2582:	50 3e       	cpi	r21, 0xE0	; 224
    2584:	68 f1       	brcs	.+90     	; 0x25e0 <__addsf3x+0x98>
    2586:	1a 16       	cp	r1, r26
    2588:	f0 40       	sbci	r31, 0x00	; 0
    258a:	a2 2f       	mov	r26, r18
    258c:	23 2f       	mov	r18, r19
    258e:	34 2f       	mov	r19, r20
    2590:	44 27       	eor	r20, r20
    2592:	58 5f       	subi	r21, 0xF8	; 248
    2594:	f3 cf       	rjmp	.-26     	; 0x257c <__addsf3x+0x34>
    2596:	46 95       	lsr	r20
    2598:	37 95       	ror	r19
    259a:	27 95       	ror	r18
    259c:	a7 95       	ror	r26
    259e:	f0 40       	sbci	r31, 0x00	; 0
    25a0:	53 95       	inc	r21
    25a2:	c9 f7       	brne	.-14     	; 0x2596 <__addsf3x+0x4e>
    25a4:	7e f4       	brtc	.+30     	; 0x25c4 <__addsf3x+0x7c>
    25a6:	1f 16       	cp	r1, r31
    25a8:	ba 0b       	sbc	r27, r26
    25aa:	62 0b       	sbc	r22, r18
    25ac:	73 0b       	sbc	r23, r19
    25ae:	84 0b       	sbc	r24, r20
    25b0:	ba f0       	brmi	.+46     	; 0x25e0 <__addsf3x+0x98>
    25b2:	91 50       	subi	r25, 0x01	; 1
    25b4:	a1 f0       	breq	.+40     	; 0x25de <__addsf3x+0x96>
    25b6:	ff 0f       	add	r31, r31
    25b8:	bb 1f       	adc	r27, r27
    25ba:	66 1f       	adc	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	88 1f       	adc	r24, r24
    25c0:	c2 f7       	brpl	.-16     	; 0x25b2 <__addsf3x+0x6a>
    25c2:	0e c0       	rjmp	.+28     	; 0x25e0 <__addsf3x+0x98>
    25c4:	ba 0f       	add	r27, r26
    25c6:	62 1f       	adc	r22, r18
    25c8:	73 1f       	adc	r23, r19
    25ca:	84 1f       	adc	r24, r20
    25cc:	48 f4       	brcc	.+18     	; 0x25e0 <__addsf3x+0x98>
    25ce:	87 95       	ror	r24
    25d0:	77 95       	ror	r23
    25d2:	67 95       	ror	r22
    25d4:	b7 95       	ror	r27
    25d6:	f7 95       	ror	r31
    25d8:	9e 3f       	cpi	r25, 0xFE	; 254
    25da:	08 f0       	brcs	.+2      	; 0x25de <__addsf3x+0x96>
    25dc:	b3 cf       	rjmp	.-154    	; 0x2544 <__addsf3+0x1e>
    25de:	93 95       	inc	r25
    25e0:	88 0f       	add	r24, r24
    25e2:	08 f0       	brcs	.+2      	; 0x25e6 <__addsf3x+0x9e>
    25e4:	99 27       	eor	r25, r25
    25e6:	ee 0f       	add	r30, r30
    25e8:	97 95       	ror	r25
    25ea:	87 95       	ror	r24
    25ec:	08 95       	ret

000025ee <__divsf3>:
    25ee:	0c d0       	rcall	.+24     	; 0x2608 <__divsf3x>
    25f0:	e6 c0       	rjmp	.+460    	; 0x27be <__fp_round>
    25f2:	de d0       	rcall	.+444    	; 0x27b0 <__fp_pscB>
    25f4:	40 f0       	brcs	.+16     	; 0x2606 <__divsf3+0x18>
    25f6:	d5 d0       	rcall	.+426    	; 0x27a2 <__fp_pscA>
    25f8:	30 f0       	brcs	.+12     	; 0x2606 <__divsf3+0x18>
    25fa:	21 f4       	brne	.+8      	; 0x2604 <__divsf3+0x16>
    25fc:	5f 3f       	cpi	r21, 0xFF	; 255
    25fe:	19 f0       	breq	.+6      	; 0x2606 <__divsf3+0x18>
    2600:	c7 c0       	rjmp	.+398    	; 0x2790 <__fp_inf>
    2602:	51 11       	cpse	r21, r1
    2604:	10 c1       	rjmp	.+544    	; 0x2826 <__fp_szero>
    2606:	ca c0       	rjmp	.+404    	; 0x279c <__fp_nan>

00002608 <__divsf3x>:
    2608:	eb d0       	rcall	.+470    	; 0x27e0 <__fp_split3>
    260a:	98 f3       	brcs	.-26     	; 0x25f2 <__divsf3+0x4>

0000260c <__divsf3_pse>:
    260c:	99 23       	and	r25, r25
    260e:	c9 f3       	breq	.-14     	; 0x2602 <__divsf3+0x14>
    2610:	55 23       	and	r21, r21
    2612:	b1 f3       	breq	.-20     	; 0x2600 <__divsf3+0x12>
    2614:	95 1b       	sub	r25, r21
    2616:	55 0b       	sbc	r21, r21
    2618:	bb 27       	eor	r27, r27
    261a:	aa 27       	eor	r26, r26
    261c:	62 17       	cp	r22, r18
    261e:	73 07       	cpc	r23, r19
    2620:	84 07       	cpc	r24, r20
    2622:	38 f0       	brcs	.+14     	; 0x2632 <__divsf3_pse+0x26>
    2624:	9f 5f       	subi	r25, 0xFF	; 255
    2626:	5f 4f       	sbci	r21, 0xFF	; 255
    2628:	22 0f       	add	r18, r18
    262a:	33 1f       	adc	r19, r19
    262c:	44 1f       	adc	r20, r20
    262e:	aa 1f       	adc	r26, r26
    2630:	a9 f3       	breq	.-22     	; 0x261c <__divsf3_pse+0x10>
    2632:	33 d0       	rcall	.+102    	; 0x269a <__divsf3_pse+0x8e>
    2634:	0e 2e       	mov	r0, r30
    2636:	3a f0       	brmi	.+14     	; 0x2646 <__divsf3_pse+0x3a>
    2638:	e0 e8       	ldi	r30, 0x80	; 128
    263a:	30 d0       	rcall	.+96     	; 0x269c <__divsf3_pse+0x90>
    263c:	91 50       	subi	r25, 0x01	; 1
    263e:	50 40       	sbci	r21, 0x00	; 0
    2640:	e6 95       	lsr	r30
    2642:	00 1c       	adc	r0, r0
    2644:	ca f7       	brpl	.-14     	; 0x2638 <__divsf3_pse+0x2c>
    2646:	29 d0       	rcall	.+82     	; 0x269a <__divsf3_pse+0x8e>
    2648:	fe 2f       	mov	r31, r30
    264a:	27 d0       	rcall	.+78     	; 0x269a <__divsf3_pse+0x8e>
    264c:	66 0f       	add	r22, r22
    264e:	77 1f       	adc	r23, r23
    2650:	88 1f       	adc	r24, r24
    2652:	bb 1f       	adc	r27, r27
    2654:	26 17       	cp	r18, r22
    2656:	37 07       	cpc	r19, r23
    2658:	48 07       	cpc	r20, r24
    265a:	ab 07       	cpc	r26, r27
    265c:	b0 e8       	ldi	r27, 0x80	; 128
    265e:	09 f0       	breq	.+2      	; 0x2662 <__divsf3_pse+0x56>
    2660:	bb 0b       	sbc	r27, r27
    2662:	80 2d       	mov	r24, r0
    2664:	bf 01       	movw	r22, r30
    2666:	ff 27       	eor	r31, r31
    2668:	93 58       	subi	r25, 0x83	; 131
    266a:	5f 4f       	sbci	r21, 0xFF	; 255
    266c:	2a f0       	brmi	.+10     	; 0x2678 <__divsf3_pse+0x6c>
    266e:	9e 3f       	cpi	r25, 0xFE	; 254
    2670:	51 05       	cpc	r21, r1
    2672:	68 f0       	brcs	.+26     	; 0x268e <__divsf3_pse+0x82>
    2674:	8d c0       	rjmp	.+282    	; 0x2790 <__fp_inf>
    2676:	d7 c0       	rjmp	.+430    	; 0x2826 <__fp_szero>
    2678:	5f 3f       	cpi	r21, 0xFF	; 255
    267a:	ec f3       	brlt	.-6      	; 0x2676 <__divsf3_pse+0x6a>
    267c:	98 3e       	cpi	r25, 0xE8	; 232
    267e:	dc f3       	brlt	.-10     	; 0x2676 <__divsf3_pse+0x6a>
    2680:	86 95       	lsr	r24
    2682:	77 95       	ror	r23
    2684:	67 95       	ror	r22
    2686:	b7 95       	ror	r27
    2688:	f7 95       	ror	r31
    268a:	9f 5f       	subi	r25, 0xFF	; 255
    268c:	c9 f7       	brne	.-14     	; 0x2680 <__divsf3_pse+0x74>
    268e:	88 0f       	add	r24, r24
    2690:	91 1d       	adc	r25, r1
    2692:	96 95       	lsr	r25
    2694:	87 95       	ror	r24
    2696:	97 f9       	bld	r25, 7
    2698:	08 95       	ret
    269a:	e1 e0       	ldi	r30, 0x01	; 1
    269c:	66 0f       	add	r22, r22
    269e:	77 1f       	adc	r23, r23
    26a0:	88 1f       	adc	r24, r24
    26a2:	bb 1f       	adc	r27, r27
    26a4:	62 17       	cp	r22, r18
    26a6:	73 07       	cpc	r23, r19
    26a8:	84 07       	cpc	r24, r20
    26aa:	ba 07       	cpc	r27, r26
    26ac:	20 f0       	brcs	.+8      	; 0x26b6 <__divsf3_pse+0xaa>
    26ae:	62 1b       	sub	r22, r18
    26b0:	73 0b       	sbc	r23, r19
    26b2:	84 0b       	sbc	r24, r20
    26b4:	ba 0b       	sbc	r27, r26
    26b6:	ee 1f       	adc	r30, r30
    26b8:	88 f7       	brcc	.-30     	; 0x269c <__divsf3_pse+0x90>
    26ba:	e0 95       	com	r30
    26bc:	08 95       	ret

000026be <__fixunssfsi>:
    26be:	98 d0       	rcall	.+304    	; 0x27f0 <__fp_splitA>
    26c0:	88 f0       	brcs	.+34     	; 0x26e4 <__fixunssfsi+0x26>
    26c2:	9f 57       	subi	r25, 0x7F	; 127
    26c4:	90 f0       	brcs	.+36     	; 0x26ea <__fixunssfsi+0x2c>
    26c6:	b9 2f       	mov	r27, r25
    26c8:	99 27       	eor	r25, r25
    26ca:	b7 51       	subi	r27, 0x17	; 23
    26cc:	a0 f0       	brcs	.+40     	; 0x26f6 <__fixunssfsi+0x38>
    26ce:	d1 f0       	breq	.+52     	; 0x2704 <__fixunssfsi+0x46>
    26d0:	66 0f       	add	r22, r22
    26d2:	77 1f       	adc	r23, r23
    26d4:	88 1f       	adc	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	1a f0       	brmi	.+6      	; 0x26e0 <__fixunssfsi+0x22>
    26da:	ba 95       	dec	r27
    26dc:	c9 f7       	brne	.-14     	; 0x26d0 <__fixunssfsi+0x12>
    26de:	12 c0       	rjmp	.+36     	; 0x2704 <__fixunssfsi+0x46>
    26e0:	b1 30       	cpi	r27, 0x01	; 1
    26e2:	81 f0       	breq	.+32     	; 0x2704 <__fixunssfsi+0x46>
    26e4:	9f d0       	rcall	.+318    	; 0x2824 <__fp_zero>
    26e6:	b1 e0       	ldi	r27, 0x01	; 1
    26e8:	08 95       	ret
    26ea:	9c c0       	rjmp	.+312    	; 0x2824 <__fp_zero>
    26ec:	67 2f       	mov	r22, r23
    26ee:	78 2f       	mov	r23, r24
    26f0:	88 27       	eor	r24, r24
    26f2:	b8 5f       	subi	r27, 0xF8	; 248
    26f4:	39 f0       	breq	.+14     	; 0x2704 <__fixunssfsi+0x46>
    26f6:	b9 3f       	cpi	r27, 0xF9	; 249
    26f8:	cc f3       	brlt	.-14     	; 0x26ec <__fixunssfsi+0x2e>
    26fa:	86 95       	lsr	r24
    26fc:	77 95       	ror	r23
    26fe:	67 95       	ror	r22
    2700:	b3 95       	inc	r27
    2702:	d9 f7       	brne	.-10     	; 0x26fa <__fixunssfsi+0x3c>
    2704:	3e f4       	brtc	.+14     	; 0x2714 <__fixunssfsi+0x56>
    2706:	90 95       	com	r25
    2708:	80 95       	com	r24
    270a:	70 95       	com	r23
    270c:	61 95       	neg	r22
    270e:	7f 4f       	sbci	r23, 0xFF	; 255
    2710:	8f 4f       	sbci	r24, 0xFF	; 255
    2712:	9f 4f       	sbci	r25, 0xFF	; 255
    2714:	08 95       	ret

00002716 <__floatunsisf>:
    2716:	e8 94       	clt
    2718:	09 c0       	rjmp	.+18     	; 0x272c <__floatsisf+0x12>

0000271a <__floatsisf>:
    271a:	97 fb       	bst	r25, 7
    271c:	3e f4       	brtc	.+14     	; 0x272c <__floatsisf+0x12>
    271e:	90 95       	com	r25
    2720:	80 95       	com	r24
    2722:	70 95       	com	r23
    2724:	61 95       	neg	r22
    2726:	7f 4f       	sbci	r23, 0xFF	; 255
    2728:	8f 4f       	sbci	r24, 0xFF	; 255
    272a:	9f 4f       	sbci	r25, 0xFF	; 255
    272c:	99 23       	and	r25, r25
    272e:	a9 f0       	breq	.+42     	; 0x275a <__floatsisf+0x40>
    2730:	f9 2f       	mov	r31, r25
    2732:	96 e9       	ldi	r25, 0x96	; 150
    2734:	bb 27       	eor	r27, r27
    2736:	93 95       	inc	r25
    2738:	f6 95       	lsr	r31
    273a:	87 95       	ror	r24
    273c:	77 95       	ror	r23
    273e:	67 95       	ror	r22
    2740:	b7 95       	ror	r27
    2742:	f1 11       	cpse	r31, r1
    2744:	f8 cf       	rjmp	.-16     	; 0x2736 <__floatsisf+0x1c>
    2746:	fa f4       	brpl	.+62     	; 0x2786 <__floatsisf+0x6c>
    2748:	bb 0f       	add	r27, r27
    274a:	11 f4       	brne	.+4      	; 0x2750 <__floatsisf+0x36>
    274c:	60 ff       	sbrs	r22, 0
    274e:	1b c0       	rjmp	.+54     	; 0x2786 <__floatsisf+0x6c>
    2750:	6f 5f       	subi	r22, 0xFF	; 255
    2752:	7f 4f       	sbci	r23, 0xFF	; 255
    2754:	8f 4f       	sbci	r24, 0xFF	; 255
    2756:	9f 4f       	sbci	r25, 0xFF	; 255
    2758:	16 c0       	rjmp	.+44     	; 0x2786 <__floatsisf+0x6c>
    275a:	88 23       	and	r24, r24
    275c:	11 f0       	breq	.+4      	; 0x2762 <__floatsisf+0x48>
    275e:	96 e9       	ldi	r25, 0x96	; 150
    2760:	11 c0       	rjmp	.+34     	; 0x2784 <__floatsisf+0x6a>
    2762:	77 23       	and	r23, r23
    2764:	21 f0       	breq	.+8      	; 0x276e <__floatsisf+0x54>
    2766:	9e e8       	ldi	r25, 0x8E	; 142
    2768:	87 2f       	mov	r24, r23
    276a:	76 2f       	mov	r23, r22
    276c:	05 c0       	rjmp	.+10     	; 0x2778 <__floatsisf+0x5e>
    276e:	66 23       	and	r22, r22
    2770:	71 f0       	breq	.+28     	; 0x278e <__floatsisf+0x74>
    2772:	96 e8       	ldi	r25, 0x86	; 134
    2774:	86 2f       	mov	r24, r22
    2776:	70 e0       	ldi	r23, 0x00	; 0
    2778:	60 e0       	ldi	r22, 0x00	; 0
    277a:	2a f0       	brmi	.+10     	; 0x2786 <__floatsisf+0x6c>
    277c:	9a 95       	dec	r25
    277e:	66 0f       	add	r22, r22
    2780:	77 1f       	adc	r23, r23
    2782:	88 1f       	adc	r24, r24
    2784:	da f7       	brpl	.-10     	; 0x277c <__floatsisf+0x62>
    2786:	88 0f       	add	r24, r24
    2788:	96 95       	lsr	r25
    278a:	87 95       	ror	r24
    278c:	97 f9       	bld	r25, 7
    278e:	08 95       	ret

00002790 <__fp_inf>:
    2790:	97 f9       	bld	r25, 7
    2792:	9f 67       	ori	r25, 0x7F	; 127
    2794:	80 e8       	ldi	r24, 0x80	; 128
    2796:	70 e0       	ldi	r23, 0x00	; 0
    2798:	60 e0       	ldi	r22, 0x00	; 0
    279a:	08 95       	ret

0000279c <__fp_nan>:
    279c:	9f ef       	ldi	r25, 0xFF	; 255
    279e:	80 ec       	ldi	r24, 0xC0	; 192
    27a0:	08 95       	ret

000027a2 <__fp_pscA>:
    27a2:	00 24       	eor	r0, r0
    27a4:	0a 94       	dec	r0
    27a6:	16 16       	cp	r1, r22
    27a8:	17 06       	cpc	r1, r23
    27aa:	18 06       	cpc	r1, r24
    27ac:	09 06       	cpc	r0, r25
    27ae:	08 95       	ret

000027b0 <__fp_pscB>:
    27b0:	00 24       	eor	r0, r0
    27b2:	0a 94       	dec	r0
    27b4:	12 16       	cp	r1, r18
    27b6:	13 06       	cpc	r1, r19
    27b8:	14 06       	cpc	r1, r20
    27ba:	05 06       	cpc	r0, r21
    27bc:	08 95       	ret

000027be <__fp_round>:
    27be:	09 2e       	mov	r0, r25
    27c0:	03 94       	inc	r0
    27c2:	00 0c       	add	r0, r0
    27c4:	11 f4       	brne	.+4      	; 0x27ca <__fp_round+0xc>
    27c6:	88 23       	and	r24, r24
    27c8:	52 f0       	brmi	.+20     	; 0x27de <__fp_round+0x20>
    27ca:	bb 0f       	add	r27, r27
    27cc:	40 f4       	brcc	.+16     	; 0x27de <__fp_round+0x20>
    27ce:	bf 2b       	or	r27, r31
    27d0:	11 f4       	brne	.+4      	; 0x27d6 <__fp_round+0x18>
    27d2:	60 ff       	sbrs	r22, 0
    27d4:	04 c0       	rjmp	.+8      	; 0x27de <__fp_round+0x20>
    27d6:	6f 5f       	subi	r22, 0xFF	; 255
    27d8:	7f 4f       	sbci	r23, 0xFF	; 255
    27da:	8f 4f       	sbci	r24, 0xFF	; 255
    27dc:	9f 4f       	sbci	r25, 0xFF	; 255
    27de:	08 95       	ret

000027e0 <__fp_split3>:
    27e0:	57 fd       	sbrc	r21, 7
    27e2:	90 58       	subi	r25, 0x80	; 128
    27e4:	44 0f       	add	r20, r20
    27e6:	55 1f       	adc	r21, r21
    27e8:	59 f0       	breq	.+22     	; 0x2800 <__fp_splitA+0x10>
    27ea:	5f 3f       	cpi	r21, 0xFF	; 255
    27ec:	71 f0       	breq	.+28     	; 0x280a <__fp_splitA+0x1a>
    27ee:	47 95       	ror	r20

000027f0 <__fp_splitA>:
    27f0:	88 0f       	add	r24, r24
    27f2:	97 fb       	bst	r25, 7
    27f4:	99 1f       	adc	r25, r25
    27f6:	61 f0       	breq	.+24     	; 0x2810 <__fp_splitA+0x20>
    27f8:	9f 3f       	cpi	r25, 0xFF	; 255
    27fa:	79 f0       	breq	.+30     	; 0x281a <__fp_splitA+0x2a>
    27fc:	87 95       	ror	r24
    27fe:	08 95       	ret
    2800:	12 16       	cp	r1, r18
    2802:	13 06       	cpc	r1, r19
    2804:	14 06       	cpc	r1, r20
    2806:	55 1f       	adc	r21, r21
    2808:	f2 cf       	rjmp	.-28     	; 0x27ee <__fp_split3+0xe>
    280a:	46 95       	lsr	r20
    280c:	f1 df       	rcall	.-30     	; 0x27f0 <__fp_splitA>
    280e:	08 c0       	rjmp	.+16     	; 0x2820 <__fp_splitA+0x30>
    2810:	16 16       	cp	r1, r22
    2812:	17 06       	cpc	r1, r23
    2814:	18 06       	cpc	r1, r24
    2816:	99 1f       	adc	r25, r25
    2818:	f1 cf       	rjmp	.-30     	; 0x27fc <__fp_splitA+0xc>
    281a:	86 95       	lsr	r24
    281c:	71 05       	cpc	r23, r1
    281e:	61 05       	cpc	r22, r1
    2820:	08 94       	sec
    2822:	08 95       	ret

00002824 <__fp_zero>:
    2824:	e8 94       	clt

00002826 <__fp_szero>:
    2826:	bb 27       	eor	r27, r27
    2828:	66 27       	eor	r22, r22
    282a:	77 27       	eor	r23, r23
    282c:	cb 01       	movw	r24, r22
    282e:	97 f9       	bld	r25, 7
    2830:	08 95       	ret
    2832:	0e f0       	brts	.+2      	; 0x2836 <__fp_szero+0x10>
    2834:	e1 c0       	rjmp	.+450    	; 0x29f8 <__fp_mpack>
    2836:	b2 cf       	rjmp	.-156    	; 0x279c <__fp_nan>
    2838:	68 94       	set
    283a:	aa cf       	rjmp	.-172    	; 0x2790 <__fp_inf>

0000283c <log>:
    283c:	d9 df       	rcall	.-78     	; 0x27f0 <__fp_splitA>
    283e:	c8 f3       	brcs	.-14     	; 0x2832 <__fp_szero+0xc>
    2840:	99 23       	and	r25, r25
    2842:	d1 f3       	breq	.-12     	; 0x2838 <__fp_szero+0x12>
    2844:	c6 f3       	brts	.-16     	; 0x2836 <__fp_szero+0x10>
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	1f 93       	push	r17
    284c:	0f 93       	push	r16
    284e:	ff 92       	push	r15
    2850:	c9 2f       	mov	r28, r25
    2852:	dd 27       	eor	r29, r29
    2854:	88 23       	and	r24, r24
    2856:	2a f0       	brmi	.+10     	; 0x2862 <log+0x26>
    2858:	21 97       	sbiw	r28, 0x01	; 1
    285a:	66 0f       	add	r22, r22
    285c:	77 1f       	adc	r23, r23
    285e:	88 1f       	adc	r24, r24
    2860:	da f7       	brpl	.-10     	; 0x2858 <log+0x1c>
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f eb       	ldi	r21, 0xBF	; 191
    286a:	9f e3       	ldi	r25, 0x3F	; 63
    286c:	88 39       	cpi	r24, 0x98	; 152
    286e:	20 f0       	brcs	.+8      	; 0x2878 <log+0x3c>
    2870:	80 3e       	cpi	r24, 0xE0	; 224
    2872:	30 f0       	brcs	.+12     	; 0x2880 <log+0x44>
    2874:	21 96       	adiw	r28, 0x01	; 1
    2876:	8f 77       	andi	r24, 0x7F	; 127
    2878:	56 de       	rcall	.-852    	; 0x2526 <__addsf3>
    287a:	e4 ef       	ldi	r30, 0xF4	; 244
    287c:	f1 e0       	ldi	r31, 0x01	; 1
    287e:	03 c0       	rjmp	.+6      	; 0x2886 <log+0x4a>
    2880:	52 de       	rcall	.-860    	; 0x2526 <__addsf3>
    2882:	e1 e2       	ldi	r30, 0x21	; 33
    2884:	f2 e0       	ldi	r31, 0x02	; 2
    2886:	c6 d0       	rcall	.+396    	; 0x2a14 <__fp_powser>
    2888:	8b 01       	movw	r16, r22
    288a:	be 01       	movw	r22, r28
    288c:	ec 01       	movw	r28, r24
    288e:	fb 2e       	mov	r15, r27
    2890:	6f 57       	subi	r22, 0x7F	; 127
    2892:	71 09       	sbc	r23, r1
    2894:	75 95       	asr	r23
    2896:	77 1f       	adc	r23, r23
    2898:	88 0b       	sbc	r24, r24
    289a:	99 0b       	sbc	r25, r25
    289c:	3e df       	rcall	.-388    	; 0x271a <__floatsisf>
    289e:	28 e1       	ldi	r18, 0x18	; 24
    28a0:	32 e7       	ldi	r19, 0x72	; 114
    28a2:	41 e3       	ldi	r20, 0x31	; 49
    28a4:	5f e3       	ldi	r21, 0x3F	; 63
    28a6:	16 d0       	rcall	.+44     	; 0x28d4 <__mulsf3x>
    28a8:	af 2d       	mov	r26, r15
    28aa:	98 01       	movw	r18, r16
    28ac:	ae 01       	movw	r20, r28
    28ae:	ff 90       	pop	r15
    28b0:	0f 91       	pop	r16
    28b2:	1f 91       	pop	r17
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	47 de       	rcall	.-882    	; 0x2548 <__addsf3x>
    28ba:	81 cf       	rjmp	.-254    	; 0x27be <__fp_round>

000028bc <__mulsf3>:
    28bc:	0b d0       	rcall	.+22     	; 0x28d4 <__mulsf3x>
    28be:	7f cf       	rjmp	.-258    	; 0x27be <__fp_round>
    28c0:	70 df       	rcall	.-288    	; 0x27a2 <__fp_pscA>
    28c2:	28 f0       	brcs	.+10     	; 0x28ce <__mulsf3+0x12>
    28c4:	75 df       	rcall	.-278    	; 0x27b0 <__fp_pscB>
    28c6:	18 f0       	brcs	.+6      	; 0x28ce <__mulsf3+0x12>
    28c8:	95 23       	and	r25, r21
    28ca:	09 f0       	breq	.+2      	; 0x28ce <__mulsf3+0x12>
    28cc:	61 cf       	rjmp	.-318    	; 0x2790 <__fp_inf>
    28ce:	66 cf       	rjmp	.-308    	; 0x279c <__fp_nan>
    28d0:	11 24       	eor	r1, r1
    28d2:	a9 cf       	rjmp	.-174    	; 0x2826 <__fp_szero>

000028d4 <__mulsf3x>:
    28d4:	85 df       	rcall	.-246    	; 0x27e0 <__fp_split3>
    28d6:	a0 f3       	brcs	.-24     	; 0x28c0 <__mulsf3+0x4>

000028d8 <__mulsf3_pse>:
    28d8:	95 9f       	mul	r25, r21
    28da:	d1 f3       	breq	.-12     	; 0x28d0 <__mulsf3+0x14>
    28dc:	95 0f       	add	r25, r21
    28de:	50 e0       	ldi	r21, 0x00	; 0
    28e0:	55 1f       	adc	r21, r21
    28e2:	62 9f       	mul	r22, r18
    28e4:	f0 01       	movw	r30, r0
    28e6:	72 9f       	mul	r23, r18
    28e8:	bb 27       	eor	r27, r27
    28ea:	f0 0d       	add	r31, r0
    28ec:	b1 1d       	adc	r27, r1
    28ee:	63 9f       	mul	r22, r19
    28f0:	aa 27       	eor	r26, r26
    28f2:	f0 0d       	add	r31, r0
    28f4:	b1 1d       	adc	r27, r1
    28f6:	aa 1f       	adc	r26, r26
    28f8:	64 9f       	mul	r22, r20
    28fa:	66 27       	eor	r22, r22
    28fc:	b0 0d       	add	r27, r0
    28fe:	a1 1d       	adc	r26, r1
    2900:	66 1f       	adc	r22, r22
    2902:	82 9f       	mul	r24, r18
    2904:	22 27       	eor	r18, r18
    2906:	b0 0d       	add	r27, r0
    2908:	a1 1d       	adc	r26, r1
    290a:	62 1f       	adc	r22, r18
    290c:	73 9f       	mul	r23, r19
    290e:	b0 0d       	add	r27, r0
    2910:	a1 1d       	adc	r26, r1
    2912:	62 1f       	adc	r22, r18
    2914:	83 9f       	mul	r24, r19
    2916:	a0 0d       	add	r26, r0
    2918:	61 1d       	adc	r22, r1
    291a:	22 1f       	adc	r18, r18
    291c:	74 9f       	mul	r23, r20
    291e:	33 27       	eor	r19, r19
    2920:	a0 0d       	add	r26, r0
    2922:	61 1d       	adc	r22, r1
    2924:	23 1f       	adc	r18, r19
    2926:	84 9f       	mul	r24, r20
    2928:	60 0d       	add	r22, r0
    292a:	21 1d       	adc	r18, r1
    292c:	82 2f       	mov	r24, r18
    292e:	76 2f       	mov	r23, r22
    2930:	6a 2f       	mov	r22, r26
    2932:	11 24       	eor	r1, r1
    2934:	9f 57       	subi	r25, 0x7F	; 127
    2936:	50 40       	sbci	r21, 0x00	; 0
    2938:	8a f0       	brmi	.+34     	; 0x295c <__mulsf3_pse+0x84>
    293a:	e1 f0       	breq	.+56     	; 0x2974 <__mulsf3_pse+0x9c>
    293c:	88 23       	and	r24, r24
    293e:	4a f0       	brmi	.+18     	; 0x2952 <__mulsf3_pse+0x7a>
    2940:	ee 0f       	add	r30, r30
    2942:	ff 1f       	adc	r31, r31
    2944:	bb 1f       	adc	r27, r27
    2946:	66 1f       	adc	r22, r22
    2948:	77 1f       	adc	r23, r23
    294a:	88 1f       	adc	r24, r24
    294c:	91 50       	subi	r25, 0x01	; 1
    294e:	50 40       	sbci	r21, 0x00	; 0
    2950:	a9 f7       	brne	.-22     	; 0x293c <__mulsf3_pse+0x64>
    2952:	9e 3f       	cpi	r25, 0xFE	; 254
    2954:	51 05       	cpc	r21, r1
    2956:	70 f0       	brcs	.+28     	; 0x2974 <__mulsf3_pse+0x9c>
    2958:	1b cf       	rjmp	.-458    	; 0x2790 <__fp_inf>
    295a:	65 cf       	rjmp	.-310    	; 0x2826 <__fp_szero>
    295c:	5f 3f       	cpi	r21, 0xFF	; 255
    295e:	ec f3       	brlt	.-6      	; 0x295a <__mulsf3_pse+0x82>
    2960:	98 3e       	cpi	r25, 0xE8	; 232
    2962:	dc f3       	brlt	.-10     	; 0x295a <__mulsf3_pse+0x82>
    2964:	86 95       	lsr	r24
    2966:	77 95       	ror	r23
    2968:	67 95       	ror	r22
    296a:	b7 95       	ror	r27
    296c:	f7 95       	ror	r31
    296e:	e7 95       	ror	r30
    2970:	9f 5f       	subi	r25, 0xFF	; 255
    2972:	c1 f7       	brne	.-16     	; 0x2964 <__mulsf3_pse+0x8c>
    2974:	fe 2b       	or	r31, r30
    2976:	88 0f       	add	r24, r24
    2978:	91 1d       	adc	r25, r1
    297a:	96 95       	lsr	r25
    297c:	87 95       	ror	r24
    297e:	97 f9       	bld	r25, 7
    2980:	08 95       	ret

00002982 <round>:
    2982:	36 df       	rcall	.-404    	; 0x27f0 <__fp_splitA>
    2984:	e0 f0       	brcs	.+56     	; 0x29be <round+0x3c>
    2986:	9e 37       	cpi	r25, 0x7E	; 126
    2988:	d8 f0       	brcs	.+54     	; 0x29c0 <round+0x3e>
    298a:	96 39       	cpi	r25, 0x96	; 150
    298c:	b8 f4       	brcc	.+46     	; 0x29bc <round+0x3a>
    298e:	9e 38       	cpi	r25, 0x8E	; 142
    2990:	48 f4       	brcc	.+18     	; 0x29a4 <round+0x22>
    2992:	67 2f       	mov	r22, r23
    2994:	78 2f       	mov	r23, r24
    2996:	88 27       	eor	r24, r24
    2998:	98 5f       	subi	r25, 0xF8	; 248
    299a:	f9 cf       	rjmp	.-14     	; 0x298e <round+0xc>
    299c:	86 95       	lsr	r24
    299e:	77 95       	ror	r23
    29a0:	67 95       	ror	r22
    29a2:	93 95       	inc	r25
    29a4:	95 39       	cpi	r25, 0x95	; 149
    29a6:	d0 f3       	brcs	.-12     	; 0x299c <round+0x1a>
    29a8:	b6 2f       	mov	r27, r22
    29aa:	b1 70       	andi	r27, 0x01	; 1
    29ac:	6b 0f       	add	r22, r27
    29ae:	71 1d       	adc	r23, r1
    29b0:	81 1d       	adc	r24, r1
    29b2:	20 f4       	brcc	.+8      	; 0x29bc <round+0x3a>
    29b4:	87 95       	ror	r24
    29b6:	77 95       	ror	r23
    29b8:	67 95       	ror	r22
    29ba:	93 95       	inc	r25
    29bc:	02 c0       	rjmp	.+4      	; 0x29c2 <__fp_mintl>
    29be:	1c c0       	rjmp	.+56     	; 0x29f8 <__fp_mpack>
    29c0:	32 cf       	rjmp	.-412    	; 0x2826 <__fp_szero>

000029c2 <__fp_mintl>:
    29c2:	88 23       	and	r24, r24
    29c4:	71 f4       	brne	.+28     	; 0x29e2 <__fp_mintl+0x20>
    29c6:	77 23       	and	r23, r23
    29c8:	21 f0       	breq	.+8      	; 0x29d2 <__fp_mintl+0x10>
    29ca:	98 50       	subi	r25, 0x08	; 8
    29cc:	87 2b       	or	r24, r23
    29ce:	76 2f       	mov	r23, r22
    29d0:	07 c0       	rjmp	.+14     	; 0x29e0 <__fp_mintl+0x1e>
    29d2:	66 23       	and	r22, r22
    29d4:	11 f4       	brne	.+4      	; 0x29da <__fp_mintl+0x18>
    29d6:	99 27       	eor	r25, r25
    29d8:	0d c0       	rjmp	.+26     	; 0x29f4 <__fp_mintl+0x32>
    29da:	90 51       	subi	r25, 0x10	; 16
    29dc:	86 2b       	or	r24, r22
    29de:	70 e0       	ldi	r23, 0x00	; 0
    29e0:	60 e0       	ldi	r22, 0x00	; 0
    29e2:	2a f0       	brmi	.+10     	; 0x29ee <__fp_mintl+0x2c>
    29e4:	9a 95       	dec	r25
    29e6:	66 0f       	add	r22, r22
    29e8:	77 1f       	adc	r23, r23
    29ea:	88 1f       	adc	r24, r24
    29ec:	da f7       	brpl	.-10     	; 0x29e4 <__fp_mintl+0x22>
    29ee:	88 0f       	add	r24, r24
    29f0:	96 95       	lsr	r25
    29f2:	87 95       	ror	r24
    29f4:	97 f9       	bld	r25, 7
    29f6:	08 95       	ret

000029f8 <__fp_mpack>:
    29f8:	9f 3f       	cpi	r25, 0xFF	; 255
    29fa:	31 f0       	breq	.+12     	; 0x2a08 <__fp_mpack_finite+0xc>

000029fc <__fp_mpack_finite>:
    29fc:	91 50       	subi	r25, 0x01	; 1
    29fe:	20 f4       	brcc	.+8      	; 0x2a08 <__fp_mpack_finite+0xc>
    2a00:	87 95       	ror	r24
    2a02:	77 95       	ror	r23
    2a04:	67 95       	ror	r22
    2a06:	b7 95       	ror	r27
    2a08:	88 0f       	add	r24, r24
    2a0a:	91 1d       	adc	r25, r1
    2a0c:	96 95       	lsr	r25
    2a0e:	87 95       	ror	r24
    2a10:	97 f9       	bld	r25, 7
    2a12:	08 95       	ret

00002a14 <__fp_powser>:
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	1f 93       	push	r17
    2a1a:	0f 93       	push	r16
    2a1c:	ff 92       	push	r15
    2a1e:	ef 92       	push	r14
    2a20:	df 92       	push	r13
    2a22:	7b 01       	movw	r14, r22
    2a24:	8c 01       	movw	r16, r24
    2a26:	68 94       	set
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <__fp_powser+0x20>
    2a2a:	da 2e       	mov	r13, r26
    2a2c:	ef 01       	movw	r28, r30
    2a2e:	52 df       	rcall	.-348    	; 0x28d4 <__mulsf3x>
    2a30:	fe 01       	movw	r30, r28
    2a32:	e8 94       	clt
    2a34:	a5 91       	lpm	r26, Z+
    2a36:	25 91       	lpm	r18, Z+
    2a38:	35 91       	lpm	r19, Z+
    2a3a:	45 91       	lpm	r20, Z+
    2a3c:	55 91       	lpm	r21, Z+
    2a3e:	ae f3       	brts	.-22     	; 0x2a2a <__fp_powser+0x16>
    2a40:	ef 01       	movw	r28, r30
    2a42:	82 dd       	rcall	.-1276   	; 0x2548 <__addsf3x>
    2a44:	fe 01       	movw	r30, r28
    2a46:	97 01       	movw	r18, r14
    2a48:	a8 01       	movw	r20, r16
    2a4a:	da 94       	dec	r13
    2a4c:	79 f7       	brne	.-34     	; 0x2a2c <__fp_powser+0x18>
    2a4e:	df 90       	pop	r13
    2a50:	ef 90       	pop	r14
    2a52:	ff 90       	pop	r15
    2a54:	0f 91       	pop	r16
    2a56:	1f 91       	pop	r17
    2a58:	cf 91       	pop	r28
    2a5a:	df 91       	pop	r29
    2a5c:	08 95       	ret

00002a5e <memcpy>:
    2a5e:	fb 01       	movw	r30, r22
    2a60:	dc 01       	movw	r26, r24
    2a62:	02 c0       	rjmp	.+4      	; 0x2a68 <memcpy+0xa>
    2a64:	01 90       	ld	r0, Z+
    2a66:	0d 92       	st	X+, r0
    2a68:	41 50       	subi	r20, 0x01	; 1
    2a6a:	50 40       	sbci	r21, 0x00	; 0
    2a6c:	d8 f7       	brcc	.-10     	; 0x2a64 <memcpy+0x6>
    2a6e:	08 95       	ret

00002a70 <__eerd_byte_x128a1>:
    2a70:	03 d0       	rcall	.+6      	; 0x2a78 <eeprom_mapen>
    2a72:	80 81       	ld	r24, Z
    2a74:	99 27       	eor	r25, r25
    2a76:	08 95       	ret

00002a78 <eeprom_mapen>:
    2a78:	e0 ec       	ldi	r30, 0xC0	; 192
    2a7a:	f1 e0       	ldi	r31, 0x01	; 1
    2a7c:	37 85       	ldd	r19, Z+15	; 0x0f
    2a7e:	37 fd       	sbrc	r19, 7
    2a80:	fd cf       	rjmp	.-6      	; 0x2a7c <eeprom_mapen+0x4>
    2a82:	34 85       	ldd	r19, Z+12	; 0x0c
    2a84:	38 60       	ori	r19, 0x08	; 8
    2a86:	34 87       	std	Z+12, r19	; 0x0c
    2a88:	fc 01       	movw	r30, r24
    2a8a:	e0 50       	subi	r30, 0x00	; 0
    2a8c:	f0 4f       	sbci	r31, 0xF0	; 240
    2a8e:	08 95       	ret

00002a90 <__eewr_byte_x128a1>:
    2a90:	26 2f       	mov	r18, r22

00002a92 <__eewr_r18_x128a1>:
    2a92:	e0 ec       	ldi	r30, 0xC0	; 192
    2a94:	f1 e0       	ldi	r31, 0x01	; 1
    2a96:	37 85       	ldd	r19, Z+15	; 0x0f
    2a98:	37 fd       	sbrc	r19, 7
    2a9a:	fd cf       	rjmp	.-6      	; 0x2a96 <__eewr_r18_x128a1+0x4>
    2a9c:	34 85       	ldd	r19, Z+12	; 0x0c
    2a9e:	37 7f       	andi	r19, 0xF7	; 247
    2aa0:	34 87       	std	Z+12, r19	; 0x0c
    2aa2:	37 85       	ldd	r19, Z+15	; 0x0f
    2aa4:	31 ff       	sbrs	r19, 1
    2aa6:	09 c0       	rjmp	.+18     	; 0x2aba <__eewr_r18_x128a1+0x28>
    2aa8:	36 e3       	ldi	r19, 0x36	; 54
    2aaa:	32 87       	std	Z+10, r19	; 0x0a
    2aac:	38 ed       	ldi	r19, 0xD8	; 216
    2aae:	34 bf       	out	0x34, r19	; 52
    2ab0:	31 e0       	ldi	r19, 0x01	; 1
    2ab2:	33 87       	std	Z+11, r19	; 0x0b
    2ab4:	37 85       	ldd	r19, Z+15	; 0x0f
    2ab6:	37 fd       	sbrc	r19, 7
    2ab8:	fd cf       	rjmp	.-6      	; 0x2ab4 <__eewr_r18_x128a1+0x22>
    2aba:	33 e3       	ldi	r19, 0x33	; 51
    2abc:	32 87       	std	Z+10, r19	; 0x0a
    2abe:	80 83       	st	Z, r24
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	12 82       	std	Z+2, r1	; 0x02
    2ac4:	24 83       	std	Z+4, r18	; 0x04
    2ac6:	25 e3       	ldi	r18, 0x35	; 53
    2ac8:	22 87       	std	Z+10, r18	; 0x0a
    2aca:	28 ed       	ldi	r18, 0xD8	; 216
    2acc:	31 e0       	ldi	r19, 0x01	; 1
    2ace:	24 bf       	out	0x34, r18	; 52
    2ad0:	33 87       	std	Z+11, r19	; 0x0b
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	08 95       	ret

00002ad6 <_exit>:
    2ad6:	f8 94       	cli

00002ad8 <__stop_program>:
    2ad8:	ff cf       	rjmp	.-2      	; 0x2ad8 <__stop_program>
