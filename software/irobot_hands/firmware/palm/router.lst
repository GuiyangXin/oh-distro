   1               		.file	"router.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.text
  11               	.Ltext0:
  12               		.cfi_sections	.debug_frame
  14               	doDownstreamDMAISR:
  15               	.LFB19:
  16               		.file 1 "router.c"
   1:router.c      **** /****************************************************
   2:router.c      **** 
   3:router.c      ****  // Author:            Zachary Clifford
   4:router.c      ****  // File Name:        C1482-SRC-COMMON-0-router.c
   5:router.c      ****  // Creation Date:    24 February, 2012
   6:router.c      ****  // Revision:        00
   7:router.c      ****  // Hardware:        ATxmega32A4U
   8:router.c      ****  // Description:    Packet router for Palm processor
   9:router.c      **** 
  10:router.c      ****  ****************************************************/
  11:router.c      **** 
  12:router.c      **** /******************************************************************************
  13:router.c      ****     File Revision History:
  14:router.c      **** -------------------------------------------------------------------------------
  15:router.c      **** Revision    Date        Engineer    Description
  16:router.c      **** --------    --------    --------    -------------------------------------------
  17:router.c      **** 00        03/06/12    ZAC            Initial Release
  18:router.c      **** -------------------------------------------------------------------------------
  19:router.c      **** 
  20:router.c      **** ******************************************************************************/
  21:router.c      **** 
  22:router.c      **** #include "palm.h"
  23:router.c      **** #include "router.h"
  24:router.c      **** #include "routerconfig.h"
  25:router.c      **** 
  26:router.c      **** #include <avr/io.h>
  27:router.c      **** #include <avr/interrupt.h>
  28:router.c      **** #include <string.h>
  29:router.c      **** 
  30:router.c      **** #define MAX_TOTAL_PACKET_SIZE 605
  31:router.c      **** #define MAX_DEVICE_PACKET_SIZE 200
  32:router.c      **** #define MIN_PACKET_SIZE 3
  33:router.c      **** 
  34:router.c      **** //Identifiers for the serial chains in this device
  35:router.c      **** typedef enum SERIAL_STREAM_enum
  36:router.c      ****     {
  37:router.c      ****         TACT=0,
  38:router.c      ****         PROX1=1,
  39:router.c      ****         PROX2=2,
  40:router.c      ****         PROX3=3,
  41:router.c      ****         MTR1=4,
  42:router.c      ****         MTR2=5,
  43:router.c      ****         UPSTREAM=6,
  44:router.c      ****         STREAM_NONE=7
  45:router.c      ****     } SERIAL_STREAM_t;
  46:router.c      **** 
  47:router.c      **** //Configuration struct for a DMA channel or intterupt based downstream channel
  48:router.c      **** //A different set of pointers map USART Streams back to the Configuraton 
  49:router.c      **** typedef struct
  50:router.c      **** {
  51:router.c      ****     USART_t * usart;
  52:router.c      ****     DMA_CH_t *dma;
  53:router.c      ****     volatile uint8_t *targetBuffer;
  54:router.c      ****     uint8_t inboundTrigger;
  55:router.c      ****     volatile uint8_t sizeReceived;
  56:router.c      ****     volatile uint8_t downstreamDoneFlag;
  57:router.c      ****     SERIAL_STREAM_t activeStream;
  58:router.c      ****     uint8_t isFirst;
  59:router.c      ****     uint8_t isActive;
  60:router.c      **** } CHANNEL_CONFIGURATION_t;
  61:router.c      **** 
  62:router.c      **** //The six Downstream configurations (4DME, 2 intterrupt)
  63:router.c      **** static CHANNEL_CONFIGURATION_t DownStreamConfig[6];
  64:router.c      **** 
  65:router.c      **** //Double (ping-pong) buffer for transmission upstream to Overo
  66:router.c      **** static volatile uint8_t responseToOveroA[MAX_TOTAL_PACKET_SIZE];
  67:router.c      **** static volatile uint8_t responseToOveroB[MAX_TOTAL_PACKET_SIZE];
  68:router.c      **** 
  69:router.c      **** //Side buffer for directed messages
  70:router.c      **** static volatile uint8_t responseToOveroC[MAX_TOTAL_PACKET_SIZE];
  71:router.c      **** 
  72:router.c      **** //Freerun related.  These capture the sample period,
  73:router.c      **** //the sensors to be sampled, and whether a freerun is ready to go
  74:router.c      **** uint16_t samplePeriod = 0xFFFF;
  75:router.c      **** uint16_t sampleArgument = 0xFFFF;
  76:router.c      **** uint8_t activePingPong = 0;
  77:router.c      **** 
  78:router.c      **** //Flag for notifying main() that a packet needs processing
  79:router.c      **** volatile uint8_t commandReady = 0;
  80:router.c      **** 
  81:router.c      **** //Single buffer for reception downstream from Overo
  82:router.c      **** static volatile uint8_t commandPacketBuffer[COMMAND_PACKET_SIZE];
  83:router.c      **** 
  84:router.c      **** //Two buffers for transmitting modified commands downstream to daisy chains
  85:router.c      **** //See the ICD for details, but the broadcasts must be altered depending on chain length
  86:router.c      **** static volatile uint8_t shortXmitBuffer[COMMAND_PACKET_SIZE];
  87:router.c      **** static volatile uint8_t longXmitBuffer[COMMAND_PACKET_SIZE];
  88:router.c      **** 
  89:router.c      **** //Buffers for each slave device to be loaded with their responses to a broadcast.
  90:router.c      **** static volatile uint16_t respondingDevicesBitfield;
  91:router.c      **** static volatile uint8_t mtr1_packet[MAX_DEVICE_PACKET_SIZE];
  92:router.c      **** static volatile uint8_t mtr1_packet_size = 0;
  93:router.c      **** static volatile uint8_t mtr2_packet[MAX_DEVICE_PACKET_SIZE];
  94:router.c      **** static volatile uint8_t mtr2_packet_size = 0;
  95:router.c      **** static volatile uint8_t mtr3_packet[MAX_DEVICE_PACKET_SIZE];
  96:router.c      **** static volatile uint8_t mtr3_packet_size = 0;
  97:router.c      **** static volatile uint8_t mtr4_packet[MAX_DEVICE_PACKET_SIZE];
  98:router.c      **** static volatile uint8_t mtr4_packet_size = 0;
  99:router.c      **** static volatile uint8_t prox1_packet[MAX_DEVICE_PACKET_SIZE];
 100:router.c      **** static volatile uint8_t prox1_packet_size = 0;
 101:router.c      **** static volatile uint8_t prox2_packet[MAX_DEVICE_PACKET_SIZE];
 102:router.c      **** static volatile uint8_t prox2_packet_size = 0;
 103:router.c      **** static volatile uint8_t prox3_packet[MAX_DEVICE_PACKET_SIZE];
 104:router.c      **** static volatile uint8_t prox3_packet_size = 0;
 105:router.c      **** static volatile uint8_t distal1_packet[MAX_DEVICE_PACKET_SIZE];
 106:router.c      **** static volatile uint8_t distal1_packet_size = 0;
 107:router.c      **** static volatile uint8_t distal2_packet[MAX_DEVICE_PACKET_SIZE];
 108:router.c      **** static volatile uint8_t distal2_packet_size = 0;
 109:router.c      **** static volatile uint8_t distal3_packet[MAX_DEVICE_PACKET_SIZE];
 110:router.c      **** static volatile uint8_t distal3_packet_size = 0;
 111:router.c      **** static volatile uint8_t tactile_packet[MAX_DEVICE_PACKET_SIZE];
 112:router.c      **** static volatile uint8_t tactile_packet_size = 0;
 113:router.c      **** static volatile uint8_t palm_packet[MAX_DEVICE_PACKET_SIZE];
 114:router.c      **** static volatile uint8_t palm_packet_size = 0;
 115:router.c      **** 
 116:router.c      **** //Create constant tables for indexing the various buffers in the system.  This simplifies packet ro
 117:router.c      **** static USART_t * const allUSARTS[] = {&TACT_USART,&PROX1_USART,&PROX2_USART,&PROX3_USART,&MTR1_USAR
 118:router.c      **** // these are set to defaults, then set correctly at "startChain()"
 119:router.c      **** static CHANNEL_CONFIGURATION_t *USARTtoCHANNELS[] = {&DownStreamConfig[0],&DownStreamConfig[1],&Dow
 120:router.c      **** 
 121:router.c      **** static volatile uint8_t * const allFirstSlaveBuffers[] = {tactile_packet,prox1_packet,prox2_packet,
 122:router.c      **** static volatile uint8_t * const allFirstSlaveSizes[] = {&tactile_packet_size,&prox1_packet_size,&pr
 123:router.c      **** static volatile uint8_t * const allSecondSlaveBuffers[] = {NULL,distal1_packet,distal2_packet,dista
 124:router.c      **** static volatile uint8_t * const allSecondSlaveSizes[] = {NULL,&distal1_packet_size,&distal2_packet_
 125:router.c      **** 
 126:router.c      **** //Static tables capturing all inbound and outbound DMA Triggers in SERIAL_STREAM_t order
 127:router.c      **** static const uint8_t allInboundTriggers[] = {TACT_USART_INBOUND_TRIGGER,
 128:router.c      ****                                              PROX1_USART_INBOUND_TRIGGER,PROX2_USART_INBOUND_TRIGGE
 129:router.c      ****                                              MTR1_USART_INBOUND_TRIGGER,MTR2_USART_INBOUND_TRIGGER}
 130:router.c      **** static const uint8_t allOutboundTriggers[] = {TACT_USART_OUTBOUND_TRIGGER,
 131:router.c      ****                                               PROX1_USART_OUTBOUND_TRIGGER,PROX2_USART_OUTBOUND_TRI
 132:router.c      ****                                               MTR1_USART_OUTBOUND_TRIGGER,MTR2_USART_OUTBOUND_TRIGG
 133:router.c      **** 
 134:router.c      **** #define DOWNSTREAM_TIMEOUT_4KHZ 5 // DMA and inerrupt transfers up and back down
 135:router.c      **** #define UPSTREAM_TIMEOUT_4KHZ 32  // slower baud rate, bigger combined packet
 136:router.c      **** 
 137:router.c      **** static volatile uint8_t mtRXbyte[2] = {0,0};
 138:router.c      **** //Timeout counters for Broadcast RX
 139:router.c      **** static volatile uint8_t dmaTimeoutCounter[6] = {0,0,0,0,0,0};
 140:router.c      **** static volatile uint8_t upRXtimeoutCounter = 0;
 141:router.c      **** 
 142:router.c      **** static void upstreamTX(volatile uint8_t *targetBuffer, uint16_t numBytes);
 143:router.c      **** static void configureUSARTHardware(USART_t *targetUSART, int isPC, int isDownstream);
 144:router.c      **** static inline void prepareDMAChannel(DMA_CH_t *targetChannel, uint8_t usartTrigger, USART_t *target
 145:router.c      **** static inline void activateDMAChannel(DMA_CH_t *targetChannel,int numBytes);
 146:router.c      **** static inline void doDownstreamDMAISR(CHANNEL_CONFIGURATION_t *targetChannelConfig);
 147:router.c      **** 
 148:router.c      **** static inline void doDownstreamUSART_RX_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig);
 149:router.c      **** void startChain(uint8_t chainIndex, uint8_t DMAchannel, uint8_t *outboundBuffer);
 150:router.c      **** void startMtrChain(uint8_t chainIndex);
 151:router.c      **** static void simplePassthrough(CHANNEL_CONFIGURATION_t *targetChannelConfig);
 152:router.c      **** static uint8_t continueChain(CHANNEL_CONFIGURATION_t *targetChannelConfig);
 153:router.c      **** void doBroadcast(volatile uint8_t *activeUpstreamBuffer, volatile uint8_t *commandPacketBuffer);
 154:router.c      **** 
 155:router.c      **** static volatile uint8_t Uerr_frame;
 156:router.c      **** static volatile uint8_t Uerr_busy;
 157:router.c      **** static volatile uint8_t Uerr_timeout;
 158:router.c      **** static volatile uint8_t Uerr_checksum;
 159:router.c      **** static volatile uint8_t Derr_frame;
 160:router.c      **** static volatile uint8_t Derr_packetsize;
 161:router.c      **** 
 162:router.c      **** uint16_t RxCheckSumErrCnt[7];
 163:router.c      **** 
 164:router.c      **** uint8_t chainMask = ALL_CHAINS_CHAINMASK;
 165:router.c      **** 
 166:router.c      **** ISR(ROUTER_TC_vect)
 167:router.c      **** {
 168:router.c      ****     // timers count down to zero. When zero, you are out of time
 169:router.c      **** 
 170:router.c      ****     // four DMA channels
 171:router.c      ****     if((DownStreamConfig[0].isActive) &&
 172:router.c      ****        (dmaTimeoutCounter[0]))
 173:router.c      ****     {
 174:router.c      ****         dmaTimeoutCounter[0]--;
 175:router.c      ****     }
 176:router.c      ****     if((DownStreamConfig[1].isActive) &&
 177:router.c      ****        (dmaTimeoutCounter[1]))
 178:router.c      ****     {
 179:router.c      ****         dmaTimeoutCounter[1]--;
 180:router.c      ****     }
 181:router.c      ****     if((DownStreamConfig[2].isActive) &&
 182:router.c      ****        (dmaTimeoutCounter[2]))
 183:router.c      ****     {
 184:router.c      ****         dmaTimeoutCounter[2]--;
 185:router.c      ****     }
 186:router.c      ****     if((DownStreamConfig[3].isActive) &&
 187:router.c      ****        (dmaTimeoutCounter[3]))
 188:router.c      ****     {
 189:router.c      ****         dmaTimeoutCounter[3]--;
 190:router.c      ****     }
 191:router.c      **** 
 192:router.c      ****     // two interrupt based motor channels
 193:router.c      ****     if((DownStreamConfig[4].isActive) &&
 194:router.c      ****        (dmaTimeoutCounter[4]))
 195:router.c      ****     {
 196:router.c      ****         dmaTimeoutCounter[4]--;
 197:router.c      ****     }
 198:router.c      ****     if((DownStreamConfig[5].isActive) &&
 199:router.c      ****        (dmaTimeoutCounter[5]))
 200:router.c      ****     {
 201:router.c      ****         dmaTimeoutCounter[5]--;
 202:router.c      ****     }
 203:router.c      **** 
 204:router.c      ****     // upstream interrupt based channel
 205:router.c      ****     if(upRXtimeoutCounter)
 206:router.c      ****     {
 207:router.c      ****         upRXtimeoutCounter--;
 208:router.c      ****     }
 209:router.c      **** 
 210:router.c      ****     return;
 211:router.c      **** }
 212:router.c      **** 
 213:router.c      **** 
 214:router.c      **** /************************************************************************
 215:router.c      ****  * ISR for the Upstream USART
 216:router.c      ****  *
 217:router.c      ****  * This is how commands enter the Palm board from the Overo Gumstix
 218:router.c      ****  *
 219:router.c      ****  ************************************************************************/
 220:router.c      **** 
 221:router.c      **** ISR(UPSTREAM_USART_RX_vect)
 222:router.c      **** {
 223:router.c      ****     static uint8_t upRXbyte = 0;
 224:router.c      ****     uint8_t temporary;
 225:router.c      **** 
 226:router.c      ****     //Must check any error bits before reading the data.
 227:router.c      ****     if(UPSTREAM_USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
 228:router.c      ****     {
 229:router.c      ****         //Framing or overflow error. Discard and do nothing else
 230:router.c      ****         temporary = UPSTREAM_USART.DATA; // read to clear the buffer
 231:router.c      ****         upRXbyte=0;
 232:router.c      ****         upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 233:router.c      ****         Uerr_frame++;
 234:router.c      ****         //if(UPSTREAM_USART.STATUS & USART_BUFOVF_bm)
 235:router.c      ****         //  LEDtoggle();
 236:router.c      ****         return;
 237:router.c      ****     }
 238:router.c      **** 
 239:router.c      ****     temporary = UPSTREAM_USART.DATA; // read to clear the buffer
 240:router.c      **** 
 241:router.c      ****     if(commandReady)
 242:router.c      ****     {
 243:router.c      ****         //Don't clobber an existing packet, discard
 244:router.c      ****         upRXbyte=0;
 245:router.c      ****         upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 246:router.c      ****         Uerr_busy++;
 247:router.c      ****         return;
 248:router.c      ****     }
 249:router.c      **** 
 250:router.c      ****     if(!(upRXtimeoutCounter))
 251:router.c      ****     {
 252:router.c      ****         //there was a timeout, assume this is a new packet
 253:router.c      ****         upRXbyte=0;
 254:router.c      ****         upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 255:router.c      ****         Uerr_timeout++;
 256:router.c      ****         //return; // if you want to discard and start over
 257:router.c      ****     }
 258:router.c      **** 
 259:router.c      ****     commandPacketBuffer[upRXbyte] = temporary;
 260:router.c      ****     upRXbyte++;
 261:router.c      **** 
 262:router.c      ****     if(upRXbyte==1)        // our first byte
 263:router.c      ****     {
 264:router.c      ****         // the first byte should contain a valid "Destination Header"
 265:router.c      ****         // a bsic check for validity
 266:router.c      ****         // chain address should be < 8, chain index < 2
 267:router.c      ****         if(temporary & 0x8e)
 268:router.c      ****         {
 269:router.c      ****             upRXbyte=0; // discard it
 270:router.c      ****             // leave the timer running
 271:router.c      ****         }
 272:router.c      ****         else
 273:router.c      ****         {
 274:router.c      ****             upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 275:router.c      ****         }
 276:router.c      ****         return;
 277:router.c      ****     }
 278:router.c      ****     if(upRXbyte==COMMAND_PACKET_SIZE)
 279:router.c      ****     {
 280:router.c      ****         commandReady = 1; // signal done
 281:router.c      ****         upRXbyte=0;       // get ready for the next one
 282:router.c      ****         upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 283:router.c      ****         return;
 284:router.c      ****     }
 285:router.c      **** }
 286:router.c      **** 
 287:router.c      **** /************************************************************************
 288:router.c      ****  * prepareDMAChannel()
 289:router.c      ****  *
 290:router.c      ****  * Configures selectedChannel (a DMA.CHX structure) of the DMA module
 291:router.c      ****  * to collect data on usartTrigger signal produced by targetUSART and place
 292:router.c      ****  * it into the buffer targetBuffer.  isOutbound should be set to 1 if
 293:router.c      ****  * usartTrigger is an Outbound trigger
 294:router.c      ****  *
 295:router.c      ****  * This should be called before activateDMAChannel()
 296:router.c      ****  ************************************************************************/
 297:router.c      **** static inline void prepareDMAChannel(DMA_CH_t *selectedChannel, uint8_t usartTrigger, USART_t *targ
 298:router.c      **** {
 299:router.c      ****     //Set to perform one block transfer corresponding to one command packet
 300:router.c      ****     //Technically not necessary because REPEAT will not be set in CTRLA
 301:router.c      ****     selectedChannel->REPCNT = 0x01;
 302:router.c      **** 
 303:router.c      ****     //Trigger on received data
 304:router.c      ****     selectedChannel->TRIGSRC = usartTrigger;
 305:router.c      **** 
 306:router.c      ****     if(isOutbound)
 307:router.c      ****     {
 308:router.c      ****         //Configure the chosen channel to read from a fixed UART into a linear array
 309:router.c      ****         selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc |
 310:router.c      ****             DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_FIXED_gc;
 311:router.c      ****         //This part has 16 bit pointers, so cast appropriately.
 312:router.c      ****         //Memory addresses are 24 bits to allow for external memory to be mapped into one address s
 313:router.c      ****         //Same with internal EEPROM Data memory.
 314:router.c      ****         //Since these locations are in lower memory, fix the high order address bits to zero.
 315:router.c      ****         //Mapping external memory will require more care.
 316:router.c      ****         selectedChannel->DESTADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
 317:router.c      ****         selectedChannel->DESTADDR1 = (uint16_t) &targetUSART->DATA >> 8;
 318:router.c      ****         selectedChannel->DESTADDR2 = 0;
 319:router.c      **** 
 320:router.c      ****         selectedChannel->SRCADDR0 = (uint16_t)targetBuffer & 0x00FF;
 321:router.c      ****         selectedChannel->SRCADDR1 = (uint16_t)targetBuffer >> 8;
 322:router.c      ****         selectedChannel->SRCADDR2 = 0;
 323:router.c      ****         //Interrupt on this channel when the transaction is complete
 324:router.c      ****         //selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc;
 325:router.c      ****         selectedChannel->CTRLB = DMA_CH_TRNINTLVL_OFF_gc | DMA_CH_TRNIF_bm;
 326:router.c      ****         targetUSART->STATUS = USART_TXCIF_bm;
 327:router.c      ****         targetUSART->CTRLA |= USART_TXCINTLVL_LO_gc;    }
 328:router.c      ****     else
 329:router.c      ****     {
 330:router.c      ****         //Configure the chosen channel to read from a fixed UART into a linear array
 331:router.c      ****         selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_FIXED_gc |
 332:router.c      ****             DMA_CH_DESTRELOAD_TRANSACTION_gc | DMA_CH_DESTDIR_INC_gc;
 333:router.c      **** 
 334:router.c      ****         selectedChannel->DESTADDR0 = (uint16_t)targetBuffer & 0x00FF;
 335:router.c      ****         selectedChannel->DESTADDR1 = (uint16_t)targetBuffer >> 8;
 336:router.c      ****         selectedChannel->DESTADDR2 = 0;
 337:router.c      **** 
 338:router.c      ****         selectedChannel->SRCADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
 339:router.c      ****         selectedChannel->SRCADDR1 = (uint16_t) &targetUSART->DATA >> 8;
 340:router.c      ****         selectedChannel->SRCADDR2 = 0;
 341:router.c      ****         //Interrupt on this channel when the transaction is complete
 342:router.c      ****         //selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc;
 343:router.c      ****         selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc | DMA_CH_TRNIF_bm;
 344:router.c      ****     }
 345:router.c      **** }
 346:router.c      **** 
 347:router.c      **** /************************************************************************
 348:router.c      ****  * activateDMAChannel(selectedChannel,numBytes)
 349:router.c      ****  *
 350:router.c      ****  * Activates the DMA channel identified by selectedChannel (a DMA.CHX structure)
 351:router.c      ****  * to move numBytes bytes.  The DMA channel must have been previously prepared
 352:router.c      ****  * with prepareDMAChannel().
 353:router.c      ****  ************************************************************************/
 354:router.c      **** static inline void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
 355:router.c      **** {
 356:router.c      ****     //Set block size to packet size
 357:router.c      ****     selectedChannel->TRFCNT = numBytes;
 358:router.c      ****     //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arri
 359:router.c      ****     //only one burst will be performed.
 360:router.c      ****     selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
 361:router.c      **** }
 362:router.c      **** 
 363:router.c      **** 
 364:router.c      **** /************************************************************************
 365:router.c      ****  * ISRs for the Downstream USART RX interrupts (DMA setup)
 366:router.c      ****  *
 367:router.c      ****  * This routine takes the Configuration struct for the given USART.  It uses
 368:router.c      ****  * the contents of that structure to properly load an assigned DMA channel to receive
 369:router.c      ****  * the rest of the bytes to follow.
 370:router.c      ****  ************************************************************************/
 371:router.c      **** static inline void doDownstreamUSART_RX_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
 372:router.c      **** {
 373:router.c      ****     uint8_t packetSize;
 374:router.c      ****     USART_t *targetUSART = targetChannelConfig->usart;
 375:router.c      **** 
 376:router.c      ****     //Status bits must be polled before reading the data or they are invalidated
 377:router.c      ****     if(targetUSART->STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
 378:router.c      ****     {
 379:router.c      ****         //Framing or overflow error. Discard and do nothing else
 380:router.c      ****         Derr_frame++;
 381:router.c      ****         packetSize = targetUSART->DATA;
 382:router.c      ****         //if(targetUSART->STATUS & USART_FERR_bm)
 383:router.c      ****         //if(targetUSART->STATUS & USART_BUFOVF_bm)
 384:router.c      ****         //  LEDtoggle();
 385:router.c      ****         return;
 386:router.c      ****     }
 387:router.c      **** 
 388:router.c      ****     //Packetsize is defined as the number of additional bytes to arrive
 389:router.c      ****     //The buffer is of size MAX_DEVICE_PACKET_SIZE, so packetSize can be up to
 390:router.c      ****     //MAX_DEVICE_PACKET_SIZE - 1.  If it is equal to MAX_DEVICE_PACKET_SIZE or greater, reject
 391:router.c      **** 
 392:router.c      ****     packetSize = targetUSART->DATA;
 393:router.c      ****     if((packetSize >= MAX_DEVICE_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
 394:router.c      ****     {
 395:router.c      ****         //Packet size is invalid somehow.  Reject it
 396:router.c      ****         Derr_packetsize++;
 397:router.c      ****         return;
 398:router.c      ****     }
 399:router.c      **** 
 400:router.c      ****     //Packet size looks good.  Arm DMA
 401:router.c      ****     prepareDMAChannel(targetChannelConfig->dma,targetChannelConfig->inboundTrigger,targetUSART,targ
 402:router.c      ****     activateDMAChannel(targetChannelConfig->dma,packetSize);
 403:router.c      ****     targetChannelConfig->targetBuffer[0] = packetSize;
 404:router.c      **** 
 405:router.c      ****     //Widen the packetSize field
 406:router.c      ****     targetChannelConfig->targetBuffer[1] = 0;
 407:router.c      **** 
 408:router.c      ****     //Disable all interrupts and let the DMA take command.
 409:router.c      ****     targetUSART->CTRLA = 0x00;
 410:router.c      **** }
 411:router.c      **** 
 412:router.c      **** /************************************************************************
 413:router.c      ****  * ISRs for the Motor USART RX interrupts (non-DMA)
 414:router.c      ****  *
 415:router.c      ****  * This routine takes the Configuration struct for the given USART.
 416:router.c      ****  * It uses the contents of that structure to properly receive
 417:router.c      ****  * the rest of the bytes to follow.
 418:router.c      ****  ************************************************************************/
 419:router.c      **** static inline void doMotorUSART_RX_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig, uint8_t mtr)
 420:router.c      **** {
 421:router.c      ****     static uint8_t packetSize = 0;
 422:router.c      ****     uint8_t temporary;
 423:router.c      ****     USART_t *targetUSART = targetChannelConfig->usart;
 424:router.c      **** 
 425:router.c      ****     //Must check any error bits before reading the data.
 426:router.c      ****     if(targetUSART->STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
 427:router.c      ****     {
 428:router.c      ****         //Framing or overflow error. Discard and do nothing else
 429:router.c      ****         temporary = targetUSART->DATA;// read to clear the buffer
 430:router.c      ****         mtRXbyte[mtr]=0;
 431:router.c      ****         dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
 432:router.c      ****         //Uerr_frame++;
 433:router.c      ****         return;
 434:router.c      ****     }
 435:router.c      **** 
 436:router.c      ****     temporary = targetUSART->DATA;// read to clear the buffer
 437:router.c      **** 
 438:router.c      ****     if(!(dmaTimeoutCounter[mtr+4]))
 439:router.c      ****     {
 440:router.c      ****         //timeout, assume it is the first byte after an old packet timed out
 441:router.c      ****         mtRXbyte[mtr]=0;
 442:router.c      ****         dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
 443:router.c      ****         //ertrr_timeout++;
 444:router.c      ****         //return; // return if we wish to discard this byte instead of treating it as a new packet
 445:router.c      ****     }
 446:router.c      **** 
 447:router.c      ****     targetChannelConfig->targetBuffer[mtRXbyte[mtr]+1] = temporary;
 448:router.c      ****     mtRXbyte[mtr]++;
 449:router.c      **** 
 450:router.c      ****     if(mtRXbyte[mtr]==1)        // our first byte
 451:router.c      ****     {
 452:router.c      ****         packetSize=temporary;
 453:router.c      ****         targetChannelConfig->targetBuffer[0] = packetSize;
 454:router.c      ****         targetChannelConfig->targetBuffer[1] = 0;
 455:router.c      ****         if((packetSize >= MAX_DEVICE_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
 456:router.c      ****         {
 457:router.c      ****             //Packet size is invalid somehow.  Reject it
 458:router.c      ****             //Derr_packetsize++;
 459:router.c      ****             return;
 460:router.c      ****         }
 461:router.c      ****         dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
 462:router.c      ****         return;
 463:router.c      ****     }
 464:router.c      ****     if(mtRXbyte[mtr]==(packetSize+1))  // last byte
 465:router.c      ****     {
 466:router.c      ****         targetChannelConfig->sizeReceived = packetSize + 2;
 467:router.c      **** 
 468:router.c      ****         mtRXbyte[mtr]=0;       // get ready for the next packet
 469:router.c      ****         dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
 470:router.c      ****         return;
 471:router.c      ****     }
 472:router.c      **** }
 473:router.c      **** 
 474:router.c      **** 
 475:router.c      **** ISR(TACT_USART_RX_vect)
 476:router.c      **** {
 477:router.c      ****     doDownstreamUSART_RX_ISR(USARTtoCHANNELS[TACT]);
 478:router.c      **** }
 479:router.c      **** 
 480:router.c      **** ISR(PROX1_USART_RX_vect)
 481:router.c      **** {
 482:router.c      ****     doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX1]);
 483:router.c      **** }
 484:router.c      **** 
 485:router.c      **** ISR(PROX2_USART_RX_vect)
 486:router.c      **** {
 487:router.c      ****     doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX2]);
 488:router.c      **** }
 489:router.c      **** 
 490:router.c      **** ISR(PROX3_USART_RX_vect)
 491:router.c      **** {
 492:router.c      ****     doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX3]);
 493:router.c      **** }
 494:router.c      **** 
 495:router.c      **** ISR(MTR1_USART_RX_vect)
 496:router.c      **** {
 497:router.c      ****     doMotorUSART_RX_ISR(USARTtoCHANNELS[MTR1],0);
 498:router.c      **** }
 499:router.c      **** 
 500:router.c      **** ISR(MTR2_USART_RX_vect)
 501:router.c      **** {
 502:router.c      ****     doMotorUSART_RX_ISR(USARTtoCHANNELS[MTR2],1);
 503:router.c      **** }
 504:router.c      **** 
 505:router.c      **** static inline void doDownstreamUSART_TXDONE_ISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
 506:router.c      **** {
 507:router.c      ****     // This interrupt is called when the DMA is done stuffing the TX buffer
 508:router.c      ****     // and the last charachter has been sent.
 509:router.c      ****     // Reconfigure to capture the response.
 510:router.c      ****     targetChannelConfig->downstreamDoneFlag = 1;
 511:router.c      ****     targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
 512:router.c      **** }
 513:router.c      **** 
 514:router.c      **** ISR(TACT_USART_TXDONE_vect)
 515:router.c      **** {
 516:router.c      ****     //TACT_USART.CTRLA |= USART_RXCINTLVL_MED_gc; //redundant?
 517:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[TACT]);
 518:router.c      **** }
 519:router.c      **** 
 520:router.c      **** ISR(PROX1_USART_TXDONE_vect)
 521:router.c      **** {
 522:router.c      ****     //PROX1_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
 523:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX1]);
 524:router.c      **** }
 525:router.c      **** 
 526:router.c      **** ISR(PROX2_USART_TXDONE_vect)
 527:router.c      **** {
 528:router.c      ****     //PROX2_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
 529:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX2]);
 530:router.c      **** }
 531:router.c      **** 
 532:router.c      **** ISR(PROX3_USART_TXDONE_vect)
 533:router.c      **** {
 534:router.c      ****     //PROX3_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
 535:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX3]);
 536:router.c      **** }
 537:router.c      **** 
 538:router.c      **** ISR(MTR1_USART_TXDONE_vect)
 539:router.c      **** {
 540:router.c      ****     //MTR1_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
 541:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[MTR1]);
 542:router.c      **** }
 543:router.c      **** 
 544:router.c      **** ISR(MTR2_USART_TXDONE_vect)
 545:router.c      **** {
 546:router.c      ****     //MTR2_USART.CTRLA |= USART_RXCINTLVL_MED_gc;
 547:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[MTR2]);
 548:router.c      **** }
 549:router.c      **** 
 550:router.c      **** /************************************************************************
 551:router.c      ****  * ISRs for the Upstream TX
 552:router.c      ****  *
 553:router.c      ****  ************************************************************************/
 554:router.c      **** /*ISR(UPSTREAM_USART_TXDONE_vect)
 555:router.c      ****   {
 556:router.c      ****   //todo: transmit a filled buffer
 557:router.c      ****   UPSTREAM_USART.STATUS = USART_TXCIF_bm;
 558:router.c      ****   }
 559:router.c      **** */
 560:router.c      **** 
 561:router.c      **** /************************************************************************
 562:router.c      ****  * Handler for downstream DMA ISRs
 563:router.c      ****  * Use the CHANNEL_CONFIGURATION to identify whether the DMA was inbound
 564:router.c      ****  * or outbound.  In each case, notify the correct userspace routine by either
 565:router.c      ****  * setting sizeReceived or setting downstreamDone.
 566:router.c      ****  ************************************************************************/
 567:router.c      **** static inline void doDownstreamDMAISR(CHANNEL_CONFIGURATION_t *targetChannelConfig)
 568:router.c      **** {
  17               		.loc 1 568 0
  18               		.cfi_startproc
  19               	.LVL0:
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
  24 0000 DC01      		movw r26,r24
 569:router.c      ****     DMA_CH_t *targetDMA = targetChannelConfig->dma;
  25               		.loc 1 569 0
  26 0002 1296      		adiw r26,2
  27 0004 ED91      		ld r30,X+
  28 0006 FC91      		ld r31,X
  29 0008 1397      		sbiw r26,2+1
  30               	.LVL1:
 570:router.c      ****     if(targetDMA->CTRLB & DMA_CH_ERRIF_bm)
  31               		.loc 1 570 0
  32 000a 8181      		ldd r24,Z+1
  33               	.LVL2:
  34 000c 85FF      		sbrs r24,5
  35 000e 00C0      		rjmp .L2
 571:router.c      ****     {
 572:router.c      ****         //Acknowledge the DMA channel error
 573:router.c      ****         targetDMA->CTRLB = targetDMA->CTRLB | DMA_CH_ERRIF_bm;
  36               		.loc 1 573 0
  37 0010 8181      		ldd r24,Z+1
  38 0012 8062      		ori r24,lo8(32)
  39 0014 8183      		std Z+1,r24
 574:router.c      ****         //It may be from an aborted transfer, so just return.
 575:router.c      ****         return;
  40               		.loc 1 575 0
  41 0016 0895      		ret
  42               	.L2:
 576:router.c      ****     }
 577:router.c      **** 
 578:router.c      ****     if(targetDMA->CTRLB & DMA_CH_TRNIF_bm)
  43               		.loc 1 578 0
  44 0018 8181      		ldd r24,Z+1
  45 001a 84FF      		sbrs r24,4
  46 001c 00C0      		rjmp .L1
 579:router.c      ****     {
 580:router.c      ****         //The transfer is complete and should be acked
 581:router.c      ****         targetDMA->CTRLB = targetDMA->CTRLB | DMA_CH_TRNIF_bm;
  47               		.loc 1 581 0
  48 001e 8181      		ldd r24,Z+1
  49 0020 8061      		ori r24,lo8(16)
  50 0022 8183      		std Z+1,r24
 582:router.c      **** 
 583:router.c      ****         targetChannelConfig->isActive = 0; // BA
  51               		.loc 1 583 0
  52 0024 1B96      		adiw r26,11
  53 0026 1C92      		st X,__zero_reg__
  54 0028 1B97      		sbiw r26,11
 584:router.c      **** 
 585:router.c      ****         //Just finished receiving response into singleDownstreamBuffer.  Signal userspace
 586:router.c      ****         //The number of bytes received is the size field plus 2 (to account for the size field itse
 587:router.c      ****         targetChannelConfig->sizeReceived = targetChannelConfig->targetBuffer[0] + 2;
  55               		.loc 1 587 0
  56 002a 1496      		adiw r26,4
  57 002c ED91      		ld r30,X+
  58 002e FC91      		ld r31,X
  59 0030 1597      		sbiw r26,4+1
  60 0032 8081      		ld r24,Z
  61 0034 8E5F      		subi r24,lo8(-(2))
  62 0036 1796      		adiw r26,7
  63 0038 8C93      		st X,r24
  64 003a 1797      		sbiw r26,7
  65               	.L1:
  66 003c 0895      		ret
  67               		.cfi_endproc
  68               	.LFE19:
  71               	configureUSARTHardware:
  72               	.LFB24:
 588:router.c      ****         return;
 589:router.c      ****     }
 590:router.c      **** }
 591:router.c      **** 
 592:router.c      **** 
 593:router.c      **** /************************************************************************
 594:router.c      ****  * Downstream DMA vectors
 595:router.c      ****  ************************************************************************/
 596:router.c      **** ISR(DOWNSTREAM0_USART_DMA_vect)
 597:router.c      **** {
 598:router.c      ****     doDownstreamDMAISR(&DownStreamConfig[0]);
 599:router.c      **** }
 600:router.c      **** ISR(DOWNSTREAM1_USART_DMA_vect)
 601:router.c      **** {
 602:router.c      ****     doDownstreamDMAISR(&DownStreamConfig[1]);
 603:router.c      **** }
 604:router.c      **** ISR(DOWNSTREAM2_USART_DMA_vect)
 605:router.c      **** {
 606:router.c      ****     doDownstreamDMAISR(&DownStreamConfig[2]);
 607:router.c      **** }
 608:router.c      **** ISR(DOWNSTREAM3_USART_DMA_vect)
 609:router.c      **** {
 610:router.c      ****     doDownstreamDMAISR(&DownStreamConfig[3]);
 611:router.c      **** }
 612:router.c      **** 
 613:router.c      **** /************************************************************************
 614:router.c      ****  * configureUSART(targetUSART, isPC, useDMA):
 615:router.c      ****  * Responsible for configuring the USART module.
 616:router.c      ****  *
 617:router.c      ****  * targetUSART is a pointer to the USART_t struct to be configured
 618:router.c      ****  * when isPC is 1, set to communicate at 115200 baud
 619:router.c      ****  * using 8 data bits, 1 stop bit.
 620:router.c      ****  *
 621:router.c      ****  * When isPC is 0, set to communicate at 2 MBaud
 622:router.c      ****  * using 8 data bits, 1 stop bit.
 623:router.c      ****  *
 624:router.c      ****  ************************************************************************/
 625:router.c      **** static void configureUSARTHardware(USART_t *targetUSART, int isPC, int isDownstream)
 626:router.c      **** {
  73               		.loc 1 626 0
  74               		.cfi_startproc
  75               	.LVL3:
  76               	/* prologue: function */
  77               	/* frame size = 0 */
  78               	/* stack size = 0 */
  79               	.L__stack_usage = 0
  80 003e FC01      		movw r30,r24
 627:router.c      ****     if(isPC)
  81               		.loc 1 627 0
  82 0040 6115      		cp r22,__zero_reg__
  83 0042 7105      		cpc r23,__zero_reg__
  84 0044 01F0      		breq .L5
 628:router.c      ****     {
 629:router.c      ****         //COMMAND_USART.BAUDCTRLA = 34;    //Configure for 57600 baud rate with normal baud rate ge
 630:router.c      ****         //COMMAND_USART.BAUDCTRLB = 0;
 631:router.c      **** 
 632:router.c      ****         //targetUSART->BAUDCTRLA = 33;    //Configure for 115200 with fractional baud rate generati
 633:router.c      ****         //targetUSART->BAUDCTRLB = 0xF0;
 634:router.c      **** 
 635:router.c      ****         targetUSART->BAUDCTRLA = 41;    //Configure for 1219512.2 Baud for 1152000 Baud for PC
  85               		.loc 1 635 0
  86 0046 89E2      		ldi r24,lo8(41)
  87               	.LVL4:
  88 0048 8683      		std Z+6,r24
 636:router.c      ****         targetUSART->BAUDCTRLB = 0xA0;    // BSEL = 41, BSCALE = -6 = 0xC in twos complement
  89               		.loc 1 636 0
  90 004a 80EA      		ldi r24,lo8(-96)
  91 004c 8783      		std Z+7,r24
  92 004e 00C0      		rjmp .L6
  93               	.L5:
 637:router.c      **** 
 638:router.c      ****         //targetUSART->BAUDCTRLA = 73;    //Configure for 931372 Baud  for 1000000 Baud for PC
 639:router.c      ****         //targetUSART->BAUDCTRLB = 0xA0;    // BSEL = 73, BSCALE = -6 = 0xA in twos complement
 640:router.c      **** 
 641:router.c      ****         //targetUSART->BAUDCTRLA = 6;    //Configure for 1818181.8 Baud  for 2000000 Baud for PC
 642:router.c      ****         //targetUSART->BAUDCTRLB = 0xA0;    // BSEL = 6, BSCALE = -6 = 0xA in twos complement
 643:router.c      ****     }
 644:router.c      ****     else
 645:router.c      ****     {
 646:router.c      ****         targetUSART->BAUDCTRLA = 0;    //Configure for 2 MBaud by setting baud rate to zero
  94               		.loc 1 646 0
  95 0050 1682      		std Z+6,__zero_reg__
 647:router.c      ****         targetUSART->BAUDCTRLB = 0x00;    //and BSEL to zero
  96               		.loc 1 647 0
  97 0052 1782      		std Z+7,__zero_reg__
  98               	.L6:
 648:router.c      ****     }
 649:router.c      **** 
 650:router.c      ****     targetUSART->CTRLC = (USART_CMODE_ASYNCHRONOUS_gc
  99               		.loc 1 650 0
 100 0054 83E0      		ldi r24,lo8(3)
 101 0056 8583      		std Z+5,r24
 651:router.c      ****                           | USART_PMODE_DISABLED_gc
 652:router.c      ****                           | USART_CHSIZE_8BIT_gc);    //Configure port settings for 8 bits of data,
 653:router.c      ****     targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
 102               		.loc 1 653 0
 103 0058 8481      		ldd r24,Z+4
 104 005a 8861      		ori r24,lo8(24)
 105 005c 8483      		std Z+4,r24
 654:router.c      **** 
 655:router.c      ****     if(isDownstream)
 106               		.loc 1 655 0
 107 005e 4115      		cp r20,__zero_reg__
 108 0060 5105      		cpc r21,__zero_reg__
 109 0062 01F0      		breq .L7
 656:router.c      ****     {
 657:router.c      ****         targetUSART->CTRLA = USART_RXCINTLVL_MED_gc; //Enable RX interrupt at LO priority
 110               		.loc 1 657 0
 111 0064 80E2      		ldi r24,lo8(32)
 112 0066 00C0      		rjmp .L9
 113               	.L7:
 658:router.c      ****     }
 659:router.c      ****     else
 660:router.c      ****     {
 661:router.c      ****         targetUSART->CTRLA = USART_RXCINTLVL_HI_gc; //Enable RX interrupt at HI priority
 114               		.loc 1 661 0
 115 0068 80E3      		ldi r24,lo8(48)
 116               	.L9:
 117 006a 8383      		std Z+3,r24
 118 006c 0895      		ret
 119               		.cfi_endproc
 120               	.LFE24:
 123               	upstreamTX:
 124               	.LFB25:
 662:router.c      ****     }
 663:router.c      **** 
 664:router.c      ****     return;
 665:router.c      **** }
 666:router.c      **** 
 667:router.c      **** 
 668:router.c      **** static void upstreamTX(volatile uint8_t *targetBuffer, uint16_t numBytes)
 669:router.c      **** {
 125               		.loc 1 669 0
 126               		.cfi_startproc
 127               	.LVL5:
 128               	/* prologue: function */
 129               	/* frame size = 0 */
 130               	/* stack size = 0 */
 131               	.L__stack_usage = 0
 132 006e 9C01      		movw r18,r24
 133               	.LVL6:
 134               	.LBB50:
 670:router.c      ****     // -pavlo todo make this an intterrupt driven process
 671:router.c      **** 
 672:router.c      ****     //UPSTREAM_USART.CTRLA &= ~USART_TXCINTLVL_LO_gc;
 673:router.c      ****     for(uint16_t i=0; i<numBytes; i++)
 135               		.loc 1 673 0
 136 0070 80E0      		ldi r24,lo8(0)
 137 0072 90E0      		ldi r25,hi8(0)
 138               	.LVL7:
 139 0074 00C0      		rjmp .L11
 140               	.LVL8:
 141               	.L13:
 674:router.c      ****     {
 675:router.c      ****         while(!(UPSTREAM_USART.STATUS & USART_DREIF_bm));
 142               		.loc 1 675 0 discriminator 1
 143 0076 4091 A10B 		lds r20,2977
 144 007a 45FF      		sbrs r20,5
 145 007c 00C0      		rjmp .L13
 668:router.c      **** static void upstreamTX(volatile uint8_t *targetBuffer, uint16_t numBytes)
 146               		.loc 1 668 0
 147 007e F901      		movw r30,r18
 148 0080 E80F      		add r30,r24
 149 0082 F91F      		adc r31,r25
 676:router.c      ****         UPSTREAM_USART.DATA = targetBuffer[i];
 150               		.loc 1 676 0
 151 0084 4081      		ld r20,Z
 152 0086 4093 A00B 		sts 2976,r20
 673:router.c      ****     for(uint16_t i=0; i<numBytes; i++)
 153               		.loc 1 673 0
 154 008a 0196      		adiw r24,1
 155               	.LVL9:
 156               	.L11:
 673:router.c      ****     for(uint16_t i=0; i<numBytes; i++)
 157               		.loc 1 673 0 is_stmt 0 discriminator 1
 158 008c 8617      		cp r24,r22
 159 008e 9707      		cpc r25,r23
 160 0090 01F4      		brne .L13
 161               	/* epilogue start */
 162               	.LBE50:
 677:router.c      ****         //if(!(UPSTREAM_USART.STATUS & USART_DREIF_bm))
 678:router.c      ****         //while(UPSTREAM_USART.STATUS & USART_TXCIF_bm);
 679:router.c      ****         //UPSTREAM_USART.STATUS |= USART_TXCIF_bm;  // clear TX interrupt flag
 680:router.c      ****     }
 681:router.c      ****     //UPSTREAM_USART.CTRLA |= USART_TXCINTLVL_LO_gc;
 682:router.c      **** }
 163               		.loc 1 682 0 is_stmt 1
 164 0092 0895      		ret
 165               		.cfi_endproc
 166               	.LFE25:
 169               	doDownstreamUSART_RX_ISR:
 170               	.LFB4:
 372:router.c      **** {
 171               		.loc 1 372 0
 172               		.cfi_startproc
 173               	.LVL10:
 174 0094 CF93      		push r28
 175               	.LCFI0:
 176               		.cfi_def_cfa_offset 4
 177               		.cfi_offset 28, -3
 178 0096 DF93      		push r29
 179               	.LCFI1:
 180               		.cfi_def_cfa_offset 5
 181               		.cfi_offset 29, -4
 182               	/* prologue: function */
 183               	/* frame size = 0 */
 184               	/* stack size = 2 */
 185               	.L__stack_usage = 2
 186 0098 FC01      		movw r30,r24
 374:router.c      ****     USART_t *targetUSART = targetChannelConfig->usart;
 187               		.loc 1 374 0
 188 009a C081      		ld r28,Z
 189 009c D181      		ldd r29,Z+1
 190               	.LVL11:
 377:router.c      ****     if(targetUSART->STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
 191               		.loc 1 377 0
 192 009e 8981      		ldd r24,Y+1
 193               	.LVL12:
 194 00a0 8871      		andi r24,lo8(24)
 195 00a2 01F0      		breq .L16
 380:router.c      ****         Derr_frame++;
 196               		.loc 1 380 0
 197 00a4 8091 0000 		lds r24,Derr_frame
 198 00a8 8F5F      		subi r24,lo8(-(1))
 199 00aa 8093 0000 		sts Derr_frame,r24
 381:router.c      ****         packetSize = targetUSART->DATA;
 200               		.loc 1 381 0
 201 00ae 8881      		ld r24,Y
 385:router.c      ****         return;
 202               		.loc 1 385 0
 203 00b0 00C0      		rjmp .L15
 204               	.L16:
 392:router.c      ****     packetSize = targetUSART->DATA;
 205               		.loc 1 392 0
 206 00b2 2881      		ld r18,Y
 207               	.LVL13:
 393:router.c      ****     if((packetSize >= MAX_DEVICE_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
 208               		.loc 1 393 0
 209 00b4 822F      		mov r24,r18
 210 00b6 8350      		subi r24,lo8(-(-3))
 211 00b8 853C      		cpi r24,lo8(-59)
 212 00ba 00F0      		brlo .L18
 213               	.LBB61:
 214               	.LBB62:
 396:router.c      ****         Derr_packetsize++;
 215               		.loc 1 396 0
 216 00bc 8091 0000 		lds r24,Derr_packetsize
 217 00c0 8F5F      		subi r24,lo8(-(1))
 218 00c2 8093 0000 		sts Derr_packetsize,r24
 219 00c6 00C0      		rjmp .L15
 220               	.L18:
 221               	.LBE62:
 222               	.LBE61:
 401:router.c      ****     prepareDMAChannel(targetChannelConfig->dma,targetChannelConfig->inboundTrigger,targetUSART,targ
 223               		.loc 1 401 0
 224 00c8 A281      		ldd r26,Z+2
 225 00ca B381      		ldd r27,Z+3
 226 00cc 3681      		ldd r19,Z+6
 227 00ce 8481      		ldd r24,Z+4
 228 00d0 9581      		ldd r25,Z+5
 229 00d2 0296      		adiw r24,2
 230               	.LVL14:
 231               	.LBB63:
 232               	.LBB64:
 301:router.c      ****     selectedChannel->REPCNT = 0x01;
 233               		.loc 1 301 0
 234 00d4 41E0      		ldi r20,lo8(1)
 235 00d6 1696      		adiw r26,6
 236 00d8 4C93      		st X,r20
 237 00da 1697      		sbiw r26,6
 304:router.c      ****     selectedChannel->TRIGSRC = usartTrigger;
 238               		.loc 1 304 0
 239 00dc 1396      		adiw r26,3
 240 00de 3C93      		st X,r19
 241 00e0 1397      		sbiw r26,3
 331:router.c      ****         selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_FIXED_gc |
 242               		.loc 1 331 0
 243 00e2 3DE8      		ldi r19,lo8(-115)
 244 00e4 1296      		adiw r26,2
 245 00e6 3C93      		st X,r19
 246 00e8 1297      		sbiw r26,2
 334:router.c      ****         selectedChannel->DESTADDR0 = (uint16_t)targetBuffer & 0x00FF;
 247               		.loc 1 334 0
 248 00ea 1C96      		adiw r26,12
 249 00ec 8C93      		st X,r24
 250 00ee 1C97      		sbiw r26,12
 335:router.c      ****         selectedChannel->DESTADDR1 = (uint16_t)targetBuffer >> 8;
 251               		.loc 1 335 0
 252 00f0 1D96      		adiw r26,13
 253 00f2 9C93      		st X,r25
 254 00f4 1D97      		sbiw r26,13
 336:router.c      ****         selectedChannel->DESTADDR2 = 0;
 255               		.loc 1 336 0
 256 00f6 1E96      		adiw r26,14
 257 00f8 1C92      		st X,__zero_reg__
 258 00fa 1E97      		sbiw r26,14
 338:router.c      ****         selectedChannel->SRCADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
 259               		.loc 1 338 0
 260 00fc 1896      		adiw r26,8
 261 00fe CC93      		st X,r28
 262 0100 1897      		sbiw r26,8
 339:router.c      ****         selectedChannel->SRCADDR1 = (uint16_t) &targetUSART->DATA >> 8;
 263               		.loc 1 339 0
 264 0102 1996      		adiw r26,9
 265 0104 DC93      		st X,r29
 266 0106 1997      		sbiw r26,9
 340:router.c      ****         selectedChannel->SRCADDR2 = 0;
 267               		.loc 1 340 0
 268 0108 1A96      		adiw r26,10
 269 010a 1C92      		st X,__zero_reg__
 270 010c 1A97      		sbiw r26,10
 343:router.c      ****         selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc | DMA_CH_TRNIF_bm;
 271               		.loc 1 343 0
 272 010e 81E1      		ldi r24,lo8(17)
 273               	.LVL15:
 274 0110 1196      		adiw r26,1
 275 0112 8C93      		st X,r24
 276               	.LBE64:
 277               	.LBE63:
 402:router.c      ****     activateDMAChannel(targetChannelConfig->dma,packetSize);
 278               		.loc 1 402 0
 279 0114 A281      		ldd r26,Z+2
 280 0116 B381      		ldd r27,Z+3
 281               	.LVL16:
 282 0118 822F      		mov r24,r18
 283 011a 90E0      		ldi r25,lo8(0)
 284               	.LBB65:
 285               	.LBB66:
 357:router.c      ****     selectedChannel->TRFCNT = numBytes;
 286               		.loc 1 357 0
 287 011c 1496      		adiw r26,4
 288 011e 8D93      		st X+,r24
 289 0120 9C93      		st X,r25
 290 0122 1597      		sbiw r26,4+1
 360:router.c      ****     selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
 291               		.loc 1 360 0
 292 0124 84E8      		ldi r24,lo8(-124)
 293 0126 8C93      		st X,r24
 294               	.LBE66:
 295               	.LBE65:
 403:router.c      ****     targetChannelConfig->targetBuffer[0] = packetSize;
 296               		.loc 1 403 0
 297 0128 A481      		ldd r26,Z+4
 298 012a B581      		ldd r27,Z+5
 299 012c 2C93      		st X,r18
 406:router.c      ****     targetChannelConfig->targetBuffer[1] = 0;
 300               		.loc 1 406 0
 301 012e 0480      		ldd __tmp_reg__,Z+4
 302 0130 F581      		ldd r31,Z+5
 303 0132 E02D      		mov r30,__tmp_reg__
 304               	.LVL17:
 305 0134 1182      		std Z+1,__zero_reg__
 409:router.c      ****     targetUSART->CTRLA = 0x00;
 306               		.loc 1 409 0
 307 0136 1B82      		std Y+3,__zero_reg__
 308               	.LVL18:
 309               	.L15:
 310               	/* epilogue start */
 410:router.c      **** }
 311               		.loc 1 410 0
 312 0138 DF91      		pop r29
 313 013a CF91      		pop r28
 314               	.LVL19:
 315 013c 0895      		ret
 316               		.cfi_endproc
 317               	.LFE4:
 320               	doMotorUSART_RX_ISR:
 321               	.LFB5:
 420:router.c      **** {
 322               		.loc 1 420 0
 323               		.cfi_startproc
 324               	.LVL20:
 325 013e CF93      		push r28
 326               	.LCFI2:
 327               		.cfi_def_cfa_offset 4
 328               		.cfi_offset 28, -3
 329 0140 DF93      		push r29
 330               	.LCFI3:
 331               		.cfi_def_cfa_offset 5
 332               		.cfi_offset 29, -4
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 2 */
 336               	.L__stack_usage = 2
 337 0142 EC01      		movw r28,r24
 423:router.c      ****     USART_t *targetUSART = targetChannelConfig->usart;
 338               		.loc 1 423 0
 339 0144 E881      		ld r30,Y
 340 0146 F981      		ldd r31,Y+1
 341               	.LVL21:
 426:router.c      ****     if(targetUSART->STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
 342               		.loc 1 426 0
 343 0148 8181      		ldd r24,Z+1
 344               	.LVL22:
 345 014a 8871      		andi r24,lo8(24)
 346 014c A62F      		mov r26,r22
 347 014e B0E0      		ldi r27,lo8(0)
 348 0150 01F0      		breq .L20
 429:router.c      ****         temporary = targetUSART->DATA;// read to clear the buffer
 349               		.loc 1 429 0
 350 0152 8081      		ld r24,Z
 430:router.c      ****         mtRXbyte[mtr]=0;
 351               		.loc 1 430 0
 352 0154 FD01      		movw r30,r26
 353 0156 E050      		subi r30,lo8(-(mtRXbyte))
 354 0158 F040      		sbci r31,hi8(-(mtRXbyte))
 355 015a 1082      		st Z,__zero_reg__
 431:router.c      ****         dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
 356               		.loc 1 431 0
 357 015c A050      		subi r26,lo8(-(dmaTimeoutCounter+4))
 358 015e B040      		sbci r27,hi8(-(dmaTimeoutCounter+4))
 359 0160 85E0      		ldi r24,lo8(5)
 360 0162 8C93      		st X,r24
 433:router.c      ****         return;
 361               		.loc 1 433 0
 362 0164 00C0      		rjmp .L19
 363               	.L20:
 436:router.c      ****     temporary = targetUSART->DATA;// read to clear the buffer
 364               		.loc 1 436 0
 365 0166 2081      		ld r18,Z
 366               	.LVL23:
 438:router.c      ****     if(!(dmaTimeoutCounter[mtr+4]))
 367               		.loc 1 438 0
 368 0168 AD01      		movw r20,r26
 369 016a 4050      		subi r20,lo8(-(dmaTimeoutCounter+4))
 370 016c 5040      		sbci r21,hi8(-(dmaTimeoutCounter+4))
 371 016e FA01      		movw r30,r20
 372 0170 8081      		ld r24,Z
 373 0172 A050      		subi r26,lo8(-(mtRXbyte))
 374 0174 B040      		sbci r27,hi8(-(mtRXbyte))
 375 0176 8823      		tst r24
 376 0178 01F4      		brne .L22
 441:router.c      ****         mtRXbyte[mtr]=0;
 377               		.loc 1 441 0
 378 017a 1C92      		st X,__zero_reg__
 442:router.c      ****         dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
 379               		.loc 1 442 0
 380 017c 85E0      		ldi r24,lo8(5)
 381 017e 8083      		st Z,r24
 382               	.LVL24:
 383               	.L22:
 447:router.c      ****     targetChannelConfig->targetBuffer[mtRXbyte[mtr]+1] = temporary;
 384               		.loc 1 447 0
 385 0180 8C91      		ld r24,X
 386 0182 90E0      		ldi r25,lo8(0)
 387 0184 0196      		adiw r24,1
 388 0186 EC81      		ldd r30,Y+4
 389 0188 FD81      		ldd r31,Y+5
 390 018a E80F      		add r30,r24
 391 018c F91F      		adc r31,r25
 392 018e 2083      		st Z,r18
 448:router.c      ****     mtRXbyte[mtr]++;
 393               		.loc 1 448 0
 394 0190 8C91      		ld r24,X
 395 0192 8F5F      		subi r24,lo8(-(1))
 396 0194 8C93      		st X,r24
 450:router.c      ****     if(mtRXbyte[mtr]==1)        // our first byte
 397               		.loc 1 450 0
 398 0196 8C91      		ld r24,X
 399 0198 8130      		cpi r24,lo8(1)
 400 019a 01F4      		brne .L23
 452:router.c      ****         packetSize=temporary;
 401               		.loc 1 452 0
 402 019c 2093 0000 		sts packetSize.3447,r18
 453:router.c      ****         targetChannelConfig->targetBuffer[0] = packetSize;
 403               		.loc 1 453 0
 404 01a0 EC81      		ldd r30,Y+4
 405 01a2 FD81      		ldd r31,Y+5
 406 01a4 2083      		st Z,r18
 454:router.c      ****         targetChannelConfig->targetBuffer[1] = 0;
 407               		.loc 1 454 0
 408 01a6 EC81      		ldd r30,Y+4
 409 01a8 FD81      		ldd r31,Y+5
 410 01aa 1182      		std Z+1,__zero_reg__
 455:router.c      ****         if((packetSize >= MAX_DEVICE_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
 411               		.loc 1 455 0
 412 01ac 2350      		subi r18,lo8(-(-3))
 413               	.LVL25:
 414 01ae 253C      		cpi r18,lo8(-59)
 415 01b0 00F4      		brsh .L19
 416 01b2 00C0      		rjmp .L24
 417               	.LVL26:
 418               	.L23:
 464:router.c      ****     if(mtRXbyte[mtr]==(packetSize+1))  // last byte
 419               		.loc 1 464 0
 420 01b4 2C91      		ld r18,X
 421               	.LVL27:
 422 01b6 6091 0000 		lds r22,packetSize.3447
 423               	.LVL28:
 424 01ba 30E0      		ldi r19,lo8(0)
 425 01bc 862F      		mov r24,r22
 426 01be 90E0      		ldi r25,lo8(0)
 427 01c0 0196      		adiw r24,1
 428 01c2 2817      		cp r18,r24
 429 01c4 3907      		cpc r19,r25
 430 01c6 01F4      		brne .L19
 431               	.LVL29:
 432               	.LBB69:
 433               	.LBB70:
 466:router.c      ****         targetChannelConfig->sizeReceived = packetSize + 2;
 434               		.loc 1 466 0
 435 01c8 6E5F      		subi r22,lo8(-(2))
 436 01ca 6F83      		std Y+7,r22
 468:router.c      ****         mtRXbyte[mtr]=0;       // get ready for the next packet
 437               		.loc 1 468 0
 438 01cc 1C92      		st X,__zero_reg__
 439               	.LVL30:
 440               	.L24:
 469:router.c      ****         dmaTimeoutCounter[mtr+4]=DOWNSTREAM_TIMEOUT_4KHZ;
 441               		.loc 1 469 0
 442 01ce 85E0      		ldi r24,lo8(5)
 443 01d0 FA01      		movw r30,r20
 444 01d2 8083      		st Z,r24
 445               	.L19:
 446               	/* epilogue start */
 447               	.LBE70:
 448               	.LBE69:
 472:router.c      **** }
 449               		.loc 1 472 0
 450 01d4 DF91      		pop r29
 451 01d6 CF91      		pop r28
 452               	.LVL31:
 453 01d8 0895      		ret
 454               		.cfi_endproc
 455               	.LFE5:
 457               	.global	__vector_77
 459               	__vector_77:
 460               	.LFB0:
 167:router.c      **** {
 461               		.loc 1 167 0
 462               		.cfi_startproc
 463 01da 1F92      		push r1
 464               	.LCFI4:
 465               		.cfi_def_cfa_offset 4
 466               		.cfi_offset 1, -3
 467 01dc 0F92      		push r0
 468               	.LCFI5:
 469               		.cfi_def_cfa_offset 5
 470               		.cfi_offset 0, -4
 471 01de 0FB6      		in r0,__SREG__
 472 01e0 0F92      		push r0
 473 01e2 08B6      		in r0,56-0
 474 01e4 0F92      		push r0
 475 01e6 1124      		clr __zero_reg__
 476 01e8 8F93      		push r24
 477               	.LCFI6:
 478               		.cfi_def_cfa_offset 6
 479               		.cfi_offset 24, -5
 480               	/* prologue: Signal */
 481               	/* frame size = 0 */
 482               	/* stack size = 5 */
 483               	.L__stack_usage = 5
 171:router.c      ****     if((DownStreamConfig[0].isActive) &&
 484               		.loc 1 171 0
 485 01ea 8091 0000 		lds r24,DownStreamConfig+11
 486 01ee 8823      		tst r24
 487 01f0 01F0      		breq .L26
 172:router.c      ****        (dmaTimeoutCounter[0]))
 488               		.loc 1 172 0 discriminator 1
 489 01f2 8091 0000 		lds r24,dmaTimeoutCounter
 171:router.c      ****     if((DownStreamConfig[0].isActive) &&
 490               		.loc 1 171 0 discriminator 1
 491 01f6 8823      		tst r24
 492 01f8 01F0      		breq .L26
 174:router.c      ****         dmaTimeoutCounter[0]--;
 493               		.loc 1 174 0
 494 01fa 8091 0000 		lds r24,dmaTimeoutCounter
 495 01fe 8150      		subi r24,lo8(-(-1))
 496 0200 8093 0000 		sts dmaTimeoutCounter,r24
 497               	.L26:
 176:router.c      ****     if((DownStreamConfig[1].isActive) &&
 498               		.loc 1 176 0
 499 0204 8091 0000 		lds r24,DownStreamConfig+23
 500 0208 8823      		tst r24
 501 020a 01F0      		breq .L27
 177:router.c      ****        (dmaTimeoutCounter[1]))
 502               		.loc 1 177 0 discriminator 1
 503 020c 8091 0000 		lds r24,dmaTimeoutCounter+1
 176:router.c      ****     if((DownStreamConfig[1].isActive) &&
 504               		.loc 1 176 0 discriminator 1
 505 0210 8823      		tst r24
 506 0212 01F0      		breq .L27
 179:router.c      ****         dmaTimeoutCounter[1]--;
 507               		.loc 1 179 0
 508 0214 8091 0000 		lds r24,dmaTimeoutCounter+1
 509 0218 8150      		subi r24,lo8(-(-1))
 510 021a 8093 0000 		sts dmaTimeoutCounter+1,r24
 511               	.L27:
 181:router.c      ****     if((DownStreamConfig[2].isActive) &&
 512               		.loc 1 181 0
 513 021e 8091 0000 		lds r24,DownStreamConfig+35
 514 0222 8823      		tst r24
 515 0224 01F0      		breq .L28
 182:router.c      ****        (dmaTimeoutCounter[2]))
 516               		.loc 1 182 0 discriminator 1
 517 0226 8091 0000 		lds r24,dmaTimeoutCounter+2
 181:router.c      ****     if((DownStreamConfig[2].isActive) &&
 518               		.loc 1 181 0 discriminator 1
 519 022a 8823      		tst r24
 520 022c 01F0      		breq .L28
 184:router.c      ****         dmaTimeoutCounter[2]--;
 521               		.loc 1 184 0
 522 022e 8091 0000 		lds r24,dmaTimeoutCounter+2
 523 0232 8150      		subi r24,lo8(-(-1))
 524 0234 8093 0000 		sts dmaTimeoutCounter+2,r24
 525               	.L28:
 186:router.c      ****     if((DownStreamConfig[3].isActive) &&
 526               		.loc 1 186 0
 527 0238 8091 0000 		lds r24,DownStreamConfig+47
 528 023c 8823      		tst r24
 529 023e 01F0      		breq .L29
 187:router.c      ****        (dmaTimeoutCounter[3]))
 530               		.loc 1 187 0 discriminator 1
 531 0240 8091 0000 		lds r24,dmaTimeoutCounter+3
 186:router.c      ****     if((DownStreamConfig[3].isActive) &&
 532               		.loc 1 186 0 discriminator 1
 533 0244 8823      		tst r24
 534 0246 01F0      		breq .L29
 189:router.c      ****         dmaTimeoutCounter[3]--;
 535               		.loc 1 189 0
 536 0248 8091 0000 		lds r24,dmaTimeoutCounter+3
 537 024c 8150      		subi r24,lo8(-(-1))
 538 024e 8093 0000 		sts dmaTimeoutCounter+3,r24
 539               	.L29:
 193:router.c      ****     if((DownStreamConfig[4].isActive) &&
 540               		.loc 1 193 0
 541 0252 8091 0000 		lds r24,DownStreamConfig+59
 542 0256 8823      		tst r24
 543 0258 01F0      		breq .L30
 194:router.c      ****        (dmaTimeoutCounter[4]))
 544               		.loc 1 194 0 discriminator 1
 545 025a 8091 0000 		lds r24,dmaTimeoutCounter+4
 193:router.c      ****     if((DownStreamConfig[4].isActive) &&
 546               		.loc 1 193 0 discriminator 1
 547 025e 8823      		tst r24
 548 0260 01F0      		breq .L30
 196:router.c      ****         dmaTimeoutCounter[4]--;
 549               		.loc 1 196 0
 550 0262 8091 0000 		lds r24,dmaTimeoutCounter+4
 551 0266 8150      		subi r24,lo8(-(-1))
 552 0268 8093 0000 		sts dmaTimeoutCounter+4,r24
 553               	.L30:
 198:router.c      ****     if((DownStreamConfig[5].isActive) &&
 554               		.loc 1 198 0
 555 026c 8091 0000 		lds r24,DownStreamConfig+71
 556 0270 8823      		tst r24
 557 0272 01F0      		breq .L31
 199:router.c      ****        (dmaTimeoutCounter[5]))
 558               		.loc 1 199 0 discriminator 1
 559 0274 8091 0000 		lds r24,dmaTimeoutCounter+5
 198:router.c      ****     if((DownStreamConfig[5].isActive) &&
 560               		.loc 1 198 0 discriminator 1
 561 0278 8823      		tst r24
 562 027a 01F0      		breq .L31
 201:router.c      ****         dmaTimeoutCounter[5]--;
 563               		.loc 1 201 0
 564 027c 8091 0000 		lds r24,dmaTimeoutCounter+5
 565 0280 8150      		subi r24,lo8(-(-1))
 566 0282 8093 0000 		sts dmaTimeoutCounter+5,r24
 567               	.L31:
 205:router.c      ****     if(upRXtimeoutCounter)
 568               		.loc 1 205 0
 569 0286 8091 0000 		lds r24,upRXtimeoutCounter
 570 028a 8823      		tst r24
 571 028c 01F0      		breq .L25
 207:router.c      ****         upRXtimeoutCounter--;
 572               		.loc 1 207 0
 573 028e 8091 0000 		lds r24,upRXtimeoutCounter
 574 0292 8150      		subi r24,lo8(-(-1))
 575 0294 8093 0000 		sts upRXtimeoutCounter,r24
 576               	.L25:
 577               	/* epilogue start */
 211:router.c      **** }
 578               		.loc 1 211 0
 579 0298 8F91      		pop r24
 580 029a 0F90      		pop r0
 581 029c 08BE      		out 56-0,r0
 582 029e 0F90      		pop r0
 583 02a0 0FBE      		out __SREG__,r0
 584 02a2 0F90      		pop r0
 585 02a4 1F90      		pop r1
 586 02a6 1895      		reti
 587               		.cfi_endproc
 588               	.LFE0:
 590               	.global	__vector_119
 592               	__vector_119:
 593               	.LFB1:
 222:router.c      **** {
 594               		.loc 1 222 0
 595               		.cfi_startproc
 596 02a8 1F92      		push r1
 597               	.LCFI7:
 598               		.cfi_def_cfa_offset 4
 599               		.cfi_offset 1, -3
 600 02aa 0F92      		push r0
 601               	.LCFI8:
 602               		.cfi_def_cfa_offset 5
 603               		.cfi_offset 0, -4
 604 02ac 0FB6      		in r0,__SREG__
 605 02ae 0F92      		push r0
 606 02b0 08B6      		in r0,56-0
 607 02b2 0F92      		push r0
 608 02b4 0BB6      		in r0,59-0
 609 02b6 0F92      		push r0
 610 02b8 1124      		clr __zero_reg__
 611 02ba 8F93      		push r24
 612               	.LCFI9:
 613               		.cfi_def_cfa_offset 6
 614               		.cfi_offset 24, -5
 615 02bc 9F93      		push r25
 616               	.LCFI10:
 617               		.cfi_def_cfa_offset 7
 618               		.cfi_offset 25, -6
 619 02be EF93      		push r30
 620               	.LCFI11:
 621               		.cfi_def_cfa_offset 8
 622               		.cfi_offset 30, -7
 623 02c0 FF93      		push r31
 624               	.LCFI12:
 625               		.cfi_def_cfa_offset 9
 626               		.cfi_offset 31, -8
 627               	/* prologue: Signal */
 628               	/* frame size = 0 */
 629               	/* stack size = 9 */
 630               	.L__stack_usage = 9
 227:router.c      ****     if(UPSTREAM_USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
 631               		.loc 1 227 0
 632 02c2 8091 A10B 		lds r24,2977
 633 02c6 8871      		andi r24,lo8(24)
 634 02c8 01F0      		breq .L34
 230:router.c      ****         temporary = UPSTREAM_USART.DATA; // read to clear the buffer
 635               		.loc 1 230 0
 636 02ca 8091 A00B 		lds r24,2976
 231:router.c      ****         upRXbyte=0;
 637               		.loc 1 231 0
 638 02ce 1092 0000 		sts upRXbyte.3425,__zero_reg__
 232:router.c      ****         upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 639               		.loc 1 232 0
 640 02d2 80E2      		ldi r24,lo8(32)
 641 02d4 8093 0000 		sts upRXtimeoutCounter,r24
 233:router.c      ****         Uerr_frame++;
 642               		.loc 1 233 0
 643 02d8 8091 0000 		lds r24,Uerr_frame
 644 02dc 8F5F      		subi r24,lo8(-(1))
 645 02de 8093 0000 		sts Uerr_frame,r24
 236:router.c      ****         return;
 646               		.loc 1 236 0
 647 02e2 00C0      		rjmp .L33
 648               	.L34:
 239:router.c      ****     temporary = UPSTREAM_USART.DATA; // read to clear the buffer
 649               		.loc 1 239 0
 650 02e4 9091 A00B 		lds r25,2976
 651               	.LVL32:
 241:router.c      ****     if(commandReady)
 652               		.loc 1 241 0
 653 02e8 8091 0000 		lds r24,commandReady
 654 02ec 8823      		tst r24
 655 02ee 01F0      		breq .L36
 244:router.c      ****         upRXbyte=0;
 656               		.loc 1 244 0
 657 02f0 1092 0000 		sts upRXbyte.3425,__zero_reg__
 245:router.c      ****         upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 658               		.loc 1 245 0
 659 02f4 80E2      		ldi r24,lo8(32)
 660 02f6 8093 0000 		sts upRXtimeoutCounter,r24
 246:router.c      ****         Uerr_busy++;
 661               		.loc 1 246 0
 662 02fa 8091 0000 		lds r24,Uerr_busy
 663 02fe 8F5F      		subi r24,lo8(-(1))
 664 0300 8093 0000 		sts Uerr_busy,r24
 247:router.c      ****         return;
 665               		.loc 1 247 0
 666 0304 00C0      		rjmp .L33
 667               	.L36:
 250:router.c      ****     if(!(upRXtimeoutCounter))
 668               		.loc 1 250 0
 669 0306 8091 0000 		lds r24,upRXtimeoutCounter
 670 030a 8823      		tst r24
 671 030c 01F4      		brne .L37
 253:router.c      ****         upRXbyte=0;
 672               		.loc 1 253 0
 673 030e 1092 0000 		sts upRXbyte.3425,__zero_reg__
 254:router.c      ****         upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 674               		.loc 1 254 0
 675 0312 80E2      		ldi r24,lo8(32)
 676 0314 8093 0000 		sts upRXtimeoutCounter,r24
 255:router.c      ****         Uerr_timeout++;
 677               		.loc 1 255 0
 678 0318 8091 0000 		lds r24,Uerr_timeout
 679 031c 8F5F      		subi r24,lo8(-(1))
 680 031e 8093 0000 		sts Uerr_timeout,r24
 681               	.L37:
 259:router.c      ****     commandPacketBuffer[upRXbyte] = temporary;
 682               		.loc 1 259 0
 683 0322 8091 0000 		lds r24,upRXbyte.3425
 684 0326 E82F      		mov r30,r24
 685 0328 F0E0      		ldi r31,lo8(0)
 686 032a E050      		subi r30,lo8(-(commandPacketBuffer))
 687 032c F040      		sbci r31,hi8(-(commandPacketBuffer))
 688 032e 9083      		st Z,r25
 260:router.c      ****     upRXbyte++;
 689               		.loc 1 260 0
 690 0330 8F5F      		subi r24,lo8(-(1))
 691 0332 8093 0000 		sts upRXbyte.3425,r24
 262:router.c      ****     if(upRXbyte==1)        // our first byte
 692               		.loc 1 262 0
 693 0336 8130      		cpi r24,lo8(1)
 694 0338 01F4      		brne .L38
 267:router.c      ****         if(temporary & 0x8e)
 695               		.loc 1 267 0
 696 033a 9E78      		andi r25,lo8(-114)
 697               	.LVL33:
 698 033c 01F0      		breq .L40
 269:router.c      ****             upRXbyte=0; // discard it
 699               		.loc 1 269 0
 700 033e 1092 0000 		sts upRXbyte.3425,__zero_reg__
 701 0342 00C0      		rjmp .L33
 702               	.L38:
 278:router.c      ****     if(upRXbyte==COMMAND_PACKET_SIZE)
 703               		.loc 1 278 0
 704 0344 8730      		cpi r24,lo8(7)
 705 0346 01F4      		brne .L33
 280:router.c      ****         commandReady = 1; // signal done
 706               		.loc 1 280 0
 707 0348 81E0      		ldi r24,lo8(1)
 708 034a 8093 0000 		sts commandReady,r24
 281:router.c      ****         upRXbyte=0;       // get ready for the next one
 709               		.loc 1 281 0
 710 034e 1092 0000 		sts upRXbyte.3425,__zero_reg__
 711               	.L40:
 282:router.c      ****         upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 712               		.loc 1 282 0
 713 0352 80E2      		ldi r24,lo8(32)
 714 0354 8093 0000 		sts upRXtimeoutCounter,r24
 715               	.LVL34:
 716               	.L33:
 717               	/* epilogue start */
 285:router.c      **** }
 718               		.loc 1 285 0
 719 0358 FF91      		pop r31
 720 035a EF91      		pop r30
 721 035c 9F91      		pop r25
 722 035e 8F91      		pop r24
 723 0360 0F90      		pop r0
 724 0362 0BBE      		out 59-0,r0
 725 0364 0F90      		pop r0
 726 0366 08BE      		out 56-0,r0
 727 0368 0F90      		pop r0
 728 036a 0FBE      		out __SREG__,r0
 729 036c 0F90      		pop r0
 730 036e 1F90      		pop r1
 731 0370 1895      		reti
 732               		.cfi_endproc
 733               	.LFE1:
 735               	.global	__vector_25
 737               	__vector_25:
 738               	.LFB6:
 476:router.c      **** {
 739               		.loc 1 476 0
 740               		.cfi_startproc
 741 0372 1F92      		push r1
 742               	.LCFI13:
 743               		.cfi_def_cfa_offset 4
 744               		.cfi_offset 1, -3
 745 0374 0F92      		push r0
 746               	.LCFI14:
 747               		.cfi_def_cfa_offset 5
 748               		.cfi_offset 0, -4
 749 0376 0FB6      		in r0,__SREG__
 750 0378 0F92      		push r0
 751 037a 08B6      		in r0,56-0
 752 037c 0F92      		push r0
 753 037e 09B6      		in r0,57-0
 754 0380 0F92      		push r0
 755 0382 0BB6      		in r0,59-0
 756 0384 0F92      		push r0
 757 0386 1124      		clr __zero_reg__
 758 0388 2F93      		push r18
 759               	.LCFI15:
 760               		.cfi_def_cfa_offset 6
 761               		.cfi_offset 18, -5
 762 038a 3F93      		push r19
 763               	.LCFI16:
 764               		.cfi_def_cfa_offset 7
 765               		.cfi_offset 19, -6
 766 038c 4F93      		push r20
 767               	.LCFI17:
 768               		.cfi_def_cfa_offset 8
 769               		.cfi_offset 20, -7
 770 038e 5F93      		push r21
 771               	.LCFI18:
 772               		.cfi_def_cfa_offset 9
 773               		.cfi_offset 21, -8
 774 0390 6F93      		push r22
 775               	.LCFI19:
 776               		.cfi_def_cfa_offset 10
 777               		.cfi_offset 22, -9
 778 0392 7F93      		push r23
 779               	.LCFI20:
 780               		.cfi_def_cfa_offset 11
 781               		.cfi_offset 23, -10
 782 0394 8F93      		push r24
 783               	.LCFI21:
 784               		.cfi_def_cfa_offset 12
 785               		.cfi_offset 24, -11
 786 0396 9F93      		push r25
 787               	.LCFI22:
 788               		.cfi_def_cfa_offset 13
 789               		.cfi_offset 25, -12
 790 0398 AF93      		push r26
 791               	.LCFI23:
 792               		.cfi_def_cfa_offset 14
 793               		.cfi_offset 26, -13
 794 039a BF93      		push r27
 795               	.LCFI24:
 796               		.cfi_def_cfa_offset 15
 797               		.cfi_offset 27, -14
 798 039c EF93      		push r30
 799               	.LCFI25:
 800               		.cfi_def_cfa_offset 16
 801               		.cfi_offset 30, -15
 802 039e FF93      		push r31
 803               	.LCFI26:
 804               		.cfi_def_cfa_offset 17
 805               		.cfi_offset 31, -16
 806               	/* prologue: Signal */
 807               	/* frame size = 0 */
 808               	/* stack size = 18 */
 809               	.L__stack_usage = 18
 477:router.c      ****     doDownstreamUSART_RX_ISR(USARTtoCHANNELS[TACT]);
 810               		.loc 1 477 0
 811 03a0 8091 0000 		lds r24,USARTtoCHANNELS
 812 03a4 9091 0000 		lds r25,USARTtoCHANNELS+1
 813 03a8 0E94 0000 		call doDownstreamUSART_RX_ISR
 814               	/* epilogue start */
 478:router.c      **** }
 815               		.loc 1 478 0
 816 03ac FF91      		pop r31
 817 03ae EF91      		pop r30
 818 03b0 BF91      		pop r27
 819 03b2 AF91      		pop r26
 820 03b4 9F91      		pop r25
 821 03b6 8F91      		pop r24
 822 03b8 7F91      		pop r23
 823 03ba 6F91      		pop r22
 824 03bc 5F91      		pop r21
 825 03be 4F91      		pop r20
 826 03c0 3F91      		pop r19
 827 03c2 2F91      		pop r18
 828 03c4 0F90      		pop r0
 829 03c6 0BBE      		out 59-0,r0
 830 03c8 0F90      		pop r0
 831 03ca 09BE      		out 57-0,r0
 832 03cc 0F90      		pop r0
 833 03ce 08BE      		out 56-0,r0
 834 03d0 0F90      		pop r0
 835 03d2 0FBE      		out __SREG__,r0
 836 03d4 0F90      		pop r0
 837 03d6 1F90      		pop r1
 838 03d8 1895      		reti
 839               		.cfi_endproc
 840               	.LFE6:
 842               	.global	__vector_91
 844               	__vector_91:
 845               	.LFB7:
 481:router.c      **** {
 846               		.loc 1 481 0
 847               		.cfi_startproc
 848 03da 1F92      		push r1
 849               	.LCFI27:
 850               		.cfi_def_cfa_offset 4
 851               		.cfi_offset 1, -3
 852 03dc 0F92      		push r0
 853               	.LCFI28:
 854               		.cfi_def_cfa_offset 5
 855               		.cfi_offset 0, -4
 856 03de 0FB6      		in r0,__SREG__
 857 03e0 0F92      		push r0
 858 03e2 08B6      		in r0,56-0
 859 03e4 0F92      		push r0
 860 03e6 09B6      		in r0,57-0
 861 03e8 0F92      		push r0
 862 03ea 0BB6      		in r0,59-0
 863 03ec 0F92      		push r0
 864 03ee 1124      		clr __zero_reg__
 865 03f0 2F93      		push r18
 866               	.LCFI29:
 867               		.cfi_def_cfa_offset 6
 868               		.cfi_offset 18, -5
 869 03f2 3F93      		push r19
 870               	.LCFI30:
 871               		.cfi_def_cfa_offset 7
 872               		.cfi_offset 19, -6
 873 03f4 4F93      		push r20
 874               	.LCFI31:
 875               		.cfi_def_cfa_offset 8
 876               		.cfi_offset 20, -7
 877 03f6 5F93      		push r21
 878               	.LCFI32:
 879               		.cfi_def_cfa_offset 9
 880               		.cfi_offset 21, -8
 881 03f8 6F93      		push r22
 882               	.LCFI33:
 883               		.cfi_def_cfa_offset 10
 884               		.cfi_offset 22, -9
 885 03fa 7F93      		push r23
 886               	.LCFI34:
 887               		.cfi_def_cfa_offset 11
 888               		.cfi_offset 23, -10
 889 03fc 8F93      		push r24
 890               	.LCFI35:
 891               		.cfi_def_cfa_offset 12
 892               		.cfi_offset 24, -11
 893 03fe 9F93      		push r25
 894               	.LCFI36:
 895               		.cfi_def_cfa_offset 13
 896               		.cfi_offset 25, -12
 897 0400 AF93      		push r26
 898               	.LCFI37:
 899               		.cfi_def_cfa_offset 14
 900               		.cfi_offset 26, -13
 901 0402 BF93      		push r27
 902               	.LCFI38:
 903               		.cfi_def_cfa_offset 15
 904               		.cfi_offset 27, -14
 905 0404 EF93      		push r30
 906               	.LCFI39:
 907               		.cfi_def_cfa_offset 16
 908               		.cfi_offset 30, -15
 909 0406 FF93      		push r31
 910               	.LCFI40:
 911               		.cfi_def_cfa_offset 17
 912               		.cfi_offset 31, -16
 913               	/* prologue: Signal */
 914               	/* frame size = 0 */
 915               	/* stack size = 18 */
 916               	.L__stack_usage = 18
 482:router.c      ****     doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX1]);
 917               		.loc 1 482 0
 918 0408 8091 0000 		lds r24,USARTtoCHANNELS+2
 919 040c 9091 0000 		lds r25,USARTtoCHANNELS+2+1
 920 0410 0E94 0000 		call doDownstreamUSART_RX_ISR
 921               	/* epilogue start */
 483:router.c      **** }
 922               		.loc 1 483 0
 923 0414 FF91      		pop r31
 924 0416 EF91      		pop r30
 925 0418 BF91      		pop r27
 926 041a AF91      		pop r26
 927 041c 9F91      		pop r25
 928 041e 8F91      		pop r24
 929 0420 7F91      		pop r23
 930 0422 6F91      		pop r22
 931 0424 5F91      		pop r21
 932 0426 4F91      		pop r20
 933 0428 3F91      		pop r19
 934 042a 2F91      		pop r18
 935 042c 0F90      		pop r0
 936 042e 0BBE      		out 59-0,r0
 937 0430 0F90      		pop r0
 938 0432 09BE      		out 57-0,r0
 939 0434 0F90      		pop r0
 940 0436 08BE      		out 56-0,r0
 941 0438 0F90      		pop r0
 942 043a 0FBE      		out __SREG__,r0
 943 043c 0F90      		pop r0
 944 043e 1F90      		pop r1
 945 0440 1895      		reti
 946               		.cfi_endproc
 947               	.LFE7:
 949               	.global	__vector_28
 951               	__vector_28:
 952               	.LFB8:
 486:router.c      **** {
 953               		.loc 1 486 0
 954               		.cfi_startproc
 955 0442 1F92      		push r1
 956               	.LCFI41:
 957               		.cfi_def_cfa_offset 4
 958               		.cfi_offset 1, -3
 959 0444 0F92      		push r0
 960               	.LCFI42:
 961               		.cfi_def_cfa_offset 5
 962               		.cfi_offset 0, -4
 963 0446 0FB6      		in r0,__SREG__
 964 0448 0F92      		push r0
 965 044a 08B6      		in r0,56-0
 966 044c 0F92      		push r0
 967 044e 09B6      		in r0,57-0
 968 0450 0F92      		push r0
 969 0452 0BB6      		in r0,59-0
 970 0454 0F92      		push r0
 971 0456 1124      		clr __zero_reg__
 972 0458 2F93      		push r18
 973               	.LCFI43:
 974               		.cfi_def_cfa_offset 6
 975               		.cfi_offset 18, -5
 976 045a 3F93      		push r19
 977               	.LCFI44:
 978               		.cfi_def_cfa_offset 7
 979               		.cfi_offset 19, -6
 980 045c 4F93      		push r20
 981               	.LCFI45:
 982               		.cfi_def_cfa_offset 8
 983               		.cfi_offset 20, -7
 984 045e 5F93      		push r21
 985               	.LCFI46:
 986               		.cfi_def_cfa_offset 9
 987               		.cfi_offset 21, -8
 988 0460 6F93      		push r22
 989               	.LCFI47:
 990               		.cfi_def_cfa_offset 10
 991               		.cfi_offset 22, -9
 992 0462 7F93      		push r23
 993               	.LCFI48:
 994               		.cfi_def_cfa_offset 11
 995               		.cfi_offset 23, -10
 996 0464 8F93      		push r24
 997               	.LCFI49:
 998               		.cfi_def_cfa_offset 12
 999               		.cfi_offset 24, -11
 1000 0466 9F93      		push r25
 1001               	.LCFI50:
 1002               		.cfi_def_cfa_offset 13
 1003               		.cfi_offset 25, -12
 1004 0468 AF93      		push r26
 1005               	.LCFI51:
 1006               		.cfi_def_cfa_offset 14
 1007               		.cfi_offset 26, -13
 1008 046a BF93      		push r27
 1009               	.LCFI52:
 1010               		.cfi_def_cfa_offset 15
 1011               		.cfi_offset 27, -14
 1012 046c EF93      		push r30
 1013               	.LCFI53:
 1014               		.cfi_def_cfa_offset 16
 1015               		.cfi_offset 30, -15
 1016 046e FF93      		push r31
 1017               	.LCFI54:
 1018               		.cfi_def_cfa_offset 17
 1019               		.cfi_offset 31, -16
 1020               	/* prologue: Signal */
 1021               	/* frame size = 0 */
 1022               	/* stack size = 18 */
 1023               	.L__stack_usage = 18
 487:router.c      ****     doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX2]);
 1024               		.loc 1 487 0
 1025 0470 8091 0000 		lds r24,USARTtoCHANNELS+4
 1026 0474 9091 0000 		lds r25,USARTtoCHANNELS+4+1
 1027 0478 0E94 0000 		call doDownstreamUSART_RX_ISR
 1028               	/* epilogue start */
 488:router.c      **** }
 1029               		.loc 1 488 0
 1030 047c FF91      		pop r31
 1031 047e EF91      		pop r30
 1032 0480 BF91      		pop r27
 1033 0482 AF91      		pop r26
 1034 0484 9F91      		pop r25
 1035 0486 8F91      		pop r24
 1036 0488 7F91      		pop r23
 1037 048a 6F91      		pop r22
 1038 048c 5F91      		pop r21
 1039 048e 4F91      		pop r20
 1040 0490 3F91      		pop r19
 1041 0492 2F91      		pop r18
 1042 0494 0F90      		pop r0
 1043 0496 0BBE      		out 59-0,r0
 1044 0498 0F90      		pop r0
 1045 049a 09BE      		out 57-0,r0
 1046 049c 0F90      		pop r0
 1047 049e 08BE      		out 56-0,r0
 1048 04a0 0F90      		pop r0
 1049 04a2 0FBE      		out __SREG__,r0
 1050 04a4 0F90      		pop r0
 1051 04a6 1F90      		pop r1
 1052 04a8 1895      		reti
 1053               		.cfi_endproc
 1054               	.LFE8:
 1056               	.global	__vector_88
 1058               	__vector_88:
 1059               	.LFB9:
 491:router.c      **** {
 1060               		.loc 1 491 0
 1061               		.cfi_startproc
 1062 04aa 1F92      		push r1
 1063               	.LCFI55:
 1064               		.cfi_def_cfa_offset 4
 1065               		.cfi_offset 1, -3
 1066 04ac 0F92      		push r0
 1067               	.LCFI56:
 1068               		.cfi_def_cfa_offset 5
 1069               		.cfi_offset 0, -4
 1070 04ae 0FB6      		in r0,__SREG__
 1071 04b0 0F92      		push r0
 1072 04b2 08B6      		in r0,56-0
 1073 04b4 0F92      		push r0
 1074 04b6 09B6      		in r0,57-0
 1075 04b8 0F92      		push r0
 1076 04ba 0BB6      		in r0,59-0
 1077 04bc 0F92      		push r0
 1078 04be 1124      		clr __zero_reg__
 1079 04c0 2F93      		push r18
 1080               	.LCFI57:
 1081               		.cfi_def_cfa_offset 6
 1082               		.cfi_offset 18, -5
 1083 04c2 3F93      		push r19
 1084               	.LCFI58:
 1085               		.cfi_def_cfa_offset 7
 1086               		.cfi_offset 19, -6
 1087 04c4 4F93      		push r20
 1088               	.LCFI59:
 1089               		.cfi_def_cfa_offset 8
 1090               		.cfi_offset 20, -7
 1091 04c6 5F93      		push r21
 1092               	.LCFI60:
 1093               		.cfi_def_cfa_offset 9
 1094               		.cfi_offset 21, -8
 1095 04c8 6F93      		push r22
 1096               	.LCFI61:
 1097               		.cfi_def_cfa_offset 10
 1098               		.cfi_offset 22, -9
 1099 04ca 7F93      		push r23
 1100               	.LCFI62:
 1101               		.cfi_def_cfa_offset 11
 1102               		.cfi_offset 23, -10
 1103 04cc 8F93      		push r24
 1104               	.LCFI63:
 1105               		.cfi_def_cfa_offset 12
 1106               		.cfi_offset 24, -11
 1107 04ce 9F93      		push r25
 1108               	.LCFI64:
 1109               		.cfi_def_cfa_offset 13
 1110               		.cfi_offset 25, -12
 1111 04d0 AF93      		push r26
 1112               	.LCFI65:
 1113               		.cfi_def_cfa_offset 14
 1114               		.cfi_offset 26, -13
 1115 04d2 BF93      		push r27
 1116               	.LCFI66:
 1117               		.cfi_def_cfa_offset 15
 1118               		.cfi_offset 27, -14
 1119 04d4 EF93      		push r30
 1120               	.LCFI67:
 1121               		.cfi_def_cfa_offset 16
 1122               		.cfi_offset 30, -15
 1123 04d6 FF93      		push r31
 1124               	.LCFI68:
 1125               		.cfi_def_cfa_offset 17
 1126               		.cfi_offset 31, -16
 1127               	/* prologue: Signal */
 1128               	/* frame size = 0 */
 1129               	/* stack size = 18 */
 1130               	.L__stack_usage = 18
 492:router.c      ****     doDownstreamUSART_RX_ISR(USARTtoCHANNELS[PROX3]);
 1131               		.loc 1 492 0
 1132 04d8 8091 0000 		lds r24,USARTtoCHANNELS+6
 1133 04dc 9091 0000 		lds r25,USARTtoCHANNELS+6+1
 1134 04e0 0E94 0000 		call doDownstreamUSART_RX_ISR
 1135               	/* epilogue start */
 493:router.c      **** }
 1136               		.loc 1 493 0
 1137 04e4 FF91      		pop r31
 1138 04e6 EF91      		pop r30
 1139 04e8 BF91      		pop r27
 1140 04ea AF91      		pop r26
 1141 04ec 9F91      		pop r25
 1142 04ee 8F91      		pop r24
 1143 04f0 7F91      		pop r23
 1144 04f2 6F91      		pop r22
 1145 04f4 5F91      		pop r21
 1146 04f6 4F91      		pop r20
 1147 04f8 3F91      		pop r19
 1148 04fa 2F91      		pop r18
 1149 04fc 0F90      		pop r0
 1150 04fe 0BBE      		out 59-0,r0
 1151 0500 0F90      		pop r0
 1152 0502 09BE      		out 57-0,r0
 1153 0504 0F90      		pop r0
 1154 0506 08BE      		out 56-0,r0
 1155 0508 0F90      		pop r0
 1156 050a 0FBE      		out __SREG__,r0
 1157 050c 0F90      		pop r0
 1158 050e 1F90      		pop r1
 1159 0510 1895      		reti
 1160               		.cfi_endproc
 1161               	.LFE9:
 1163               	.global	__vector_58
 1165               	__vector_58:
 1166               	.LFB10:
 496:router.c      **** {
 1167               		.loc 1 496 0
 1168               		.cfi_startproc
 1169 0512 1F92      		push r1
 1170               	.LCFI69:
 1171               		.cfi_def_cfa_offset 4
 1172               		.cfi_offset 1, -3
 1173 0514 0F92      		push r0
 1174               	.LCFI70:
 1175               		.cfi_def_cfa_offset 5
 1176               		.cfi_offset 0, -4
 1177 0516 0FB6      		in r0,__SREG__
 1178 0518 0F92      		push r0
 1179 051a 08B6      		in r0,56-0
 1180 051c 0F92      		push r0
 1181 051e 09B6      		in r0,57-0
 1182 0520 0F92      		push r0
 1183 0522 0BB6      		in r0,59-0
 1184 0524 0F92      		push r0
 1185 0526 1124      		clr __zero_reg__
 1186 0528 2F93      		push r18
 1187               	.LCFI71:
 1188               		.cfi_def_cfa_offset 6
 1189               		.cfi_offset 18, -5
 1190 052a 3F93      		push r19
 1191               	.LCFI72:
 1192               		.cfi_def_cfa_offset 7
 1193               		.cfi_offset 19, -6
 1194 052c 4F93      		push r20
 1195               	.LCFI73:
 1196               		.cfi_def_cfa_offset 8
 1197               		.cfi_offset 20, -7
 1198 052e 5F93      		push r21
 1199               	.LCFI74:
 1200               		.cfi_def_cfa_offset 9
 1201               		.cfi_offset 21, -8
 1202 0530 6F93      		push r22
 1203               	.LCFI75:
 1204               		.cfi_def_cfa_offset 10
 1205               		.cfi_offset 22, -9
 1206 0532 7F93      		push r23
 1207               	.LCFI76:
 1208               		.cfi_def_cfa_offset 11
 1209               		.cfi_offset 23, -10
 1210 0534 8F93      		push r24
 1211               	.LCFI77:
 1212               		.cfi_def_cfa_offset 12
 1213               		.cfi_offset 24, -11
 1214 0536 9F93      		push r25
 1215               	.LCFI78:
 1216               		.cfi_def_cfa_offset 13
 1217               		.cfi_offset 25, -12
 1218 0538 AF93      		push r26
 1219               	.LCFI79:
 1220               		.cfi_def_cfa_offset 14
 1221               		.cfi_offset 26, -13
 1222 053a BF93      		push r27
 1223               	.LCFI80:
 1224               		.cfi_def_cfa_offset 15
 1225               		.cfi_offset 27, -14
 1226 053c EF93      		push r30
 1227               	.LCFI81:
 1228               		.cfi_def_cfa_offset 16
 1229               		.cfi_offset 30, -15
 1230 053e FF93      		push r31
 1231               	.LCFI82:
 1232               		.cfi_def_cfa_offset 17
 1233               		.cfi_offset 31, -16
 1234               	/* prologue: Signal */
 1235               	/* frame size = 0 */
 1236               	/* stack size = 18 */
 1237               	.L__stack_usage = 18
 497:router.c      ****     doMotorUSART_RX_ISR(USARTtoCHANNELS[MTR1],0);
 1238               		.loc 1 497 0
 1239 0540 8091 0000 		lds r24,USARTtoCHANNELS+8
 1240 0544 9091 0000 		lds r25,USARTtoCHANNELS+8+1
 1241 0548 60E0      		ldi r22,lo8(0)
 1242 054a 0E94 0000 		call doMotorUSART_RX_ISR
 1243               	/* epilogue start */
 498:router.c      **** }
 1244               		.loc 1 498 0
 1245 054e FF91      		pop r31
 1246 0550 EF91      		pop r30
 1247 0552 BF91      		pop r27
 1248 0554 AF91      		pop r26
 1249 0556 9F91      		pop r25
 1250 0558 8F91      		pop r24
 1251 055a 7F91      		pop r23
 1252 055c 6F91      		pop r22
 1253 055e 5F91      		pop r21
 1254 0560 4F91      		pop r20
 1255 0562 3F91      		pop r19
 1256 0564 2F91      		pop r18
 1257 0566 0F90      		pop r0
 1258 0568 0BBE      		out 59-0,r0
 1259 056a 0F90      		pop r0
 1260 056c 09BE      		out 57-0,r0
 1261 056e 0F90      		pop r0
 1262 0570 08BE      		out 56-0,r0
 1263 0572 0F90      		pop r0
 1264 0574 0FBE      		out __SREG__,r0
 1265 0576 0F90      		pop r0
 1266 0578 1F90      		pop r1
 1267 057a 1895      		reti
 1268               		.cfi_endproc
 1269               	.LFE10:
 1271               	.global	__vector_61
 1273               	__vector_61:
 1274               	.LFB11:
 501:router.c      **** {
 1275               		.loc 1 501 0
 1276               		.cfi_startproc
 1277 057c 1F92      		push r1
 1278               	.LCFI83:
 1279               		.cfi_def_cfa_offset 4
 1280               		.cfi_offset 1, -3
 1281 057e 0F92      		push r0
 1282               	.LCFI84:
 1283               		.cfi_def_cfa_offset 5
 1284               		.cfi_offset 0, -4
 1285 0580 0FB6      		in r0,__SREG__
 1286 0582 0F92      		push r0
 1287 0584 08B6      		in r0,56-0
 1288 0586 0F92      		push r0
 1289 0588 09B6      		in r0,57-0
 1290 058a 0F92      		push r0
 1291 058c 0BB6      		in r0,59-0
 1292 058e 0F92      		push r0
 1293 0590 1124      		clr __zero_reg__
 1294 0592 2F93      		push r18
 1295               	.LCFI85:
 1296               		.cfi_def_cfa_offset 6
 1297               		.cfi_offset 18, -5
 1298 0594 3F93      		push r19
 1299               	.LCFI86:
 1300               		.cfi_def_cfa_offset 7
 1301               		.cfi_offset 19, -6
 1302 0596 4F93      		push r20
 1303               	.LCFI87:
 1304               		.cfi_def_cfa_offset 8
 1305               		.cfi_offset 20, -7
 1306 0598 5F93      		push r21
 1307               	.LCFI88:
 1308               		.cfi_def_cfa_offset 9
 1309               		.cfi_offset 21, -8
 1310 059a 6F93      		push r22
 1311               	.LCFI89:
 1312               		.cfi_def_cfa_offset 10
 1313               		.cfi_offset 22, -9
 1314 059c 7F93      		push r23
 1315               	.LCFI90:
 1316               		.cfi_def_cfa_offset 11
 1317               		.cfi_offset 23, -10
 1318 059e 8F93      		push r24
 1319               	.LCFI91:
 1320               		.cfi_def_cfa_offset 12
 1321               		.cfi_offset 24, -11
 1322 05a0 9F93      		push r25
 1323               	.LCFI92:
 1324               		.cfi_def_cfa_offset 13
 1325               		.cfi_offset 25, -12
 1326 05a2 AF93      		push r26
 1327               	.LCFI93:
 1328               		.cfi_def_cfa_offset 14
 1329               		.cfi_offset 26, -13
 1330 05a4 BF93      		push r27
 1331               	.LCFI94:
 1332               		.cfi_def_cfa_offset 15
 1333               		.cfi_offset 27, -14
 1334 05a6 EF93      		push r30
 1335               	.LCFI95:
 1336               		.cfi_def_cfa_offset 16
 1337               		.cfi_offset 30, -15
 1338 05a8 FF93      		push r31
 1339               	.LCFI96:
 1340               		.cfi_def_cfa_offset 17
 1341               		.cfi_offset 31, -16
 1342               	/* prologue: Signal */
 1343               	/* frame size = 0 */
 1344               	/* stack size = 18 */
 1345               	.L__stack_usage = 18
 502:router.c      ****     doMotorUSART_RX_ISR(USARTtoCHANNELS[MTR2],1);
 1346               		.loc 1 502 0
 1347 05aa 8091 0000 		lds r24,USARTtoCHANNELS+10
 1348 05ae 9091 0000 		lds r25,USARTtoCHANNELS+10+1
 1349 05b2 61E0      		ldi r22,lo8(1)
 1350 05b4 0E94 0000 		call doMotorUSART_RX_ISR
 1351               	/* epilogue start */
 503:router.c      **** }
 1352               		.loc 1 503 0
 1353 05b8 FF91      		pop r31
 1354 05ba EF91      		pop r30
 1355 05bc BF91      		pop r27
 1356 05be AF91      		pop r26
 1357 05c0 9F91      		pop r25
 1358 05c2 8F91      		pop r24
 1359 05c4 7F91      		pop r23
 1360 05c6 6F91      		pop r22
 1361 05c8 5F91      		pop r21
 1362 05ca 4F91      		pop r20
 1363 05cc 3F91      		pop r19
 1364 05ce 2F91      		pop r18
 1365 05d0 0F90      		pop r0
 1366 05d2 0BBE      		out 59-0,r0
 1367 05d4 0F90      		pop r0
 1368 05d6 09BE      		out 57-0,r0
 1369 05d8 0F90      		pop r0
 1370 05da 08BE      		out 56-0,r0
 1371 05dc 0F90      		pop r0
 1372 05de 0FBE      		out __SREG__,r0
 1373 05e0 0F90      		pop r0
 1374 05e2 1F90      		pop r1
 1375 05e4 1895      		reti
 1376               		.cfi_endproc
 1377               	.LFE11:
 1379               	.global	__vector_27
 1381               	__vector_27:
 1382               	.LFB13:
 515:router.c      **** {
 1383               		.loc 1 515 0
 1384               		.cfi_startproc
 1385 05e6 1F92      		push r1
 1386               	.LCFI97:
 1387               		.cfi_def_cfa_offset 4
 1388               		.cfi_offset 1, -3
 1389 05e8 0F92      		push r0
 1390               	.LCFI98:
 1391               		.cfi_def_cfa_offset 5
 1392               		.cfi_offset 0, -4
 1393 05ea 0FB6      		in r0,__SREG__
 1394 05ec 0F92      		push r0
 1395 05ee 08B6      		in r0,56-0
 1396 05f0 0F92      		push r0
 1397 05f2 0BB6      		in r0,59-0
 1398 05f4 0F92      		push r0
 1399 05f6 1124      		clr __zero_reg__
 1400 05f8 8F93      		push r24
 1401               	.LCFI99:
 1402               		.cfi_def_cfa_offset 6
 1403               		.cfi_offset 24, -5
 1404 05fa EF93      		push r30
 1405               	.LCFI100:
 1406               		.cfi_def_cfa_offset 7
 1407               		.cfi_offset 30, -6
 1408 05fc FF93      		push r31
 1409               	.LCFI101:
 1410               		.cfi_def_cfa_offset 8
 1411               		.cfi_offset 31, -7
 1412               	/* prologue: Signal */
 1413               	/* frame size = 0 */
 1414               	/* stack size = 8 */
 1415               	.L__stack_usage = 8
 517:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[TACT]);
 1416               		.loc 1 517 0
 1417 05fe E091 0000 		lds r30,USARTtoCHANNELS
 1418 0602 F091 0000 		lds r31,USARTtoCHANNELS+1
 1419               	.LVL35:
 1420               	.LBB71:
 1421               	.LBB72:
 510:router.c      ****     targetChannelConfig->downstreamDoneFlag = 1;
 1422               		.loc 1 510 0
 1423 0606 81E0      		ldi r24,lo8(1)
 1424 0608 8087      		std Z+8,r24
 511:router.c      ****     targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
 1425               		.loc 1 511 0
 1426 060a 0190      		ld __tmp_reg__,Z+
 1427 060c F081      		ld r31,Z
 1428 060e E02D      		mov r30,__tmp_reg__
 1429 0610 80E2      		ldi r24,lo8(32)
 1430 0612 8383      		std Z+3,r24
 1431               	/* epilogue start */
 1432               	.LBE72:
 1433               	.LBE71:
 518:router.c      **** }
 1434               		.loc 1 518 0
 1435 0614 FF91      		pop r31
 1436 0616 EF91      		pop r30
 1437 0618 8F91      		pop r24
 1438 061a 0F90      		pop r0
 1439 061c 0BBE      		out 59-0,r0
 1440 061e 0F90      		pop r0
 1441 0620 08BE      		out 56-0,r0
 1442 0622 0F90      		pop r0
 1443 0624 0FBE      		out __SREG__,r0
 1444 0626 0F90      		pop r0
 1445 0628 1F90      		pop r1
 1446 062a 1895      		reti
 1447               		.cfi_endproc
 1448               	.LFE13:
 1450               	.global	__vector_93
 1452               	__vector_93:
 1453               	.LFB14:
 521:router.c      **** {
 1454               		.loc 1 521 0
 1455               		.cfi_startproc
 1456 062c 1F92      		push r1
 1457               	.LCFI102:
 1458               		.cfi_def_cfa_offset 4
 1459               		.cfi_offset 1, -3
 1460 062e 0F92      		push r0
 1461               	.LCFI103:
 1462               		.cfi_def_cfa_offset 5
 1463               		.cfi_offset 0, -4
 1464 0630 0FB6      		in r0,__SREG__
 1465 0632 0F92      		push r0
 1466 0634 08B6      		in r0,56-0
 1467 0636 0F92      		push r0
 1468 0638 0BB6      		in r0,59-0
 1469 063a 0F92      		push r0
 1470 063c 1124      		clr __zero_reg__
 1471 063e 8F93      		push r24
 1472               	.LCFI104:
 1473               		.cfi_def_cfa_offset 6
 1474               		.cfi_offset 24, -5
 1475 0640 EF93      		push r30
 1476               	.LCFI105:
 1477               		.cfi_def_cfa_offset 7
 1478               		.cfi_offset 30, -6
 1479 0642 FF93      		push r31
 1480               	.LCFI106:
 1481               		.cfi_def_cfa_offset 8
 1482               		.cfi_offset 31, -7
 1483               	/* prologue: Signal */
 1484               	/* frame size = 0 */
 1485               	/* stack size = 8 */
 1486               	.L__stack_usage = 8
 523:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX1]);
 1487               		.loc 1 523 0
 1488 0644 E091 0000 		lds r30,USARTtoCHANNELS+2
 1489 0648 F091 0000 		lds r31,USARTtoCHANNELS+2+1
 1490               	.LVL36:
 1491               	.LBB73:
 1492               	.LBB74:
 510:router.c      ****     targetChannelConfig->downstreamDoneFlag = 1;
 1493               		.loc 1 510 0
 1494 064c 81E0      		ldi r24,lo8(1)
 1495 064e 8087      		std Z+8,r24
 511:router.c      ****     targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
 1496               		.loc 1 511 0
 1497 0650 0190      		ld __tmp_reg__,Z+
 1498 0652 F081      		ld r31,Z
 1499 0654 E02D      		mov r30,__tmp_reg__
 1500 0656 80E2      		ldi r24,lo8(32)
 1501 0658 8383      		std Z+3,r24
 1502               	/* epilogue start */
 1503               	.LBE74:
 1504               	.LBE73:
 524:router.c      **** }
 1505               		.loc 1 524 0
 1506 065a FF91      		pop r31
 1507 065c EF91      		pop r30
 1508 065e 8F91      		pop r24
 1509 0660 0F90      		pop r0
 1510 0662 0BBE      		out 59-0,r0
 1511 0664 0F90      		pop r0
 1512 0666 08BE      		out 56-0,r0
 1513 0668 0F90      		pop r0
 1514 066a 0FBE      		out __SREG__,r0
 1515 066c 0F90      		pop r0
 1516 066e 1F90      		pop r1
 1517 0670 1895      		reti
 1518               		.cfi_endproc
 1519               	.LFE14:
 1521               	.global	__vector_30
 1523               	__vector_30:
 1524               	.LFB15:
 527:router.c      **** {
 1525               		.loc 1 527 0
 1526               		.cfi_startproc
 1527 0672 1F92      		push r1
 1528               	.LCFI107:
 1529               		.cfi_def_cfa_offset 4
 1530               		.cfi_offset 1, -3
 1531 0674 0F92      		push r0
 1532               	.LCFI108:
 1533               		.cfi_def_cfa_offset 5
 1534               		.cfi_offset 0, -4
 1535 0676 0FB6      		in r0,__SREG__
 1536 0678 0F92      		push r0
 1537 067a 08B6      		in r0,56-0
 1538 067c 0F92      		push r0
 1539 067e 0BB6      		in r0,59-0
 1540 0680 0F92      		push r0
 1541 0682 1124      		clr __zero_reg__
 1542 0684 8F93      		push r24
 1543               	.LCFI109:
 1544               		.cfi_def_cfa_offset 6
 1545               		.cfi_offset 24, -5
 1546 0686 EF93      		push r30
 1547               	.LCFI110:
 1548               		.cfi_def_cfa_offset 7
 1549               		.cfi_offset 30, -6
 1550 0688 FF93      		push r31
 1551               	.LCFI111:
 1552               		.cfi_def_cfa_offset 8
 1553               		.cfi_offset 31, -7
 1554               	/* prologue: Signal */
 1555               	/* frame size = 0 */
 1556               	/* stack size = 8 */
 1557               	.L__stack_usage = 8
 529:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX2]);
 1558               		.loc 1 529 0
 1559 068a E091 0000 		lds r30,USARTtoCHANNELS+4
 1560 068e F091 0000 		lds r31,USARTtoCHANNELS+4+1
 1561               	.LVL37:
 1562               	.LBB75:
 1563               	.LBB76:
 510:router.c      ****     targetChannelConfig->downstreamDoneFlag = 1;
 1564               		.loc 1 510 0
 1565 0692 81E0      		ldi r24,lo8(1)
 1566 0694 8087      		std Z+8,r24
 511:router.c      ****     targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
 1567               		.loc 1 511 0
 1568 0696 0190      		ld __tmp_reg__,Z+
 1569 0698 F081      		ld r31,Z
 1570 069a E02D      		mov r30,__tmp_reg__
 1571 069c 80E2      		ldi r24,lo8(32)
 1572 069e 8383      		std Z+3,r24
 1573               	/* epilogue start */
 1574               	.LBE76:
 1575               	.LBE75:
 530:router.c      **** }
 1576               		.loc 1 530 0
 1577 06a0 FF91      		pop r31
 1578 06a2 EF91      		pop r30
 1579 06a4 8F91      		pop r24
 1580 06a6 0F90      		pop r0
 1581 06a8 0BBE      		out 59-0,r0
 1582 06aa 0F90      		pop r0
 1583 06ac 08BE      		out 56-0,r0
 1584 06ae 0F90      		pop r0
 1585 06b0 0FBE      		out __SREG__,r0
 1586 06b2 0F90      		pop r0
 1587 06b4 1F90      		pop r1
 1588 06b6 1895      		reti
 1589               		.cfi_endproc
 1590               	.LFE15:
 1592               	.global	__vector_90
 1594               	__vector_90:
 1595               	.LFB16:
 533:router.c      **** {
 1596               		.loc 1 533 0
 1597               		.cfi_startproc
 1598 06b8 1F92      		push r1
 1599               	.LCFI112:
 1600               		.cfi_def_cfa_offset 4
 1601               		.cfi_offset 1, -3
 1602 06ba 0F92      		push r0
 1603               	.LCFI113:
 1604               		.cfi_def_cfa_offset 5
 1605               		.cfi_offset 0, -4
 1606 06bc 0FB6      		in r0,__SREG__
 1607 06be 0F92      		push r0
 1608 06c0 08B6      		in r0,56-0
 1609 06c2 0F92      		push r0
 1610 06c4 0BB6      		in r0,59-0
 1611 06c6 0F92      		push r0
 1612 06c8 1124      		clr __zero_reg__
 1613 06ca 8F93      		push r24
 1614               	.LCFI114:
 1615               		.cfi_def_cfa_offset 6
 1616               		.cfi_offset 24, -5
 1617 06cc EF93      		push r30
 1618               	.LCFI115:
 1619               		.cfi_def_cfa_offset 7
 1620               		.cfi_offset 30, -6
 1621 06ce FF93      		push r31
 1622               	.LCFI116:
 1623               		.cfi_def_cfa_offset 8
 1624               		.cfi_offset 31, -7
 1625               	/* prologue: Signal */
 1626               	/* frame size = 0 */
 1627               	/* stack size = 8 */
 1628               	.L__stack_usage = 8
 535:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[PROX3]);
 1629               		.loc 1 535 0
 1630 06d0 E091 0000 		lds r30,USARTtoCHANNELS+6
 1631 06d4 F091 0000 		lds r31,USARTtoCHANNELS+6+1
 1632               	.LVL38:
 1633               	.LBB77:
 1634               	.LBB78:
 510:router.c      ****     targetChannelConfig->downstreamDoneFlag = 1;
 1635               		.loc 1 510 0
 1636 06d8 81E0      		ldi r24,lo8(1)
 1637 06da 8087      		std Z+8,r24
 511:router.c      ****     targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
 1638               		.loc 1 511 0
 1639 06dc 0190      		ld __tmp_reg__,Z+
 1640 06de F081      		ld r31,Z
 1641 06e0 E02D      		mov r30,__tmp_reg__
 1642 06e2 80E2      		ldi r24,lo8(32)
 1643 06e4 8383      		std Z+3,r24
 1644               	/* epilogue start */
 1645               	.LBE78:
 1646               	.LBE77:
 536:router.c      **** }
 1647               		.loc 1 536 0
 1648 06e6 FF91      		pop r31
 1649 06e8 EF91      		pop r30
 1650 06ea 8F91      		pop r24
 1651 06ec 0F90      		pop r0
 1652 06ee 0BBE      		out 59-0,r0
 1653 06f0 0F90      		pop r0
 1654 06f2 08BE      		out 56-0,r0
 1655 06f4 0F90      		pop r0
 1656 06f6 0FBE      		out __SREG__,r0
 1657 06f8 0F90      		pop r0
 1658 06fa 1F90      		pop r1
 1659 06fc 1895      		reti
 1660               		.cfi_endproc
 1661               	.LFE16:
 1663               	.global	__vector_60
 1665               	__vector_60:
 1666               	.LFB17:
 539:router.c      **** {
 1667               		.loc 1 539 0
 1668               		.cfi_startproc
 1669 06fe 1F92      		push r1
 1670               	.LCFI117:
 1671               		.cfi_def_cfa_offset 4
 1672               		.cfi_offset 1, -3
 1673 0700 0F92      		push r0
 1674               	.LCFI118:
 1675               		.cfi_def_cfa_offset 5
 1676               		.cfi_offset 0, -4
 1677 0702 0FB6      		in r0,__SREG__
 1678 0704 0F92      		push r0
 1679 0706 08B6      		in r0,56-0
 1680 0708 0F92      		push r0
 1681 070a 0BB6      		in r0,59-0
 1682 070c 0F92      		push r0
 1683 070e 1124      		clr __zero_reg__
 1684 0710 8F93      		push r24
 1685               	.LCFI119:
 1686               		.cfi_def_cfa_offset 6
 1687               		.cfi_offset 24, -5
 1688 0712 EF93      		push r30
 1689               	.LCFI120:
 1690               		.cfi_def_cfa_offset 7
 1691               		.cfi_offset 30, -6
 1692 0714 FF93      		push r31
 1693               	.LCFI121:
 1694               		.cfi_def_cfa_offset 8
 1695               		.cfi_offset 31, -7
 1696               	/* prologue: Signal */
 1697               	/* frame size = 0 */
 1698               	/* stack size = 8 */
 1699               	.L__stack_usage = 8
 541:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[MTR1]);
 1700               		.loc 1 541 0
 1701 0716 E091 0000 		lds r30,USARTtoCHANNELS+8
 1702 071a F091 0000 		lds r31,USARTtoCHANNELS+8+1
 1703               	.LVL39:
 1704               	.LBB79:
 1705               	.LBB80:
 510:router.c      ****     targetChannelConfig->downstreamDoneFlag = 1;
 1706               		.loc 1 510 0
 1707 071e 81E0      		ldi r24,lo8(1)
 1708 0720 8087      		std Z+8,r24
 511:router.c      ****     targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
 1709               		.loc 1 511 0
 1710 0722 0190      		ld __tmp_reg__,Z+
 1711 0724 F081      		ld r31,Z
 1712 0726 E02D      		mov r30,__tmp_reg__
 1713 0728 80E2      		ldi r24,lo8(32)
 1714 072a 8383      		std Z+3,r24
 1715               	/* epilogue start */
 1716               	.LBE80:
 1717               	.LBE79:
 542:router.c      **** }
 1718               		.loc 1 542 0
 1719 072c FF91      		pop r31
 1720 072e EF91      		pop r30
 1721 0730 8F91      		pop r24
 1722 0732 0F90      		pop r0
 1723 0734 0BBE      		out 59-0,r0
 1724 0736 0F90      		pop r0
 1725 0738 08BE      		out 56-0,r0
 1726 073a 0F90      		pop r0
 1727 073c 0FBE      		out __SREG__,r0
 1728 073e 0F90      		pop r0
 1729 0740 1F90      		pop r1
 1730 0742 1895      		reti
 1731               		.cfi_endproc
 1732               	.LFE17:
 1734               	.global	__vector_63
 1736               	__vector_63:
 1737               	.LFB18:
 545:router.c      **** {
 1738               		.loc 1 545 0
 1739               		.cfi_startproc
 1740 0744 1F92      		push r1
 1741               	.LCFI122:
 1742               		.cfi_def_cfa_offset 4
 1743               		.cfi_offset 1, -3
 1744 0746 0F92      		push r0
 1745               	.LCFI123:
 1746               		.cfi_def_cfa_offset 5
 1747               		.cfi_offset 0, -4
 1748 0748 0FB6      		in r0,__SREG__
 1749 074a 0F92      		push r0
 1750 074c 08B6      		in r0,56-0
 1751 074e 0F92      		push r0
 1752 0750 0BB6      		in r0,59-0
 1753 0752 0F92      		push r0
 1754 0754 1124      		clr __zero_reg__
 1755 0756 8F93      		push r24
 1756               	.LCFI124:
 1757               		.cfi_def_cfa_offset 6
 1758               		.cfi_offset 24, -5
 1759 0758 EF93      		push r30
 1760               	.LCFI125:
 1761               		.cfi_def_cfa_offset 7
 1762               		.cfi_offset 30, -6
 1763 075a FF93      		push r31
 1764               	.LCFI126:
 1765               		.cfi_def_cfa_offset 8
 1766               		.cfi_offset 31, -7
 1767               	/* prologue: Signal */
 1768               	/* frame size = 0 */
 1769               	/* stack size = 8 */
 1770               	.L__stack_usage = 8
 547:router.c      ****     doDownstreamUSART_TXDONE_ISR(USARTtoCHANNELS[MTR2]);
 1771               		.loc 1 547 0
 1772 075c E091 0000 		lds r30,USARTtoCHANNELS+10
 1773 0760 F091 0000 		lds r31,USARTtoCHANNELS+10+1
 1774               	.LVL40:
 1775               	.LBB81:
 1776               	.LBB82:
 510:router.c      ****     targetChannelConfig->downstreamDoneFlag = 1;
 1777               		.loc 1 510 0
 1778 0764 81E0      		ldi r24,lo8(1)
 1779 0766 8087      		std Z+8,r24
 511:router.c      ****     targetChannelConfig->usart->CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
 1780               		.loc 1 511 0
 1781 0768 0190      		ld __tmp_reg__,Z+
 1782 076a F081      		ld r31,Z
 1783 076c E02D      		mov r30,__tmp_reg__
 1784 076e 80E2      		ldi r24,lo8(32)
 1785 0770 8383      		std Z+3,r24
 1786               	/* epilogue start */
 1787               	.LBE82:
 1788               	.LBE81:
 548:router.c      **** }
 1789               		.loc 1 548 0
 1790 0772 FF91      		pop r31
 1791 0774 EF91      		pop r30
 1792 0776 8F91      		pop r24
 1793 0778 0F90      		pop r0
 1794 077a 0BBE      		out 59-0,r0
 1795 077c 0F90      		pop r0
 1796 077e 08BE      		out 56-0,r0
 1797 0780 0F90      		pop r0
 1798 0782 0FBE      		out __SREG__,r0
 1799 0784 0F90      		pop r0
 1800 0786 1F90      		pop r1
 1801 0788 1895      		reti
 1802               		.cfi_endproc
 1803               	.LFE18:
 1805               	.global	__vector_6
 1807               	__vector_6:
 1808               	.LFB20:
 597:router.c      **** {
 1809               		.loc 1 597 0
 1810               		.cfi_startproc
 1811 078a 1F92      		push r1
 1812               	.LCFI127:
 1813               		.cfi_def_cfa_offset 4
 1814               		.cfi_offset 1, -3
 1815 078c 0F92      		push r0
 1816               	.LCFI128:
 1817               		.cfi_def_cfa_offset 5
 1818               		.cfi_offset 0, -4
 1819 078e 0FB6      		in r0,__SREG__
 1820 0790 0F92      		push r0
 1821 0792 08B6      		in r0,56-0
 1822 0794 0F92      		push r0
 1823 0796 09B6      		in r0,57-0
 1824 0798 0F92      		push r0
 1825 079a 0BB6      		in r0,59-0
 1826 079c 0F92      		push r0
 1827 079e 1124      		clr __zero_reg__
 1828 07a0 2F93      		push r18
 1829               	.LCFI129:
 1830               		.cfi_def_cfa_offset 6
 1831               		.cfi_offset 18, -5
 1832 07a2 3F93      		push r19
 1833               	.LCFI130:
 1834               		.cfi_def_cfa_offset 7
 1835               		.cfi_offset 19, -6
 1836 07a4 4F93      		push r20
 1837               	.LCFI131:
 1838               		.cfi_def_cfa_offset 8
 1839               		.cfi_offset 20, -7
 1840 07a6 5F93      		push r21
 1841               	.LCFI132:
 1842               		.cfi_def_cfa_offset 9
 1843               		.cfi_offset 21, -8
 1844 07a8 6F93      		push r22
 1845               	.LCFI133:
 1846               		.cfi_def_cfa_offset 10
 1847               		.cfi_offset 22, -9
 1848 07aa 7F93      		push r23
 1849               	.LCFI134:
 1850               		.cfi_def_cfa_offset 11
 1851               		.cfi_offset 23, -10
 1852 07ac 8F93      		push r24
 1853               	.LCFI135:
 1854               		.cfi_def_cfa_offset 12
 1855               		.cfi_offset 24, -11
 1856 07ae 9F93      		push r25
 1857               	.LCFI136:
 1858               		.cfi_def_cfa_offset 13
 1859               		.cfi_offset 25, -12
 1860 07b0 AF93      		push r26
 1861               	.LCFI137:
 1862               		.cfi_def_cfa_offset 14
 1863               		.cfi_offset 26, -13
 1864 07b2 BF93      		push r27
 1865               	.LCFI138:
 1866               		.cfi_def_cfa_offset 15
 1867               		.cfi_offset 27, -14
 1868 07b4 EF93      		push r30
 1869               	.LCFI139:
 1870               		.cfi_def_cfa_offset 16
 1871               		.cfi_offset 30, -15
 1872 07b6 FF93      		push r31
 1873               	.LCFI140:
 1874               		.cfi_def_cfa_offset 17
 1875               		.cfi_offset 31, -16
 1876               	/* prologue: Signal */
 1877               	/* frame size = 0 */
 1878               	/* stack size = 18 */
 1879               	.L__stack_usage = 18
 598:router.c      ****     doDownstreamDMAISR(&DownStreamConfig[0]);
 1880               		.loc 1 598 0
 1881 07b8 80E0      		ldi r24,lo8(DownStreamConfig)
 1882 07ba 90E0      		ldi r25,hi8(DownStreamConfig)
 1883 07bc 0E94 0000 		call doDownstreamDMAISR
 1884               	/* epilogue start */
 599:router.c      **** }
 1885               		.loc 1 599 0
 1886 07c0 FF91      		pop r31
 1887 07c2 EF91      		pop r30
 1888 07c4 BF91      		pop r27
 1889 07c6 AF91      		pop r26
 1890 07c8 9F91      		pop r25
 1891 07ca 8F91      		pop r24
 1892 07cc 7F91      		pop r23
 1893 07ce 6F91      		pop r22
 1894 07d0 5F91      		pop r21
 1895 07d2 4F91      		pop r20
 1896 07d4 3F91      		pop r19
 1897 07d6 2F91      		pop r18
 1898 07d8 0F90      		pop r0
 1899 07da 0BBE      		out 59-0,r0
 1900 07dc 0F90      		pop r0
 1901 07de 09BE      		out 57-0,r0
 1902 07e0 0F90      		pop r0
 1903 07e2 08BE      		out 56-0,r0
 1904 07e4 0F90      		pop r0
 1905 07e6 0FBE      		out __SREG__,r0
 1906 07e8 0F90      		pop r0
 1907 07ea 1F90      		pop r1
 1908 07ec 1895      		reti
 1909               		.cfi_endproc
 1910               	.LFE20:
 1912               	.global	__vector_7
 1914               	__vector_7:
 1915               	.LFB21:
 601:router.c      **** {
 1916               		.loc 1 601 0
 1917               		.cfi_startproc
 1918 07ee 1F92      		push r1
 1919               	.LCFI141:
 1920               		.cfi_def_cfa_offset 4
 1921               		.cfi_offset 1, -3
 1922 07f0 0F92      		push r0
 1923               	.LCFI142:
 1924               		.cfi_def_cfa_offset 5
 1925               		.cfi_offset 0, -4
 1926 07f2 0FB6      		in r0,__SREG__
 1927 07f4 0F92      		push r0
 1928 07f6 08B6      		in r0,56-0
 1929 07f8 0F92      		push r0
 1930 07fa 09B6      		in r0,57-0
 1931 07fc 0F92      		push r0
 1932 07fe 0BB6      		in r0,59-0
 1933 0800 0F92      		push r0
 1934 0802 1124      		clr __zero_reg__
 1935 0804 2F93      		push r18
 1936               	.LCFI143:
 1937               		.cfi_def_cfa_offset 6
 1938               		.cfi_offset 18, -5
 1939 0806 3F93      		push r19
 1940               	.LCFI144:
 1941               		.cfi_def_cfa_offset 7
 1942               		.cfi_offset 19, -6
 1943 0808 4F93      		push r20
 1944               	.LCFI145:
 1945               		.cfi_def_cfa_offset 8
 1946               		.cfi_offset 20, -7
 1947 080a 5F93      		push r21
 1948               	.LCFI146:
 1949               		.cfi_def_cfa_offset 9
 1950               		.cfi_offset 21, -8
 1951 080c 6F93      		push r22
 1952               	.LCFI147:
 1953               		.cfi_def_cfa_offset 10
 1954               		.cfi_offset 22, -9
 1955 080e 7F93      		push r23
 1956               	.LCFI148:
 1957               		.cfi_def_cfa_offset 11
 1958               		.cfi_offset 23, -10
 1959 0810 8F93      		push r24
 1960               	.LCFI149:
 1961               		.cfi_def_cfa_offset 12
 1962               		.cfi_offset 24, -11
 1963 0812 9F93      		push r25
 1964               	.LCFI150:
 1965               		.cfi_def_cfa_offset 13
 1966               		.cfi_offset 25, -12
 1967 0814 AF93      		push r26
 1968               	.LCFI151:
 1969               		.cfi_def_cfa_offset 14
 1970               		.cfi_offset 26, -13
 1971 0816 BF93      		push r27
 1972               	.LCFI152:
 1973               		.cfi_def_cfa_offset 15
 1974               		.cfi_offset 27, -14
 1975 0818 EF93      		push r30
 1976               	.LCFI153:
 1977               		.cfi_def_cfa_offset 16
 1978               		.cfi_offset 30, -15
 1979 081a FF93      		push r31
 1980               	.LCFI154:
 1981               		.cfi_def_cfa_offset 17
 1982               		.cfi_offset 31, -16
 1983               	/* prologue: Signal */
 1984               	/* frame size = 0 */
 1985               	/* stack size = 18 */
 1986               	.L__stack_usage = 18
 602:router.c      ****     doDownstreamDMAISR(&DownStreamConfig[1]);
 1987               		.loc 1 602 0
 1988 081c 80E0      		ldi r24,lo8(DownStreamConfig+12)
 1989 081e 90E0      		ldi r25,hi8(DownStreamConfig+12)
 1990 0820 0E94 0000 		call doDownstreamDMAISR
 1991               	/* epilogue start */
 603:router.c      **** }
 1992               		.loc 1 603 0
 1993 0824 FF91      		pop r31
 1994 0826 EF91      		pop r30
 1995 0828 BF91      		pop r27
 1996 082a AF91      		pop r26
 1997 082c 9F91      		pop r25
 1998 082e 8F91      		pop r24
 1999 0830 7F91      		pop r23
 2000 0832 6F91      		pop r22
 2001 0834 5F91      		pop r21
 2002 0836 4F91      		pop r20
 2003 0838 3F91      		pop r19
 2004 083a 2F91      		pop r18
 2005 083c 0F90      		pop r0
 2006 083e 0BBE      		out 59-0,r0
 2007 0840 0F90      		pop r0
 2008 0842 09BE      		out 57-0,r0
 2009 0844 0F90      		pop r0
 2010 0846 08BE      		out 56-0,r0
 2011 0848 0F90      		pop r0
 2012 084a 0FBE      		out __SREG__,r0
 2013 084c 0F90      		pop r0
 2014 084e 1F90      		pop r1
 2015 0850 1895      		reti
 2016               		.cfi_endproc
 2017               	.LFE21:
 2019               	.global	__vector_8
 2021               	__vector_8:
 2022               	.LFB22:
 605:router.c      **** {
 2023               		.loc 1 605 0
 2024               		.cfi_startproc
 2025 0852 1F92      		push r1
 2026               	.LCFI155:
 2027               		.cfi_def_cfa_offset 4
 2028               		.cfi_offset 1, -3
 2029 0854 0F92      		push r0
 2030               	.LCFI156:
 2031               		.cfi_def_cfa_offset 5
 2032               		.cfi_offset 0, -4
 2033 0856 0FB6      		in r0,__SREG__
 2034 0858 0F92      		push r0
 2035 085a 08B6      		in r0,56-0
 2036 085c 0F92      		push r0
 2037 085e 09B6      		in r0,57-0
 2038 0860 0F92      		push r0
 2039 0862 0BB6      		in r0,59-0
 2040 0864 0F92      		push r0
 2041 0866 1124      		clr __zero_reg__
 2042 0868 2F93      		push r18
 2043               	.LCFI157:
 2044               		.cfi_def_cfa_offset 6
 2045               		.cfi_offset 18, -5
 2046 086a 3F93      		push r19
 2047               	.LCFI158:
 2048               		.cfi_def_cfa_offset 7
 2049               		.cfi_offset 19, -6
 2050 086c 4F93      		push r20
 2051               	.LCFI159:
 2052               		.cfi_def_cfa_offset 8
 2053               		.cfi_offset 20, -7
 2054 086e 5F93      		push r21
 2055               	.LCFI160:
 2056               		.cfi_def_cfa_offset 9
 2057               		.cfi_offset 21, -8
 2058 0870 6F93      		push r22
 2059               	.LCFI161:
 2060               		.cfi_def_cfa_offset 10
 2061               		.cfi_offset 22, -9
 2062 0872 7F93      		push r23
 2063               	.LCFI162:
 2064               		.cfi_def_cfa_offset 11
 2065               		.cfi_offset 23, -10
 2066 0874 8F93      		push r24
 2067               	.LCFI163:
 2068               		.cfi_def_cfa_offset 12
 2069               		.cfi_offset 24, -11
 2070 0876 9F93      		push r25
 2071               	.LCFI164:
 2072               		.cfi_def_cfa_offset 13
 2073               		.cfi_offset 25, -12
 2074 0878 AF93      		push r26
 2075               	.LCFI165:
 2076               		.cfi_def_cfa_offset 14
 2077               		.cfi_offset 26, -13
 2078 087a BF93      		push r27
 2079               	.LCFI166:
 2080               		.cfi_def_cfa_offset 15
 2081               		.cfi_offset 27, -14
 2082 087c EF93      		push r30
 2083               	.LCFI167:
 2084               		.cfi_def_cfa_offset 16
 2085               		.cfi_offset 30, -15
 2086 087e FF93      		push r31
 2087               	.LCFI168:
 2088               		.cfi_def_cfa_offset 17
 2089               		.cfi_offset 31, -16
 2090               	/* prologue: Signal */
 2091               	/* frame size = 0 */
 2092               	/* stack size = 18 */
 2093               	.L__stack_usage = 18
 606:router.c      ****     doDownstreamDMAISR(&DownStreamConfig[2]);
 2094               		.loc 1 606 0
 2095 0880 80E0      		ldi r24,lo8(DownStreamConfig+24)
 2096 0882 90E0      		ldi r25,hi8(DownStreamConfig+24)
 2097 0884 0E94 0000 		call doDownstreamDMAISR
 2098               	/* epilogue start */
 607:router.c      **** }
 2099               		.loc 1 607 0
 2100 0888 FF91      		pop r31
 2101 088a EF91      		pop r30
 2102 088c BF91      		pop r27
 2103 088e AF91      		pop r26
 2104 0890 9F91      		pop r25
 2105 0892 8F91      		pop r24
 2106 0894 7F91      		pop r23
 2107 0896 6F91      		pop r22
 2108 0898 5F91      		pop r21
 2109 089a 4F91      		pop r20
 2110 089c 3F91      		pop r19
 2111 089e 2F91      		pop r18
 2112 08a0 0F90      		pop r0
 2113 08a2 0BBE      		out 59-0,r0
 2114 08a4 0F90      		pop r0
 2115 08a6 09BE      		out 57-0,r0
 2116 08a8 0F90      		pop r0
 2117 08aa 08BE      		out 56-0,r0
 2118 08ac 0F90      		pop r0
 2119 08ae 0FBE      		out __SREG__,r0
 2120 08b0 0F90      		pop r0
 2121 08b2 1F90      		pop r1
 2122 08b4 1895      		reti
 2123               		.cfi_endproc
 2124               	.LFE22:
 2126               	.global	__vector_9
 2128               	__vector_9:
 2129               	.LFB23:
 609:router.c      **** {
 2130               		.loc 1 609 0
 2131               		.cfi_startproc
 2132 08b6 1F92      		push r1
 2133               	.LCFI169:
 2134               		.cfi_def_cfa_offset 4
 2135               		.cfi_offset 1, -3
 2136 08b8 0F92      		push r0
 2137               	.LCFI170:
 2138               		.cfi_def_cfa_offset 5
 2139               		.cfi_offset 0, -4
 2140 08ba 0FB6      		in r0,__SREG__
 2141 08bc 0F92      		push r0
 2142 08be 08B6      		in r0,56-0
 2143 08c0 0F92      		push r0
 2144 08c2 09B6      		in r0,57-0
 2145 08c4 0F92      		push r0
 2146 08c6 0BB6      		in r0,59-0
 2147 08c8 0F92      		push r0
 2148 08ca 1124      		clr __zero_reg__
 2149 08cc 2F93      		push r18
 2150               	.LCFI171:
 2151               		.cfi_def_cfa_offset 6
 2152               		.cfi_offset 18, -5
 2153 08ce 3F93      		push r19
 2154               	.LCFI172:
 2155               		.cfi_def_cfa_offset 7
 2156               		.cfi_offset 19, -6
 2157 08d0 4F93      		push r20
 2158               	.LCFI173:
 2159               		.cfi_def_cfa_offset 8
 2160               		.cfi_offset 20, -7
 2161 08d2 5F93      		push r21
 2162               	.LCFI174:
 2163               		.cfi_def_cfa_offset 9
 2164               		.cfi_offset 21, -8
 2165 08d4 6F93      		push r22
 2166               	.LCFI175:
 2167               		.cfi_def_cfa_offset 10
 2168               		.cfi_offset 22, -9
 2169 08d6 7F93      		push r23
 2170               	.LCFI176:
 2171               		.cfi_def_cfa_offset 11
 2172               		.cfi_offset 23, -10
 2173 08d8 8F93      		push r24
 2174               	.LCFI177:
 2175               		.cfi_def_cfa_offset 12
 2176               		.cfi_offset 24, -11
 2177 08da 9F93      		push r25
 2178               	.LCFI178:
 2179               		.cfi_def_cfa_offset 13
 2180               		.cfi_offset 25, -12
 2181 08dc AF93      		push r26
 2182               	.LCFI179:
 2183               		.cfi_def_cfa_offset 14
 2184               		.cfi_offset 26, -13
 2185 08de BF93      		push r27
 2186               	.LCFI180:
 2187               		.cfi_def_cfa_offset 15
 2188               		.cfi_offset 27, -14
 2189 08e0 EF93      		push r30
 2190               	.LCFI181:
 2191               		.cfi_def_cfa_offset 16
 2192               		.cfi_offset 30, -15
 2193 08e2 FF93      		push r31
 2194               	.LCFI182:
 2195               		.cfi_def_cfa_offset 17
 2196               		.cfi_offset 31, -16
 2197               	/* prologue: Signal */
 2198               	/* frame size = 0 */
 2199               	/* stack size = 18 */
 2200               	.L__stack_usage = 18
 610:router.c      ****     doDownstreamDMAISR(&DownStreamConfig[3]);
 2201               		.loc 1 610 0
 2202 08e4 80E0      		ldi r24,lo8(DownStreamConfig+36)
 2203 08e6 90E0      		ldi r25,hi8(DownStreamConfig+36)
 2204 08e8 0E94 0000 		call doDownstreamDMAISR
 2205               	/* epilogue start */
 611:router.c      **** }
 2206               		.loc 1 611 0
 2207 08ec FF91      		pop r31
 2208 08ee EF91      		pop r30
 2209 08f0 BF91      		pop r27
 2210 08f2 AF91      		pop r26
 2211 08f4 9F91      		pop r25
 2212 08f6 8F91      		pop r24
 2213 08f8 7F91      		pop r23
 2214 08fa 6F91      		pop r22
 2215 08fc 5F91      		pop r21
 2216 08fe 4F91      		pop r20
 2217 0900 3F91      		pop r19
 2218 0902 2F91      		pop r18
 2219 0904 0F90      		pop r0
 2220 0906 0BBE      		out 59-0,r0
 2221 0908 0F90      		pop r0
 2222 090a 09BE      		out 57-0,r0
 2223 090c 0F90      		pop r0
 2224 090e 08BE      		out 56-0,r0
 2225 0910 0F90      		pop r0
 2226 0912 0FBE      		out __SREG__,r0
 2227 0914 0F90      		pop r0
 2228 0916 1F90      		pop r1
 2229 0918 1895      		reti
 2230               		.cfi_endproc
 2231               	.LFE23:
 2233               	.global	computeChecksum
 2235               	computeChecksum:
 2236               	.LFB26:
 683:router.c      **** 
 684:router.c      **** /************************************************************************
 685:router.c      ****  * Returns the appropriate checksum for the first packetSize bytes of packetBuffer
 686:router.c      ****  * As a shortcut, feeding an entire packet to this routine should result in a return
 687:router.c      ****  * value of zero for a proper packet.
 688:router.c      ****  ************************************************************************/
 689:router.c      **** int computeChecksum(uint8_t *packetBuffer, int packetSize)
 690:router.c      **** {
 2237               		.loc 1 690 0
 2238               		.cfi_startproc
 2239               	.LVL41:
 2240               	/* prologue: function */
 2241               	/* frame size = 0 */
 2242               	/* stack size = 0 */
 2243               	.L__stack_usage = 0
 2244               	.LBB83:
 691:router.c      ****     uint8_t accumulator = 0;
 2245               		.loc 1 691 0
 2246 091a FC01      		movw r30,r24
 692:router.c      ****     for(int i=0;i<packetSize;i++)
 2247               		.loc 1 692 0
 2248 091c 20E0      		ldi r18,lo8(0)
 2249 091e 30E0      		ldi r19,hi8(0)
 691:router.c      ****     uint8_t accumulator = 0;
 2250               		.loc 1 691 0
 2251 0920 80E0      		ldi r24,lo8(0)
 2252               	.LVL42:
 2253               		.loc 1 692 0
 2254 0922 00C0      		rjmp .L58
 2255               	.LVL43:
 2256               	.L59:
 693:router.c      ****     {
 694:router.c      ****         accumulator += packetBuffer[i];
 2257               		.loc 1 694 0 discriminator 2
 2258 0924 9191      		ld r25,Z+
 2259 0926 890F      		add r24,r25
 2260               	.LVL44:
 692:router.c      ****     for(int i=0;i<packetSize;i++)
 2261               		.loc 1 692 0 discriminator 2
 2262 0928 2F5F      		subi r18,lo8(-(1))
 2263 092a 3F4F      		sbci r19,hi8(-(1))
 2264               	.LVL45:
 2265               	.L58:
 692:router.c      ****     for(int i=0;i<packetSize;i++)
 2266               		.loc 1 692 0 is_stmt 0 discriminator 1
 2267 092c 2617      		cp r18,r22
 2268 092e 3707      		cpc r19,r23
 2269 0930 04F0      		brlt .L59
 2270               	.LBE83:
 695:router.c      ****     }
 696:router.c      **** 
 697:router.c      ****     return (0x00 - accumulator);
 2271               		.loc 1 697 0 is_stmt 1
 2272 0932 90E0      		ldi r25,lo8(0)
 2273 0934 9095      		com r25
 2274 0936 8195      		neg r24
 2275 0938 9F4F      		sbci r25,lo8(-1)
 2276               	.LVL46:
 2277               	/* epilogue start */
 698:router.c      **** }
 2278               		.loc 1 698 0
 2279 093a 0895      		ret
 2280               		.cfi_endproc
 2281               	.LFE26:
 2284               	simplePassthrough:
 2285               	.LFB29:
 699:router.c      **** 
 700:router.c      **** 
 701:router.c      **** /************************************************************************
 702:router.c      ****  * configureRouterUSARTs()
 703:router.c      ****  *
 704:router.c      ****  * Configures the router system
 705:router.c      ****  ************************************************************************/
 706:router.c      **** void configureRouterUSARTs(void)
 707:router.c      **** {
 708:router.c      ****     // set the RX buffers to a reasonable value
 709:router.c      ****     for(uint8_t i=0;i<6;i++)
 710:router.c      ****         startMtrChain(i);
 711:router.c      **** 
 712:router.c      ****     //First initialize the upstream to the Overo or PC
 713:router.c      ****     configureUSARTHardware(&UPSTREAM_USART,USE_PC_BITRATE,0);
 714:router.c      **** 
 715:router.c      ****     //Now initialize the various downstream units
 716:router.c      ****     configureUSARTHardware(&TACT_USART,0,1);
 717:router.c      ****     configureUSARTHardware(&PROX1_USART,0,1);
 718:router.c      ****     configureUSARTHardware(&PROX2_USART,0,1);
 719:router.c      ****     configureUSARTHardware(&PROX3_USART,0,1);
 720:router.c      ****     configureUSARTHardware(&MTR1_USART,0,1);
 721:router.c      ****     configureUSARTHardware(&MTR2_USART,0,1);
 722:router.c      **** 
 723:router.c      ****     //Enable DMA transfers, but do not prepare any for now.
 724:router.c      ****     DMA.CTRL = DMA_ENABLE_bm;
 725:router.c      **** 
 726:router.c      ****     //Assume default configuration with downstream OUT and upstream IN
 727:router.c      ****     SET_TACT_INBOUND();
 728:router.c      ****     SET_PROX1_INBOUND();
 729:router.c      ****     SET_PROX2_INBOUND();
 730:router.c      ****     SET_PROX3_INBOUND();
 731:router.c      ****     SET_MTR1_INBOUND();
 732:router.c      ****     SET_MTR2_INBOUND();
 733:router.c      ****     SET_TACT_OUTBOUND();
 734:router.c      ****     SET_PROX1_OUTBOUND();
 735:router.c      ****     SET_PROX2_OUTBOUND();
 736:router.c      ****     SET_PROX3_OUTBOUND();
 737:router.c      ****     SET_MTR1_OUTBOUND();
 738:router.c      ****     SET_MTR2_OUTBOUND();
 739:router.c      **** 
 740:router.c      ****     //Setup the router timeout counter to about 0.25 ms periods
 741:router.c      ****     // 32MHz/256/32: 4KHz (0.25ms)
 742:router.c      ****     ROUTER_TC.CTRLB = TC_WGMODE_NORMAL_gc;
 743:router.c      ****     ROUTER_TC.CTRLC = 0x00;
 744:router.c      ****     ROUTER_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
 745:router.c      ****     ROUTER_TC.CTRLE = 0x00;
 746:router.c      ****     ROUTER_TC.PERBUF = 32;
 747:router.c      ****     ROUTER_TC.CNT = 0x0000;
 748:router.c      ****     ROUTER_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
 749:router.c      ****     ROUTER_TC.CTRLA = TC_CLKSEL_DIV256_gc;
 750:router.c      **** }
 751:router.c      **** 
 752:router.c      **** static void waitDMAChain(CHANNEL_CONFIGURATION_t *targetChannelConfig)
 753:router.c      **** {
 754:router.c      ****     // The Transmit has been initated before this function was called
 755:router.c      ****     // when the transmit DMA is done, downstreamDoneFlag is set
 756:router.c      ****     while( (targetChannelConfig->downstreamDoneFlag == 0) );
 757:router.c      **** 
 758:router.c      ****     //Now the DMA is done, but the transmission is not yet done
 759:router.c      ****     targetChannelConfig->downstreamDoneFlag = 0;
 760:router.c      **** }
 761:router.c      **** 
 762:router.c      **** /************************************************************************
 763:router.c      ****  * simplePassthrough()
 764:router.c      ****  *
 765:router.c      ****  * Uses a previously configured targetChannelConfig to send data down a
 766:router.c      ****  * USART Stream.  It then waits (with timeout) for a reply from the
 767:router.c      ****  * downstream device.  It then either passes the device back upstream or
 768:router.c      ****  * generate an appropriate error response.
 769:router.c      ****  ************************************************************************/
 770:router.c      **** static void simplePassthrough(CHANNEL_CONFIGURATION_t *targetChannelConfig)
 771:router.c      **** {
 2286               		.loc 1 771 0
 2287               		.cfi_startproc
 2288               	.LVL47:
 2289 093c 0F93      		push r16
 2290               	.LCFI183:
 2291               		.cfi_def_cfa_offset 4
 2292               		.cfi_offset 16, -3
 2293 093e 1F93      		push r17
 2294               	.LCFI184:
 2295               		.cfi_def_cfa_offset 5
 2296               		.cfi_offset 17, -4
 2297 0940 CF93      		push r28
 2298               	.LCFI185:
 2299               		.cfi_def_cfa_offset 6
 2300               		.cfi_offset 28, -5
 2301 0942 DF93      		push r29
 2302               	.LCFI186:
 2303               		.cfi_def_cfa_offset 7
 2304               		.cfi_offset 29, -6
 2305               	/* prologue: function */
 2306               	/* frame size = 0 */
 2307               	/* stack size = 4 */
 2308               	.L__stack_usage = 4
 2309 0944 EC01      		movw r28,r24
 772:router.c      ****     // set up the receive timeout
 773:router.c      ****     cli();
 2310               		.loc 1 773 0
 2311               	/* #APP */
 2312               	 ;  773 "router.c" 1
 2313 0946 F894      		cli
 2314               	 ;  0 "" 2
 774:router.c      ****     upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 2315               		.loc 1 774 0
 2316               	/* #NOAPP */
 2317 0948 80E2      		ldi r24,lo8(32)
 2318               	.LVL48:
 2319 094a 8093 0000 		sts upRXtimeoutCounter,r24
 775:router.c      ****     sei();
 2320               		.loc 1 775 0
 2321               	/* #APP */
 2322               	 ;  775 "router.c" 1
 2323 094e 7894      		sei
 2324               	 ;  0 "" 2
 2325               	/* #NOAPP */
 2326               	.L62:
 776:router.c      ****     while((targetChannelConfig->sizeReceived == 0) && (upRXtimeoutCounter));
 2327               		.loc 1 776 0 discriminator 1
 2328 0950 8F81      		ldd r24,Y+7
 2329 0952 8823      		tst r24
 2330 0954 01F4      		brne .L61
 2331               		.loc 1 776 0 is_stmt 0 discriminator 2
 2332 0956 8091 0000 		lds r24,upRXtimeoutCounter
 2333 095a 8823      		tst r24
 2334 095c 01F4      		brne .L62
 2335               	.L61:
 777:router.c      **** 
 778:router.c      ****     if(!(upRXtimeoutCounter))
 2336               		.loc 1 778 0 is_stmt 1
 2337 095e 8091 0000 		lds r24,upRXtimeoutCounter
 2338 0962 8823      		tst r24
 2339 0964 01F4      		brne .L63
 779:router.c      ****     {
 780:router.c      ****         //Abort abort: // presumption of DMA1 being always used
 781:router.c      ****         DOWNSTREAM1_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
 2340               		.loc 1 781 0
 2341 0966 8091 2001 		lds r24,288
 2342 096a 8F77      		andi r24,lo8(127)
 2343 096c E0E0      		ldi r30,lo8(256)
 2344 096e F1E0      		ldi r31,hi8(256)
 2345 0970 80A3      		std Z+32,r24
 782:router.c      **** 
 783:router.c      ****         // NEW FROM ZACH
 784:router.c      **** 
 785:router.c      ****         DownStreamConfig[1].usart->CTRLA = 0x00;
 2346               		.loc 1 785 0
 2347 0972 E091 0000 		lds r30,DownStreamConfig+12
 2348 0976 F091 0000 		lds r31,DownStreamConfig+12+1
 2349 097a 1382      		std Z+3,__zero_reg__
 786:router.c      ****         DownStreamConfig[1].isActive = 0; // BA
 2350               		.loc 1 786 0
 2351 097c 1092 0000 		sts DownStreamConfig+23,__zero_reg__
 787:router.c      **** 
 788:router.c      ****         responseToOveroC[0] = 3; //Packet size
 2352               		.loc 1 788 0
 2353 0980 83E0      		ldi r24,lo8(3)
 2354 0982 8093 0000 		sts responseToOveroC,r24
 789:router.c      ****         responseToOveroC[1] = 0; //Packet size MSB
 2355               		.loc 1 789 0
 2356 0986 1092 0000 		sts responseToOveroC+1,__zero_reg__
 790:router.c      ****         responseToOveroC[2] = commandPacketBuffer[COMMAND_OFFSET]; //Reflected command byte
 2357               		.loc 1 790 0
 2358 098a 8091 0000 		lds r24,commandPacketBuffer+1
 2359 098e 8093 0000 		sts responseToOveroC+2,r24
 791:router.c      ****         responseToOveroC[3] = TIMEOUT_ERROR; //Timeout error
 2360               		.loc 1 791 0
 2361 0992 84E0      		ldi r24,lo8(4)
 2362 0994 00C0      		rjmp .L68
 2363               	.L63:
 792:router.c      ****         responseToOveroC[4] = computeChecksum((uint8_t *)responseToOveroC,4); //checksum
 793:router.c      ****         upstreamTX(responseToOveroC, 5);
 794:router.c      ****         return;
 795:router.c      ****     }
 796:router.c      **** 
 797:router.c      ****     if(computeChecksum((uint8_t *)targetChannelConfig->targetBuffer,targetChannelConfig->sizeReceiv
 2364               		.loc 1 797 0
 2365 0996 0C81      		ldd r16,Y+4
 2366 0998 1D81      		ldd r17,Y+5
 2367 099a 6F81      		ldd r22,Y+7
 2368 099c C801      		movw r24,r16
 2369 099e 70E0      		ldi r23,lo8(0)
 2370 09a0 0E94 0000 		call computeChecksum
 2371 09a4 0097      		sbiw r24,0
 2372 09a6 01F0      		breq .L65
 798:router.c      ****     {
 799:router.c      ****         //Invalid checksum
 800:router.c      ****         RxCheckSumErrCnt[targetChannelConfig->activeStream]++;
 2373               		.loc 1 800 0
 2374 09a8 E985      		ldd r30,Y+9
 2375 09aa F0E0      		ldi r31,lo8(0)
 2376 09ac EE0F      		lsl r30
 2377 09ae FF1F      		rol r31
 2378 09b0 E050      		subi r30,lo8(-(RxCheckSumErrCnt))
 2379 09b2 F040      		sbci r31,hi8(-(RxCheckSumErrCnt))
 2380 09b4 8081      		ld r24,Z
 2381 09b6 9181      		ldd r25,Z+1
 2382 09b8 0196      		adiw r24,1
 2383 09ba 8083      		st Z,r24
 2384 09bc 9183      		std Z+1,r25
 801:router.c      ****         responseToOveroC[0] = 3; //Packet size
 2385               		.loc 1 801 0
 2386 09be 83E0      		ldi r24,lo8(3)
 2387 09c0 8093 0000 		sts responseToOveroC,r24
 802:router.c      ****         responseToOveroC[1] = 0; //Packet size MSB
 2388               		.loc 1 802 0
 2389 09c4 1092 0000 		sts responseToOveroC+1,__zero_reg__
 803:router.c      ****         responseToOveroC[2] = commandPacketBuffer[COMMAND_OFFSET]; //Reflected command byte
 2390               		.loc 1 803 0
 2391 09c8 8091 0000 		lds r24,commandPacketBuffer+1
 2392 09cc 8093 0000 		sts responseToOveroC+2,r24
 804:router.c      ****         responseToOveroC[3] = CHECKSUM_ERROR; //Checksum error
 2393               		.loc 1 804 0
 2394 09d0 81E0      		ldi r24,lo8(1)
 2395               	.L68:
 2396 09d2 8093 0000 		sts responseToOveroC+3,r24
 805:router.c      ****         responseToOveroC[4] = computeChecksum((uint8_t *)responseToOveroC,4); //checksum
 2397               		.loc 1 805 0
 2398 09d6 80E0      		ldi r24,lo8(responseToOveroC)
 2399 09d8 90E0      		ldi r25,hi8(responseToOveroC)
 2400 09da 64E0      		ldi r22,lo8(4)
 2401 09dc 70E0      		ldi r23,hi8(4)
 2402 09de 0E94 0000 		call computeChecksum
 2403 09e2 8093 0000 		sts responseToOveroC+4,r24
 806:router.c      ****         upstreamTX(responseToOveroC, 5);
 2404               		.loc 1 806 0
 2405 09e6 80E0      		ldi r24,lo8(responseToOveroC)
 2406 09e8 90E0      		ldi r25,hi8(responseToOveroC)
 2407 09ea 65E0      		ldi r22,lo8(5)
 2408 09ec 70E0      		ldi r23,hi8(5)
 2409 09ee 00C0      		rjmp .L67
 2410               	.L65:
 807:router.c      ****         return;
 808:router.c      ****     }
 809:router.c      **** 
 810:router.c      ****     //Data is ready for shipping upstream
 811:router.c      ****     upstreamTX(targetChannelConfig->targetBuffer,targetChannelConfig->sizeReceived);
 2411               		.loc 1 811 0
 2412 09f0 6F81      		ldd r22,Y+7
 2413 09f2 C801      		movw r24,r16
 2414 09f4 70E0      		ldi r23,lo8(0)
 2415               	.L67:
 2416 09f6 0E94 0000 		call upstreamTX
 2417               	/* epilogue start */
 812:router.c      ****     return;
 813:router.c      **** }
 2418               		.loc 1 813 0
 2419 09fa DF91      		pop r29
 2420 09fc CF91      		pop r28
 2421               	.LVL49:
 2422 09fe 1F91      		pop r17
 2423 0a00 0F91      		pop r16
 2424 0a02 0895      		ret
 2425               		.cfi_endproc
 2426               	.LFE29:
 2429               	stuffOutput:
 2430               	.LFB33:
 814:router.c      **** 
 815:router.c      **** /************************************************************************
 816:router.c      ****  * startChain()
 817:router.c      ****  *
 818:router.c      ****  * Begins a Stream transmission.  Used in both passthroughs and broadcasts
 819:router.c      ****  ************************************************************************/
 820:router.c      **** void startChain(uint8_t chainIndex, uint8_t DMAchannel, uint8_t *outboundBuffer)
 821:router.c      **** {
 822:router.c      ****     DMA_CH_t *targetDMA;
 823:router.c      ****     CHANNEL_CONFIGURATION_t *targetChannelConfig;
 824:router.c      **** 
 825:router.c      ****     switch( DMAchannel)
 826:router.c      ****     {
 827:router.c      ****         case 0:
 828:router.c      ****             targetDMA = &DOWNSTREAM0_DMA;
 829:router.c      ****             targetChannelConfig = &DownStreamConfig[0];
 830:router.c      ****             break;
 831:router.c      ****         case 1:
 832:router.c      ****             targetDMA = &DOWNSTREAM1_DMA;
 833:router.c      ****             targetChannelConfig = &DownStreamConfig[1];
 834:router.c      ****             break;
 835:router.c      ****         case 2:
 836:router.c      ****             targetDMA = &DOWNSTREAM2_DMA;
 837:router.c      ****             targetChannelConfig = &DownStreamConfig[2];
 838:router.c      ****             break;
 839:router.c      ****         case 3:
 840:router.c      ****             targetDMA = &DOWNSTREAM3_DMA;
 841:router.c      ****             targetChannelConfig = &DownStreamConfig[3];
 842:router.c      ****             break;
 843:router.c      ****         default:
 844:router.c      ****             // should record an error here, or block
 845:router.c      ****             return;
 846:router.c      ****     }
 847:router.c      **** 
 848:router.c      ****     //Configure the CHANNEL_CONFIGURATION_t structure
 849:router.c      ****     targetChannelConfig->usart = allUSARTS[chainIndex];
 850:router.c      ****     targetChannelConfig->sizeReceived = 0;
 851:router.c      ****     targetChannelConfig->downstreamDoneFlag = 0;
 852:router.c      **** 
 853:router.c      ****     targetChannelConfig->dma = targetDMA;
 854:router.c      ****     targetChannelConfig->targetBuffer = allFirstSlaveBuffers[chainIndex];
 855:router.c      ****     targetChannelConfig->inboundTrigger = allInboundTriggers[chainIndex];
 856:router.c      ****     targetChannelConfig->activeStream = chainIndex;
 857:router.c      ****     targetChannelConfig->isFirst = 1;
 858:router.c      ****     targetChannelConfig->isActive = 1;
 859:router.c      **** 
 860:router.c      ****     USARTtoCHANNELS[chainIndex] = targetChannelConfig;
 861:router.c      ****     allUSARTS[chainIndex]->STATUS = USART_TXCIF_bm;
 862:router.c      **** 
 863:router.c      ****     prepareDMAChannel(targetDMA, allOutboundTriggers[chainIndex], allUSARTS[chainIndex], outboundBu
 864:router.c      ****     activateDMAChannel(targetDMA,COMMAND_PACKET_SIZE);
 865:router.c      **** 
 866:router.c      ****     cli();
 867:router.c      ****     dmaTimeoutCounter[DMAchannel] = DOWNSTREAM_TIMEOUT_4KHZ;
 868:router.c      ****     sei();
 869:router.c      **** }
 870:router.c      **** 
 871:router.c      **** void startMtrChain(uint8_t chainIndex)
 872:router.c      **** {
 873:router.c      ****     CHANNEL_CONFIGURATION_t *targetChannelConfig;
 874:router.c      **** 
 875:router.c      ****     targetChannelConfig = &DownStreamConfig[chainIndex];
 876:router.c      **** 
 877:router.c      ****     //Configure the CHANNEL_CONFIGURATION_t structure
 878:router.c      ****     targetChannelConfig->usart = allUSARTS[chainIndex];
 879:router.c      ****     targetChannelConfig->sizeReceived = 0;
 880:router.c      ****     targetChannelConfig->downstreamDoneFlag = 0;
 881:router.c      **** 
 882:router.c      ****     targetChannelConfig->targetBuffer = allFirstSlaveBuffers[chainIndex];
 883:router.c      ****     targetChannelConfig->inboundTrigger = allInboundTriggers[chainIndex];
 884:router.c      ****     targetChannelConfig->activeStream = chainIndex;
 885:router.c      ****     targetChannelConfig->isFirst = 1;
 886:router.c      ****     targetChannelConfig->isActive = 1;
 887:router.c      **** 
 888:router.c      ****     USARTtoCHANNELS[chainIndex] = targetChannelConfig;
 889:router.c      ****     allUSARTS[chainIndex]->STATUS = USART_TXCIF_bm;
 890:router.c      **** 
 891:router.c      **** }
 892:router.c      **** 
 893:router.c      **** /************************************************************************
 894:router.c      ****  * continueChain
 895:router.c      ****  *
 896:router.c      ****  * Returns 1 if the chain is already done and 0 if an additional reply is
 897:router.c      ****  * coming.  In either case it will set up for the next reply or properly shut
 898:router.c      ****  * down the stream.
 899:router.c      ****  ************************************************************************/
 900:router.c      **** static uint8_t continueChain(CHANNEL_CONFIGURATION_t *targetChannelConfig)
 901:router.c      **** {
 902:router.c      ****     SERIAL_STREAM_t activeStream = targetChannelConfig->activeStream;
 903:router.c      **** 
 904:router.c      ****     //Store the size received
 905:router.c      ****     if(targetChannelConfig->isFirst)
 906:router.c      ****     {
 907:router.c      ****         *(allFirstSlaveSizes[activeStream]) = targetChannelConfig->sizeReceived;
 908:router.c      ****     }
 909:router.c      ****     else
 910:router.c      ****     {
 911:router.c      ****         *(allSecondSlaveSizes[activeStream]) = targetChannelConfig->sizeReceived;
 912:router.c      ****     }
 913:router.c      **** 
 914:router.c      ****     //Clean out the structure
 915:router.c      ****     targetChannelConfig->sizeReceived = 0;
 916:router.c      ****     targetChannelConfig->downstreamDoneFlag = 0;
 917:router.c      **** 
 918:router.c      ****     if((allSecondSlaveBuffers[activeStream] == NULL) || (targetChannelConfig->isFirst == 0))
 919:router.c      ****     {
 920:router.c      ****         //No continuation.  Chain is done
 921:router.c      ****         return 1;
 922:router.c      ****     }
 923:router.c      **** 
 924:router.c      ****     //Another reply is expected.  Rearm the channel
 925:router.c      ****     targetChannelConfig->isFirst = 0;
 926:router.c      ****     targetChannelConfig->isActive = 1;
 927:router.c      ****     targetChannelConfig->targetBuffer = allSecondSlaveBuffers[activeStream];
 928:router.c      ****     USARTtoCHANNELS[activeStream] = targetChannelConfig;
 929:router.c      ****     allUSARTS[activeStream]->STATUS = USART_TXCIF_bm;
 930:router.c      ****     targetChannelConfig->usart->CTRLA |= USART_RXCINTLVL_MED_gc;
 931:router.c      ****     return 0;
 932:router.c      **** 
 933:router.c      **** }
 934:router.c      **** 
 935:router.c      **** /************************************************************************
 936:router.c      ****  * stuffOutput()
 937:router.c      ****  *
 938:router.c      ****  * Used in Broadcasts to stuff the response to the Overo based on the collected
 939:router.c      ****  * data in the broadcast.  It confirms an appropriate size and checksum before
 940:router.c      ****  * loading the data.
 941:router.c      ****  ************************************************************************/
 942:router.c      **** static inline uint8_t stuffOutput(uint8_t * outputBuffer, uint8_t *inputBuffer, uint8_t inputSize, 
 943:router.c      **** {
 2431               		.loc 1 943 0
 2432               		.cfi_startproc
 2433               	.LVL50:
 2434 0a04 8F92      		push r8
 2435               	.LCFI187:
 2436               		.cfi_def_cfa_offset 4
 2437               		.cfi_offset 8, -3
 2438 0a06 9F92      		push r9
 2439               	.LCFI188:
 2440               		.cfi_def_cfa_offset 5
 2441               		.cfi_offset 9, -4
 2442 0a08 AF92      		push r10
 2443               	.LCFI189:
 2444               		.cfi_def_cfa_offset 6
 2445               		.cfi_offset 10, -5
 2446 0a0a BF92      		push r11
 2447               	.LCFI190:
 2448               		.cfi_def_cfa_offset 7
 2449               		.cfi_offset 11, -6
 2450 0a0c DF92      		push r13
 2451               	.LCFI191:
 2452               		.cfi_def_cfa_offset 8
 2453               		.cfi_offset 13, -7
 2454 0a0e EF92      		push r14
 2455               	.LCFI192:
 2456               		.cfi_def_cfa_offset 9
 2457               		.cfi_offset 14, -8
 2458 0a10 FF92      		push r15
 2459               	.LCFI193:
 2460               		.cfi_def_cfa_offset 10
 2461               		.cfi_offset 15, -9
 2462 0a12 0F93      		push r16
 2463               	.LCFI194:
 2464               		.cfi_def_cfa_offset 11
 2465               		.cfi_offset 16, -10
 2466 0a14 1F93      		push r17
 2467               	.LCFI195:
 2468               		.cfi_def_cfa_offset 12
 2469               		.cfi_offset 17, -11
 2470 0a16 CF93      		push r28
 2471               	.LCFI196:
 2472               		.cfi_def_cfa_offset 13
 2473               		.cfi_offset 28, -12
 2474 0a18 DF93      		push r29
 2475               	.LCFI197:
 2476               		.cfi_def_cfa_offset 14
 2477               		.cfi_offset 29, -13
 2478               	/* prologue: function */
 2479               	/* frame size = 0 */
 2480               	/* stack size = 11 */
 2481               	.L__stack_usage = 11
 2482 0a1a F82E      		mov r15,r24
 2483 0a1c E92E      		mov r14,r25
 2484 0a1e 5B01      		movw r10,r22
 2485 0a20 D42E      		mov r13,r20
 2486 0a22 4901      		movw r8,r18
 2487               	.LVL51:
 944:router.c      ****     //inputSize is the number of bytes actually received (so the packetSize header plus 2)
 945:router.c      **** #if 0
 946:router.c      ****     if(   (inputSize >= 5)
 947:router.c      ****           && (inputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] == STATUS_OK)
 948:router.c      ****           && (computeChecksum(inputBuffer,inputSize) == 0))
 949:router.c      ****     {
 950:router.c      ****         memcpy(outputBuffer,&inputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM],inputSize-5);
 951:router.c      ****         respondingDevicesBitfield |= deviceBitmask;
 952:router.c      ****         return inputSize-5;
 953:router.c      ****     }
 954:router.c      ****     return 0;
 955:router.c      **** #endif
 956:router.c      ****     unsigned r = 0;
 957:router.c      ****     uint16_t bitmsk = deviceBitmask;
 2488               		.loc 1 957 0
 2489 0a24 C901      		movw r24,r18
 2490               	.LVL52:
 956:router.c      ****     unsigned r = 0;
 2491               		.loc 1 956 0
 2492 0a26 00E0      		ldi r16,lo8(0)
 2493 0a28 10E0      		ldi r17,hi8(0)
 958:router.c      ****     while (bitmsk >>= 1)  // find index from bitmask
 2494               		.loc 1 958 0
 2495 0a2a 00C0      		rjmp .L70
 2496               	.LVL53:
 2497               	.L71:
 959:router.c      ****     {
 960:router.c      ****         r++;
 2498               		.loc 1 960 0
 2499 0a2c 0F5F      		subi r16,lo8(-(1))
 2500 0a2e 1F4F      		sbci r17,hi8(-(1))
 2501               	.LVL54:
 2502               	.L70:
 958:router.c      ****     while (bitmsk >>= 1)  // find index from bitmask
 2503               		.loc 1 958 0 discriminator 1
 2504 0a30 9695      		lsr r25
 2505 0a32 8795      		ror r24
 2506               	.LVL55:
 2507 0a34 0097      		sbiw r24,0
 2508 0a36 01F4      		brne .L71
 961:router.c      ****     }
 962:router.c      **** 
 963:router.c      ****     if (inputSize >= 5) {
 2509               		.loc 1 963 0
 2510 0a38 84E0      		ldi r24,lo8(4)
 2511               	.LVL56:
 2512 0a3a 8D15      		cp r24,r13
 2513 0a3c 00F4      		brsh .L76
 964:router.c      ****         if (inputBuffer[RESPONSE_STATUSCODE_OFFSET_PALM] == STATUS_OK) 
 2514               		.loc 1 964 0
 2515 0a3e F501      		movw r30,r10
 2516 0a40 8381      		ldd r24,Z+3
 2517 0a42 8823      		tst r24
 2518 0a44 01F4      		brne .L76
 965:router.c      ****         {
 966:router.c      ****             if (computeChecksum(inputBuffer,inputSize) == 0) 
 2519               		.loc 1 966 0
 2520 0a46 CD2D      		mov r28,r13
 2521 0a48 D0E0      		ldi r29,lo8(0)
 2522 0a4a C501      		movw r24,r10
 2523 0a4c BE01      		movw r22,r28
 2524 0a4e 0E94 0000 		call computeChecksum
 2525 0a52 0097      		sbiw r24,0
 2526 0a54 01F4      		brne .L73
 2527               	.LVL57:
 2528               	.LBB86:
 2529               	.LBB87:
 967:router.c      ****             {
 968:router.c      ****                 // normal valid packet
 969:router.c      ****                 memcpy(outputBuffer,&inputBuffer[RESPONSE_PAYLOAD_OFFSET_PALM],inputSize-5);
 2530               		.loc 1 969 0
 2531 0a56 AE01      		movw r20,r28
 2532 0a58 4550      		subi r20,lo8(-(-5))
 2533 0a5a 5040      		sbci r21,hi8(-(-5))
 2534 0a5c B501      		movw r22,r10
 2535 0a5e 6C5F      		subi r22,lo8(-(4))
 2536 0a60 7F4F      		sbci r23,hi8(-(4))
 2537 0a62 8F2D      		mov r24,r15
 2538 0a64 9E2D      		mov r25,r14
 2539 0a66 0E94 0000 		call memcpy
 970:router.c      ****                 respondingDevicesBitfield |= deviceBitmask;
 2540               		.loc 1 970 0
 2541 0a6a 8091 0000 		lds r24,respondingDevicesBitfield
 2542 0a6e 9091 0000 		lds r25,respondingDevicesBitfield+1
 2543 0a72 8829      		or r24,r8
 2544 0a74 9929      		or r25,r9
 2545 0a76 8093 0000 		sts respondingDevicesBitfield,r24
 2546 0a7a 9093 0000 		sts respondingDevicesBitfield+1,r25
 971:router.c      ****                 return inputSize-5;
 2547               		.loc 1 971 0
 2548 0a7e 8D2D      		mov r24,r13
 2549 0a80 8550      		subi r24,lo8(-(-5))
 2550 0a82 00C0      		rjmp .L72
 2551               	.LVL58:
 2552               	.L73:
 2553               	.LBE87:
 2554               	.LBE86:
 972:router.c      ****             }
 973:router.c      ****             else {
 974:router.c      ****                 // bad checksum
 975:router.c      ****                 RxCheckSumErrCnt[r]++;
 2555               		.loc 1 975 0
 2556 0a84 F801      		movw r30,r16
 2557 0a86 EE0F      		lsl r30
 2558 0a88 FF1F      		rol r31
 2559 0a8a E050      		subi r30,lo8(-(RxCheckSumErrCnt))
 2560 0a8c F040      		sbci r31,hi8(-(RxCheckSumErrCnt))
 2561 0a8e 8081      		ld r24,Z
 2562 0a90 9181      		ldd r25,Z+1
 2563 0a92 0196      		adiw r24,1
 2564 0a94 8083      		st Z,r24
 2565 0a96 9183      		std Z+1,r25
 2566               	.L76:
 976:router.c      ****                 return 0;
 977:router.c      ****             }
 978:router.c      ****         }
 979:router.c      ****         else{
 980:router.c      ****             // bad status
 981:router.c      ****             return 0;
 2567               		.loc 1 981 0
 2568 0a98 80E0      		ldi r24,lo8(0)
 2569               	.L72:
 2570               	/* epilogue start */
 982:router.c      ****         }
 983:router.c      ****     }
 984:router.c      ****     else{
 985:router.c      ****         // input size<5
 986:router.c      ****         return 0;
 987:router.c      ****     }
 988:router.c      **** 
 989:router.c      **** }
 2571               		.loc 1 989 0
 2572 0a9a DF91      		pop r29
 2573 0a9c CF91      		pop r28
 2574 0a9e 1F91      		pop r17
 2575 0aa0 0F91      		pop r16
 2576               	.LVL59:
 2577 0aa2 FF90      		pop r15
 2578 0aa4 EF90      		pop r14
 2579 0aa6 DF90      		pop r13
 2580               	.LVL60:
 2581 0aa8 BF90      		pop r11
 2582 0aaa AF90      		pop r10
 2583               	.LVL61:
 2584 0aac 9F90      		pop r9
 2585 0aae 8F90      		pop r8
 2586               	.LVL62:
 2587 0ab0 0895      		ret
 2588               		.cfi_endproc
 2589               	.LFE33:
 2591               	.global	startChain
 2593               	startChain:
 2594               	.LFB30:
 821:router.c      **** {
 2595               		.loc 1 821 0
 2596               		.cfi_startproc
 2597               	.LVL63:
 2598 0ab2 EF92      		push r14
 2599               	.LCFI198:
 2600               		.cfi_def_cfa_offset 4
 2601               		.cfi_offset 14, -3
 2602 0ab4 FF92      		push r15
 2603               	.LCFI199:
 2604               		.cfi_def_cfa_offset 5
 2605               		.cfi_offset 15, -4
 2606 0ab6 0F93      		push r16
 2607               	.LCFI200:
 2608               		.cfi_def_cfa_offset 6
 2609               		.cfi_offset 16, -5
 2610 0ab8 1F93      		push r17
 2611               	.LCFI201:
 2612               		.cfi_def_cfa_offset 7
 2613               		.cfi_offset 17, -6
 2614 0aba CF93      		push r28
 2615               	.LCFI202:
 2616               		.cfi_def_cfa_offset 8
 2617               		.cfi_offset 28, -7
 2618 0abc DF93      		push r29
 2619               	.LCFI203:
 2620               		.cfi_def_cfa_offset 9
 2621               		.cfi_offset 29, -8
 2622               	/* prologue: function */
 2623               	/* frame size = 0 */
 2624               	/* stack size = 6 */
 2625               	.L__stack_usage = 6
 825:router.c      ****     switch( DMAchannel)
 2626               		.loc 1 825 0
 2627 0abe 6130      		cpi r22,lo8(1)
 2628 0ac0 01F0      		breq .L83
 2629 0ac2 6130      		cpi r22,lo8(1)
 2630 0ac4 00F0      		brlo .L79
 2631 0ac6 6230      		cpi r22,lo8(2)
 2632 0ac8 01F0      		breq .L81
 2633 0aca 6330      		cpi r22,lo8(3)
 2634 0acc 01F0      		breq .+2
 2635 0ace 00C0      		rjmp .L77
 2636 0ad0 00C0      		rjmp .L84
 2637               	.L79:
 829:router.c      ****             targetChannelConfig = &DownStreamConfig[0];
 2638               		.loc 1 829 0
 2639 0ad2 C0E0      		ldi r28,lo8(DownStreamConfig)
 2640 0ad4 D0E0      		ldi r29,hi8(DownStreamConfig)
 828:router.c      ****             targetDMA = &DOWNSTREAM0_DMA;
 2641               		.loc 1 828 0
 2642 0ad6 A0E1      		ldi r26,lo8(272)
 2643 0ad8 B1E0      		ldi r27,hi8(272)
 2644 0ada 00C0      		rjmp .L80
 2645               	.L81:
 2646               	.LVL64:
 837:router.c      ****             targetChannelConfig = &DownStreamConfig[2];
 2647               		.loc 1 837 0
 2648 0adc C0E0      		ldi r28,lo8(DownStreamConfig+24)
 2649 0ade D0E0      		ldi r29,hi8(DownStreamConfig+24)
 836:router.c      ****             targetDMA = &DOWNSTREAM2_DMA;
 2650               		.loc 1 836 0
 2651 0ae0 A0E3      		ldi r26,lo8(304)
 2652 0ae2 B1E0      		ldi r27,hi8(304)
 838:router.c      ****             break;
 2653               		.loc 1 838 0
 2654 0ae4 00C0      		rjmp .L80
 2655               	.LVL65:
 2656               	.L84:
 841:router.c      ****             targetChannelConfig = &DownStreamConfig[3];
 2657               		.loc 1 841 0
 2658 0ae6 C0E0      		ldi r28,lo8(DownStreamConfig+36)
 2659 0ae8 D0E0      		ldi r29,hi8(DownStreamConfig+36)
 840:router.c      ****             targetDMA = &DOWNSTREAM3_DMA;
 2660               		.loc 1 840 0
 2661 0aea A0E4      		ldi r26,lo8(320)
 2662 0aec B1E0      		ldi r27,hi8(320)
 842:router.c      ****             break;
 2663               		.loc 1 842 0
 2664 0aee 00C0      		rjmp .L80
 2665               	.LVL66:
 2666               	.L83:
 833:router.c      ****             targetChannelConfig = &DownStreamConfig[1];
 2667               		.loc 1 833 0
 2668 0af0 C0E0      		ldi r28,lo8(DownStreamConfig+12)
 2669 0af2 D0E0      		ldi r29,hi8(DownStreamConfig+12)
 832:router.c      ****             targetDMA = &DOWNSTREAM1_DMA;
 2670               		.loc 1 832 0
 2671 0af4 A0E2      		ldi r26,lo8(288)
 2672 0af6 B1E0      		ldi r27,hi8(288)
 2673               	.L80:
 2674               	.LVL67:
 849:router.c      ****     targetChannelConfig->usart = allUSARTS[chainIndex];
 2675               		.loc 1 849 0
 2676 0af8 E82E      		mov r14,r24
 2677 0afa FF24      		clr r15
 2678 0afc 8701      		movw r16,r14
 2679 0afe 000F      		lsl r16
 2680 0b00 111F      		rol r17
 2681 0b02 F801      		movw r30,r16
 2682 0b04 E050      		subi r30,lo8(-(allUSARTS))
 2683 0b06 F040      		sbci r31,hi8(-(allUSARTS))
 2684 0b08 2081      		ld r18,Z
 2685 0b0a 3181      		ldd r19,Z+1
 2686 0b0c 2883      		st Y,r18
 2687 0b0e 3983      		std Y+1,r19
 850:router.c      ****     targetChannelConfig->sizeReceived = 0;
 2688               		.loc 1 850 0
 2689 0b10 1F82      		std Y+7,__zero_reg__
 851:router.c      ****     targetChannelConfig->downstreamDoneFlag = 0;
 2690               		.loc 1 851 0
 2691 0b12 1886      		std Y+8,__zero_reg__
 853:router.c      ****     targetChannelConfig->dma = targetDMA;
 2692               		.loc 1 853 0
 2693 0b14 AA83      		std Y+2,r26
 2694 0b16 BB83      		std Y+3,r27
 854:router.c      ****     targetChannelConfig->targetBuffer = allFirstSlaveBuffers[chainIndex];
 2695               		.loc 1 854 0
 2696 0b18 F801      		movw r30,r16
 2697 0b1a E050      		subi r30,lo8(-(allFirstSlaveBuffers))
 2698 0b1c F040      		sbci r31,hi8(-(allFirstSlaveBuffers))
 2699 0b1e 0190      		ld __tmp_reg__,Z+
 2700 0b20 F081      		ld r31,Z
 2701 0b22 E02D      		mov r30,__tmp_reg__
 2702 0b24 EC83      		std Y+4,r30
 2703 0b26 FD83      		std Y+5,r31
 855:router.c      ****     targetChannelConfig->inboundTrigger = allInboundTriggers[chainIndex];
 2704               		.loc 1 855 0
 2705 0b28 F701      		movw r30,r14
 2706 0b2a E050      		subi r30,lo8(-(allInboundTriggers))
 2707 0b2c F040      		sbci r31,hi8(-(allInboundTriggers))
 2708 0b2e 9081      		ld r25,Z
 2709 0b30 9E83      		std Y+6,r25
 856:router.c      ****     targetChannelConfig->activeStream = chainIndex;
 2710               		.loc 1 856 0
 2711 0b32 8987      		std Y+9,r24
 857:router.c      ****     targetChannelConfig->isFirst = 1;
 2712               		.loc 1 857 0
 2713 0b34 81E0      		ldi r24,lo8(1)
 2714               	.LVL68:
 2715 0b36 8A87      		std Y+10,r24
 858:router.c      ****     targetChannelConfig->isActive = 1;
 2716               		.loc 1 858 0
 2717 0b38 8B87      		std Y+11,r24
 860:router.c      ****     USARTtoCHANNELS[chainIndex] = targetChannelConfig;
 2718               		.loc 1 860 0
 2719 0b3a F801      		movw r30,r16
 2720 0b3c E050      		subi r30,lo8(-(USARTtoCHANNELS))
 2721 0b3e F040      		sbci r31,hi8(-(USARTtoCHANNELS))
 2722 0b40 C083      		st Z,r28
 2723 0b42 D183      		std Z+1,r29
 861:router.c      ****     allUSARTS[chainIndex]->STATUS = USART_TXCIF_bm;
 2724               		.loc 1 861 0
 2725 0b44 90E4      		ldi r25,lo8(64)
 2726 0b46 F901      		movw r30,r18
 2727 0b48 9183      		std Z+1,r25
 863:router.c      ****     prepareDMAChannel(targetDMA, allOutboundTriggers[chainIndex], allUSARTS[chainIndex], outboundBu
 2728               		.loc 1 863 0
 2729 0b4a F701      		movw r30,r14
 2730 0b4c E050      		subi r30,lo8(-(allOutboundTriggers))
 2731 0b4e F040      		sbci r31,hi8(-(allOutboundTriggers))
 2732 0b50 7081      		ld r23,Z
 2733               	.LVL69:
 2734               	.LBB88:
 2735               	.LBB89:
 301:router.c      ****     selectedChannel->REPCNT = 0x01;
 2736               		.loc 1 301 0
 2737 0b52 1696      		adiw r26,6
 2738 0b54 8C93      		st X,r24
 2739 0b56 1697      		sbiw r26,6
 304:router.c      ****     selectedChannel->TRIGSRC = usartTrigger;
 2740               		.loc 1 304 0
 2741 0b58 1396      		adiw r26,3
 2742 0b5a 7C93      		st X,r23
 2743 0b5c 1397      		sbiw r26,3
 2744               	.LVL70:
 2745               	.LBB90:
 2746               	.LBB91:
 309:router.c      ****         selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc |
 2747               		.loc 1 309 0
 2748 0b5e 88ED      		ldi r24,lo8(-40)
 2749 0b60 1296      		adiw r26,2
 2750 0b62 8C93      		st X,r24
 2751 0b64 1297      		sbiw r26,2
 316:router.c      ****         selectedChannel->DESTADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
 2752               		.loc 1 316 0
 2753 0b66 1C96      		adiw r26,12
 2754 0b68 2C93      		st X,r18
 2755 0b6a 1C97      		sbiw r26,12
 317:router.c      ****         selectedChannel->DESTADDR1 = (uint16_t) &targetUSART->DATA >> 8;
 2756               		.loc 1 317 0
 2757 0b6c 1D96      		adiw r26,13
 2758 0b6e 3C93      		st X,r19
 2759 0b70 1D97      		sbiw r26,13
 318:router.c      ****         selectedChannel->DESTADDR2 = 0;
 2760               		.loc 1 318 0
 2761 0b72 1E96      		adiw r26,14
 2762 0b74 1C92      		st X,__zero_reg__
 2763 0b76 1E97      		sbiw r26,14
 320:router.c      ****         selectedChannel->SRCADDR0 = (uint16_t)targetBuffer & 0x00FF;
 2764               		.loc 1 320 0
 2765 0b78 1896      		adiw r26,8
 2766 0b7a 4C93      		st X,r20
 2767 0b7c 1897      		sbiw r26,8
 321:router.c      ****         selectedChannel->SRCADDR1 = (uint16_t)targetBuffer >> 8;
 2768               		.loc 1 321 0
 2769 0b7e 1996      		adiw r26,9
 2770 0b80 5C93      		st X,r21
 2771 0b82 1997      		sbiw r26,9
 322:router.c      ****         selectedChannel->SRCADDR2 = 0;
 2772               		.loc 1 322 0
 2773 0b84 1A96      		adiw r26,10
 2774 0b86 1C92      		st X,__zero_reg__
 2775 0b88 1A97      		sbiw r26,10
 325:router.c      ****         selectedChannel->CTRLB = DMA_CH_TRNINTLVL_OFF_gc | DMA_CH_TRNIF_bm;
 2776               		.loc 1 325 0
 2777 0b8a 80E1      		ldi r24,lo8(16)
 2778 0b8c 1196      		adiw r26,1
 2779 0b8e 8C93      		st X,r24
 2780 0b90 1197      		sbiw r26,1
 326:router.c      ****         targetUSART->STATUS = USART_TXCIF_bm;
 2781               		.loc 1 326 0
 2782 0b92 F901      		movw r30,r18
 2783               	.LVL71:
 2784 0b94 9183      		std Z+1,r25
 327:router.c      ****         targetUSART->CTRLA |= USART_TXCINTLVL_LO_gc;    }
 2785               		.loc 1 327 0
 2786 0b96 8381      		ldd r24,Z+3
 2787 0b98 8460      		ori r24,lo8(4)
 2788 0b9a 8383      		std Z+3,r24
 2789               	.LVL72:
 2790               	.LBE91:
 2791               	.LBE90:
 2792               	.LBE89:
 2793               	.LBE88:
 2794               	.LBB92:
 2795               	.LBB93:
 357:router.c      ****     selectedChannel->TRFCNT = numBytes;
 2796               		.loc 1 357 0
 2797 0b9c 87E0      		ldi r24,lo8(7)
 2798 0b9e 90E0      		ldi r25,hi8(7)
 2799 0ba0 1496      		adiw r26,4
 2800 0ba2 8D93      		st X+,r24
 2801 0ba4 9C93      		st X,r25
 2802 0ba6 1597      		sbiw r26,4+1
 360:router.c      ****     selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
 2803               		.loc 1 360 0
 2804 0ba8 84E8      		ldi r24,lo8(-124)
 2805 0baa 8C93      		st X,r24
 2806               	.LBE93:
 2807               	.LBE92:
 866:router.c      ****     cli();
 2808               		.loc 1 866 0
 2809               	/* #APP */
 2810               	 ;  866 "router.c" 1
 2811 0bac F894      		cli
 2812               	 ;  0 "" 2
 867:router.c      ****     dmaTimeoutCounter[DMAchannel] = DOWNSTREAM_TIMEOUT_4KHZ;
 2813               		.loc 1 867 0
 2814               	/* #NOAPP */
 2815 0bae E62F      		mov r30,r22
 2816 0bb0 F0E0      		ldi r31,lo8(0)
 2817 0bb2 E050      		subi r30,lo8(-(dmaTimeoutCounter))
 2818 0bb4 F040      		sbci r31,hi8(-(dmaTimeoutCounter))
 2819 0bb6 85E0      		ldi r24,lo8(5)
 2820 0bb8 8083      		st Z,r24
 868:router.c      ****     sei();
 2821               		.loc 1 868 0
 2822               	/* #APP */
 2823               	 ;  868 "router.c" 1
 2824 0bba 7894      		sei
 2825               	 ;  0 "" 2
 2826               	.LVL73:
 2827               	/* #NOAPP */
 2828               	.L77:
 2829               	/* epilogue start */
 869:router.c      **** }
 2830               		.loc 1 869 0
 2831 0bbc DF91      		pop r29
 2832 0bbe CF91      		pop r28
 2833 0bc0 1F91      		pop r17
 2834 0bc2 0F91      		pop r16
 2835 0bc4 FF90      		pop r15
 2836 0bc6 EF90      		pop r14
 2837 0bc8 0895      		ret
 2838               		.cfi_endproc
 2839               	.LFE30:
 2841               	.global	startMtrChain
 2843               	startMtrChain:
 2844               	.LFB31:
 872:router.c      **** {
 2845               		.loc 1 872 0
 2846               		.cfi_startproc
 2847               	.LVL74:
 2848 0bca CF93      		push r28
 2849               	.LCFI204:
 2850               		.cfi_def_cfa_offset 4
 2851               		.cfi_offset 28, -3
 2852 0bcc DF93      		push r29
 2853               	.LCFI205:
 2854               		.cfi_def_cfa_offset 5
 2855               		.cfi_offset 29, -4
 2856               	/* prologue: function */
 2857               	/* frame size = 0 */
 2858               	/* stack size = 2 */
 2859               	.L__stack_usage = 2
 875:router.c      ****     targetChannelConfig = &DownStreamConfig[chainIndex];
 2860               		.loc 1 875 0
 2861 0bce 482F      		mov r20,r24
 2862 0bd0 50E0      		ldi r21,lo8(0)
 2863 0bd2 9A01      		movw r18,r20
 2864 0bd4 220F      		lsl r18
 2865 0bd6 331F      		rol r19
 2866 0bd8 D901      		movw r26,r18
 2867 0bda A40F      		add r26,r20
 2868 0bdc B51F      		adc r27,r21
 2869 0bde AA0F      		lsl r26
 2870 0be0 BB1F      		rol r27
 2871 0be2 AA0F      		lsl r26
 2872 0be4 BB1F      		rol r27
 2873 0be6 A050      		subi r26,lo8(-(DownStreamConfig))
 2874 0be8 B040      		sbci r27,hi8(-(DownStreamConfig))
 2875               	.LVL75:
 878:router.c      ****     targetChannelConfig->usart = allUSARTS[chainIndex];
 2876               		.loc 1 878 0
 2877 0bea F901      		movw r30,r18
 2878 0bec E050      		subi r30,lo8(-(allUSARTS))
 2879 0bee F040      		sbci r31,hi8(-(allUSARTS))
 2880 0bf0 C081      		ld r28,Z
 2881 0bf2 D181      		ldd r29,Z+1
 2882 0bf4 CD93      		st X+,r28
 2883 0bf6 DC93      		st X,r29
 2884 0bf8 1197      		sbiw r26,1
 879:router.c      ****     targetChannelConfig->sizeReceived = 0;
 2885               		.loc 1 879 0
 2886 0bfa 1796      		adiw r26,7
 2887 0bfc 1C92      		st X,__zero_reg__
 2888 0bfe 1797      		sbiw r26,7
 880:router.c      ****     targetChannelConfig->downstreamDoneFlag = 0;
 2889               		.loc 1 880 0
 2890 0c00 1896      		adiw r26,8
 2891 0c02 1C92      		st X,__zero_reg__
 2892 0c04 1897      		sbiw r26,8
 882:router.c      ****     targetChannelConfig->targetBuffer = allFirstSlaveBuffers[chainIndex];
 2893               		.loc 1 882 0
 2894 0c06 F901      		movw r30,r18
 2895 0c08 E050      		subi r30,lo8(-(allFirstSlaveBuffers))
 2896 0c0a F040      		sbci r31,hi8(-(allFirstSlaveBuffers))
 2897 0c0c 6081      		ld r22,Z
 2898 0c0e 7181      		ldd r23,Z+1
 2899 0c10 1496      		adiw r26,4
 2900 0c12 6D93      		st X+,r22
 2901 0c14 7C93      		st X,r23
 2902 0c16 1597      		sbiw r26,4+1
 883:router.c      ****     targetChannelConfig->inboundTrigger = allInboundTriggers[chainIndex];
 2903               		.loc 1 883 0
 2904 0c18 FA01      		movw r30,r20
 2905 0c1a E050      		subi r30,lo8(-(allInboundTriggers))
 2906 0c1c F040      		sbci r31,hi8(-(allInboundTriggers))
 2907 0c1e 9081      		ld r25,Z
 2908 0c20 1696      		adiw r26,6
 2909 0c22 9C93      		st X,r25
 2910 0c24 1697      		sbiw r26,6
 884:router.c      ****     targetChannelConfig->activeStream = chainIndex;
 2911               		.loc 1 884 0
 2912 0c26 1996      		adiw r26,9
 2913 0c28 8C93      		st X,r24
 2914 0c2a 1997      		sbiw r26,9
 885:router.c      ****     targetChannelConfig->isFirst = 1;
 2915               		.loc 1 885 0
 2916 0c2c 81E0      		ldi r24,lo8(1)
 2917               	.LVL76:
 2918 0c2e 1A96      		adiw r26,10
 2919 0c30 8C93      		st X,r24
 2920 0c32 1A97      		sbiw r26,10
 886:router.c      ****     targetChannelConfig->isActive = 1;
 2921               		.loc 1 886 0
 2922 0c34 1B96      		adiw r26,11
 2923 0c36 8C93      		st X,r24
 2924 0c38 1B97      		sbiw r26,11
 888:router.c      ****     USARTtoCHANNELS[chainIndex] = targetChannelConfig;
 2925               		.loc 1 888 0
 2926 0c3a 2050      		subi r18,lo8(-(USARTtoCHANNELS))
 2927 0c3c 3040      		sbci r19,hi8(-(USARTtoCHANNELS))
 2928 0c3e F901      		movw r30,r18
 2929 0c40 A083      		st Z,r26
 2930 0c42 B183      		std Z+1,r27
 889:router.c      ****     allUSARTS[chainIndex]->STATUS = USART_TXCIF_bm;
 2931               		.loc 1 889 0
 2932 0c44 80E4      		ldi r24,lo8(64)
 2933 0c46 8983      		std Y+1,r24
 2934               	/* epilogue start */
 891:router.c      **** }
 2935               		.loc 1 891 0
 2936 0c48 DF91      		pop r29
 2937 0c4a CF91      		pop r28
 2938 0c4c 0895      		ret
 2939               		.cfi_endproc
 2940               	.LFE31:
 2942               	.global	configureRouterUSARTs
 2944               	configureRouterUSARTs:
 2945               	.LFB27:
 707:router.c      **** {
 2946               		.loc 1 707 0
 2947               		.cfi_startproc
 2948 0c4e 1F93      		push r17
 2949               	.LCFI206:
 2950               		.cfi_def_cfa_offset 4
 2951               		.cfi_offset 17, -3
 2952 0c50 CF93      		push r28
 2953               	.LCFI207:
 2954               		.cfi_def_cfa_offset 5
 2955               		.cfi_offset 28, -4
 2956 0c52 DF93      		push r29
 2957               	.LCFI208:
 2958               		.cfi_def_cfa_offset 6
 2959               		.cfi_offset 29, -5
 2960               	/* prologue: function */
 2961               	/* frame size = 0 */
 2962               	/* stack size = 3 */
 2963               	.L__stack_usage = 3
 2964               	.LVL77:
 709:router.c      ****     for(uint8_t i=0;i<6;i++)
 2965               		.loc 1 709 0
 2966 0c54 10E0      		ldi r17,lo8(0)
 2967               	.LVL78:
 2968               	.L87:
 2969               	.LBB94:
 710:router.c      ****         startMtrChain(i);
 2970               		.loc 1 710 0 discriminator 2
 2971 0c56 812F      		mov r24,r17
 2972 0c58 0E94 0000 		call startMtrChain
 709:router.c      ****     for(uint8_t i=0;i<6;i++)
 2973               		.loc 1 709 0 discriminator 2
 2974 0c5c 1F5F      		subi r17,lo8(-(1))
 2975               	.LVL79:
 2976 0c5e 1630      		cpi r17,lo8(6)
 2977 0c60 01F4      		brne .L87
 2978               	.LBE94:
 713:router.c      ****     configureUSARTHardware(&UPSTREAM_USART,USE_PC_BITRATE,0);
 2979               		.loc 1 713 0
 2980 0c62 80EA      		ldi r24,lo8(2976)
 2981 0c64 9BE0      		ldi r25,hi8(2976)
 2982 0c66 61E0      		ldi r22,lo8(1)
 2983 0c68 70E0      		ldi r23,hi8(1)
 2984 0c6a 40E0      		ldi r20,lo8(0)
 2985 0c6c 50E0      		ldi r21,hi8(0)
 2986 0c6e 0E94 0000 		call configureUSARTHardware
 716:router.c      ****     configureUSARTHardware(&TACT_USART,0,1);
 2987               		.loc 1 716 0
 2988 0c72 80EA      		ldi r24,lo8(2208)
 2989 0c74 98E0      		ldi r25,hi8(2208)
 2990 0c76 60E0      		ldi r22,lo8(0)
 2991 0c78 70E0      		ldi r23,hi8(0)
 2992 0c7a 41E0      		ldi r20,lo8(1)
 2993 0c7c 50E0      		ldi r21,hi8(1)
 2994 0c7e 0E94 0000 		call configureUSARTHardware
 717:router.c      ****     configureUSARTHardware(&PROX1_USART,0,1);
 2995               		.loc 1 717 0
 2996 0c82 80EB      		ldi r24,lo8(2480)
 2997 0c84 99E0      		ldi r25,hi8(2480)
 2998 0c86 60E0      		ldi r22,lo8(0)
 2999 0c88 70E0      		ldi r23,hi8(0)
 3000 0c8a 41E0      		ldi r20,lo8(1)
 3001 0c8c 50E0      		ldi r21,hi8(1)
 3002 0c8e 0E94 0000 		call configureUSARTHardware
 718:router.c      ****     configureUSARTHardware(&PROX2_USART,0,1);
 3003               		.loc 1 718 0
 3004 0c92 80EB      		ldi r24,lo8(2224)
 3005 0c94 98E0      		ldi r25,hi8(2224)
 3006 0c96 60E0      		ldi r22,lo8(0)
 3007 0c98 70E0      		ldi r23,hi8(0)
 3008 0c9a 41E0      		ldi r20,lo8(1)
 3009 0c9c 50E0      		ldi r21,hi8(1)
 3010 0c9e 0E94 0000 		call configureUSARTHardware
 719:router.c      ****     configureUSARTHardware(&PROX3_USART,0,1);
 3011               		.loc 1 719 0
 3012 0ca2 80EA      		ldi r24,lo8(2464)
 3013 0ca4 99E0      		ldi r25,hi8(2464)
 3014 0ca6 60E0      		ldi r22,lo8(0)
 3015 0ca8 70E0      		ldi r23,hi8(0)
 3016 0caa 41E0      		ldi r20,lo8(1)
 3017 0cac 50E0      		ldi r21,hi8(1)
 3018 0cae 0E94 0000 		call configureUSARTHardware
 720:router.c      ****     configureUSARTHardware(&MTR1_USART,0,1);
 3019               		.loc 1 720 0
 3020 0cb2 80EA      		ldi r24,lo8(2720)
 3021 0cb4 9AE0      		ldi r25,hi8(2720)
 3022 0cb6 60E0      		ldi r22,lo8(0)
 3023 0cb8 70E0      		ldi r23,hi8(0)
 3024 0cba 41E0      		ldi r20,lo8(1)
 3025 0cbc 50E0      		ldi r21,hi8(1)
 3026 0cbe 0E94 0000 		call configureUSARTHardware
 721:router.c      ****     configureUSARTHardware(&MTR2_USART,0,1);
 3027               		.loc 1 721 0
 3028 0cc2 80EB      		ldi r24,lo8(2736)
 3029 0cc4 9AE0      		ldi r25,hi8(2736)
 3030 0cc6 60E0      		ldi r22,lo8(0)
 3031 0cc8 70E0      		ldi r23,hi8(0)
 3032 0cca 41E0      		ldi r20,lo8(1)
 3033 0ccc 50E0      		ldi r21,hi8(1)
 3034 0cce 0E94 0000 		call configureUSARTHardware
 724:router.c      ****     DMA.CTRL = DMA_ENABLE_bm;
 3035               		.loc 1 724 0
 3036 0cd2 80E8      		ldi r24,lo8(-128)
 3037 0cd4 8093 0001 		sts 256,r24
 727:router.c      ****     SET_TACT_INBOUND();
 3038               		.loc 1 727 0
 3039 0cd8 C0E4      		ldi r28,lo8(1600)
 3040 0cda D6E0      		ldi r29,hi8(1600)
 3041 0cdc 8091 4406 		lds r24,1604
 3042 0ce0 8E7F      		andi r24,lo8(-2)
 3043 0ce2 8C83      		std Y+4,r24
 728:router.c      ****     SET_PROX1_INBOUND();
 3044               		.loc 1 728 0
 3045 0ce4 A0E6      		ldi r26,lo8(1632)
 3046 0ce6 B6E0      		ldi r27,hi8(1632)
 3047 0ce8 80E1      		ldi r24,lo8(16)
 3048 0cea 1696      		adiw r26,6
 3049 0cec 8C93      		st X,r24
 3050 0cee 1697      		sbiw r26,6
 729:router.c      ****     SET_PROX2_INBOUND();
 3051               		.loc 1 729 0
 3052 0cf0 8091 4406 		lds r24,1604
 3053 0cf4 8F7E      		andi r24,lo8(-17)
 3054 0cf6 8C83      		std Y+4,r24
 730:router.c      ****     SET_PROX3_INBOUND();
 3055               		.loc 1 730 0
 3056 0cf8 21E0      		ldi r18,lo8(1)
 3057 0cfa 1696      		adiw r26,6
 3058 0cfc 2C93      		st X,r18
 3059 0cfe 1697      		sbiw r26,6
 731:router.c      ****     SET_MTR1_INBOUND();
 3060               		.loc 1 731 0
 3061 0d00 E0E8      		ldi r30,lo8(1664)
 3062 0d02 F6E0      		ldi r31,hi8(1664)
 3063 0d04 8091 8406 		lds r24,1668
 3064 0d08 8E7F      		andi r24,lo8(-2)
 3065 0d0a 8483      		std Z+4,r24
 732:router.c      ****     SET_MTR2_INBOUND();
 3066               		.loc 1 732 0
 3067 0d0c 8091 8406 		lds r24,1668
 3068 0d10 8F7E      		andi r24,lo8(-17)
 3069 0d12 8483      		std Z+4,r24
 733:router.c      ****     SET_TACT_OUTBOUND();
 3070               		.loc 1 733 0
 3071 0d14 8091 4406 		lds r24,1604
 3072 0d18 8260      		ori r24,lo8(2)
 3073 0d1a 8C83      		std Y+4,r24
 734:router.c      ****     SET_PROX1_OUTBOUND();
 3074               		.loc 1 734 0
 3075 0d1c 80E2      		ldi r24,lo8(32)
 3076 0d1e 1596      		adiw r26,5
 3077 0d20 8C93      		st X,r24
 3078 0d22 1597      		sbiw r26,5
 735:router.c      ****     SET_PROX2_OUTBOUND();
 3079               		.loc 1 735 0
 3080 0d24 8091 4406 		lds r24,1604
 3081 0d28 8062      		ori r24,lo8(32)
 3082 0d2a 8C83      		std Y+4,r24
 736:router.c      ****     SET_PROX3_OUTBOUND();
 3083               		.loc 1 736 0
 3084 0d2c 82E0      		ldi r24,lo8(2)
 3085 0d2e 1596      		adiw r26,5
 3086 0d30 8C93      		st X,r24
 3087 0d32 1597      		sbiw r26,5
 737:router.c      ****     SET_MTR1_OUTBOUND();
 3088               		.loc 1 737 0
 3089 0d34 8091 8406 		lds r24,1668
 3090 0d38 8260      		ori r24,lo8(2)
 3091 0d3a 8483      		std Z+4,r24
 738:router.c      ****     SET_MTR2_OUTBOUND();
 3092               		.loc 1 738 0
 3093 0d3c 8091 8406 		lds r24,1668
 3094 0d40 8062      		ori r24,lo8(32)
 3095 0d42 8483      		std Z+4,r24
 742:router.c      ****     ROUTER_TC.CTRLB = TC_WGMODE_NORMAL_gc;
 3096               		.loc 1 742 0
 3097 0d44 E0E0      		ldi r30,lo8(2304)
 3098 0d46 F9E0      		ldi r31,hi8(2304)
 3099 0d48 1182      		std Z+1,__zero_reg__
 743:router.c      ****     ROUTER_TC.CTRLC = 0x00;
 3100               		.loc 1 743 0
 3101 0d4a 1282      		std Z+2,__zero_reg__
 744:router.c      ****     ROUTER_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
 3102               		.loc 1 744 0
 3103 0d4c 1382      		std Z+3,__zero_reg__
 745:router.c      ****     ROUTER_TC.CTRLE = 0x00;
 3104               		.loc 1 745 0
 3105 0d4e 1482      		std Z+4,__zero_reg__
 746:router.c      ****     ROUTER_TC.PERBUF = 32;
 3106               		.loc 1 746 0
 3107 0d50 80E2      		ldi r24,lo8(32)
 3108 0d52 90E0      		ldi r25,hi8(32)
 3109 0d54 86AB      		std Z+54,r24
 3110 0d56 97AB      		std Z+55,r25
 747:router.c      ****     ROUTER_TC.CNT = 0x0000;
 3111               		.loc 1 747 0
 3112 0d58 10A2      		std Z+32,__zero_reg__
 3113 0d5a 11A2      		std Z+33,__zero_reg__
 748:router.c      ****     ROUTER_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
 3114               		.loc 1 748 0
 3115 0d5c 2683      		std Z+6,r18
 749:router.c      ****     ROUTER_TC.CTRLA = TC_CLKSEL_DIV256_gc;
 3116               		.loc 1 749 0
 3117 0d5e 1093 0009 		sts 2304,r17
 3118               	/* epilogue start */
 750:router.c      **** }
 3119               		.loc 1 750 0
 3120 0d62 DF91      		pop r29
 3121 0d64 CF91      		pop r28
 3122 0d66 1F91      		pop r17
 3123               	.LVL80:
 3124 0d68 0895      		ret
 3125               		.cfi_endproc
 3126               	.LFE27:
 3128               	.global	tendDMAchain
 3130               	tendDMAchain:
 3131               	.LFB35:
 990:router.c      **** 
 991:router.c      **** /************************************************************************
 992:router.c      ****  * doFreerunTask()
 993:router.c      ****  *
 994:router.c      ****  * This is called from main() whenever the freerun timer indicates that
 995:router.c      ****  * another broadcast should be performed.  It synthesizes a DATA_COLLECTION
 996:router.c      ****  * command and passes it to the broadcast routine for delivery downstream
 997:router.c      ****  ************************************************************************/
 998:router.c      **** void doFreerunTask(void)
 999:router.c      **** {
1000:router.c      ****     uint8_t smallCommandPacketBuffer[COMMAND_PACKET_SIZE];
1001:router.c      **** 
1002:router.c      ****     smallCommandPacketBuffer[DESTINATION_HEADER_OFFSET] = DESTINATION_BROADCAST;
1003:router.c      ****     smallCommandPacketBuffer[COMMAND_OFFSET] = DATA_COLLECTION_OPCODE;
1004:router.c      ****     memcpy(&smallCommandPacketBuffer[PAYLOAD_OFFSET],&sampleArgument,2);
1005:router.c      ****     smallCommandPacketBuffer[CHECKSUM_OFFSET] = computeChecksum(smallCommandPacketBuffer,6);
1006:router.c      **** 
1007:router.c      ****     if(activePingPong)
1008:router.c      ****     {
1009:router.c      ****         doBroadcast(responseToOveroB,smallCommandPacketBuffer);
1010:router.c      ****         activePingPong = 0;
1011:router.c      ****     }
1012:router.c      ****     else
1013:router.c      ****     {
1014:router.c      ****         doBroadcast(responseToOveroA,smallCommandPacketBuffer);
1015:router.c      ****         activePingPong = 1;
1016:router.c      ****     }
1017:router.c      ****     return;
1018:router.c      **** }
1019:router.c      **** 
1020:router.c      **** uint8_t tendDMAchain(uint8_t i)
1021:router.c      **** {
 3132               		.loc 1 1021 0
 3133               		.cfi_startproc
 3134               	.LVL81:
 3135 0d6a CF93      		push r28
 3136               	.LCFI209:
 3137               		.cfi_def_cfa_offset 4
 3138               		.cfi_offset 28, -3
 3139 0d6c DF93      		push r29
 3140               	.LCFI210:
 3141               		.cfi_def_cfa_offset 5
 3142               		.cfi_offset 29, -4
 3143               	/* prologue: function */
 3144               	/* frame size = 0 */
 3145               	/* stack size = 2 */
 3146               	.L__stack_usage = 2
 3147 0d6e 482F      		mov r20,r24
1022:router.c      ****     if(DownStreamConfig[i].downstreamDoneFlag == 1)
 3148               		.loc 1 1022 0
 3149 0d70 682F      		mov r22,r24
 3150 0d72 70E0      		ldi r23,lo8(0)
 3151 0d74 CB01      		movw r24,r22
 3152               	.LVL82:
 3153 0d76 880F      		lsl r24
 3154 0d78 991F      		rol r25
 3155 0d7a FC01      		movw r30,r24
 3156 0d7c E60F      		add r30,r22
 3157 0d7e F71F      		adc r31,r23
 3158 0d80 EE0F      		lsl r30
 3159 0d82 FF1F      		rol r31
 3160 0d84 EE0F      		lsl r30
 3161 0d86 FF1F      		rol r31
 3162 0d88 E050      		subi r30,lo8(-(DownStreamConfig))
 3163 0d8a F040      		sbci r31,hi8(-(DownStreamConfig))
 3164 0d8c 2085      		ldd r18,Z+8
 3165 0d8e 2130      		cpi r18,lo8(1)
 3166 0d90 01F4      		brne .L90
1023:router.c      ****     {
1024:router.c      ****         // DMA is done transmitting,
1025:router.c      ****         // automagically starts receiving, see doDownstreamUSART_TXDONE_ISR()
1026:router.c      ****         // clear the flag, reset the timeout counter
1027:router.c      ****         DownStreamConfig[i].downstreamDoneFlag = 0;
 3167               		.loc 1 1027 0
 3168 0d92 1086      		std Z+8,__zero_reg__
1028:router.c      ****         cli();
 3169               		.loc 1 1028 0
 3170               	/* #APP */
 3171               	 ;  1028 "router.c" 1
 3172 0d94 F894      		cli
 3173               	 ;  0 "" 2
1029:router.c      ****         dmaTimeoutCounter[i] = DOWNSTREAM_TIMEOUT_4KHZ;
 3174               		.loc 1 1029 0
 3175               	/* #NOAPP */
 3176 0d96 FB01      		movw r30,r22
 3177 0d98 E050      		subi r30,lo8(-(dmaTimeoutCounter))
 3178 0d9a F040      		sbci r31,hi8(-(dmaTimeoutCounter))
 3179 0d9c 25E0      		ldi r18,lo8(5)
 3180 0d9e 2083      		st Z,r18
1030:router.c      ****         sei();
 3181               		.loc 1 1030 0
 3182               	/* #APP */
 3183               	 ;  1030 "router.c" 1
 3184 0da0 7894      		sei
 3185               	 ;  0 "" 2
 3186               	/* #NOAPP */
 3187               	.L90:
1031:router.c      ****     }
1032:router.c      ****   
1033:router.c      ****     if(DownStreamConfig[i].sizeReceived > 0)
 3188               		.loc 1 1033 0
 3189 0da2 860F      		add r24,r22
 3190 0da4 971F      		adc r25,r23
 3191 0da6 880F      		lsl r24
 3192 0da8 991F      		rol r25
 3193 0daa 880F      		lsl r24
 3194 0dac 991F      		rol r25
 3195 0dae 8050      		subi r24,lo8(-(DownStreamConfig))
 3196 0db0 9040      		sbci r25,hi8(-(DownStreamConfig))
 3197 0db2 DC01      		movw r26,r24
 3198 0db4 1796      		adiw r26,7
 3199 0db6 8C91      		ld r24,X
 3200 0db8 1797      		sbiw r26,7
 3201 0dba 8823      		tst r24
 3202 0dbc 01F4      		brne .+2
 3203 0dbe 00C0      		rjmp .L91
1034:router.c      ****     {
1035:router.c      ****         //DMA is done receiving
1036:router.c      ****         // continueChain() will zero out .sizeReceived[]
1037:router.c      ****         // check if a second response is expected
1038:router.c      ****         if(continueChain(&DownStreamConfig[i]))
 3204               		.loc 1 1038 0
 3205 0dc0 842F      		mov r24,r20
 3206 0dc2 90E0      		ldi r25,lo8(0)
 3207 0dc4 FC01      		movw r30,r24
 3208 0dc6 EE0F      		lsl r30
 3209 0dc8 FF1F      		rol r31
 3210 0dca E80F      		add r30,r24
 3211 0dcc F91F      		adc r31,r25
 3212 0dce EE0F      		lsl r30
 3213 0dd0 FF1F      		rol r31
 3214 0dd2 EE0F      		lsl r30
 3215 0dd4 FF1F      		rol r31
 3216 0dd6 E050      		subi r30,lo8(-(DownStreamConfig))
 3217 0dd8 F040      		sbci r31,hi8(-(DownStreamConfig))
 3218               	.LVL83:
 3219               	.LBB95:
 3220               	.LBB96:
 902:router.c      ****     SERIAL_STREAM_t activeStream = targetChannelConfig->activeStream;
 3221               		.loc 1 902 0
 3222 0dda 8185      		ldd r24,Z+9
 3223               	.LVL84:
 905:router.c      ****     if(targetChannelConfig->isFirst)
 3224               		.loc 1 905 0
 3225 0ddc 9285      		ldd r25,Z+10
 3226 0dde A82F      		mov r26,r24
 3227 0de0 B0E0      		ldi r27,lo8(0)
 907:router.c      ****         *(allFirstSlaveSizes[activeStream]) = targetChannelConfig->sizeReceived;
 3228               		.loc 1 907 0
 3229 0de2 AA0F      		lsl r26
 3230 0de4 BB1F      		rol r27
 905:router.c      ****     if(targetChannelConfig->isFirst)
 3231               		.loc 1 905 0
 3232 0de6 9923      		tst r25
 3233 0de8 01F0      		breq .L92
 907:router.c      ****         *(allFirstSlaveSizes[activeStream]) = targetChannelConfig->sizeReceived;
 3234               		.loc 1 907 0
 3235 0dea A050      		subi r26,lo8(-(allFirstSlaveSizes))
 3236 0dec B040      		sbci r27,hi8(-(allFirstSlaveSizes))
 3237 0dee 00C0      		rjmp .L103
 3238               	.L92:
 911:router.c      ****         *(allSecondSlaveSizes[activeStream]) = targetChannelConfig->sizeReceived;
 3239               		.loc 1 911 0
 3240 0df0 A050      		subi r26,lo8(-(allSecondSlaveSizes))
 3241 0df2 B040      		sbci r27,hi8(-(allSecondSlaveSizes))
 3242               	.L103:
 3243 0df4 0D90      		ld __tmp_reg__,X+
 3244 0df6 BC91      		ld r27,X
 3245 0df8 A02D      		mov r26,__tmp_reg__
 3246 0dfa 9781      		ldd r25,Z+7
 3247 0dfc 9C93      		st X,r25
 915:router.c      ****     targetChannelConfig->sizeReceived = 0;
 3248               		.loc 1 915 0
 3249 0dfe 1782      		std Z+7,__zero_reg__
 916:router.c      ****     targetChannelConfig->downstreamDoneFlag = 0;
 3250               		.loc 1 916 0
 3251 0e00 1086      		std Z+8,__zero_reg__
 918:router.c      ****     if((allSecondSlaveBuffers[activeStream] == NULL) || (targetChannelConfig->isFirst == 0))
 3252               		.loc 1 918 0
 3253 0e02 90E0      		ldi r25,lo8(0)
 3254 0e04 880F      		lsl r24
 3255 0e06 991F      		rol r25
 3256 0e08 DC01      		movw r26,r24
 3257 0e0a A050      		subi r26,lo8(-(allSecondSlaveBuffers))
 3258 0e0c B040      		sbci r27,hi8(-(allSecondSlaveBuffers))
 3259 0e0e 2D91      		ld r18,X+
 3260 0e10 3C91      		ld r19,X
 3261 0e12 1197      		sbiw r26,1
 3262 0e14 2115      		cp r18,__zero_reg__
 3263 0e16 3105      		cpc r19,__zero_reg__
 3264 0e18 01F4      		brne .+2
 3265 0e1a 00C0      		rjmp .L101
 3266 0e1c 5285      		ldd r21,Z+10
 3267 0e1e 5523      		tst r21
 3268 0e20 01F4      		brne .+2
 3269 0e22 00C0      		rjmp .L101
 925:router.c      ****     targetChannelConfig->isFirst = 0;
 3270               		.loc 1 925 0
 3271 0e24 1286      		std Z+10,__zero_reg__
 926:router.c      ****     targetChannelConfig->isActive = 1;
 3272               		.loc 1 926 0
 3273 0e26 51E0      		ldi r21,lo8(1)
 3274 0e28 5387      		std Z+11,r21
 927:router.c      ****     targetChannelConfig->targetBuffer = allSecondSlaveBuffers[activeStream];
 3275               		.loc 1 927 0
 3276 0e2a 2483      		std Z+4,r18
 3277 0e2c 3583      		std Z+5,r19
 928:router.c      ****     USARTtoCHANNELS[activeStream] = targetChannelConfig;
 3278               		.loc 1 928 0
 3279 0e2e DC01      		movw r26,r24
 3280 0e30 A050      		subi r26,lo8(-(USARTtoCHANNELS))
 3281 0e32 B040      		sbci r27,hi8(-(USARTtoCHANNELS))
 3282 0e34 ED93      		st X+,r30
 3283 0e36 FC93      		st X,r31
 929:router.c      ****     allUSARTS[activeStream]->STATUS = USART_TXCIF_bm;
 3284               		.loc 1 929 0
 3285 0e38 8050      		subi r24,lo8(-(allUSARTS))
 3286 0e3a 9040      		sbci r25,hi8(-(allUSARTS))
 3287 0e3c EC01      		movw r28,r24
 3288 0e3e A881      		ld r26,Y
 3289 0e40 B981      		ldd r27,Y+1
 3290 0e42 80E4      		ldi r24,lo8(64)
 3291 0e44 1196      		adiw r26,1
 3292 0e46 8C93      		st X,r24
 930:router.c      ****     targetChannelConfig->usart->CTRLA |= USART_RXCINTLVL_MED_gc;
 3293               		.loc 1 930 0
 3294 0e48 0190      		ld __tmp_reg__,Z+
 3295 0e4a F081      		ld r31,Z
 3296 0e4c E02D      		mov r30,__tmp_reg__
 3297               	.LVL85:
 3298 0e4e 8381      		ldd r24,Z+3
 3299 0e50 8062      		ori r24,lo8(32)
 3300 0e52 8383      		std Z+3,r24
 3301               	.LBE96:
 3302               	.LBE95:
1039:router.c      ****         {
1040:router.c      ****             //This chain is done.
1041:router.c      ****             return(1);
1042:router.c      ****         }
1043:router.c      ****         else
1044:router.c      ****         {
1045:router.c      ****             // wait for the second response
1046:router.c      ****             cli();
 3303               		.loc 1 1046 0
 3304               	/* #APP */
 3305               	 ;  1046 "router.c" 1
 3306 0e54 F894      		cli
 3307               	 ;  0 "" 2
1047:router.c      ****             dmaTimeoutCounter[i] = DOWNSTREAM_TIMEOUT_4KHZ;
 3308               		.loc 1 1047 0
 3309               	/* #NOAPP */
 3310 0e56 FB01      		movw r30,r22
 3311 0e58 E050      		subi r30,lo8(-(dmaTimeoutCounter))
 3312 0e5a F040      		sbci r31,hi8(-(dmaTimeoutCounter))
 3313 0e5c 85E0      		ldi r24,lo8(5)
 3314 0e5e 8083      		st Z,r24
1048:router.c      ****             sei();
 3315               		.loc 1 1048 0
 3316               	/* #APP */
 3317               	 ;  1048 "router.c" 1
 3318 0e60 7894      		sei
 3319               	 ;  0 "" 2
 3320               	.LVL86:
 3321               	/* #NOAPP */
 3322               	.L91:
1049:router.c      ****         }
1050:router.c      ****     }
1051:router.c      ****   
1052:router.c      ****     if(!(dmaTimeoutCounter[i]))
 3323               		.loc 1 1052 0
 3324 0e62 DB01      		movw r26,r22
 3325 0e64 A050      		subi r26,lo8(-(dmaTimeoutCounter))
 3326 0e66 B040      		sbci r27,hi8(-(dmaTimeoutCounter))
 3327 0e68 8C91      		ld r24,X
 3328 0e6a 8823      		tst r24
 3329 0e6c 01F0      		breq .+2
 3330 0e6e 00C0      		rjmp .L102
1053:router.c      ****     {
1054:router.c      ****         //DMA timed out.  Reset it and mark done
1055:router.c      ****         DownStreamConfig[i].isActive = 0;
 3331               		.loc 1 1055 0
 3332 0e70 CB01      		movw r24,r22
 3333 0e72 880F      		lsl r24
 3334 0e74 991F      		rol r25
 3335 0e76 FC01      		movw r30,r24
 3336 0e78 E60F      		add r30,r22
 3337 0e7a F71F      		adc r31,r23
 3338 0e7c EE0F      		lsl r30
 3339 0e7e FF1F      		rol r31
 3340 0e80 EE0F      		lsl r30
 3341 0e82 FF1F      		rol r31
 3342 0e84 E050      		subi r30,lo8(-(DownStreamConfig))
 3343 0e86 F040      		sbci r31,hi8(-(DownStreamConfig))
 3344 0e88 1386      		std Z+11,__zero_reg__
1056:router.c      ****         dmaTimeoutCounter[i] = DOWNSTREAM_TIMEOUT_4KHZ;
 3345               		.loc 1 1056 0
 3346 0e8a 25E0      		ldi r18,lo8(5)
 3347 0e8c 2C93      		st X,r18
1057:router.c      ****         switch(i)
 3348               		.loc 1 1057 0
 3349 0e8e 4130      		cpi r20,lo8(1)
 3350 0e90 01F0      		breq .L97
 3351 0e92 4130      		cpi r20,lo8(1)
 3352 0e94 00F0      		brlo .L96
 3353 0e96 4230      		cpi r20,lo8(2)
 3354 0e98 01F0      		breq .L98
 3355 0e9a 4330      		cpi r20,lo8(3)
 3356 0e9c 01F4      		brne .L95
 3357 0e9e 00C0      		rjmp .L104
 3358               	.L96:
1058:router.c      ****         {
1059:router.c      ****             case 0 :
1060:router.c      ****                 DOWNSTREAM0_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
 3359               		.loc 1 1060 0
 3360 0ea0 2091 1001 		lds r18,272
 3361 0ea4 2F77      		andi r18,lo8(127)
 3362 0ea6 E0E0      		ldi r30,lo8(256)
 3363 0ea8 F1E0      		ldi r31,hi8(256)
 3364 0eaa 208B      		std Z+16,r18
1061:router.c      ****                 break;
 3365               		.loc 1 1061 0
 3366 0eac 00C0      		rjmp .L95
 3367               	.L97:
1062:router.c      ****             case 1 :
1063:router.c      ****                 DOWNSTREAM1_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
 3368               		.loc 1 1063 0
 3369 0eae 2091 2001 		lds r18,288
 3370 0eb2 2F77      		andi r18,lo8(127)
 3371 0eb4 E0E0      		ldi r30,lo8(256)
 3372 0eb6 F1E0      		ldi r31,hi8(256)
 3373 0eb8 20A3      		std Z+32,r18
1064:router.c      ****                 break;
 3374               		.loc 1 1064 0
 3375 0eba 00C0      		rjmp .L95
 3376               	.L98:
1065:router.c      ****             case 2 :
1066:router.c      ****                 DOWNSTREAM2_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
 3377               		.loc 1 1066 0
 3378 0ebc 2091 3001 		lds r18,304
 3379 0ec0 2F77      		andi r18,lo8(127)
 3380 0ec2 E0E0      		ldi r30,lo8(256)
 3381 0ec4 F1E0      		ldi r31,hi8(256)
 3382 0ec6 20AB      		std Z+48,r18
1067:router.c      ****                 break;
 3383               		.loc 1 1067 0
 3384 0ec8 00C0      		rjmp .L95
 3385               	.L104:
1068:router.c      ****             case 3 :
1069:router.c      ****                 DOWNSTREAM3_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
 3386               		.loc 1 1069 0
 3387 0eca 2091 4001 		lds r18,320
 3388 0ece 2F77      		andi r18,lo8(127)
 3389 0ed0 2093 4001 		sts 320,r18
 3390               	.L95:
1070:router.c      ****                 break;
1071:router.c      ****         }
1072:router.c      ****         //Disable interrupts on the USART
1073:router.c      ****         DownStreamConfig[i].usart->CTRLA = 0x00;
 3391               		.loc 1 1073 0
 3392 0ed4 860F      		add r24,r22
 3393 0ed6 971F      		adc r25,r23
 3394 0ed8 880F      		lsl r24
 3395 0eda 991F      		rol r25
 3396 0edc 880F      		lsl r24
 3397 0ede 991F      		rol r25
 3398 0ee0 8050      		subi r24,lo8(-(DownStreamConfig))
 3399 0ee2 9040      		sbci r25,hi8(-(DownStreamConfig))
 3400 0ee4 DC01      		movw r26,r24
 3401 0ee6 ED91      		ld r30,X+
 3402 0ee8 FC91      		ld r31,X
 3403 0eea 1197      		sbiw r26,1
 3404 0eec 1382      		std Z+3,__zero_reg__
 3405               	.L101:
 3406               	.LBB98:
 3407               	.LBB97:
1041:router.c      ****             return(1);
 3408               		.loc 1 1041 0
 3409 0eee 81E0      		ldi r24,lo8(1)
 3410 0ef0 00C0      		rjmp .L94
 3411               	.L102:
 3412               	.LBE97:
 3413               	.LBE98:
1074:router.c      ****         return(1);
1075:router.c      ****     }
1076:router.c      **** 
1077:router.c      ****     return(0);
 3414               		.loc 1 1077 0
 3415 0ef2 80E0      		ldi r24,lo8(0)
 3416               	.L94:
 3417               	/* epilogue start */
1078:router.c      **** }
 3418               		.loc 1 1078 0
 3419 0ef4 DF91      		pop r29
 3420 0ef6 CF91      		pop r28
 3421 0ef8 0895      		ret
 3422               		.cfi_endproc
 3423               	.LFE35:
 3425               	.global	tendMTRchain
 3427               	tendMTRchain:
 3428               	.LFB36:
1079:router.c      **** 
1080:router.c      **** uint8_t tendMTRchain(uint8_t i)
1081:router.c      **** {
 3429               		.loc 1 1081 0
 3430               		.cfi_startproc
 3431               	.LVL87:
 3432 0efa CF93      		push r28
 3433               	.LCFI211:
 3434               		.cfi_def_cfa_offset 4
 3435               		.cfi_offset 28, -3
 3436 0efc DF93      		push r29
 3437               	.LCFI212:
 3438               		.cfi_def_cfa_offset 5
 3439               		.cfi_offset 29, -4
 3440               	/* prologue: function */
 3441               	/* frame size = 0 */
 3442               	/* stack size = 2 */
 3443               	.L__stack_usage = 2
 3444 0efe 282F      		mov r18,r24
1082:router.c      ****     // are the motors done?
1083:router.c      ****     if(DownStreamConfig[i].sizeReceived > 0)
 3445               		.loc 1 1083 0
 3446 0f00 682F      		mov r22,r24
 3447 0f02 70E0      		ldi r23,lo8(0)
 3448 0f04 AB01      		movw r20,r22
 3449 0f06 440F      		lsl r20
 3450 0f08 551F      		rol r21
 3451 0f0a FA01      		movw r30,r20
 3452 0f0c E60F      		add r30,r22
 3453 0f0e F71F      		adc r31,r23
 3454 0f10 EE0F      		lsl r30
 3455 0f12 FF1F      		rol r31
 3456 0f14 EE0F      		lsl r30
 3457 0f16 FF1F      		rol r31
 3458 0f18 E050      		subi r30,lo8(-(DownStreamConfig))
 3459 0f1a F040      		sbci r31,hi8(-(DownStreamConfig))
 3460 0f1c 8781      		ldd r24,Z+7
 3461               	.LVL88:
 3462 0f1e 8823      		tst r24
 3463 0f20 01F4      		brne .+2
 3464 0f22 00C0      		rjmp .L106
1084:router.c      ****     {
1085:router.c      ****         //preserve the length
1086:router.c      ****         if(DownStreamConfig[i].isFirst)
 3465               		.loc 1 1086 0
 3466 0f24 8285      		ldd r24,Z+10
1087:router.c      ****         {
1088:router.c      ****             *(allFirstSlaveSizes[i]) = DownStreamConfig[i].sizeReceived;
 3467               		.loc 1 1088 0
 3468 0f26 DA01      		movw r26,r20
1086:router.c      ****         if(DownStreamConfig[i].isFirst)
 3469               		.loc 1 1086 0
 3470 0f28 8823      		tst r24
 3471 0f2a 01F0      		breq .L107
 3472               		.loc 1 1088 0
 3473 0f2c A050      		subi r26,lo8(-(allFirstSlaveSizes))
 3474 0f2e B040      		sbci r27,hi8(-(allFirstSlaveSizes))
 3475 0f30 00C0      		rjmp .L113
 3476               	.L107:
1089:router.c      ****         }
1090:router.c      ****         else
1091:router.c      ****         {
1092:router.c      ****             *(allSecondSlaveSizes[i]) = DownStreamConfig[i].sizeReceived;
 3477               		.loc 1 1092 0
 3478 0f32 A050      		subi r26,lo8(-(allSecondSlaveSizes))
 3479 0f34 B040      		sbci r27,hi8(-(allSecondSlaveSizes))
 3480               	.L113:
 3481 0f36 0D90      		ld __tmp_reg__,X+
 3482 0f38 BC91      		ld r27,X
 3483 0f3a A02D      		mov r26,__tmp_reg__
 3484 0f3c 8781      		ldd r24,Z+7
 3485 0f3e 8C93      		st X,r24
1093:router.c      ****         }
1094:router.c      ****       
1095:router.c      ****         //Clean out the structure
1096:router.c      ****         DownStreamConfig[i].sizeReceived=0;
 3486               		.loc 1 1096 0
 3487 0f40 FA01      		movw r30,r20
 3488 0f42 E60F      		add r30,r22
 3489 0f44 F71F      		adc r31,r23
 3490 0f46 EE0F      		lsl r30
 3491 0f48 FF1F      		rol r31
 3492 0f4a EE0F      		lsl r30
 3493 0f4c FF1F      		rol r31
 3494 0f4e E050      		subi r30,lo8(-(DownStreamConfig))
 3495 0f50 F040      		sbci r31,hi8(-(DownStreamConfig))
 3496 0f52 1782      		std Z+7,__zero_reg__
1097:router.c      ****         DownStreamConfig[i].downstreamDoneFlag=0;
 3497               		.loc 1 1097 0
 3498 0f54 1086      		std Z+8,__zero_reg__
1098:router.c      ****       
1099:router.c      ****         //is another reply expected?
1100:router.c      ****         if((allSecondSlaveBuffers[i] == NULL) || (DownStreamConfig[i].isFirst == 0))
 3499               		.loc 1 1100 0
 3500 0f56 DA01      		movw r26,r20
 3501 0f58 A050      		subi r26,lo8(-(allSecondSlaveBuffers))
 3502 0f5a B040      		sbci r27,hi8(-(allSecondSlaveBuffers))
 3503 0f5c 8D91      		ld r24,X+
 3504 0f5e 9C91      		ld r25,X
 3505 0f60 1197      		sbiw r26,1
 3506 0f62 0097      		sbiw r24,0
 3507 0f64 01F0      		breq .L109
 3508               		.loc 1 1100 0 is_stmt 0 discriminator 1
 3509 0f66 3285      		ldd r19,Z+10
 3510 0f68 3323      		tst r19
 3511 0f6a 01F4      		brne .L110
 3512               	.L109:
1101:router.c      ****         {
1102:router.c      ****             //No continuation.  Chain is done
1103:router.c      ****             DownStreamConfig[i].isActive = 0;
 3513               		.loc 1 1103 0 is_stmt 1
 3514 0f6c FB01      		movw r30,r22
 3515 0f6e EE0F      		lsl r30
 3516 0f70 FF1F      		rol r31
 3517 0f72 E60F      		add r30,r22
 3518 0f74 F71F      		adc r31,r23
 3519 0f76 EE0F      		lsl r30
 3520 0f78 FF1F      		rol r31
 3521 0f7a EE0F      		lsl r30
 3522 0f7c FF1F      		rol r31
 3523 0f7e E050      		subi r30,lo8(-(DownStreamConfig))
 3524 0f80 F040      		sbci r31,hi8(-(DownStreamConfig))
 3525 0f82 1386      		std Z+11,__zero_reg__
 3526 0f84 00C0      		rjmp .L114
 3527               	.L110:
 3528               	.LVL89:
 3529               	.LBB101:
 3530               	.LBB102:
1104:router.c      ****             return(1);
1105:router.c      ****         }
1106:router.c      ****         else
1107:router.c      ****         {
1108:router.c      ****             //Another reply is expected.  Rearm the channel
1109:router.c      ****             DownStreamConfig[i].isFirst = 0;
 3531               		.loc 1 1109 0
 3532 0f86 1286      		std Z+10,__zero_reg__
1110:router.c      ****             DownStreamConfig[i].isActive = 1;
 3533               		.loc 1 1110 0
 3534 0f88 31E0      		ldi r19,lo8(1)
 3535 0f8a 3387      		std Z+11,r19
1111:router.c      ****             DownStreamConfig[i].targetBuffer = allSecondSlaveBuffers[i];
 3536               		.loc 1 1111 0
 3537 0f8c 8483      		std Z+4,r24
 3538 0f8e 9583      		std Z+5,r25
1112:router.c      ****             USARTtoCHANNELS[i] = &DownStreamConfig[i];
 3539               		.loc 1 1112 0
 3540 0f90 DA01      		movw r26,r20
 3541 0f92 A050      		subi r26,lo8(-(USARTtoCHANNELS))
 3542 0f94 B040      		sbci r27,hi8(-(USARTtoCHANNELS))
 3543 0f96 30E0      		ldi r19,lo8(0)
 3544 0f98 C901      		movw r24,r18
 3545 0f9a 880F      		lsl r24
 3546 0f9c 991F      		rol r25
 3547 0f9e 820F      		add r24,r18
 3548 0fa0 931F      		adc r25,r19
 3549 0fa2 880F      		lsl r24
 3550 0fa4 991F      		rol r25
 3551 0fa6 880F      		lsl r24
 3552 0fa8 991F      		rol r25
 3553 0faa 8050      		subi r24,lo8(-(DownStreamConfig))
 3554 0fac 9040      		sbci r25,hi8(-(DownStreamConfig))
 3555 0fae 8D93      		st X+,r24
 3556 0fb0 9C93      		st X,r25
1113:router.c      ****             allUSARTS[i]->STATUS = USART_TXCIF_bm; // clear the transmission done bit
 3557               		.loc 1 1113 0
 3558 0fb2 4050      		subi r20,lo8(-(allUSARTS))
 3559 0fb4 5040      		sbci r21,hi8(-(allUSARTS))
 3560 0fb6 EA01      		movw r28,r20
 3561 0fb8 A881      		ld r26,Y
 3562 0fba B981      		ldd r27,Y+1
 3563 0fbc 80E4      		ldi r24,lo8(64)
 3564 0fbe 1196      		adiw r26,1
 3565 0fc0 8C93      		st X,r24
 3566 0fc2 1197      		sbiw r26,1
1114:router.c      ****             //DownStreamConfig[i].usart->CTRLA |= USART_RXCINTLVL_MED_gc;
1115:router.c      ****             DownStreamConfig[i].usart->CTRLA = USART_RXCINTLVL_LO_gc;
 3567               		.loc 1 1115 0
 3568 0fc4 0190      		ld __tmp_reg__,Z+
 3569 0fc6 F081      		ld r31,Z
 3570 0fc8 E02D      		mov r30,__tmp_reg__
 3571 0fca 80E1      		ldi r24,lo8(16)
 3572 0fcc 8383      		std Z+3,r24
1116:router.c      ****             cli();
 3573               		.loc 1 1116 0
 3574               	/* #APP */
 3575               	 ;  1116 "router.c" 1
 3576 0fce F894      		cli
 3577               	 ;  0 "" 2
1117:router.c      ****             mtRXbyte[i-4]=0;       // get ready for start of packet
 3578               		.loc 1 1117 0
 3579               	/* #NOAPP */
 3580 0fd0 FB01      		movw r30,r22
 3581 0fd2 E050      		subi r30,lo8(-(mtRXbyte-4))
 3582 0fd4 F040      		sbci r31,hi8(-(mtRXbyte-4))
 3583 0fd6 1082      		st Z,__zero_reg__
1118:router.c      ****             dmaTimeoutCounter[i]=DOWNSTREAM_TIMEOUT_4KHZ;
 3584               		.loc 1 1118 0
 3585 0fd8 6050      		subi r22,lo8(-(dmaTimeoutCounter))
 3586 0fda 7040      		sbci r23,hi8(-(dmaTimeoutCounter))
 3587 0fdc 85E0      		ldi r24,lo8(5)
 3588 0fde FB01      		movw r30,r22
 3589 0fe0 8083      		st Z,r24
1119:router.c      ****             sei();
 3590               		.loc 1 1119 0
 3591               	/* #APP */
 3592               	 ;  1119 "router.c" 1
 3593 0fe2 7894      		sei
 3594               	 ;  0 "" 2
 3595               	/* #NOAPP */
 3596 0fe4 00C0      		rjmp .L112
 3597               	.LVL90:
 3598               	.L106:
 3599               	.LBE102:
 3600               	.LBE101:
1120:router.c      ****             return(0);
1121:router.c      ****         }
1122:router.c      ****     }
1123:router.c      ****   
1124:router.c      ****     if(!(dmaTimeoutCounter[i]))
 3601               		.loc 1 1124 0
 3602 0fe6 DB01      		movw r26,r22
 3603 0fe8 A050      		subi r26,lo8(-(dmaTimeoutCounter))
 3604 0fea B040      		sbci r27,hi8(-(dmaTimeoutCounter))
 3605 0fec 8C91      		ld r24,X
 3606 0fee 8823      		tst r24
 3607 0ff0 01F4      		brne .L112
1125:router.c      ****     {
1126:router.c      ****         DownStreamConfig[i].isActive = 0;
 3608               		.loc 1 1126 0
 3609 0ff2 1386      		std Z+11,__zero_reg__
1127:router.c      ****         dmaTimeoutCounter[i]=DOWNSTREAM_TIMEOUT_4KHZ;
 3610               		.loc 1 1127 0
 3611 0ff4 85E0      		ldi r24,lo8(5)
 3612 0ff6 8C93      		st X,r24
 3613               	.L114:
1128:router.c      ****         // timeout: mark chain done, move on.
1129:router.c      ****         return(1);
 3614               		.loc 1 1129 0
 3615 0ff8 81E0      		ldi r24,lo8(1)
 3616 0ffa 00C0      		rjmp .L111
 3617               	.L112:
1130:router.c      ****     }
1131:router.c      ****     return(0);
 3618               		.loc 1 1131 0
 3619 0ffc 80E0      		ldi r24,lo8(0)
 3620               	.L111:
 3621               	/* epilogue start */
1132:router.c      **** }
 3622               		.loc 1 1132 0
 3623 0ffe DF91      		pop r29
 3624 1000 CF91      		pop r28
 3625 1002 0895      		ret
 3626               		.cfi_endproc
 3627               	.LFE36:
 3629               	.global	doBroadcast
 3631               	doBroadcast:
 3632               	.LFB37:
1133:router.c      **** 
1134:router.c      **** /************************************************************************
1135:router.c      ****  * doBroadcast()
1136:router.c      ****  *
1137:router.c      ****  * Actually sends data downstream.
1138:router.c      ****  * Three DMA engines are used to pass data to three active streams
1139:router.c      ****  * When these finish or timeout, the DMA engines are re-allocated to the remaining
1140:router.c      ****  * streams for transmission.  When all are finished, the final response to the Overo
1141:router.c      ****  * is combined and delivered by Upstream DMA.  The response itself is ping-ponged
1142:router.c      ****  * at a higher level.
1143:router.c      ****  ************************************************************************/
1144:router.c      **** void doBroadcast(volatile uint8_t *activeUpstreamBuffer, volatile uint8_t *commandPacketBuffer)
1145:router.c      **** {
 3633               		.loc 1 1145 0
 3634               		.cfi_startproc
 3635               	.LVL91:
 3636 1004 EF92      		push r14
 3637               	.LCFI213:
 3638               		.cfi_def_cfa_offset 4
 3639               		.cfi_offset 14, -3
 3640 1006 FF92      		push r15
 3641               	.LCFI214:
 3642               		.cfi_def_cfa_offset 5
 3643               		.cfi_offset 15, -4
 3644 1008 0F93      		push r16
 3645               	.LCFI215:
 3646               		.cfi_def_cfa_offset 6
 3647               		.cfi_offset 16, -5
 3648 100a 1F93      		push r17
 3649               	.LCFI216:
 3650               		.cfi_def_cfa_offset 7
 3651               		.cfi_offset 17, -6
 3652 100c CF93      		push r28
 3653               	.LCFI217:
 3654               		.cfi_def_cfa_offset 8
 3655               		.cfi_offset 28, -7
 3656 100e DF93      		push r29
 3657               	.LCFI218:
 3658               		.cfi_def_cfa_offset 9
 3659               		.cfi_offset 29, -8
 3660               	/* prologue: function */
 3661               	/* frame size = 0 */
 3662               	/* stack size = 6 */
 3663               	.L__stack_usage = 6
 3664 1010 7C01      		movw r14,r24
 3665 1012 8B01      		movw r16,r22
 3666               	.LVL92:
1146:router.c      ****     uint16_t packetSize;
1147:router.c      ****     uint8_t chainsDone = 0;
1148:router.c      **** 
1149:router.c      ****     //The packet is a broadcast.  Create the two different variants for transmission (to length 1 a
1150:router.c      ****     memcpy((uint8_t *)shortXmitBuffer,(uint8_t *)commandPacketBuffer,COMMAND_PACKET_SIZE);
 3667               		.loc 1 1150 0
 3668 1014 A0E0      		ldi r26,lo8(shortXmitBuffer)
 3669 1016 B0E0      		ldi r27,hi8(shortXmitBuffer)
 3670 1018 FB01      		movw r30,r22
 3671 101a 87E0      		ldi r24,lo8(7)
 3672               	.LVL93:
 3673               	.L116:
 3674 101c 0190      		ld r0,Z+
 3675 101e 0D92      		st X+,r0
 3676 1020 8150      		subi r24,lo8(-(-1))
 3677 1022 01F4      		brne .L116
1151:router.c      ****     memcpy((uint8_t *)longXmitBuffer,(uint8_t *)commandPacketBuffer,COMMAND_PACKET_SIZE);
 3678               		.loc 1 1151 0
 3679 1024 A0E0      		ldi r26,lo8(longXmitBuffer)
 3680 1026 B0E0      		ldi r27,hi8(longXmitBuffer)
 3681 1028 F801      		movw r30,r16
 3682 102a 87E0      		ldi r24,lo8(7)
 3683               	.L117:
 3684 102c 0190      		ld r0,Z+
 3685 102e 0D92      		st X+,r0
 3686 1030 8150      		subi r24,lo8(-(-1))
 3687 1032 01F4      		brne .L117
1152:router.c      **** 
1153:router.c      ****     shortXmitBuffer[DESTINATION_HEADER_OFFSET] = 0xF0;
 3688               		.loc 1 1153 0
 3689 1034 80EF      		ldi r24,lo8(-16)
 3690 1036 8093 0000 		sts shortXmitBuffer,r24
1154:router.c      ****     //Now fix the checksum
1155:router.c      ****     shortXmitBuffer[CHECKSUM_OFFSET] += 0x0F;
 3691               		.loc 1 1155 0
 3692 103a 8091 0000 		lds r24,shortXmitBuffer+6
 3693 103e 815F      		subi r24,lo8(-(15))
 3694 1040 8093 0000 		sts shortXmitBuffer+6,r24
1156:router.c      **** 
1157:router.c      ****     longXmitBuffer[DESTINATION_HEADER_OFFSET] = 0xF1;
 3695               		.loc 1 1157 0
 3696 1044 81EF      		ldi r24,lo8(-15)
 3697 1046 8093 0000 		sts longXmitBuffer,r24
1158:router.c      ****     //Now fix the checksum
1159:router.c      ****     longXmitBuffer[CHECKSUM_OFFSET] += 0x0E;
 3698               		.loc 1 1159 0
 3699 104a 8091 0000 		lds r24,longXmitBuffer+6
 3700 104e 825F      		subi r24,lo8(-(14))
 3701 1050 8093 0000 		sts longXmitBuffer+6,r24
1160:router.c      **** 
1161:router.c      ****     //Now send down finger chains
1162:router.c      ****     respondingDevicesBitfield = 0x0000;
 3702               		.loc 1 1162 0
 3703 1054 1092 0000 		sts respondingDevicesBitfield,__zero_reg__
 3704 1058 1092 0000 		sts respondingDevicesBitfield+1,__zero_reg__
 3705               	.LVL94:
 3706 105c A0E0      		ldi r26,lo8(allFirstSlaveSizes)
 3707 105e B0E0      		ldi r27,hi8(allFirstSlaveSizes)
 3708 1060 C0E0      		ldi r28,lo8(allSecondSlaveSizes)
 3709 1062 D0E0      		ldi r29,hi8(allSecondSlaveSizes)
 3710 1064 80E0      		ldi r24,lo8(allUSARTS)
 3711 1066 90E0      		ldi r25,hi8(allUSARTS)
 3712               	.LBB103:
1163:router.c      **** 
1164:router.c      ****     //Zero out the various flags
1165:router.c      ****     for(int i=0;i<NUMCHAINS;i++)
1166:router.c      ****     {
1167:router.c      ****         *(allFirstSlaveSizes[i]) = 0;
1168:router.c      ****         if(allSecondSlaveSizes[i] != NULL)
1169:router.c      ****         {
1170:router.c      ****             *(allSecondSlaveSizes[i]) = 0;
1171:router.c      ****         }
1172:router.c      ****         allUSARTS[i]->STATUS = USART_TXCIF_bm;
 3713               		.loc 1 1172 0
 3714 1068 20E4      		ldi r18,lo8(64)
 3715               	.LVL95:
 3716               	.L119:
1167:router.c      ****         *(allFirstSlaveSizes[i]) = 0;
 3717               		.loc 1 1167 0
 3718 106a ED91      		ld r30,X+
 3719 106c FD91      		ld r31,X+
 3720 106e 1082      		st Z,__zero_reg__
1168:router.c      ****         if(allSecondSlaveSizes[i] != NULL)
 3721               		.loc 1 1168 0
 3722 1070 E991      		ld r30,Y+
 3723 1072 F991      		ld r31,Y+
 3724 1074 3097      		sbiw r30,0
 3725 1076 01F0      		breq .L118
1170:router.c      ****             *(allSecondSlaveSizes[i]) = 0;
 3726               		.loc 1 1170 0
 3727 1078 1082      		st Z,__zero_reg__
 3728               	.L118:
 3729               		.loc 1 1172 0
 3730 107a FC01      		movw r30,r24
 3731 107c 4191      		ld r20,Z+
 3732 107e 5191      		ld r21,Z+
 3733 1080 CF01      		movw r24,r30
 3734 1082 FA01      		movw r30,r20
 3735 1084 2183      		std Z+1,r18
1165:router.c      ****     for(int i=0;i<NUMCHAINS;i++)
 3736               		.loc 1 1165 0
 3737 1086 F0E0      		ldi r31,hi8(allFirstSlaveSizes+12)
 3738 1088 A030      		cpi r26,lo8(allFirstSlaveSizes+12)
 3739 108a BF07      		cpc r27,r31
 3740 108c 01F4      		brne .L119
 3741               	.LBE103:
1173:router.c      ****     }
1174:router.c      **** 
1175:router.c      **** #define NOT_PARALLEL 1
1176:router.c      **** #ifdef NOT_PARALLEL
1177:router.c      ****     // fire off all four DMA channels
1178:router.c      ****     if (chainMask & TACTILE_CHAINMASK)
 3742               		.loc 1 1178 0
 3743 108e 8091 0000 		lds r24,chainMask
 3744 1092 80FF      		sbrs r24,0
 3745 1094 00C0      		rjmp .L120
1179:router.c      ****     {
1180:router.c      ****         startChain(0,0,(uint8_t *)shortXmitBuffer); //TACT 0
 3746               		.loc 1 1180 0
 3747 1096 80E0      		ldi r24,lo8(0)
 3748 1098 60E0      		ldi r22,lo8(0)
 3749 109a 40E0      		ldi r20,lo8(shortXmitBuffer)
 3750 109c 50E0      		ldi r21,hi8(shortXmitBuffer)
 3751 109e 0E94 0000 		call startChain
 3752               	.L121:
1181:router.c      ****         while(0==tendDMAchain(0));
 3753               		.loc 1 1181 0 discriminator 1
 3754 10a2 80E0      		ldi r24,lo8(0)
 3755 10a4 0E94 0000 		call tendDMAchain
 3756 10a8 8823      		tst r24
 3757 10aa 01F0      		breq .L121
 3758               	.L120:
1182:router.c      ****     }
1183:router.c      ****     if (chainMask & FINGER_1_CHAINMASK)
 3759               		.loc 1 1183 0
 3760 10ac 8091 0000 		lds r24,chainMask
 3761 10b0 81FF      		sbrs r24,1
 3762 10b2 00C0      		rjmp .L122
1184:router.c      ****     {
1185:router.c      ****         startChain(1,1,(uint8_t *)longXmitBuffer); //DIST1 1
 3763               		.loc 1 1185 0
 3764 10b4 81E0      		ldi r24,lo8(1)
 3765 10b6 61E0      		ldi r22,lo8(1)
 3766 10b8 40E0      		ldi r20,lo8(longXmitBuffer)
 3767 10ba 50E0      		ldi r21,hi8(longXmitBuffer)
 3768 10bc 0E94 0000 		call startChain
 3769               	.L123:
1186:router.c      ****         while(0==tendDMAchain(1));
 3770               		.loc 1 1186 0 discriminator 1
 3771 10c0 81E0      		ldi r24,lo8(1)
 3772 10c2 0E94 0000 		call tendDMAchain
 3773 10c6 8823      		tst r24
 3774 10c8 01F0      		breq .L123
 3775               	.L122:
1187:router.c      ****     }
1188:router.c      ****     if (chainMask & FINGER_2_CHAINMASK)
 3776               		.loc 1 1188 0
 3777 10ca 8091 0000 		lds r24,chainMask
 3778 10ce 82FF      		sbrs r24,2
 3779 10d0 00C0      		rjmp .L124
1189:router.c      ****     {
1190:router.c      ****         startChain(2,2,(uint8_t *)longXmitBuffer); //DIST2 2
 3780               		.loc 1 1190 0
 3781 10d2 82E0      		ldi r24,lo8(2)
 3782 10d4 62E0      		ldi r22,lo8(2)
 3783 10d6 40E0      		ldi r20,lo8(longXmitBuffer)
 3784 10d8 50E0      		ldi r21,hi8(longXmitBuffer)
 3785 10da 0E94 0000 		call startChain
 3786               	.L125:
1191:router.c      ****         while(0==tendDMAchain(2));
 3787               		.loc 1 1191 0 discriminator 1
 3788 10de 82E0      		ldi r24,lo8(2)
 3789 10e0 0E94 0000 		call tendDMAchain
 3790 10e4 8823      		tst r24
 3791 10e6 01F0      		breq .L125
 3792               	.L124:
1192:router.c      ****     }
1193:router.c      ****     if (chainMask & FINGER_3_CHAINMASK)
 3793               		.loc 1 1193 0
 3794 10e8 8091 0000 		lds r24,chainMask
 3795 10ec 83FF      		sbrs r24,3
 3796 10ee 00C0      		rjmp .L126
1194:router.c      ****     {
1195:router.c      ****         startChain(3,3,(uint8_t *)longXmitBuffer); //DIST3 3
 3797               		.loc 1 1195 0
 3798 10f0 83E0      		ldi r24,lo8(3)
 3799 10f2 63E0      		ldi r22,lo8(3)
 3800 10f4 40E0      		ldi r20,lo8(longXmitBuffer)
 3801 10f6 50E0      		ldi r21,hi8(longXmitBuffer)
 3802 10f8 0E94 0000 		call startChain
 3803               	.L127:
1196:router.c      ****         while(0==tendDMAchain(3));
 3804               		.loc 1 1196 0 discriminator 1
 3805 10fc 83E0      		ldi r24,lo8(3)
 3806 10fe 0E94 0000 		call tendDMAchain
 3807 1102 8823      		tst r24
 3808 1104 01F0      		breq .L127
 3809               	.L126:
1197:router.c      ****     }
1198:router.c      **** #else
1199:router.c      ****     // fire off all four DMA channels
1200:router.c      ****     startChain(0,0,(uint8_t *)shortXmitBuffer); //TACT 0
1201:router.c      ****     startChain(1,1,(uint8_t *)longXmitBuffer); //DIST1 1
1202:router.c      ****     startChain(2,2,(uint8_t *)longXmitBuffer); //DIST2 2
1203:router.c      ****     startChain(3,3,(uint8_t *)longXmitBuffer); //DIST3 3
1204:router.c      ****     //Loop through DMA channels and tend until done
1205:router.c      ****     chainsDone = 0;
1206:router.c      ****     while(chainsDone != 0x0f)
1207:router.c      ****     {
1208:router.c      ****         for(uint8_t i=0; i<4; i++)
1209:router.c      ****             if(!(chainsDone & (1<<i))) // only check chains which are not yet done
1210:router.c      ****                 if(tendDMAchain(i))
1211:router.c      ****                     chainsDone |= (1<<i);
1212:router.c      ****     } // block until all four DMAs are done
1213:router.c      **** #endif
1214:router.c      **** 
1215:router.c      **** #ifdef NOT_PARALLEL
1216:router.c      ****     if (chainMask & MOTORS_1_2_CHAINMASK)
 3810               		.loc 1 1216 0
 3811 1106 8091 0000 		lds r24,chainMask
 3812 110a 84FF      		sbrs r24,4
 3813 110c 00C0      		rjmp .L128
1217:router.c      ****     {
1218:router.c      ****         startMtrChain(4);
 3814               		.loc 1 1218 0
 3815 110e 84E0      		ldi r24,lo8(4)
 3816 1110 0E94 0000 		call startMtrChain
 3817               	.LVL96:
1219:router.c      ****         for(int i=0;i<COMMAND_PACKET_SIZE;i++)
 3818               		.loc 1 1219 0
 3819 1114 80E0      		ldi r24,lo8(0)
 3820 1116 90E0      		ldi r25,hi8(0)
 3821               	.LVL97:
 3822               	.L155:
 3823               	.LBB104:
1220:router.c      ****         {
1221:router.c      ****             while(!(MTR1_USART.STATUS & USART_DREIF_bm));
 3824               		.loc 1 1221 0 discriminator 1
 3825 1118 2091 A10A 		lds r18,2721
 3826 111c 25FF      		sbrs r18,5
 3827 111e 00C0      		rjmp .L155
1222:router.c      ****             MTR1_USART.DATA = longXmitBuffer[i];
 3828               		.loc 1 1222 0
 3829 1120 FC01      		movw r30,r24
 3830 1122 E050      		subi r30,lo8(-(longXmitBuffer))
 3831 1124 F040      		sbci r31,hi8(-(longXmitBuffer))
 3832 1126 2081      		ld r18,Z
 3833 1128 2093 A00A 		sts 2720,r18
1219:router.c      ****         for(int i=0;i<COMMAND_PACKET_SIZE;i++)
 3834               		.loc 1 1219 0
 3835 112c 0196      		adiw r24,1
 3836               	.LVL98:
 3837 112e 8730      		cpi r24,7
 3838 1130 9105      		cpc r25,__zero_reg__
 3839 1132 01F4      		brne .L155
 3840               	.LVL99:
 3841               	.L141:
 3842               	.LBE104:
1223:router.c      ****         }
1224:router.c      ****         while(!(MTR1_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
 3843               		.loc 1 1224 0 discriminator 1
 3844 1134 E0EA      		ldi r30,lo8(2720)
 3845 1136 FAE0      		ldi r31,hi8(2720)
 3846 1138 8091 A10A 		lds r24,2721
 3847 113c 85FF      		sbrs r24,5
 3848 113e 00C0      		rjmp .L141
1225:router.c      ****         chainsDone = MTR1_USART.DATA; // dummy read to clear the RXCIF bit
 3849               		.loc 1 1225 0
 3850 1140 8091 A00A 		lds r24,2720
 3851               	.LVL100:
1226:router.c      ****         MTR1_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
 3852               		.loc 1 1226 0
 3853 1144 80E8      		ldi r24,lo8(-128)
 3854 1146 8183      		std Z+1,r24
1227:router.c      ****         //MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
1228:router.c      ****         MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
 3855               		.loc 1 1228 0
 3856 1148 80E1      		ldi r24,lo8(16)
 3857 114a 8383      		std Z+3,r24
1229:router.c      ****         cli();
 3858               		.loc 1 1229 0
 3859               	/* #APP */
 3860               	 ;  1229 "router.c" 1
 3861 114c F894      		cli
 3862               	 ;  0 "" 2
1230:router.c      ****         mtRXbyte[0]=0;       // get ready for start of packet
 3863               		.loc 1 1230 0
 3864               	/* #NOAPP */
 3865 114e 1092 0000 		sts mtRXbyte,__zero_reg__
1231:router.c      ****         dmaTimeoutCounter[4]=DOWNSTREAM_TIMEOUT_4KHZ;
 3866               		.loc 1 1231 0
 3867 1152 85E0      		ldi r24,lo8(5)
 3868 1154 8093 0000 		sts dmaTimeoutCounter+4,r24
1232:router.c      ****         sei();
 3869               		.loc 1 1232 0
 3870               	/* #APP */
 3871               	 ;  1232 "router.c" 1
 3872 1158 7894      		sei
 3873               	 ;  0 "" 2
 3874               	/* #NOAPP */
 3875               	.L132:
1233:router.c      ****         while(0==tendMTRchain(4));
 3876               		.loc 1 1233 0 discriminator 1
 3877 115a 84E0      		ldi r24,lo8(4)
 3878 115c 0E94 0000 		call tendMTRchain
 3879 1160 8823      		tst r24
 3880 1162 01F0      		breq .L132
 3881               	.L128:
1234:router.c      ****     }
1235:router.c      ****     
1236:router.c      ****     if (chainMask & MOTORS_3_4_CHAINMASK)
 3882               		.loc 1 1236 0
 3883 1164 8091 0000 		lds r24,chainMask
 3884 1168 85FF      		sbrs r24,5
 3885 116a 00C0      		rjmp .L133
1237:router.c      ****     {
1238:router.c      ****         startMtrChain(5);
 3886               		.loc 1 1238 0
 3887 116c 85E0      		ldi r24,lo8(5)
 3888 116e 0E94 0000 		call startMtrChain
 3889               	.LVL101:
1239:router.c      ****         for(int i=0;i<COMMAND_PACKET_SIZE;i++)
 3890               		.loc 1 1239 0
 3891 1172 80E0      		ldi r24,lo8(0)
 3892 1174 90E0      		ldi r25,hi8(0)
 3893               	.LVL102:
 3894               	.L156:
 3895               	.LBB105:
1240:router.c      ****         {
1241:router.c      ****             while(!(MTR2_USART.STATUS & USART_DREIF_bm));
 3896               		.loc 1 1241 0 discriminator 1
 3897 1176 2091 B10A 		lds r18,2737
 3898 117a 25FF      		sbrs r18,5
 3899 117c 00C0      		rjmp .L156
1242:router.c      ****             MTR2_USART.DATA = longXmitBuffer[i];
 3900               		.loc 1 1242 0
 3901 117e FC01      		movw r30,r24
 3902 1180 E050      		subi r30,lo8(-(longXmitBuffer))
 3903 1182 F040      		sbci r31,hi8(-(longXmitBuffer))
 3904 1184 2081      		ld r18,Z
 3905 1186 2093 B00A 		sts 2736,r18
1239:router.c      ****         for(int i=0;i<COMMAND_PACKET_SIZE;i++)
 3906               		.loc 1 1239 0
 3907 118a 0196      		adiw r24,1
 3908               	.LVL103:
 3909 118c 8730      		cpi r24,7
 3910 118e 9105      		cpc r25,__zero_reg__
 3911 1190 01F4      		brne .L156
 3912               	.LVL104:
 3913               	.L140:
 3914               	.LBE105:
1243:router.c      ****         }
1244:router.c      ****         while(!(MTR2_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
 3915               		.loc 1 1244 0 discriminator 1
 3916 1192 E0EB      		ldi r30,lo8(2736)
 3917 1194 FAE0      		ldi r31,hi8(2736)
 3918 1196 8091 B10A 		lds r24,2737
 3919 119a 85FF      		sbrs r24,5
 3920 119c 00C0      		rjmp .L140
1245:router.c      ****         chainsDone = MTR2_USART.DATA; // dummy read to clear the RXCIF bit
 3921               		.loc 1 1245 0
 3922 119e 8091 B00A 		lds r24,2736
1246:router.c      ****         MTR2_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
 3923               		.loc 1 1246 0
 3924 11a2 80E8      		ldi r24,lo8(-128)
 3925 11a4 8183      		std Z+1,r24
1247:router.c      ****         //MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
1248:router.c      ****         MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
 3926               		.loc 1 1248 0
 3927 11a6 80E1      		ldi r24,lo8(16)
 3928 11a8 8383      		std Z+3,r24
1249:router.c      ****         cli();
 3929               		.loc 1 1249 0
 3930               	/* #APP */
 3931               	 ;  1249 "router.c" 1
 3932 11aa F894      		cli
 3933               	 ;  0 "" 2
1250:router.c      ****         mtRXbyte[1]=0;       // get ready for start of packet
 3934               		.loc 1 1250 0
 3935               	/* #NOAPP */
 3936 11ac 1092 0000 		sts mtRXbyte+1,__zero_reg__
1251:router.c      ****         dmaTimeoutCounter[5]=DOWNSTREAM_TIMEOUT_4KHZ;
 3937               		.loc 1 1251 0
 3938 11b0 85E0      		ldi r24,lo8(5)
 3939 11b2 8093 0000 		sts dmaTimeoutCounter+5,r24
1252:router.c      ****         sei();
 3940               		.loc 1 1252 0
 3941               	/* #APP */
 3942               	 ;  1252 "router.c" 1
 3943 11b6 7894      		sei
 3944               	 ;  0 "" 2
 3945               	/* #NOAPP */
 3946               	.L137:
1253:router.c      ****         while(0==tendMTRchain(5));
 3947               		.loc 1 1253 0 discriminator 1
 3948 11b8 85E0      		ldi r24,lo8(5)
 3949 11ba 0E94 0000 		call tendMTRchain
 3950 11be 8823      		tst r24
 3951 11c0 01F0      		breq .L137
 3952               	.L133:
1254:router.c      ****     }
1255:router.c      ****     
1256:router.c      **** #else
1257:router.c      ****     startMtrChain(4);
1258:router.c      ****     startMtrChain(5);
1259:router.c      ****     for(int i=0;i<COMMAND_PACKET_SIZE;i++)
1260:router.c      ****     {
1261:router.c      ****         while(!(MTR1_USART.STATUS & USART_DREIF_bm));
1262:router.c      ****         MTR1_USART.DATA = longXmitBuffer[i];
1263:router.c      ****         while(!(MTR2_USART.STATUS & USART_DREIF_bm));
1264:router.c      ****         MTR2_USART.DATA = longXmitBuffer[i];
1265:router.c      ****     }
1266:router.c      ****     cli();
1267:router.c      ****     mtRXbyte[0]=0;       // get ready for start of packet
1268:router.c      ****     dmaTimeoutCounter[4]=DOWNSTREAM_TIMEOUT_4KHZ;
1269:router.c      ****     mtRXbyte[1]=0;       // get ready for start of packet
1270:router.c      ****     dmaTimeoutCounter[5]=DOWNSTREAM_TIMEOUT_4KHZ;
1271:router.c      ****     sei();
1272:router.c      ****     while(!(MTR1_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
1273:router.c      ****     while(!(MTR2_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
1274:router.c      ****     chainsDone = MTR1_USART.DATA; // dummy read to clear the RXCIF bit
1275:router.c      ****     MTR1_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
1276:router.c      ****     chainsDone = MTR2_USART.DATA; // dummy read to clear the RXCIF bit
1277:router.c      ****     MTR2_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
1278:router.c      ****     MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
1279:router.c      ****     MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
1280:router.c      **** 
1281:router.c      ****     chainsDone = 0;
1282:router.c      ****     //Loop through all channels and make sure they are kept busy as they become done
1283:router.c      ****     while(chainsDone != 0x30)
1284:router.c      ****     {
1285:router.c      ****         for(uint8_t i=4;i<6;i++)
1286:router.c      ****             if(!(chainsDone & (1<<i))) // only check chains which are not yet done
1287:router.c      ****                 if(tendMTRchain(i))
1288:router.c      ****                     chainsDone |= (1<<i);
1289:router.c      ****     }
1290:router.c      **** #endif
1291:router.c      **** 
1292:router.c      ****     //collect the data from the palm sensor
1293:router.c      ****     palm_packet_size = processCommand((uint8_t *)commandPacketBuffer,(uint8_t *)palm_packet);
 3953               		.loc 1 1293 0
 3954 11c2 C801      		movw r24,r16
 3955 11c4 60E0      		ldi r22,lo8(palm_packet)
 3956 11c6 70E0      		ldi r23,hi8(palm_packet)
 3957 11c8 0E94 0000 		call processCommand
 3958 11cc 8093 0000 		sts palm_packet_size,r24
 3959               	.LVL105:
1294:router.c      **** 
1295:router.c      ****     //Now compute checksums and collect input
1296:router.c      **** 
1297:router.c      ****     packetSize = 0;
1298:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 3960               		.loc 1 1298 0
 3961 11d0 4091 0000 		lds r20,palm_packet_size
 3962 11d4 C701      		movw r24,r14
 3963 11d6 0596      		adiw r24,5
 3964 11d8 60E0      		ldi r22,lo8(palm_packet)
 3965 11da 70E0      		ldi r23,hi8(palm_packet)
 3966 11dc 21E0      		ldi r18,lo8(1)
 3967 11de 30E0      		ldi r19,hi8(1)
 3968 11e0 0E94 0000 		call stuffOutput
 3969 11e4 C82F      		mov r28,r24
 3970 11e6 D0E0      		ldi r29,lo8(0)
 3971               	.LVL106:
1299:router.c      ****                               (uint8_t *)palm_packet, palm_packet_size, RESPONDING_DEVICES_PALM_BIT
1300:router.c      **** 
1301:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 3972               		.loc 1 1301 0
 3973 11e8 4091 0000 		lds r20,prox1_packet_size
 3974 11ec CE01      		movw r24,r28
 3975 11ee 0596      		adiw r24,5
 3976 11f0 8E0D      		add r24,r14
 3977 11f2 9F1D      		adc r25,r15
 3978 11f4 60E0      		ldi r22,lo8(prox1_packet)
 3979 11f6 70E0      		ldi r23,hi8(prox1_packet)
 3980 11f8 22E0      		ldi r18,lo8(2)
 3981 11fa 30E0      		ldi r19,hi8(2)
 3982 11fc 0E94 0000 		call stuffOutput
 3983 1200 C80F      		add r28,r24
 3984 1202 D11D      		adc r29,__zero_reg__
 3985               	.LVL107:
1302:router.c      ****                               (uint8_t *)prox1_packet, prox1_packet_size, RESPONDING_DEVICES_FIRST_
1303:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 3986               		.loc 1 1303 0
 3987 1204 4091 0000 		lds r20,distal1_packet_size
 3988 1208 CE01      		movw r24,r28
 3989 120a 0596      		adiw r24,5
 3990 120c 8E0D      		add r24,r14
 3991 120e 9F1D      		adc r25,r15
 3992 1210 60E0      		ldi r22,lo8(distal1_packet)
 3993 1212 70E0      		ldi r23,hi8(distal1_packet)
 3994 1214 24E0      		ldi r18,lo8(4)
 3995 1216 30E0      		ldi r19,hi8(4)
 3996 1218 0E94 0000 		call stuffOutput
 3997 121c C80F      		add r28,r24
 3998 121e D11D      		adc r29,__zero_reg__
 3999               	.LVL108:
1304:router.c      ****                               (uint8_t *)distal1_packet, distal1_packet_size, RESPONDING_DEVICES_FI
1305:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4000               		.loc 1 1305 0
 4001 1220 4091 0000 		lds r20,prox2_packet_size
 4002 1224 CE01      		movw r24,r28
 4003 1226 0596      		adiw r24,5
 4004 1228 8E0D      		add r24,r14
 4005 122a 9F1D      		adc r25,r15
 4006 122c 60E0      		ldi r22,lo8(prox2_packet)
 4007 122e 70E0      		ldi r23,hi8(prox2_packet)
 4008 1230 28E0      		ldi r18,lo8(8)
 4009 1232 30E0      		ldi r19,hi8(8)
 4010 1234 0E94 0000 		call stuffOutput
 4011 1238 C80F      		add r28,r24
 4012 123a D11D      		adc r29,__zero_reg__
 4013               	.LVL109:
1306:router.c      ****                               (uint8_t *)prox2_packet, prox2_packet_size, RESPONDING_DEVICES_SECOND
1307:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4014               		.loc 1 1307 0
 4015 123c 4091 0000 		lds r20,distal2_packet_size
 4016 1240 CE01      		movw r24,r28
 4017 1242 0596      		adiw r24,5
 4018 1244 8E0D      		add r24,r14
 4019 1246 9F1D      		adc r25,r15
 4020 1248 60E0      		ldi r22,lo8(distal2_packet)
 4021 124a 70E0      		ldi r23,hi8(distal2_packet)
 4022 124c 20E1      		ldi r18,lo8(16)
 4023 124e 30E0      		ldi r19,hi8(16)
 4024 1250 0E94 0000 		call stuffOutput
 4025 1254 C80F      		add r28,r24
 4026 1256 D11D      		adc r29,__zero_reg__
 4027               	.LVL110:
1308:router.c      ****                               (uint8_t *)distal2_packet, distal2_packet_size, RESPONDING_DEVICES_SE
1309:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4028               		.loc 1 1309 0
 4029 1258 4091 0000 		lds r20,prox3_packet_size
 4030 125c CE01      		movw r24,r28
 4031 125e 0596      		adiw r24,5
 4032 1260 8E0D      		add r24,r14
 4033 1262 9F1D      		adc r25,r15
 4034 1264 60E0      		ldi r22,lo8(prox3_packet)
 4035 1266 70E0      		ldi r23,hi8(prox3_packet)
 4036 1268 20E2      		ldi r18,lo8(32)
 4037 126a 30E0      		ldi r19,hi8(32)
 4038 126c 0E94 0000 		call stuffOutput
 4039 1270 C80F      		add r28,r24
 4040 1272 D11D      		adc r29,__zero_reg__
 4041               	.LVL111:
1310:router.c      ****                               (uint8_t *)prox3_packet, prox3_packet_size, RESPONDING_DEVICES_THIRD_
1311:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4042               		.loc 1 1311 0
 4043 1274 4091 0000 		lds r20,distal3_packet_size
 4044 1278 CE01      		movw r24,r28
 4045 127a 0596      		adiw r24,5
 4046 127c 8E0D      		add r24,r14
 4047 127e 9F1D      		adc r25,r15
 4048 1280 60E0      		ldi r22,lo8(distal3_packet)
 4049 1282 70E0      		ldi r23,hi8(distal3_packet)
 4050 1284 20E4      		ldi r18,lo8(64)
 4051 1286 30E0      		ldi r19,hi8(64)
 4052 1288 0E94 0000 		call stuffOutput
 4053 128c C80F      		add r28,r24
 4054 128e D11D      		adc r29,__zero_reg__
 4055               	.LVL112:
1312:router.c      ****                               (uint8_t *)distal3_packet, distal3_packet_size, RESPONDING_DEVICES_TH
1313:router.c      **** 
1314:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4056               		.loc 1 1314 0
 4057 1290 4091 0000 		lds r20,mtr1_packet_size
 4058 1294 CE01      		movw r24,r28
 4059 1296 0596      		adiw r24,5
 4060 1298 8E0D      		add r24,r14
 4061 129a 9F1D      		adc r25,r15
 4062 129c 60E0      		ldi r22,lo8(mtr1_packet)
 4063 129e 70E0      		ldi r23,hi8(mtr1_packet)
 4064 12a0 20E8      		ldi r18,lo8(128)
 4065 12a2 30E0      		ldi r19,hi8(128)
 4066 12a4 0E94 0000 		call stuffOutput
 4067 12a8 C80F      		add r28,r24
 4068 12aa D11D      		adc r29,__zero_reg__
 4069               	.LVL113:
1315:router.c      ****                               (uint8_t *)mtr1_packet, mtr1_packet_size, RESPONDING_DEVICES_FIRST_MO
1316:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4070               		.loc 1 1316 0
 4071 12ac 4091 0000 		lds r20,mtr2_packet_size
 4072 12b0 CE01      		movw r24,r28
 4073 12b2 0596      		adiw r24,5
 4074 12b4 8E0D      		add r24,r14
 4075 12b6 9F1D      		adc r25,r15
 4076 12b8 60E0      		ldi r22,lo8(mtr2_packet)
 4077 12ba 70E0      		ldi r23,hi8(mtr2_packet)
 4078 12bc 20E0      		ldi r18,lo8(256)
 4079 12be 31E0      		ldi r19,hi8(256)
 4080 12c0 0E94 0000 		call stuffOutput
 4081 12c4 C80F      		add r28,r24
 4082 12c6 D11D      		adc r29,__zero_reg__
 4083               	.LVL114:
1317:router.c      ****                               (uint8_t *)mtr2_packet, mtr2_packet_size, RESPONDING_DEVICES_FIRST_MO
1318:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4084               		.loc 1 1318 0
 4085 12c8 4091 0000 		lds r20,mtr3_packet_size
 4086 12cc CE01      		movw r24,r28
 4087 12ce 0596      		adiw r24,5
 4088 12d0 8E0D      		add r24,r14
 4089 12d2 9F1D      		adc r25,r15
 4090 12d4 60E0      		ldi r22,lo8(mtr3_packet)
 4091 12d6 70E0      		ldi r23,hi8(mtr3_packet)
 4092 12d8 20E0      		ldi r18,lo8(512)
 4093 12da 32E0      		ldi r19,hi8(512)
 4094 12dc 0E94 0000 		call stuffOutput
 4095 12e0 C80F      		add r28,r24
 4096 12e2 D11D      		adc r29,__zero_reg__
 4097               	.LVL115:
1319:router.c      ****                               (uint8_t *)mtr3_packet, mtr3_packet_size, RESPONDING_DEVICES_SECOND_M
1320:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4098               		.loc 1 1320 0
 4099 12e4 4091 0000 		lds r20,mtr4_packet_size
 4100 12e8 CE01      		movw r24,r28
 4101 12ea 0596      		adiw r24,5
 4102 12ec 8E0D      		add r24,r14
 4103 12ee 9F1D      		adc r25,r15
 4104 12f0 60E0      		ldi r22,lo8(mtr4_packet)
 4105 12f2 70E0      		ldi r23,hi8(mtr4_packet)
 4106 12f4 20E0      		ldi r18,lo8(1024)
 4107 12f6 34E0      		ldi r19,hi8(1024)
 4108 12f8 0E94 0000 		call stuffOutput
 4109 12fc C80F      		add r28,r24
 4110 12fe D11D      		adc r29,__zero_reg__
 4111               	.LVL116:
1321:router.c      ****                               (uint8_t *)mtr4_packet, mtr4_packet_size, RESPONDING_DEVICES_SECOND_M
1322:router.c      **** 
1323:router.c      ****     packetSize += stuffOutput((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PAYLOAD + packetS
 4112               		.loc 1 1323 0
 4113 1300 4091 0000 		lds r20,tactile_packet_size
 4114 1304 CE01      		movw r24,r28
 4115 1306 0596      		adiw r24,5
 4116 1308 8E0D      		add r24,r14
 4117 130a 9F1D      		adc r25,r15
 4118 130c 60E0      		ldi r22,lo8(tactile_packet)
 4119 130e 70E0      		ldi r23,hi8(tactile_packet)
 4120 1310 20E0      		ldi r18,lo8(2048)
 4121 1312 38E0      		ldi r19,hi8(2048)
 4122 1314 0E94 0000 		call stuffOutput
 4123 1318 C80F      		add r28,r24
 4124 131a D11D      		adc r29,__zero_reg__
 4125               	.LVL117:
1324:router.c      ****                               (uint8_t *)tactile_packet, tactile_packet_size, RESPONDING_DEVICES_TA
1325:router.c      **** 
1326:router.c      ****     //This area is where the packetSize is widened to 16 bits and other parts are pushed down appro
1327:router.c      ****     //Packetsize only contains payload bytes now.
1328:router.c      ****     // plus 2 for the responding devices, plus 1 for the reflected opcode, plus 1 for the checksum
1329:router.c      ****     packetSize += 4;
 4126               		.loc 1 1329 0
 4127 131c CE01      		movw r24,r28
 4128 131e 0496      		adiw r24,4
1330:router.c      **** 
1331:router.c      ****     memcpy((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_PACKETSIZE_LSB],&packetSize,2);
 4129               		.loc 1 1331 0
 4130 1320 F701      		movw r30,r14
 4131 1322 8083      		st Z,r24
 4132 1324 9183      		std Z+1,r25
1332:router.c      **** 
1333:router.c      ****     activeUpstreamBuffer[RESPONSE_BROADCAST_REFLECTEDOPCODE] = commandPacketBuffer[COMMAND_OFFSET];
 4133               		.loc 1 1333 0
 4134 1326 F801      		movw r30,r16
 4135 1328 8181      		ldd r24,Z+1
 4136 132a F701      		movw r30,r14
 4137 132c 8283      		std Z+2,r24
1334:router.c      ****     memcpy((uint8_t *)&activeUpstreamBuffer[RESPONSE_BROADCAST_RESPONDINGDEVICES],(uint8_t *)&respo
 4138               		.loc 1 1334 0
 4139 132e 8091 0000 		lds r24,respondingDevicesBitfield
 4140 1332 9091 0000 		lds r25,respondingDevicesBitfield+1
 4141 1336 8383      		std Z+3,r24
 4142 1338 9483      		std Z+4,r25
1335:router.c      **** 
1336:router.c      ****     //Plus 1 required here to cover the two bytes of packetSize field
1337:router.c      ****     activeUpstreamBuffer[packetSize+1] = computeChecksum((uint8_t *)activeUpstreamBuffer,packetSize
 4143               		.loc 1 1337 0
 4144 133a BE01      		movw r22,r28
 4145 133c 6B5F      		subi r22,lo8(-(5))
 4146 133e 7F4F      		sbci r23,hi8(-(5))
 4147 1340 8701      		movw r16,r14
 4148               	.LVL118:
 4149 1342 060F      		add r16,r22
 4150 1344 171F      		adc r17,r23
 4151 1346 C701      		movw r24,r14
 4152 1348 0E94 0000 		call computeChecksum
 4153 134c F801      		movw r30,r16
 4154 134e 8083      		st Z,r24
1338:router.c      **** 
1339:router.c      ****     upstreamTX(activeUpstreamBuffer, packetSize+2); //this blocks till TX is complete
 4155               		.loc 1 1339 0
 4156 1350 BE01      		movw r22,r28
 4157 1352 6A5F      		subi r22,lo8(-(6))
 4158 1354 7F4F      		sbci r23,hi8(-(6))
 4159 1356 C701      		movw r24,r14
 4160 1358 0E94 0000 		call upstreamTX
 4161               	/* epilogue start */
1340:router.c      **** 
1341:router.c      ****     return;
1342:router.c      **** }
 4162               		.loc 1 1342 0
 4163 135c DF91      		pop r29
 4164 135e CF91      		pop r28
 4165               	.LVL119:
 4166 1360 1F91      		pop r17
 4167 1362 0F91      		pop r16
 4168 1364 FF90      		pop r15
 4169 1366 EF90      		pop r14
 4170               	.LVL120:
 4171 1368 0895      		ret
 4172               		.cfi_endproc
 4173               	.LFE37:
 4175               	.global	doFreerunTask
 4177               	doFreerunTask:
 4178               	.LFB34:
 999:router.c      **** {
 4179               		.loc 1 999 0
 4180               		.cfi_startproc
 4181 136a CF93      		push r28
 4182               	.LCFI219:
 4183               		.cfi_def_cfa_offset 4
 4184               		.cfi_offset 28, -3
 4185 136c DF93      		push r29
 4186               	.LCFI220:
 4187               		.cfi_def_cfa_offset 5
 4188               		.cfi_offset 29, -4
 4189 136e CDB7      		in r28,__SP_L__
 4190 1370 DEB7      		in r29,__SP_H__
 4191 1372 2797      		sbiw r28,7
 4192               	.LCFI221:
 4193               		.cfi_def_cfa 28, 12
 4194 1374 CDBF      		out __SP_L__,r28
 4195 1376 DEBF      		out __SP_H__,r29
 4196               	/* prologue: function */
 4197               	/* frame size = 7 */
 4198               	/* stack size = 9 */
 4199               	.L__stack_usage = 9
1002:router.c      ****     smallCommandPacketBuffer[DESTINATION_HEADER_OFFSET] = DESTINATION_BROADCAST;
 4200               		.loc 1 1002 0
 4201 1378 8FEF      		ldi r24,lo8(-1)
 4202 137a 8983      		std Y+1,r24
1003:router.c      ****     smallCommandPacketBuffer[COMMAND_OFFSET] = DATA_COLLECTION_OPCODE;
 4203               		.loc 1 1003 0
 4204 137c 1A82      		std Y+2,__zero_reg__
1004:router.c      ****     memcpy(&smallCommandPacketBuffer[PAYLOAD_OFFSET],&sampleArgument,2);
 4205               		.loc 1 1004 0
 4206 137e 8091 0000 		lds r24,sampleArgument
 4207 1382 9091 0000 		lds r25,sampleArgument+1
 4208 1386 8B83      		std Y+3,r24
 4209 1388 9C83      		std Y+4,r25
1005:router.c      ****     smallCommandPacketBuffer[CHECKSUM_OFFSET] = computeChecksum(smallCommandPacketBuffer,6);
 4210               		.loc 1 1005 0
 4211 138a CE01      		movw r24,r28
 4212 138c 0196      		adiw r24,1
 4213 138e 66E0      		ldi r22,lo8(6)
 4214 1390 70E0      		ldi r23,hi8(6)
 4215 1392 0E94 0000 		call computeChecksum
 4216 1396 8F83      		std Y+7,r24
1007:router.c      ****     if(activePingPong)
 4217               		.loc 1 1007 0
 4218 1398 8091 0000 		lds r24,activePingPong
 4219 139c 8823      		tst r24
 4220 139e 01F0      		breq .L158
1009:router.c      ****         doBroadcast(responseToOveroB,smallCommandPacketBuffer);
 4221               		.loc 1 1009 0
 4222 13a0 80E0      		ldi r24,lo8(responseToOveroB)
 4223 13a2 90E0      		ldi r25,hi8(responseToOveroB)
 4224 13a4 BE01      		movw r22,r28
 4225 13a6 6F5F      		subi r22,lo8(-(1))
 4226 13a8 7F4F      		sbci r23,hi8(-(1))
 4227 13aa 0E94 0000 		call doBroadcast
1010:router.c      ****         activePingPong = 0;
 4228               		.loc 1 1010 0
 4229 13ae 1092 0000 		sts activePingPong,__zero_reg__
 4230 13b2 00C0      		rjmp .L157
 4231               	.L158:
1014:router.c      ****         doBroadcast(responseToOveroA,smallCommandPacketBuffer);
 4232               		.loc 1 1014 0
 4233 13b4 80E0      		ldi r24,lo8(responseToOveroA)
 4234 13b6 90E0      		ldi r25,hi8(responseToOveroA)
 4235 13b8 BE01      		movw r22,r28
 4236 13ba 6F5F      		subi r22,lo8(-(1))
 4237 13bc 7F4F      		sbci r23,hi8(-(1))
 4238 13be 0E94 0000 		call doBroadcast
1015:router.c      ****         activePingPong = 1;
 4239               		.loc 1 1015 0
 4240 13c2 81E0      		ldi r24,lo8(1)
 4241 13c4 8093 0000 		sts activePingPong,r24
 4242               	.L157:
 4243               	/* epilogue start */
1018:router.c      **** }
 4244               		.loc 1 1018 0
 4245 13c8 2796      		adiw r28,7
 4246 13ca CDBF      		out __SP_L__,r28
 4247 13cc DEBF      		out __SP_H__,r29
 4248 13ce DF91      		pop r29
 4249 13d0 CF91      		pop r28
 4250 13d2 0895      		ret
 4251               		.cfi_endproc
 4252               	.LFE34:
 4254               	.global	doRouterTask
 4256               	doRouterTask:
 4257               	.LFB38:
1343:router.c      **** 
1344:router.c      **** /************************************************************************
1345:router.c      ****  * doRouterTask()
1346:router.c      ****  *
1347:router.c      ****  * Main routine of the Router process
1348:router.c      ****  * Maintains system state and manages the transmission/reception of chained data
1349:router.c      ****  * Should be called whenever commandReady is set to 1.
1350:router.c      ****  ************************************************************************/
1351:router.c      **** 
1352:router.c      **** void doRouterTask(void)
1353:router.c      **** {
 4258               		.loc 1 1353 0
 4259               		.cfi_startproc
 4260               	/* prologue: function */
 4261               	/* frame size = 0 */
 4262               	/* stack size = 0 */
 4263               	.L__stack_usage = 0
1354:router.c      ****     uint8_t packetSize;
1355:router.c      ****     uint8_t dummy;
1356:router.c      **** 
1357:router.c      ****     //First clear the commandReady flag that got us here
1358:router.c      ****     commandReady = 0;
 4264               		.loc 1 1358 0
 4265 13d4 1092 0000 		sts commandReady,__zero_reg__
1359:router.c      **** 
1360:router.c      ****     //A data packet has arrived from upstream.  Validate it
1361:router.c      ****     if(computeChecksum((uint8_t *)commandPacketBuffer,COMMAND_PACKET_SIZE) != 0x00)
 4266               		.loc 1 1361 0
 4267 13d8 80E0      		ldi r24,lo8(commandPacketBuffer)
 4268 13da 90E0      		ldi r25,hi8(commandPacketBuffer)
 4269 13dc 67E0      		ldi r22,lo8(7)
 4270 13de 70E0      		ldi r23,hi8(7)
 4271 13e0 0E94 0000 		call computeChecksum
 4272 13e4 0097      		sbiw r24,0
 4273 13e6 01F0      		breq .L161
1362:router.c      ****     {
1363:router.c      ****         //Invalid checksum
1364:router.c      ****         RxCheckSumErrCnt[6]++;
 4274               		.loc 1 1364 0
 4275 13e8 8091 0000 		lds r24,RxCheckSumErrCnt+12
 4276 13ec 9091 0000 		lds r25,RxCheckSumErrCnt+12+1
 4277 13f0 0196      		adiw r24,1
 4278 13f2 8093 0000 		sts RxCheckSumErrCnt+12,r24
 4279 13f6 9093 0000 		sts RxCheckSumErrCnt+12+1,r25
1365:router.c      ****         responseToOveroC[0] = 3; //Packet size
 4280               		.loc 1 1365 0
 4281 13fa 83E0      		ldi r24,lo8(3)
 4282 13fc 8093 0000 		sts responseToOveroC,r24
1366:router.c      ****         responseToOveroC[1] = 3; //Packet size MSB
 4283               		.loc 1 1366 0
 4284 1400 8093 0000 		sts responseToOveroC+1,r24
1367:router.c      ****         responseToOveroC[2] = commandPacketBuffer[COMMAND_OFFSET]; //Reflected command byte
 4285               		.loc 1 1367 0
 4286 1404 8091 0000 		lds r24,commandPacketBuffer+1
 4287 1408 8093 0000 		sts responseToOveroC+2,r24
1368:router.c      ****         responseToOveroC[3] = CHECKSUM_ERROR; //Checksum error
 4288               		.loc 1 1368 0
 4289 140c 81E0      		ldi r24,lo8(1)
 4290 140e 8093 0000 		sts responseToOveroC+3,r24
1369:router.c      ****         responseToOveroC[4] = computeChecksum((uint8_t *)responseToOveroC,4); //checksum
 4291               		.loc 1 1369 0
 4292 1412 80E0      		ldi r24,lo8(responseToOveroC)
 4293 1414 90E0      		ldi r25,hi8(responseToOveroC)
 4294 1416 64E0      		ldi r22,lo8(4)
 4295 1418 70E0      		ldi r23,hi8(4)
 4296 141a 0E94 0000 		call computeChecksum
 4297 141e 8093 0000 		sts responseToOveroC+4,r24
1370:router.c      ****         upstreamTX(responseToOveroC, 5);
 4298               		.loc 1 1370 0
 4299 1422 80E0      		ldi r24,lo8(responseToOveroC)
 4300 1424 90E0      		ldi r25,hi8(responseToOveroC)
 4301 1426 65E0      		ldi r22,lo8(5)
 4302 1428 70E0      		ldi r23,hi8(5)
 4303 142a 00C0      		rjmp .L197
 4304               	.L161:
1371:router.c      ****         return;
1372:router.c      ****     }
1373:router.c      **** 
1374:router.c      ****     //Command is valid.  Identify the destination
1375:router.c      ****     if(commandPacketBuffer[DESTINATION_HEADER_OFFSET] == DESTINATION_BROADCAST)
 4305               		.loc 1 1375 0
 4306 142c 8091 0000 		lds r24,commandPacketBuffer
 4307 1430 8F3F      		cpi r24,lo8(-1)
 4308 1432 01F4      		brne .L163
1376:router.c      ****     {
1377:router.c      ****         doBroadcast(responseToOveroC,commandPacketBuffer);
 4309               		.loc 1 1377 0
 4310 1434 80E0      		ldi r24,lo8(responseToOveroC)
 4311 1436 90E0      		ldi r25,hi8(responseToOveroC)
 4312 1438 60E0      		ldi r22,lo8(commandPacketBuffer)
 4313 143a 70E0      		ldi r23,hi8(commandPacketBuffer)
 4314 143c 0E94 0000 		call doBroadcast
1378:router.c      ****         return;
 4315               		.loc 1 1378 0
 4316 1440 0895      		ret
 4317               	.L163:
1379:router.c      ****     }
1380:router.c      **** 
1381:router.c      ****     // set up the receive timeout
1382:router.c      ****     cli();
 4318               		.loc 1 1382 0
 4319               	/* #APP */
 4320               	 ;  1382 "router.c" 1
 4321 1442 F894      		cli
 4322               	 ;  0 "" 2
1383:router.c      ****     upRXtimeoutCounter=UPSTREAM_TIMEOUT_4KHZ;
 4323               		.loc 1 1383 0
 4324               	/* #NOAPP */
 4325 1444 80E2      		ldi r24,lo8(32)
 4326 1446 8093 0000 		sts upRXtimeoutCounter,r24
1384:router.c      ****     sei();
 4327               		.loc 1 1384 0
 4328               	/* #APP */
 4329               	 ;  1384 "router.c" 1
 4330 144a 7894      		sei
 4331               	 ;  0 "" 2
1385:router.c      **** 
1386:router.c      ****     switch(commandPacketBuffer[DESTINATION_HEADER_OFFSET] & CHAINADDRESS_BITMASK)
 4332               		.loc 1 1386 0
 4333               	/* #NOAPP */
 4334 144c 8091 0000 		lds r24,commandPacketBuffer
 4335 1450 90E0      		ldi r25,lo8(0)
 4336 1452 807F      		andi r24,lo8(240)
 4337 1454 9070      		andi r25,hi8(240)
 4338 1456 8033      		cpi r24,48
 4339 1458 9105      		cpc r25,__zero_reg__
 4340 145a 01F4      		brne .+2
 4341 145c 00C0      		rjmp .L167
 4342 145e 8133      		cpi r24,49
 4343 1460 9105      		cpc r25,__zero_reg__
 4344 1462 04F4      		brge .L171
 4345 1464 8031      		cpi r24,16
 4346 1466 9105      		cpc r25,__zero_reg__
 4347 1468 01F0      		breq .L165
 4348 146a 8032      		cpi r24,32
 4349 146c 9105      		cpc r25,__zero_reg__
 4350 146e 01F0      		breq .L166
 4351 1470 0097      		sbiw r24,0
 4352 1472 01F0      		breq .L164
 4353 1474 0895      		ret
 4354               	.L171:
 4355 1476 8035      		cpi r24,80
 4356 1478 9105      		cpc r25,__zero_reg__
 4357 147a 01F4      		brne .+2
 4358 147c 00C0      		rjmp .L169
 4359 147e 8036      		cpi r24,96
 4360 1480 9105      		cpc r25,__zero_reg__
 4361 1482 01F0      		breq .L170
 4362 1484 8034      		cpi r24,64
 4363 1486 9105      		cpc r25,__zero_reg__
 4364 1488 01F0      		breq .+2
 4365 148a 00C0      		rjmp .L160
 4366 148c 00C0      		rjmp .L199
 4367               	.L164:
1387:router.c      ****     {
1388:router.c      ****         case PALM_CHAINADDRESS:
1389:router.c      ****             packetSize = processCommand((uint8_t *)commandPacketBuffer,(uint8_t *)responseToOveroC)
 4368               		.loc 1 1389 0
 4369 148e 80E0      		ldi r24,lo8(commandPacketBuffer)
 4370 1490 90E0      		ldi r25,hi8(commandPacketBuffer)
 4371 1492 60E0      		ldi r22,lo8(responseToOveroC)
 4372 1494 70E0      		ldi r23,hi8(responseToOveroC)
 4373 1496 0E94 0000 		call processCommand
 4374 149a 682F      		mov r22,r24
 4375               	.LVL121:
1390:router.c      ****             upstreamTX(responseToOveroC, packetSize);
 4376               		.loc 1 1390 0
 4377 149c 80E0      		ldi r24,lo8(responseToOveroC)
 4378 149e 90E0      		ldi r25,hi8(responseToOveroC)
 4379               	.LVL122:
 4380 14a0 70E0      		ldi r23,lo8(0)
 4381               	.LVL123:
 4382               	.L197:
 4383 14a2 0E94 0000 		call upstreamTX
1391:router.c      ****             return;
 4384               		.loc 1 1391 0
 4385 14a6 0895      		ret
 4386               	.L170:
1392:router.c      ****         case TACTILE_CHAINADDRESS:
1393:router.c      ****             startChain(TACT,1,(uint8_t *)commandPacketBuffer);
 4387               		.loc 1 1393 0
 4388 14a8 80E0      		ldi r24,lo8(0)
 4389 14aa 61E0      		ldi r22,lo8(1)
 4390 14ac 40E0      		ldi r20,lo8(commandPacketBuffer)
 4391 14ae 50E0      		ldi r21,hi8(commandPacketBuffer)
 4392 14b0 0E94 0000 		call startChain
 4393               	.LVL124:
 4394               	.L172:
 4395               	.LBB106:
 4396               	.LBB107:
 756:router.c      ****     while( (targetChannelConfig->downstreamDoneFlag == 0) );
 4397               		.loc 1 756 0
 4398 14b4 8091 0000 		lds r24,DownStreamConfig+20
 4399 14b8 8823      		tst r24
 4400 14ba 01F0      		breq .L172
 4401 14bc 00C0      		rjmp .L198
 4402               	.LVL125:
 4403               	.L165:
 4404               	.LBE107:
 4405               	.LBE106:
1394:router.c      ****             waitDMAChain(&DownStreamConfig[1]);
1395:router.c      ****             simplePassthrough(&DownStreamConfig[1]);
1396:router.c      ****             break;
1397:router.c      ****         case FINGER1_CHAINADDRESS:
1398:router.c      ****             startChain(PROX1,1,(uint8_t *)commandPacketBuffer);
 4406               		.loc 1 1398 0
 4407 14be 81E0      		ldi r24,lo8(1)
 4408 14c0 61E0      		ldi r22,lo8(1)
 4409 14c2 40E0      		ldi r20,lo8(commandPacketBuffer)
 4410 14c4 50E0      		ldi r21,hi8(commandPacketBuffer)
 4411 14c6 0E94 0000 		call startChain
 4412               	.LVL126:
 4413               	.L173:
 4414               	.LBB108:
 4415               	.LBB109:
 756:router.c      ****     while( (targetChannelConfig->downstreamDoneFlag == 0) );
 4416               		.loc 1 756 0
 4417 14ca 8091 0000 		lds r24,DownStreamConfig+20
 4418 14ce 8823      		tst r24
 4419 14d0 01F0      		breq .L173
 4420 14d2 00C0      		rjmp .L198
 4421               	.LVL127:
 4422               	.L166:
 4423               	.LBE109:
 4424               	.LBE108:
1399:router.c      ****             waitDMAChain(&DownStreamConfig[1]);
1400:router.c      ****             simplePassthrough(&DownStreamConfig[1]);
1401:router.c      ****             break;
1402:router.c      ****         case FINGER2_CHAINADDRESS:
1403:router.c      ****             startChain(PROX2,1,(uint8_t *)commandPacketBuffer);
 4425               		.loc 1 1403 0
 4426 14d4 82E0      		ldi r24,lo8(2)
 4427 14d6 61E0      		ldi r22,lo8(1)
 4428 14d8 40E0      		ldi r20,lo8(commandPacketBuffer)
 4429 14da 50E0      		ldi r21,hi8(commandPacketBuffer)
 4430 14dc 0E94 0000 		call startChain
 4431               	.LVL128:
 4432               	.L174:
 4433               	.LBB110:
 4434               	.LBB111:
 756:router.c      ****     while( (targetChannelConfig->downstreamDoneFlag == 0) );
 4435               		.loc 1 756 0
 4436 14e0 8091 0000 		lds r24,DownStreamConfig+20
 4437 14e4 8823      		tst r24
 4438 14e6 01F0      		breq .L174
 4439 14e8 00C0      		rjmp .L198
 4440               	.LVL129:
 4441               	.L167:
 4442               	.LBE111:
 4443               	.LBE110:
1404:router.c      ****             waitDMAChain(&DownStreamConfig[1]);
1405:router.c      ****             simplePassthrough(&DownStreamConfig[1]);
1406:router.c      ****             break;
1407:router.c      ****         case FINGER3_CHAINADDRESS:
1408:router.c      ****             startChain(PROX3,1,(uint8_t *)commandPacketBuffer);
 4444               		.loc 1 1408 0
 4445 14ea 83E0      		ldi r24,lo8(3)
 4446 14ec 61E0      		ldi r22,lo8(1)
 4447 14ee 40E0      		ldi r20,lo8(commandPacketBuffer)
 4448 14f0 50E0      		ldi r21,hi8(commandPacketBuffer)
 4449 14f2 0E94 0000 		call startChain
 4450               	.LVL130:
 4451               	.L175:
 4452               	.LBB112:
 4453               	.LBB113:
 756:router.c      ****     while( (targetChannelConfig->downstreamDoneFlag == 0) );
 4454               		.loc 1 756 0
 4455 14f6 8091 0000 		lds r24,DownStreamConfig+20
 4456 14fa 8823      		tst r24
 4457 14fc 01F0      		breq .L175
 4458               	.LVL131:
 4459               	.L198:
 759:router.c      ****     targetChannelConfig->downstreamDoneFlag = 0;
 4460               		.loc 1 759 0
 4461 14fe 1092 0000 		sts DownStreamConfig+20,__zero_reg__
 4462               	.LBE113:
 4463               	.LBE112:
1409:router.c      ****             waitDMAChain(&DownStreamConfig[1]);
1410:router.c      ****             simplePassthrough(&DownStreamConfig[1]);
 4464               		.loc 1 1410 0
 4465 1502 80E0      		ldi r24,lo8(DownStreamConfig+12)
 4466 1504 90E0      		ldi r25,hi8(DownStreamConfig+12)
 4467 1506 00C0      		rjmp .L196
 4468               	.L199:
1411:router.c      ****             break;
1412:router.c      ****         case MOTOR1_CHAINADDRESS:
1413:router.c      ****             //startChain(MTR1,1,(uint8_t *)commandPacketBuffer);
1414:router.c      ****             startMtrChain(4);
 4469               		.loc 1 1414 0
 4470 1508 84E0      		ldi r24,lo8(4)
 4471 150a 0E94 0000 		call startMtrChain
 4472               	.LVL132:
1415:router.c      ****             for(int i=0;i<COMMAND_PACKET_SIZE;i++)
 4473               		.loc 1 1415 0
 4474 150e 80E0      		ldi r24,lo8(0)
 4475 1510 90E0      		ldi r25,hi8(0)
 4476               	.LVL133:
 4477               	.L194:
 4478               	.LBB114:
1416:router.c      ****             {
1417:router.c      ****                 while(!(MTR1_USART.STATUS & USART_DREIF_bm));
 4479               		.loc 1 1417 0 discriminator 1
 4480 1512 2091 A10A 		lds r18,2721
 4481 1516 25FF      		sbrs r18,5
 4482 1518 00C0      		rjmp .L194
1418:router.c      ****                 MTR1_USART.DATA = commandPacketBuffer[i];
 4483               		.loc 1 1418 0
 4484 151a FC01      		movw r30,r24
 4485 151c E050      		subi r30,lo8(-(commandPacketBuffer))
 4486 151e F040      		sbci r31,hi8(-(commandPacketBuffer))
 4487 1520 2081      		ld r18,Z
 4488 1522 2093 A00A 		sts 2720,r18
1415:router.c      ****             for(int i=0;i<COMMAND_PACKET_SIZE;i++)
 4489               		.loc 1 1415 0
 4490 1526 0196      		adiw r24,1
 4491               	.LVL134:
 4492 1528 8730      		cpi r24,7
 4493 152a 9105      		cpc r25,__zero_reg__
 4494 152c 01F4      		brne .L194
 4495               	.LVL135:
 4496               	.L185:
 4497               	.LBE114:
1419:router.c      ****             }
1420:router.c      ****             while(!(MTR1_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
 4498               		.loc 1 1420 0 discriminator 1
 4499 152e E0EA      		ldi r30,lo8(2720)
 4500 1530 FAE0      		ldi r31,hi8(2720)
 4501 1532 8091 A10A 		lds r24,2721
 4502 1536 85FF      		sbrs r24,5
 4503 1538 00C0      		rjmp .L185
1421:router.c      ****             dummy = MTR1_USART.DATA; // dummy read to clear the RXCIF bit
 4504               		.loc 1 1421 0
 4505 153a 8091 A00A 		lds r24,2720
1422:router.c      ****             MTR1_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
 4506               		.loc 1 1422 0
 4507 153e 80E8      		ldi r24,lo8(-128)
 4508 1540 8183      		std Z+1,r24
1423:router.c      ****             //MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
1424:router.c      ****             MTR1_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
 4509               		.loc 1 1424 0
 4510 1542 80E1      		ldi r24,lo8(16)
 4511 1544 8383      		std Z+3,r24
1425:router.c      ****             simplePassthrough(&DownStreamConfig[4]);
 4512               		.loc 1 1425 0
 4513 1546 80E0      		ldi r24,lo8(DownStreamConfig+48)
 4514 1548 90E0      		ldi r25,hi8(DownStreamConfig+48)
 4515               	.L196:
 4516 154a 0E94 0000 		call simplePassthrough
1426:router.c      ****             break;
 4517               		.loc 1 1426 0
 4518 154e 0895      		ret
 4519               	.L169:
1427:router.c      ****         case MOTOR2_CHAINADDRESS:
1428:router.c      ****             //startChain(MTR2,1,(uint8_t *)commandPacketBuffer);
1429:router.c      ****             startMtrChain(5);
 4520               		.loc 1 1429 0
 4521 1550 85E0      		ldi r24,lo8(5)
 4522 1552 0E94 0000 		call startMtrChain
 4523               	.LVL136:
1430:router.c      ****             for(int i=0;i<COMMAND_PACKET_SIZE;i++)
 4524               		.loc 1 1430 0
 4525 1556 80E0      		ldi r24,lo8(0)
 4526 1558 90E0      		ldi r25,hi8(0)
 4527               	.LVL137:
 4528               	.L195:
 4529               	.LBB115:
1431:router.c      ****             {
1432:router.c      ****                 while(!(MTR2_USART.STATUS & USART_DREIF_bm));
 4530               		.loc 1 1432 0 discriminator 1
 4531 155a 2091 B10A 		lds r18,2737
 4532 155e 25FF      		sbrs r18,5
 4533 1560 00C0      		rjmp .L195
1433:router.c      ****                 MTR2_USART.DATA = commandPacketBuffer[i];
 4534               		.loc 1 1433 0
 4535 1562 FC01      		movw r30,r24
 4536 1564 E050      		subi r30,lo8(-(commandPacketBuffer))
 4537 1566 F040      		sbci r31,hi8(-(commandPacketBuffer))
 4538 1568 2081      		ld r18,Z
 4539 156a 2093 B00A 		sts 2736,r18
1430:router.c      ****             for(int i=0;i<COMMAND_PACKET_SIZE;i++)
 4540               		.loc 1 1430 0
 4541 156e 0196      		adiw r24,1
 4542               	.LVL138:
 4543 1570 8730      		cpi r24,7
 4544 1572 9105      		cpc r25,__zero_reg__
 4545 1574 01F4      		brne .L195
 4546               	.LVL139:
 4547               	.L184:
 4548               	.LBE115:
1434:router.c      ****             }
1435:router.c      ****             while(!(MTR2_USART.STATUS & USART_DREIF_bm)); // make sure the byte goes out
 4549               		.loc 1 1435 0 discriminator 1
 4550 1576 E0EB      		ldi r30,lo8(2736)
 4551 1578 FAE0      		ldi r31,hi8(2736)
 4552 157a 8091 B10A 		lds r24,2737
 4553 157e 85FF      		sbrs r24,5
 4554 1580 00C0      		rjmp .L184
1436:router.c      ****             dummy = MTR2_USART.DATA; // dummy read to clear the RXCIF bit
 4555               		.loc 1 1436 0
 4556 1582 8091 B00A 		lds r24,2736
1437:router.c      ****             MTR2_USART.STATUS = USART_RXCIF_bm;//flush any left over RX byte
 4557               		.loc 1 1437 0
 4558 1586 80E8      		ldi r24,lo8(-128)
 4559 1588 8183      		std Z+1,r24
1438:router.c      ****             //MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_MED_gc;
1439:router.c      ****             MTR2_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
 4560               		.loc 1 1439 0
 4561 158a 80E1      		ldi r24,lo8(16)
 4562 158c 8383      		std Z+3,r24
1440:router.c      ****             simplePassthrough(&DownStreamConfig[5]);
 4563               		.loc 1 1440 0
 4564 158e 80E0      		ldi r24,lo8(DownStreamConfig+60)
 4565 1590 90E0      		ldi r25,hi8(DownStreamConfig+60)
 4566 1592 0E94 0000 		call simplePassthrough
 4567               	.L160:
 4568 1596 0895      		ret
 4569               		.cfi_endproc
 4570               	.LFE38:
 4572               	.global	chainMask
 4573               		.data
 4576               	chainMask:
 4577 0000 FF        		.byte	-1
 4578               		.comm RxCheckSumErrCnt,14,1
 4579               		.lcomm Derr_packetsize,1
 4580               		.lcomm Derr_frame,1
 4581               		.lcomm Uerr_checksum,1
 4582               		.lcomm Uerr_timeout,1
 4583               		.lcomm Uerr_busy,1
 4584               		.lcomm Uerr_frame,1
 4585               		.lcomm upRXtimeoutCounter,1
 4586               		.lcomm dmaTimeoutCounter,6
 4587               		.lcomm mtRXbyte,2
 4588               		.lcomm palm_packet_size,1
 4589               		.lcomm palm_packet,200
 4590               		.lcomm tactile_packet_size,1
 4591               		.lcomm tactile_packet,200
 4592               		.lcomm distal3_packet_size,1
 4593               		.lcomm distal3_packet,200
 4594               		.lcomm distal2_packet_size,1
 4595               		.lcomm distal2_packet,200
 4596               		.lcomm distal1_packet_size,1
 4597               		.lcomm distal1_packet,200
 4598               		.lcomm prox3_packet_size,1
 4599               		.lcomm prox3_packet,200
 4600               		.lcomm prox2_packet_size,1
 4601               		.lcomm prox2_packet,200
 4602               		.lcomm prox1_packet_size,1
 4603               		.lcomm prox1_packet,200
 4604               		.lcomm mtr4_packet_size,1
 4605               		.lcomm mtr4_packet,200
 4606               		.lcomm mtr3_packet_size,1
 4607               		.lcomm mtr3_packet,200
 4608               		.lcomm mtr2_packet_size,1
 4609               		.lcomm mtr2_packet,200
 4610               		.lcomm mtr1_packet_size,1
 4611               		.lcomm mtr1_packet,200
 4612               		.lcomm respondingDevicesBitfield,2
 4613               		.lcomm longXmitBuffer,7
 4614               		.lcomm shortXmitBuffer,7
 4615               		.lcomm commandPacketBuffer,7
 4616               	.global	commandReady
 4617               	.global	commandReady
 4618               		.section .bss
 4621               	commandReady:
 4622 0000 00        		.skip 1,0
 4623               	.global	activePingPong
 4624               	.global	activePingPong
 4627               	activePingPong:
 4628 0001 00        		.skip 1,0
 4629               	.global	sampleArgument
 4630               		.data
 4633               	sampleArgument:
 4634 0001 FFFF      		.word	-1
 4635               	.global	samplePeriod
 4638               	samplePeriod:
 4639 0003 FFFF      		.word	-1
 4640               		.lcomm responseToOveroC,605
 4641               		.lcomm responseToOveroB,605
 4642               		.lcomm responseToOveroA,605
 4643               		.lcomm DownStreamConfig,72
 4644               		.lcomm upRXbyte.3425,1
 4647               	USARTtoCHANNELS:
 4648 0005 0000      		.word	DownStreamConfig
 4649 0007 0000      		.word	DownStreamConfig+12
 4650 0009 0000      		.word	DownStreamConfig+24
 4651 000b 0000      		.word	DownStreamConfig+36
 4652 000d 0000      		.word	DownStreamConfig+48
 4653 000f 0000      		.word	DownStreamConfig+60
 4654               		.lcomm packetSize.3447,1
 4657               	allUSARTS:
 4658 0011 A008      		.word	2208
 4659 0013 B009      		.word	2480
 4660 0015 B008      		.word	2224
 4661 0017 A009      		.word	2464
 4662 0019 A00A      		.word	2720
 4663 001b B00A      		.word	2736
 4666               	allFirstSlaveBuffers:
 4667 001d 0000      		.word	tactile_packet
 4668 001f 0000      		.word	prox1_packet
 4669 0021 0000      		.word	prox2_packet
 4670 0023 0000      		.word	prox3_packet
 4671 0025 0000      		.word	mtr1_packet
 4672 0027 0000      		.word	mtr3_packet
 4675               	allInboundTriggers:
 4676 0029 4B        		.byte	75
 4677 002a 6E        		.byte	110
 4678 002b 4E        		.byte	78
 4679 002c 6B        		.byte	107
 4680 002d 8B        		.byte	-117
 4681 002e 8E        		.byte	-114
 4684               	allOutboundTriggers:
 4685 002f 4C        		.byte	76
 4686 0030 6F        		.byte	111
 4687 0031 4F        		.byte	79
 4688 0032 6C        		.byte	108
 4689 0033 8C        		.byte	-116
 4690 0034 8F        		.byte	-113
 4693               	allFirstSlaveSizes:
 4694 0035 0000      		.word	tactile_packet_size
 4695 0037 0000      		.word	prox1_packet_size
 4696 0039 0000      		.word	prox2_packet_size
 4697 003b 0000      		.word	prox3_packet_size
 4698 003d 0000      		.word	mtr1_packet_size
 4699 003f 0000      		.word	mtr3_packet_size
 4702               	allSecondSlaveSizes:
 4703 0041 0000      		.word	0
 4704 0043 0000      		.word	distal1_packet_size
 4705 0045 0000      		.word	distal2_packet_size
 4706 0047 0000      		.word	distal3_packet_size
 4707 0049 0000      		.word	mtr2_packet_size
 4708 004b 0000      		.word	mtr4_packet_size
 4711               	allSecondSlaveBuffers:
 4712 004d 0000      		.word	0
 4713 004f 0000      		.word	distal1_packet
 4714 0051 0000      		.word	distal2_packet
 4715 0053 0000      		.word	distal3_packet
 4716 0055 0000      		.word	mtr2_packet
 4717 0057 0000      		.word	mtr4_packet
 4718               		.text
 4719               	.Letext0:
 4720               		.file 2 "/home/baxelrod/ARM-H/avr8-gnu-toolchain-linux_x86/bin/../lib/gcc/avr/4.6.2/../../../../av
 4721               		.file 3 "/home/baxelrod/ARM-H/avr8-gnu-toolchain-linux_x86/bin/../lib/gcc/avr/4.6.2/../../../../av
 4722               		.file 4 "router.h"
DEFINED SYMBOLS
                            *ABS*:00000000 router.c
     /tmp/ccWfN7Qi.s:2      *ABS*:0000003f __SREG__
     /tmp/ccWfN7Qi.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccWfN7Qi.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccWfN7Qi.s:5      *ABS*:00000034 __CCP__
     /tmp/ccWfN7Qi.s:6      *ABS*:00000000 __tmp_reg__
     /tmp/ccWfN7Qi.s:7      *ABS*:00000001 __zero_reg__
     /tmp/ccWfN7Qi.s:14     .text:00000000 doDownstreamDMAISR
     /tmp/ccWfN7Qi.s:71     .text:0000003e configureUSARTHardware
     /tmp/ccWfN7Qi.s:123    .text:0000006e upstreamTX
     /tmp/ccWfN7Qi.s:169    .text:00000094 doDownstreamUSART_RX_ISR
     /tmp/ccWfN7Qi.s:4579   .bss:00000003 Derr_frame
                             .bss:00000002 Derr_packetsize
     /tmp/ccWfN7Qi.s:320    .text:0000013e doMotorUSART_RX_ISR
     /tmp/ccWfN7Qi.s:4586   .bss:0000000f mtRXbyte
     /tmp/ccWfN7Qi.s:4585   .bss:00000009 dmaTimeoutCounter
     /tmp/ccWfN7Qi.s:4644   .bss:000010f4 packetSize.3447
     /tmp/ccWfN7Qi.s:459    .text:000001da __vector_77
     /tmp/ccWfN7Qi.s:4642   .bss:000010ab DownStreamConfig
     /tmp/ccWfN7Qi.s:4584   .bss:00000008 upRXtimeoutCounter
     /tmp/ccWfN7Qi.s:592    .text:000002a8 __vector_119
     /tmp/ccWfN7Qi.s:4643   .bss:000010f3 upRXbyte.3425
     /tmp/ccWfN7Qi.s:4583   .bss:00000007 Uerr_frame
     /tmp/ccWfN7Qi.s:4621   .bss:00000000 commandReady
     /tmp/ccWfN7Qi.s:4582   .bss:00000006 Uerr_busy
     /tmp/ccWfN7Qi.s:4581   .bss:00000005 Uerr_timeout
     /tmp/ccWfN7Qi.s:4614   .bss:0000098d commandPacketBuffer
     /tmp/ccWfN7Qi.s:737    .text:00000372 __vector_25
     /tmp/ccWfN7Qi.s:4647   .data:00000005 USARTtoCHANNELS
     /tmp/ccWfN7Qi.s:844    .text:000003da __vector_91
     /tmp/ccWfN7Qi.s:951    .text:00000442 __vector_28
     /tmp/ccWfN7Qi.s:1058   .text:000004aa __vector_88
     /tmp/ccWfN7Qi.s:1165   .text:00000512 __vector_58
     /tmp/ccWfN7Qi.s:1273   .text:0000057c __vector_61
     /tmp/ccWfN7Qi.s:1381   .text:000005e6 __vector_27
     /tmp/ccWfN7Qi.s:1452   .text:0000062c __vector_93
     /tmp/ccWfN7Qi.s:1523   .text:00000672 __vector_30
     /tmp/ccWfN7Qi.s:1594   .text:000006b8 __vector_90
     /tmp/ccWfN7Qi.s:1665   .text:000006fe __vector_60
     /tmp/ccWfN7Qi.s:1736   .text:00000744 __vector_63
     /tmp/ccWfN7Qi.s:1807   .text:0000078a __vector_6
     /tmp/ccWfN7Qi.s:1914   .text:000007ee __vector_7
     /tmp/ccWfN7Qi.s:2021   .text:00000852 __vector_8
     /tmp/ccWfN7Qi.s:2128   .text:000008b6 __vector_9
     /tmp/ccWfN7Qi.s:2235   .text:0000091a computeChecksum
     /tmp/ccWfN7Qi.s:2284   .text:0000093c simplePassthrough
     /tmp/ccWfN7Qi.s:4615   .bss:00000994 responseToOveroC
                            *COM*:0000000e RxCheckSumErrCnt
     /tmp/ccWfN7Qi.s:2429   .text:00000a04 stuffOutput
     /tmp/ccWfN7Qi.s:4611   .bss:0000097d respondingDevicesBitfield
     /tmp/ccWfN7Qi.s:2593   .text:00000ab2 startChain
     /tmp/ccWfN7Qi.s:4657   .data:00000011 allUSARTS
     /tmp/ccWfN7Qi.s:4666   .data:0000001d allFirstSlaveBuffers
     /tmp/ccWfN7Qi.s:4675   .data:00000029 allInboundTriggers
     /tmp/ccWfN7Qi.s:4684   .data:0000002f allOutboundTriggers
     /tmp/ccWfN7Qi.s:2843   .text:00000bca startMtrChain
     /tmp/ccWfN7Qi.s:2944   .text:00000c4e configureRouterUSARTs
     /tmp/ccWfN7Qi.s:3130   .text:00000d6a tendDMAchain
     /tmp/ccWfN7Qi.s:4693   .data:00000035 allFirstSlaveSizes
     /tmp/ccWfN7Qi.s:4702   .data:00000041 allSecondSlaveSizes
     /tmp/ccWfN7Qi.s:4711   .data:0000004d allSecondSlaveBuffers
     /tmp/ccWfN7Qi.s:3427   .text:00000efa tendMTRchain
     /tmp/ccWfN7Qi.s:3631   .text:00001004 doBroadcast
     /tmp/ccWfN7Qi.s:4613   .bss:00000986 shortXmitBuffer
     /tmp/ccWfN7Qi.s:4612   .bss:0000097f longXmitBuffer
     /tmp/ccWfN7Qi.s:4576   .data:00000000 chainMask
     /tmp/ccWfN7Qi.s:4588   .bss:00000012 palm_packet
     /tmp/ccWfN7Qi.s:4587   .bss:00000011 palm_packet_size
     /tmp/ccWfN7Qi.s:4601   .bss:00000590 prox1_packet_size
     /tmp/ccWfN7Qi.s:4602   .bss:00000591 prox1_packet
     /tmp/ccWfN7Qi.s:4595   .bss:00000335 distal1_packet_size
     /tmp/ccWfN7Qi.s:4596   .bss:00000336 distal1_packet
     /tmp/ccWfN7Qi.s:4599   .bss:000004c7 prox2_packet_size
     /tmp/ccWfN7Qi.s:4600   .bss:000004c8 prox2_packet
     /tmp/ccWfN7Qi.s:4593   .bss:0000026c distal2_packet_size
     /tmp/ccWfN7Qi.s:4594   .bss:0000026d distal2_packet
     /tmp/ccWfN7Qi.s:4597   .bss:000003fe prox3_packet_size
     /tmp/ccWfN7Qi.s:4598   .bss:000003ff prox3_packet
     /tmp/ccWfN7Qi.s:4591   .bss:000001a3 distal3_packet_size
     /tmp/ccWfN7Qi.s:4592   .bss:000001a4 distal3_packet
     /tmp/ccWfN7Qi.s:4609   .bss:000008b4 mtr1_packet_size
     /tmp/ccWfN7Qi.s:4610   .bss:000008b5 mtr1_packet
     /tmp/ccWfN7Qi.s:4607   .bss:000007eb mtr2_packet_size
     /tmp/ccWfN7Qi.s:4608   .bss:000007ec mtr2_packet
     /tmp/ccWfN7Qi.s:4605   .bss:00000722 mtr3_packet_size
     /tmp/ccWfN7Qi.s:4606   .bss:00000723 mtr3_packet
     /tmp/ccWfN7Qi.s:4603   .bss:00000659 mtr4_packet_size
     /tmp/ccWfN7Qi.s:4604   .bss:0000065a mtr4_packet
     /tmp/ccWfN7Qi.s:4589   .bss:000000da tactile_packet_size
     /tmp/ccWfN7Qi.s:4590   .bss:000000db tactile_packet
     /tmp/ccWfN7Qi.s:4177   .text:0000136a doFreerunTask
     /tmp/ccWfN7Qi.s:4633   .data:00000001 sampleArgument
     /tmp/ccWfN7Qi.s:4627   .bss:00000001 activePingPong
     /tmp/ccWfN7Qi.s:4640   .bss:00000bf1 responseToOveroB
     /tmp/ccWfN7Qi.s:4641   .bss:00000e4e responseToOveroA
     /tmp/ccWfN7Qi.s:4256   .text:000013d4 doRouterTask
     /tmp/ccWfN7Qi.s:4580   .bss:00000004 Uerr_checksum
     /tmp/ccWfN7Qi.s:4638   .data:00000003 samplePeriod

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
memcpy
processCommand
