
distal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001180  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00001180  00001214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000172  00802000  00802000  00001214  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000018e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e8  00000000  00000000  00001965  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003b6e  00000000  00000000  00001a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf5  00000000  00000000  000055bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c80  00000000  00000000  000062b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b0  00000000  00000000  00006f30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002a9e  00000000  00000000  000073e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d31  00000000  00000000  00009e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000abaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
       4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
       c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      10:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      14:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      18:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_6>
      1c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      20:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      24:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      28:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      2c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      34:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      38:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__vector_14>
      3c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      40:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      44:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      48:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      4c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      50:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__vector_20>
      54:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      58:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      5c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      60:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      64:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      68:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      6c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      70:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      74:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      78:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      7c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      80:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      84:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      88:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      8c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      90:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      94:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      98:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      9c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
      fc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     100:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     104:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     108:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     10c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     110:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     114:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     118:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     11c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     120:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     124:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     128:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     12c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     130:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     134:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     138:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     13c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     140:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     144:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     148:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     14c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     150:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     154:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     158:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     15c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     160:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     164:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     168:	0c 94 e0 02 	jmp	0x5c0	; 0x5c0 <__vector_90>
     16c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     170:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     174:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     178:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     17c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     180:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     184:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     188:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     18c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     190:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     194:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     198:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     19c:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1a8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ac:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1b8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1bc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1c8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1cc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1d8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1dc:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1e8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1ec:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f4:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>
     1f8:	0c 94 1b 01 	jmp	0x236	; 0x236 <__bad_interrupt>

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	df e2       	ldi	r29, 0x2F	; 47
     204:	de bf       	out	0x3e, r29	; 62
     206:	cd bf       	out	0x3d, r28	; 61

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e0 e8       	ldi	r30, 0x80	; 128
     210:	f1 e1       	ldi	r31, 0x11	; 17
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a0 30       	cpi	r26, 0x00	; 0
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	11 e2       	ldi	r17, 0x21	; 33
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a2 37       	cpi	r26, 0x72	; 114
     22a:	b1 07       	cpc	r27, r17
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 ef 07 	call	0xfde	; 0xfde <main>
     232:	0c 94 be 08 	jmp	0x117c	; 0x117c <_exit>

00000236 <__bad_interrupt>:
     236:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023a <writeRegisterSPI>:
 * Abstraction Function for ReadWriting Registers On The Accelerometer
 */
static void writeRegisterSPI(uint8_t addr, uint8_t data)
{
  uint8_t dummy;
  ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK; // chip select
     23a:	98 e0       	ldi	r25, 0x08	; 8
     23c:	e0 e8       	ldi	r30, 0x80	; 128
     23e:	f6 e0       	ldi	r31, 0x06	; 6
     240:	96 83       	std	Z+6, r25	; 0x06

  //ADDR should be 5 bits in length.  Bit 6 should be low for single write
  //bit 7 should be low to indicate WRITE
  ACCELSPI.DATA = addr;
     242:	e0 ec       	ldi	r30, 0xC0	; 192
     244:	f9 e0       	ldi	r31, 0x09	; 9
     246:	83 83       	std	Z+3, r24	; 0x03
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
     248:	02 c0       	rjmp	.+4      	; 0x24e <writeRegisterSPI+0x14>
    dummy = ACCELSPI.DATA; } //wait for it to finish
     24a:	80 91 c3 09 	lds	r24, 0x09C3
  ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK; // chip select

  //ADDR should be 5 bits in length.  Bit 6 should be low for single write
  //bit 7 should be low to indicate WRITE
  ACCELSPI.DATA = addr;
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
     24e:	80 91 c2 09 	lds	r24, 0x09C2
     252:	87 ff       	sbrs	r24, 7
     254:	fa cf       	rjmp	.-12     	; 0x24a <writeRegisterSPI+0x10>
    dummy = ACCELSPI.DATA; } //wait for it to finish

  // the dummy read is needed for the SPI_IF flag to clear

  ACCELSPI.DATA = data;
     256:	e0 ec       	ldi	r30, 0xC0	; 192
     258:	f9 e0       	ldi	r31, 0x09	; 9
     25a:	63 83       	std	Z+3, r22	; 0x03
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
     25c:	02 c0       	rjmp	.+4      	; 0x262 <writeRegisterSPI+0x28>
    dummy = ACCELSPI.DATA; } //wait for it to finish
     25e:	80 91 c3 09 	lds	r24, 0x09C3
    dummy = ACCELSPI.DATA; } //wait for it to finish

  // the dummy read is needed for the SPI_IF flag to clear

  ACCELSPI.DATA = data;
  while(!(ACCELSPI.STATUS & SPI_IF_bm)) {
     262:	80 91 c2 09 	lds	r24, 0x09C2
     266:	87 ff       	sbrs	r24, 7
     268:	fa cf       	rjmp	.-12     	; 0x25e <writeRegisterSPI+0x24>
    dummy = ACCELSPI.DATA; } //wait for it to finish

  ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK; // chip select
     26a:	88 e0       	ldi	r24, 0x08	; 8
     26c:	e0 e8       	ldi	r30, 0x80	; 128
     26e:	f6 e0       	ldi	r31, 0x06	; 6
     270:	85 83       	std	Z+5, r24	; 0x05
  return;
}
     272:	08 95       	ret

00000274 <configureSPIModulesAccel>:

static void writeRegisterSPI(uint8_t addr, uint8_t data);

void configureSPIModulesAccel(void)
{
  ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK; // default chip select to high
     274:	e0 e8       	ldi	r30, 0x80	; 128
     276:	f6 e0       	ldi	r31, 0x06	; 6
     278:	88 e0       	ldi	r24, 0x08	; 8
     27a:	85 83       	std	Z+5, r24	; 0x05
  ACCEL_CS_PORT.DIRSET = ACCEL_CS_PIN_MASK; // make sure it is an output
     27c:	81 83       	std	Z+1, r24	; 0x01
  ACCELSPI_PORT.DIRCLR = 0x40;
     27e:	e0 e6       	ldi	r30, 0x60	; 96
     280:	f6 e0       	ldi	r31, 0x06	; 6
     282:	80 e4       	ldi	r24, 0x40	; 64
     284:	82 83       	std	Z+2, r24	; 0x02
  ACCELSPI_PORT.DIRSET = 0xB0;
     286:	80 eb       	ldi	r24, 0xB0	; 176
     288:	81 83       	std	Z+1, r24	; 0x01
  ACCELSPI_PORT.OUTSET = 0x10;
     28a:	80 e1       	ldi	r24, 0x10	; 16
     28c:	85 83       	std	Z+5, r24	; 0x05
  ACCELSPI.INTCTRL = SPI_INTLVL_OFF_gc;
     28e:	e0 ec       	ldi	r30, 0xC0	; 192
     290:	f9 e0       	ldi	r31, 0x09	; 9
     292:	11 82       	std	Z+1, r1	; 0x01
  ACCELSPI.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_3_gc | SPI_PRESCALER_DIV16_gc | SPI_CLK2X_bm;
     294:	8d ed       	ldi	r24, 0xDD	; 221
     296:	80 83       	st	Z, r24
}
     298:	08 95       	ret

0000029a <configAccel>:

 called once in main
 */
void configAccel(void)
{
    writeRegisterSPI(0x2D, 0x08); //switch from standby to measuring
     29a:	8d e2       	ldi	r24, 0x2D	; 45
     29c:	68 e0       	ldi	r22, 0x08	; 8
     29e:	0e 94 1d 01 	call	0x23a	; 0x23a <writeRegisterSPI>
    writeRegisterSPI(0x31, 0x0F); //set to fullscale, full resolution
     2a2:	81 e3       	ldi	r24, 0x31	; 49
     2a4:	6f e0       	ldi	r22, 0x0F	; 15
     2a6:	0e 94 1d 01 	call	0x23a	; 0x23a <writeRegisterSPI>
}
     2aa:	08 95       	ret

000002ac <readAxes>:

/*
 * Clockout Six Databytes From ADXL345, Two Bytes Per Axis
 */
void readAxes(uint8_t *dataOut)
{
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	00 d0       	rcall	.+0      	; 0x2b2 <readAxes+0x6>
     2b2:	cd b7       	in	r28, 0x3d	; 61
     2b4:	de b7       	in	r29, 0x3e	; 62
    configureSPIModulesAccel();
     2b6:	89 83       	std	Y+1, r24	; 0x01
     2b8:	9a 83       	std	Y+2, r25	; 0x02
     2ba:	0e 94 3a 01 	call	0x274	; 0x274 <configureSPIModulesAccel>
    ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK;
     2be:	28 e0       	ldi	r18, 0x08	; 8
     2c0:	e0 e8       	ldi	r30, 0x80	; 128
     2c2:	f6 e0       	ldi	r31, 0x06	; 6
     2c4:	26 83       	std	Z+6, r18	; 0x06

    ACCELSPI.DATA = (0x32 | 0xC0); //start at the x axis register, addr 0x32, set multibyte read with 0xC0
     2c6:	22 ef       	ldi	r18, 0xF2	; 242
     2c8:	e0 ec       	ldi	r30, 0xC0	; 192
     2ca:	f9 e0       	ldi	r31, 0x09	; 9
     2cc:	23 83       	std	Z+3, r18	; 0x03
     2ce:	9a 81       	ldd	r25, Y+2	; 0x02
     2d0:	89 81       	ldd	r24, Y+1	; 0x01
    while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     2d2:	20 91 c2 09 	lds	r18, 0x09C2
     2d6:	27 ff       	sbrs	r18, 7
     2d8:	fc cf       	rjmp	.-8      	; 0x2d2 <readAxes+0x26>
     2da:	fc 01       	movw	r30, r24
     2dc:	86 e0       	ldi	r24, 0x06	; 6

    for (uint8_t i = 0; i < 6; i++)
    {
        ACCELSPI.DATA = 0x00; //clockout
     2de:	a0 ec       	ldi	r26, 0xC0	; 192
     2e0:	b9 e0       	ldi	r27, 0x09	; 9
     2e2:	13 96       	adiw	r26, 0x03	; 3
     2e4:	1c 92       	st	X, r1
     2e6:	13 97       	sbiw	r26, 0x03	; 3
        while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for clockout to finish
     2e8:	90 91 c2 09 	lds	r25, 0x09C2
     2ec:	97 ff       	sbrs	r25, 7
     2ee:	fc cf       	rjmp	.-8      	; 0x2e8 <readAxes+0x3c>
        dataOut[i] = ACCELSPI.DATA; //store
     2f0:	90 91 c3 09 	lds	r25, 0x09C3
     2f4:	91 93       	st	Z+, r25
     2f6:	81 50       	subi	r24, 0x01	; 1
    ACCEL_CS_PORT.OUTCLR = ACCEL_CS_PIN_MASK;

    ACCELSPI.DATA = (0x32 | 0xC0); //start at the x axis register, addr 0x32, set multibyte read with 0xC0
    while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for it to finish

    for (uint8_t i = 0; i < 6; i++)
     2f8:	a1 f7       	brne	.-24     	; 0x2e2 <readAxes+0x36>
        ACCELSPI.DATA = 0x00; //clockout
        while(!(ACCELSPI.STATUS & SPI_IF_bm)); //wait for clockout to finish
        dataOut[i] = ACCELSPI.DATA; //store
    }

    ACCEL_CS_PORT.OUTSET = ACCEL_CS_PIN_MASK;
     2fa:	88 e0       	ldi	r24, 0x08	; 8
     2fc:	e0 e8       	ldi	r30, 0x80	; 128
     2fe:	f6 e0       	ldi	r31, 0x06	; 6
     300:	85 83       	std	Z+5, r24	; 0x05
    return;
}
     302:	0f 90       	pop	r0
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <captureSweep>:
    return;
}
*/

void captureSweep(int16_t *outputData)
{
     30c:	fc 01       	movw	r30, r24
    //Begin sampling on the Distal
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     30e:	88 e0       	ldi	r24, 0x08	; 8
     310:	80 93 21 02 	sts	0x0221, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     314:	80 e1       	ldi	r24, 0x10	; 16
     316:	80 93 29 02 	sts	0x0229, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     31a:	88 e1       	ldi	r24, 0x18	; 24
     31c:	80 93 31 02 	sts	0x0231, r24
    ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
     320:	80 e2       	ldi	r24, 0x20	; 32
     322:	80 93 39 02 	sts	0x0239, r24

    asm("nop"); // delay for mux switch
     326:	00 00       	nop
    asm("nop");
     328:	00 00       	nop

    ADCA.CTRLA = ADC_CH3START_bm | ADC_CH2START_bm | ADC_CH1START_bm | ADC_CH0START_bm | ADC_ENABLE_bm;
     32a:	8d e3       	ldi	r24, 0x3D	; 61
     32c:	80 93 00 02 	sts	0x0200, r24

    //Now wait for the conclusion of the sampling
    while(!(ADCA.INTFLAGS & ADC_CH3IF_bm));
     330:	80 91 06 02 	lds	r24, 0x0206
     334:	83 ff       	sbrs	r24, 3
     336:	fc cf       	rjmp	.-8      	; 0x330 <captureSweep+0x24>
    while(!(ADCA.INTFLAGS & ADC_CH2IF_bm));
     338:	80 91 06 02 	lds	r24, 0x0206
     33c:	82 ff       	sbrs	r24, 2
     33e:	fc cf       	rjmp	.-8      	; 0x338 <captureSweep+0x2c>
    while(!(ADCA.INTFLAGS & ADC_CH1IF_bm));
     340:	80 91 06 02 	lds	r24, 0x0206
     344:	81 ff       	sbrs	r24, 1
     346:	fc cf       	rjmp	.-8      	; 0x340 <captureSweep+0x34>
    while(!(ADCA.INTFLAGS & ADC_CH0IF_bm));
     348:	80 91 06 02 	lds	r24, 0x0206
     34c:	80 ff       	sbrs	r24, 0
     34e:	fc cf       	rjmp	.-8      	; 0x348 <captureSweep+0x3c>

    //Sampling complete
    outputData[0] = ADCA.CH0RES;
     350:	80 91 10 02 	lds	r24, 0x0210
     354:	90 91 11 02 	lds	r25, 0x0211
     358:	80 83       	st	Z, r24
     35a:	91 83       	std	Z+1, r25	; 0x01
    outputData[1] = ADCA.CH1RES;
     35c:	80 91 12 02 	lds	r24, 0x0212
     360:	90 91 13 02 	lds	r25, 0x0213
     364:	82 83       	std	Z+2, r24	; 0x02
     366:	93 83       	std	Z+3, r25	; 0x03
    outputData[2] = ADCA.CH2RES;
     368:	80 91 14 02 	lds	r24, 0x0214
     36c:	90 91 15 02 	lds	r25, 0x0215
     370:	84 83       	std	Z+4, r24	; 0x04
     372:	95 83       	std	Z+5, r25	; 0x05
    outputData[3] = ADCA.CH3RES;
     374:	80 91 16 02 	lds	r24, 0x0216
     378:	90 91 17 02 	lds	r25, 0x0217
     37c:	86 83       	std	Z+6, r24	; 0x06
     37e:	97 83       	std	Z+7, r25	; 0x07

    ADCA.INTFLAGS = ADC_CH3IF_bm | ADC_CH2IF_bm | ADC_CH1IF_bm | ADC_CH0IF_bm;
     380:	8f e0       	ldi	r24, 0x0F	; 15
     382:	e0 e0       	ldi	r30, 0x00	; 0
     384:	f2 e0       	ldi	r31, 0x02	; 2
     386:	86 83       	std	Z+6, r24	; 0x06
    // outputData[6] = ADCA.CH2RES;

    // ADCA.INTFLAGS = ADC_CH2IF_bm | ADC_CH1IF_bm | ADC_CH0IF_bm;

    return;
}
     388:	08 95       	ret

0000038a <configureADC>:
*
* Note that an internal reference is being used in this test setup.
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     38e:	aa ec       	ldi	r26, 0xCA	; 202
     390:	b1 e0       	ldi	r27, 0x01	; 1
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	8c 93       	st	X, r24
    result = pgm_read_byte(index);
     396:	e0 e2       	ldi	r30, 0x20	; 32
     398:	f0 e0       	ldi	r31, 0x00	; 0
     39a:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     39c:	1c 92       	st	X, r1
* Note that an internal reference is being used in this test setup.
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
    ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     39e:	c0 e0       	ldi	r28, 0x00	; 0
     3a0:	d2 e0       	ldi	r29, 0x02	; 2
     3a2:	ec 87       	std	Y+12, r30	; 0x0c
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     3a4:	8c 93       	st	X, r24
    result = pgm_read_byte(index);
     3a6:	e1 e2       	ldi	r30, 0x21	; 33
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     3ac:	1c 92       	st	X, r1
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
    ADCA.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
    ADCA.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     3ae:	ed 87       	std	Y+13, r30	; 0x0d
    //EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;

    //ADCA.EVCTRL = ADC_SWEEP_0123_gc | ADC_EVSEL_3456_gc | ADC_EVACT_SWEEP_gc;

    //Maximum ADC clock is 2 MHz.  This requires a prescaler of 16 on a CPU clock of 32 MHz
    ADCA.PRESCALER = ADC_PRESCALER_DIV16_gc;
     3b0:	8c 83       	std	Y+4, r24	; 0x04
    //CURRENT_ADC.PRESCALER = ADC_PRESCALER_DIV256_gc;

#ifdef USE_INTERNAL_REF
    ADCA.REFCTRL = ADC_REFSEL_VCC_gc;
#else
    ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
     3b2:	20 e2       	ldi	r18, 0x20	; 32
     3b4:	2a 83       	std	Y+2, r18	; 0x02
#endif

#warning The ADC.CH structure is wrong in AU parts.  Just use the ADC_CH0_MUXCTRL, etc. defines instead

    //CH0 is Distal 1 and Dynamic 1
    ADCA_CH0_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	80 93 20 02 	sts	0x0220, r24
    ADCA_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     3bc:	98 e0       	ldi	r25, 0x08	; 8
     3be:	90 93 21 02 	sts	0x0221, r25
    ADCA_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     3c2:	10 92 22 02 	sts	0x0222, r1

    //CH1 is Distal 2 and Dynamic 2
    ADCA_CH1_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3c6:	80 93 28 02 	sts	0x0228, r24
    ADCA_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN2_gc;
     3ca:	90 e1       	ldi	r25, 0x10	; 16
     3cc:	90 93 29 02 	sts	0x0229, r25
    ADCA_CH1_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     3d0:	10 92 2a 02 	sts	0x022A, r1

    //CH2 is Distal 3 and Dynamic 3
    ADCA_CH2_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3d4:	80 93 30 02 	sts	0x0230, r24
    ADCA_CH2_MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;
     3d8:	38 e1       	ldi	r19, 0x18	; 24
     3da:	30 93 31 02 	sts	0x0231, r19
    ADCA_CH2_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     3de:	10 92 32 02 	sts	0x0232, r1

    //CH3 is Distal 4 only
    ADCA_CH3_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     3e2:	80 93 38 02 	sts	0x0238, r24
    ADCA_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
     3e6:	20 93 39 02 	sts	0x0239, r18
    ADCA_CH3_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     3ea:	10 92 3a 02 	sts	0x023A, r1

    //Configure for Unsigned operation
    ADCA.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;;
     3ee:	99 83       	std	Y+1, r25	; 0x01
    ADCA.CTRLA = ADC_ENABLE_bm;
     3f0:	88 83       	st	Y, r24
    //ADC_TC.CTRLE = 0x00;
    //ADC_TC.PERBUF = 3125;
    //ADC_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
    //ADC_TC.CTRLA = TC_CLKSEL_DIV1024_gc;

}
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <prepareDMAChannel.constprop.0>:
* This should be called before fireDMAChannel()
************************************************************************/
static void prepareDMAChannel(DMA_CH_t *selectedChannel, uint8_t usartTrigger, USART_t *targetUSART, volatile uint8_t *targetBuffer, uint8_t isOutbound)
{
    //Configure the chosen channel to read from a fixed UART into a linear array
    if(isOutbound)
     3f8:	44 23       	and	r20, r20
     3fa:	11 f0       	breq	.+4      	; 0x400 <prepareDMAChannel.constprop.0+0x8>
    {
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | \
     3fc:	98 ed       	ldi	r25, 0xD8	; 216
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <prepareDMAChannel.constprop.0+0xa>
                       DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_FIXED_gc;
    } else {
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_FIXED_gc | \
     400:	9d e8       	ldi	r25, 0x8D	; 141
     402:	e0 e1       	ldi	r30, 0x10	; 16
     404:	f1 e0       	ldi	r31, 0x01	; 1
     406:	92 83       	std	Z+2, r25	; 0x02
                       DMA_CH_DESTRELOAD_TRANSACTION_gc | DMA_CH_DESTDIR_INC_gc;
    }

    //Set to perform one block transfer corresponding to one command packet
    //Technically not necessary because REPEAT will not be set in CTRLA
    selectedChannel->REPCNT = 0x01;
     408:	e0 e1       	ldi	r30, 0x10	; 16
     40a:	f1 e0       	ldi	r31, 0x01	; 1
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	96 83       	std	Z+6, r25	; 0x06
    //This part has 16 bit pointers, so cast appropriately.
    //Memory addresses are 24 bits to allow for external memory to be mapped into one address space
    //Same with internal EEPROM Data memory.
    //Since these locations are in lower memory, fix the high order address bits to zero.
    //Mapping external memory will require more care.
    if(isOutbound)
     410:	44 23       	and	r20, r20
     412:	41 f0       	breq	.+16     	; 0x424 <prepareDMAChannel.constprop.0+0x2c>
    {
        selectedChannel->DESTADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     414:	90 ea       	ldi	r25, 0xA0	; 160
     416:	94 87       	std	Z+12, r25	; 0x0c
        selectedChannel->DESTADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     418:	99 e0       	ldi	r25, 0x09	; 9
     41a:	95 87       	std	Z+13, r25	; 0x0d
        selectedChannel->DESTADDR2 = 0;
     41c:	16 86       	std	Z+14, r1	; 0x0e

        selectedChannel->SRCADDR0 = (uint16_t)targetBuffer & 0x00FF;
     41e:	60 87       	std	Z+8, r22	; 0x08
        selectedChannel->SRCADDR1 = (uint16_t)targetBuffer >> 8;
     420:	71 87       	std	Z+9, r23	; 0x09
     422:	07 c0       	rjmp	.+14     	; 0x432 <prepareDMAChannel.constprop.0+0x3a>
        selectedChannel->SRCADDR2 = 0;
    } else {
        selectedChannel->DESTADDR0 = (uint16_t)targetBuffer & 0x00FF;
     424:	64 87       	std	Z+12, r22	; 0x0c
        selectedChannel->DESTADDR1 = (uint16_t)targetBuffer >> 8;
     426:	75 87       	std	Z+13, r23	; 0x0d
        selectedChannel->DESTADDR2 = 0;
     428:	16 86       	std	Z+14, r1	; 0x0e

        selectedChannel->SRCADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     42a:	90 ea       	ldi	r25, 0xA0	; 160
     42c:	90 87       	std	Z+8, r25	; 0x08
        selectedChannel->SRCADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     42e:	99 e0       	ldi	r25, 0x09	; 9
     430:	91 87       	std	Z+9, r25	; 0x09
        selectedChannel->SRCADDR2 = 0;
     432:	12 86       	std	Z+10, r1	; 0x0a
    }

    //Trigger on received data
    selectedChannel->TRIGSRC = usartTrigger;
     434:	e0 e1       	ldi	r30, 0x10	; 16
     436:	f1 e0       	ldi	r31, 0x01	; 1
     438:	83 83       	std	Z+3, r24	; 0x03

    //Interrupt on this channel when the transaction is complete, and clear any pending flags
    if(isOutbound)
     43a:	44 23       	and	r20, r20
     43c:	49 f0       	breq	.+18     	; 0x450 <prepareDMAChannel.constprop.0+0x58>
    {
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_OFF_gc | DMA_CH_TRNIF_bm;
     43e:	80 e1       	ldi	r24, 0x10	; 16
     440:	81 83       	std	Z+1, r24	; 0x01
        targetUSART->STATUS = USART_TXCIF_bm;
     442:	e0 ea       	ldi	r30, 0xA0	; 160
     444:	f9 e0       	ldi	r31, 0x09	; 9
     446:	80 e4       	ldi	r24, 0x40	; 64
     448:	81 83       	std	Z+1, r24	; 0x01
        targetUSART->CTRLA = USART_TXCINTLVL_LO_gc | USART_RXCINTLVL_OFF_gc;
     44a:	84 e0       	ldi	r24, 0x04	; 4
     44c:	83 83       	std	Z+3, r24	; 0x03
     44e:	08 95       	ret
    } else
    {
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc | DMA_CH_TRNIF_bm;
     450:	81 e1       	ldi	r24, 0x11	; 17
     452:	81 83       	std	Z+1, r24	; 0x01
     454:	08 95       	ret

00000456 <configureHalfDuplexLink.constprop.1>:
 * Configures hardware and DMA channels to support the requested stream configuration
 ************************************************************************/

static void configureHalfDuplexLink(SERIAL_STREAM_t selectedStream, SERIAL_DIRECTION_t selectedDirection)
{
    cli();
     456:	f8 94       	cli
    switch(selectedStream)
    {
        case UPSTREAM:
            //Abort any pending DMA transfers
            if(UPSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm)
     458:	90 91 11 01 	lds	r25, 0x0111
     45c:	97 ff       	sbrs	r25, 7
     45e:	06 c0       	rjmp	.+12     	; 0x46c <configureHalfDuplexLink.constprop.1+0x16>
            {
                UPSTREAM_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
     460:	90 91 10 01 	lds	r25, 0x0110
     464:	9f 77       	andi	r25, 0x7F	; 127
     466:	e0 e0       	ldi	r30, 0x00	; 0
     468:	f1 e0       	ldi	r31, 0x01	; 1
     46a:	90 8b       	std	Z+16, r25	; 0x10
            }

            upstreamRxDone = 0;
     46c:	10 92 08 20 	sts	0x2008, r1
     470:	10 92 09 20 	sts	0x2009, r1
            //upstreamTxDone = 0;
            upstreamBusy = 0;
     474:	10 92 05 20 	sts	0x2005, r1

            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
     478:	88 23       	and	r24, r24
     47a:	91 f4       	brne	.+36     	; 0x4a0 <configureHalfDuplexLink.constprop.1+0x4a>
            {
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_DIST_USART_INBOUND_TRIGGER, &UPSTREAM_DIST_USART, inbound_upstream_data,0);
     47c:	8b e6       	ldi	r24, 0x6B	; 107
     47e:	63 ed       	ldi	r22, 0xD3	; 211
     480:	70 e2       	ldi	r23, 0x20	; 32
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <prepareDMAChannel.constprop.0>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     488:	87 e0       	ldi	r24, 0x07	; 7
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	e0 e1       	ldi	r30, 0x10	; 16
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	84 83       	std	Z+4, r24	; 0x04
     492:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	80 93 10 01 	sts	0x0110, r24
            if(selectedDirection == INBOUND)
            {
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_DIST_USART_INBOUND_TRIGGER, &UPSTREAM_DIST_USART, inbound_upstream_data,0);

                activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
                UPSTREAM_CONFIG = INBOUND;
     49a:	10 92 0a 20 	sts	0x200A, r1
     49e:	0f c0       	rjmp	.+30     	; 0x4be <configureHalfDuplexLink.constprop.1+0x68>

            } else {
                UPSTREAM_DIST_USART.STATUS = USART_TXCIF_bm;
     4a0:	e0 ea       	ldi	r30, 0xA0	; 160
     4a2:	f9 e0       	ldi	r31, 0x09	; 9
     4a4:	80 e4       	ldi	r24, 0x40	; 64
     4a6:	81 83       	std	Z+1, r24	; 0x01
                UPSTREAM_DIST_USART.CTRLA = USART_TXCINTLVL_LO_gc | USART_RXCINTLVL_OFF_gc;
     4a8:	84 e0       	ldi	r24, 0x04	; 4
     4aa:	83 83       	std	Z+3, r24	; 0x03
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_DIST_USART_OUTBOUND_TRIGGER, &UPSTREAM_DIST_USART, outbound_upstream_data + 1,1);
     4ac:	8c e6       	ldi	r24, 0x6C	; 108
     4ae:	6c e0       	ldi	r22, 0x0C	; 12
     4b0:	70 e2       	ldi	r23, 0x20	; 32
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <prepareDMAChannel.constprop.0>
                //Do not send all data through DMA.  Instead send outbound upstream data + 1.  This allows for the insertion of a small delay between size and data
                UPSTREAM_CONFIG = OUTBOUND;
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	80 93 0a 20 	sts	0x200A, r24
            break;
        default:
            break;
    }

    sei();
     4be:	78 94       	sei
    return;
}
     4c0:	08 95       	ret

000004c2 <__vector_14>:
static void activateDMAChannel(DMA_CH_t *targetChannel,int numBytes);
static void configureHalfDuplexLink(SERIAL_STREAM_t selectedStream, SERIAL_DIRECTION_t selectedDirection);


ISR(DAISY_TC_vect)
{
     4c2:	1f 92       	push	r1
     4c4:	0f 92       	push	r0
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	0f 92       	push	r0
     4ca:	11 24       	eor	r1, r1
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
     4d0:	4f 93       	push	r20
     4d2:	5f 93       	push	r21
     4d4:	6f 93       	push	r22
     4d6:	7f 93       	push	r23
     4d8:	8f 93       	push	r24
     4da:	9f 93       	push	r25
     4dc:	af 93       	push	r26
     4de:	bf 93       	push	r27
     4e0:	ef 93       	push	r30
     4e2:	ff 93       	push	r31
    //Check if the DMA is busy and waiting on incoming data
    if(UPSTREAM_CONFIG == OUTBOUND)
     4e4:	80 91 0a 20 	lds	r24, 0x200A
     4e8:	81 30       	cpi	r24, 0x01	; 1
     4ea:	19 f4       	brne	.+6      	; 0x4f2 <__vector_14+0x30>
    {
        //No need to reset DMA
        upstreamBusy = 0;
     4ec:	10 92 05 20 	sts	0x2005, r1
     4f0:	2b c0       	rjmp	.+86     	; 0x548 <__vector_14+0x86>
    }
    else
    {
        if((UPSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm) || !(UPSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm))
     4f2:	80 91 11 01 	lds	r24, 0x0111
     4f6:	87 fd       	sbrc	r24, 7
     4f8:	04 c0       	rjmp	.+8      	; 0x502 <__vector_14+0x40>
     4fa:	80 91 10 01 	lds	r24, 0x0110
     4fe:	87 fd       	sbrc	r24, 7
     500:	05 c0       	rjmp	.+10     	; 0x50c <__vector_14+0x4a>
        {
            upstreamBusy++;
     502:	80 91 05 20 	lds	r24, 0x2005
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	80 93 05 20 	sts	0x2005, r24
        }

        if(upstreamBusy > 2)
     50c:	80 91 05 20 	lds	r24, 0x2005
     510:	83 30       	cpi	r24, 0x03	; 3
     512:	d0 f0       	brcs	.+52     	; 0x548 <__vector_14+0x86>
        {
            //Cancel and rearm the incoming DMA
            UPSTREAM_DMA.CTRLA = 0x00;
     514:	e0 e0       	ldi	r30, 0x00	; 0
     516:	f1 e0       	ldi	r31, 0x01	; 1
     518:	10 8a       	std	Z+16, r1	; 0x10
            //Wait for it to disable
            while(UPSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     51a:	80 91 10 01 	lds	r24, 0x0110
     51e:	87 fd       	sbrc	r24, 7
     520:	fc cf       	rjmp	.-8      	; 0x51a <__vector_14+0x58>

            //Issue a reset
            UPSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     522:	80 e4       	ldi	r24, 0x40	; 64
     524:	e0 e0       	ldi	r30, 0x00	; 0
     526:	f1 e0       	ldi	r31, 0x01	; 1
     528:	80 8b       	std	Z+16, r24	; 0x10

            //Re-arm
            prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_DIST_USART_INBOUND_TRIGGER, &UPSTREAM_DIST_USART, inbound_upstream_data,0);
     52a:	8b e6       	ldi	r24, 0x6B	; 107
     52c:	63 ed       	ldi	r22, 0xD3	; 211
     52e:	70 e2       	ldi	r23, 0x20	; 32
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <prepareDMAChannel.constprop.0>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     536:	87 e0       	ldi	r24, 0x07	; 7
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	e0 e1       	ldi	r30, 0x10	; 16
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	84 83       	std	Z+4, r24	; 0x04
     540:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     542:	84 e8       	ldi	r24, 0x84	; 132
     544:	80 93 10 01 	sts	0x0110, r24
            //Re-arm
            prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_DIST_USART_INBOUND_TRIGGER, &UPSTREAM_DIST_USART, inbound_upstream_data,0);
            activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
        }
    }
}
     548:	ff 91       	pop	r31
     54a:	ef 91       	pop	r30
     54c:	bf 91       	pop	r27
     54e:	af 91       	pop	r26
     550:	9f 91       	pop	r25
     552:	8f 91       	pop	r24
     554:	7f 91       	pop	r23
     556:	6f 91       	pop	r22
     558:	5f 91       	pop	r21
     55a:	4f 91       	pop	r20
     55c:	3f 91       	pop	r19
     55e:	2f 91       	pop	r18
     560:	0f 90       	pop	r0
     562:	0f be       	out	0x3f, r0	; 63
     564:	0f 90       	pop	r0
     566:	1f 90       	pop	r1
     568:	18 95       	reti

0000056a <__vector_6>:
/************************************************************************
 * ISRs for the DMA engines.
 * Set flags for the Daisy Chain Task
 ************************************************************************/
ISR(UPSTREAM_DMA_vect)
{
     56a:	1f 92       	push	r1
     56c:	0f 92       	push	r0
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	0f 92       	push	r0
     572:	11 24       	eor	r1, r1
     574:	8f 93       	push	r24
     576:	9f 93       	push	r25
     578:	ef 93       	push	r30
     57a:	ff 93       	push	r31
    //LEDtoggle();
    
    if(UPSTREAM_DMA.CTRLB & DMA_CH_ERRIF_bm)
     57c:	80 91 11 01 	lds	r24, 0x0111
     580:	85 fd       	sbrc	r24, 5
     582:	15 c0       	rjmp	.+42     	; 0x5ae <__vector_6+0x44>
        //UPSTREAM_DMA.CTRLB = UPSTREAM_DMA.CTRLB | DMA_CH_ERRIF_bm;
        //Cancel and rearm the incoming DMA
        return;
    }

    if(UPSTREAM_DMA.CTRLB & DMA_CH_TRNIF_bm)
     584:	80 91 11 01 	lds	r24, 0x0111
     588:	84 ff       	sbrs	r24, 4
     58a:	11 c0       	rjmp	.+34     	; 0x5ae <__vector_6+0x44>
    {
        //The transfer is complete and should be acked
        UPSTREAM_DMA.CTRLB = UPSTREAM_DMA.CTRLB | DMA_CH_TRNIF_bm;
     58c:	80 91 11 01 	lds	r24, 0x0111
     590:	80 61       	ori	r24, 0x10	; 16
     592:	e0 e0       	ldi	r30, 0x00	; 0
     594:	f1 e0       	ldi	r31, 0x01	; 1
     596:	81 8b       	std	Z+17, r24	; 0x11
        upstreamBusy = 0;
     598:	10 92 05 20 	sts	0x2005, r1
        notifyDaisy = 1;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	80 93 04 20 	sts	0x2004, r24
        upstreamRxDone = 1;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	80 93 08 20 	sts	0x2008, r24
     5aa:	90 93 09 20 	sts	0x2009, r25
    }
}
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	9f 91       	pop	r25
     5b4:	8f 91       	pop	r24
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_90>:
    UPSTREAM_PROX_USART.STATUS = USART_TXCIF_bm;
}
*/

ISR(UPSTREAM_DIST_USART_TXDONE_vect)
{
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	8f 93       	push	r24
     5cc:	9f 93       	push	r25
     5ce:	ef 93       	push	r30
     5d0:	ff 93       	push	r31
    upstreamBusy = 0;
     5d2:	10 92 05 20 	sts	0x2005, r1
    notifyDaisy = 1;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	80 93 04 20 	sts	0x2004, r24
    upstreamTxDone = 1;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	80 93 06 20 	sts	0x2006, r24
     5e4:	90 93 07 20 	sts	0x2007, r25
    UPSTREAM_DIST_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc;
     5e8:	e0 ea       	ldi	r30, 0xA0	; 160
     5ea:	f9 e0       	ldi	r31, 0x09	; 9
     5ec:	13 82       	std	Z+3, r1	; 0x03
    UPSTREAM_DIST_USART.STATUS = USART_TXCIF_bm;
     5ee:	80 e4       	ldi	r24, 0x40	; 64
     5f0:	81 83       	std	Z+1, r24	; 0x01
}
     5f2:	ff 91       	pop	r31
     5f4:	ef 91       	pop	r30
     5f6:	9f 91       	pop	r25
     5f8:	8f 91       	pop	r24
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	0f 90       	pop	r0
     600:	1f 90       	pop	r1
     602:	18 95       	reti

00000604 <computeChecksum>:
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     604:	fc 01       	movw	r30, r24
    for(int i=0;i<packetSize;i++)
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     60a:	80 e0       	ldi	r24, 0x00	; 0
    for(int i=0;i<packetSize;i++)
     60c:	04 c0       	rjmp	.+8      	; 0x616 <computeChecksum+0x12>
    {
        accumulator += packetBuffer[i];
     60e:	91 91       	ld	r25, Z+
     610:	89 0f       	add	r24, r25
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
    for(int i=0;i<packetSize;i++)
     612:	2f 5f       	subi	r18, 0xFF	; 255
     614:	3f 4f       	sbci	r19, 0xFF	; 255
     616:	26 17       	cp	r18, r22
     618:	37 07       	cpc	r19, r23
     61a:	cc f3       	brlt	.-14     	; 0x60e <computeChecksum+0xa>
    {
        accumulator += packetBuffer[i];
    }

    return (0x00 - accumulator);
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	90 95       	com	r25
     620:	81 95       	neg	r24
     622:	9f 4f       	sbci	r25, 0xFF	; 255
}
     624:	08 95       	ret

00000626 <configureDaisyUSART>:
        //COMMAND_USART.BAUDCTRLA = 34;                            //Configure for 57600 baud rate with normal baud rate generation
        //COMMAND_USART.BAUDCTRLB = 0;
        targetUSART->BAUDCTRLA = 33;                            //Configure for 115200 with fractional baud rate generation
        targetUSART->BAUDCTRLB = 0xF0;
    } else {
        targetUSART->BAUDCTRLA = 0;                                //Configure for 2 MBaud by setting baud rate to zero
     626:	e0 ea       	ldi	r30, 0xA0	; 160
     628:	f9 e0       	ldi	r31, 0x09	; 9
     62a:	16 82       	std	Z+6, r1	; 0x06
        targetUSART->BAUDCTRLB = 0x00;                            //and BSEL to zero
     62c:	17 82       	std	Z+7, r1	; 0x07
    }
    targetUSART->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | \
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	85 83       	std	Z+5, r24	; 0x05
                         USART_PMODE_DISABLED_gc | \
                          USART_CHSIZE_8BIT_gc;                //Configure port settings for 8 bits of data, 1 stop bit.
    targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     632:	84 81       	ldd	r24, Z+4	; 0x04
     634:	88 61       	ori	r24, 0x18	; 24
     636:	84 83       	std	Z+4, r24	; 0x04
{
    //First initialize the upstream
    configureUSARTHardware(&UPSTREAM_DIST_USART,0,0);

    //Prepare DMA transfers
    DMA.CTRL = DMA_ENABLE_bm;
     638:	80 e8       	ldi	r24, 0x80	; 128
     63a:	80 93 00 01 	sts	0x0100, r24

    //Assume default configuration with downstream OUT and upstream IN
    configureHalfDuplexLink(UPSTREAM,INBOUND);
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	0e 94 2b 02 	call	0x456	; 0x456 <configureHalfDuplexLink.constprop.1>

    //Activate the heartbeat timer for resetting inbound DMA as necessary
    //Interrupt every half millisecond
    //At 32 MHz internal oscillator with 1024 prescaler,
    DAISY_TC.CTRLB = TC_WGMODE_NORMAL_gc;
     644:	e0 e0       	ldi	r30, 0x00	; 0
     646:	f8 e0       	ldi	r31, 0x08	; 8
     648:	11 82       	std	Z+1, r1	; 0x01
    DAISY_TC.CTRLC = 0x00;
     64a:	12 82       	std	Z+2, r1	; 0x02
    DAISY_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     64c:	13 82       	std	Z+3, r1	; 0x03
    DAISY_TC.CTRLE = 0x00;
     64e:	14 82       	std	Z+4, r1	; 0x04
    DAISY_TC.PERBUF = 16;
     650:	80 e1       	ldi	r24, 0x10	; 16
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	86 ab       	sts	0x56, r24
     656:	97 ab       	sts	0x57, r25
    DAISY_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	86 83       	std	Z+6, r24	; 0x06
    DAISY_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	80 83       	st	Z, r24

    //Activate the Upstream DMA for a command packet of data
    //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
}
     660:	08 95       	ret

00000662 <doDaisyTask>:
 * Maintains system state and manages the transmission/reception of chained data
 * Should be called whenever notifyDaisy is set to 1.
 ************************************************************************/

void doDaisyTask(void)
{
     662:	cf 93       	push	r28
  //This is set to IDLE when the upstream port is idle and TRANSMITTING when it is in use
  static DAISY_STATE_t daisyState = DAISY_IDLE;
  uint8_t packetSize;

  //First clear the daisy notification flag
  cli();
     664:	f8 94       	cli
  notifyDaisy = 0;
     666:	10 92 04 20 	sts	0x2004, r1
  sei();
     66a:	78 94       	sei

  switch(daisyState)
     66c:	80 91 da 20 	lds	r24, 0x20DA
     670:	88 23       	and	r24, r24
     672:	21 f0       	breq	.+8      	; 0x67c <doDaisyTask+0x1a>
     674:	81 30       	cpi	r24, 0x01	; 1
     676:	09 f0       	breq	.+2      	; 0x67a <doDaisyTask+0x18>
     678:	91 c0       	rjmp	.+290    	; 0x79c <doDaisyTask+0x13a>
     67a:	7f c0       	rjmp	.+254    	; 0x77a <doDaisyTask+0x118>
    {
    case DAISY_IDLE:

      if(upstreamRxDone)
     67c:	80 91 08 20 	lds	r24, 0x2008
     680:	90 91 09 20 	lds	r25, 0x2009
     684:	00 97       	sbiw	r24, 0x00	; 0
     686:	09 f4       	brne	.+2      	; 0x68a <doDaisyTask+0x28>
     688:	89 c0       	rjmp	.+274    	; 0x79c <doDaisyTask+0x13a>
    {
      //A packet arrived from upstream.  Parse it and compute some sort of reply.
      cli();
     68a:	f8 94       	cli
      upstreamRxDone = 0;
     68c:	10 92 08 20 	sts	0x2008, r1
     690:	10 92 09 20 	sts	0x2009, r1
      sei();
     694:	78 94       	sei

      //A data packet has arrived from upstream.  Validate it
      if(computeChecksum((uint8_t *)inbound_upstream_data,COMMAND_PACKET_SIZE) != 0x00)
     696:	83 ed       	ldi	r24, 0xD3	; 211
     698:	90 e2       	ldi	r25, 0x20	; 32
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	0e 94 02 03 	call	0x604	; 0x604 <computeChecksum>
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	c1 f1       	breq	.+112    	; 0x716 <doDaisyTask+0xb4>
        {
          //Invalid checksum
          RxCheckSumErrCnt[0]++;
     6a6:	80 91 00 20 	lds	r24, 0x2000
     6aa:	90 91 01 20 	lds	r25, 0x2001
     6ae:	01 96       	adiw	r24, 0x01	; 1
     6b0:	80 93 00 20 	sts	0x2000, r24
     6b4:	90 93 01 20 	sts	0x2001, r25
          outbound_upstream_data[0] = 3; //Packet size
     6b8:	83 e0       	ldi	r24, 0x03	; 3
     6ba:	80 93 0b 20 	sts	0x200B, r24
          outbound_upstream_data[1] = inbound_upstream_data[1]; //Reflected command byte
     6be:	80 91 d4 20 	lds	r24, 0x20D4
     6c2:	80 93 0c 20 	sts	0x200C, r24
          outbound_upstream_data[2] = CHECKSUM_ERROR; //Checksum error
     6c6:	c1 e0       	ldi	r28, 0x01	; 1
     6c8:	c0 93 0d 20 	sts	0x200D, r28
          outbound_upstream_data[3] = computeChecksum((uint8_t *)outbound_upstream_data,3); //checksum
     6cc:	8b e0       	ldi	r24, 0x0B	; 11
     6ce:	90 e2       	ldi	r25, 0x20	; 32
     6d0:	63 e0       	ldi	r22, 0x03	; 3
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	0e 94 02 03 	call	0x604	; 0x604 <computeChecksum>
     6d8:	80 93 0e 20 	sts	0x200E, r24
          configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     6dc:	81 e0       	ldi	r24, 0x01	; 1
     6de:	0e 94 2b 02 	call	0x456	; 0x456 <configureHalfDuplexLink.constprop.1>
        UPSTREAM_DIST_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     6e2:	e0 ea       	ldi	r30, 0xA0	; 160
     6e4:	f9 e0       	ldi	r31, 0x09	; 9
     6e6:	13 82       	std	Z+3, r1	; 0x03
        UPSTREAM_DIST_USART.DATA = outbound_upstream_data[0];
     6e8:	80 91 0b 20 	lds	r24, 0x200B
     6ec:	80 93 a0 09 	sts	0x09A0, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f0:	80 e4       	ldi	r24, 0x40	; 64
     6f2:	8a 95       	dec	r24
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <doDaisyTask+0x90>
          //_delay_us(10);
          DELAY_ROUTINE();
        UPSTREAM_DIST_USART.STATUS = USART_TXCIF_bm;
     6f6:	80 e4       	ldi	r24, 0x40	; 64
     6f8:	81 83       	std	Z+1, r24	; 0x01
        UPSTREAM_DIST_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	83 83       	std	Z+3, r24	; 0x03
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     6fe:	83 e0       	ldi	r24, 0x03	; 3
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	e0 e1       	ldi	r30, 0x10	; 16
     704:	f1 e0       	ldi	r31, 0x01	; 1
     706:	84 83       	std	Z+4, r24	; 0x04
     708:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     70a:	84 e8       	ldi	r24, 0x84	; 132
     70c:	80 93 10 01 	sts	0x0110, r24
          //_delay_us(10);
          DELAY_ROUTINE();
        UPSTREAM_DIST_USART.STATUS = USART_TXCIF_bm;
        UPSTREAM_DIST_USART.CTRLA = USART_TXCINTLVL_LO_gc;
          activateDMAChannel(&UPSTREAM_DMA,3);
          daisyState = DAISY_TRANSMITTING;
     710:	c0 93 da 20 	sts	0x20DA, r28
          break;
     714:	43 c0       	rjmp	.+134    	; 0x79c <doDaisyTask+0x13a>
        }

      if(((inbound_upstream_data[0] & 0xF0) == 0xF0) || ((inbound_upstream_data[0] & 0x0F) == 0x00))
     716:	80 91 d3 20 	lds	r24, 0x20D3
     71a:	80 7f       	andi	r24, 0xF0	; 240
     71c:	80 3f       	cpi	r24, 0xF0	; 240
     71e:	39 f0       	breq	.+14     	; 0x72e <doDaisyTask+0xcc>
     720:	80 91 d3 20 	lds	r24, 0x20D3
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	8f 70       	andi	r24, 0x0F	; 15
     728:	90 70       	andi	r25, 0x00	; 0
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	b9 f5       	brne	.+110    	; 0x79c <doDaisyTask+0x13a>
        {
          //This packet should be responded to
          packetSize = processCommand((uint8_t *)inbound_upstream_data,(uint8_t *)outbound_upstream_data);
     72e:	83 ed       	ldi	r24, 0xD3	; 211
     730:	90 e2       	ldi	r25, 0x20	; 32
     732:	6b e0       	ldi	r22, 0x0B	; 11
     734:	70 e2       	ldi	r23, 0x20	; 32
     736:	0e 94 9a 06 	call	0xd34	; 0xd34 <processCommand>
     73a:	c8 2f       	mov	r28, r24

          //Assume the command processor handled the packetization
          configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 2b 02 	call	0x456	; 0x456 <configureHalfDuplexLink.constprop.1>
        UPSTREAM_DIST_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     742:	e0 ea       	ldi	r30, 0xA0	; 160
     744:	f9 e0       	ldi	r31, 0x09	; 9
     746:	13 82       	std	Z+3, r1	; 0x03
        UPSTREAM_DIST_USART.DATA = outbound_upstream_data[0];
     748:	80 91 0b 20 	lds	r24, 0x200B
     74c:	80 93 a0 09 	sts	0x09A0, r24
     750:	80 e4       	ldi	r24, 0x40	; 64
     752:	8a 95       	dec	r24
     754:	f1 f7       	brne	.-4      	; 0x752 <doDaisyTask+0xf0>

          //_delay_us(10);
          DELAY_ROUTINE();
        UPSTREAM_DIST_USART.STATUS = USART_TXCIF_bm;
     756:	80 e4       	ldi	r24, 0x40	; 64
     758:	81 83       	std	Z+1, r24	; 0x01
        UPSTREAM_DIST_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     75a:	84 e0       	ldi	r24, 0x04	; 4
     75c:	83 83       	std	Z+3, r24	; 0x03
          activateDMAChannel(&UPSTREAM_DMA,packetSize-1);
     75e:	8c 2f       	mov	r24, r28
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	01 97       	sbiw	r24, 0x01	; 1
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     764:	e0 e1       	ldi	r30, 0x10	; 16
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	84 83       	std	Z+4, r24	; 0x04
     76a:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     76c:	84 e8       	ldi	r24, 0x84	; 132
     76e:	80 93 10 01 	sts	0x0110, r24
          //_delay_us(10);
          DELAY_ROUTINE();
        UPSTREAM_DIST_USART.STATUS = USART_TXCIF_bm;
        UPSTREAM_DIST_USART.CTRLA = USART_TXCINTLVL_LO_gc;
          activateDMAChannel(&UPSTREAM_DMA,packetSize-1);
          daisyState = DAISY_TRANSMITTING;
     772:	81 e0       	ldi	r24, 0x01	; 1
     774:	80 93 da 20 	sts	0x20DA, r24
     778:	11 c0       	rjmp	.+34     	; 0x79c <doDaisyTask+0x13a>
    }
      break;

    case DAISY_TRANSMITTING:
      //System is pushing data upstream, but it might be done
      if(upstreamTxDone)
     77a:	80 91 06 20 	lds	r24, 0x2006
     77e:	90 91 07 20 	lds	r25, 0x2007
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	59 f0       	breq	.+22     	; 0x79c <doDaisyTask+0x13a>
    {
      //The upstream transmitter is loaded with data (but possibly not done)

      cli();
     786:	f8 94       	cli
      upstreamTxDone = 0;
     788:	10 92 06 20 	sts	0x2006, r1
     78c:	10 92 07 20 	sts	0x2007, r1
      sei();
     790:	78 94       	sei
      daisyState = DAISY_IDLE;
     792:	10 92 da 20 	sts	0x20DA, r1

      configureHalfDuplexLink(UPSTREAM,INBOUND);
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	0e 94 2b 02 	call	0x456	; 0x456 <configureHalfDuplexLink.constprop.1>
      break;

    default:
      break;
    }
}
     79c:	cf 91       	pop	r28
     79e:	08 95       	ret

000007a0 <configureSPIModulesEncoder>:

void configureSPIModulesEncoder(void)
{
    //This part expects an idling high SCLK, and it wants to setup data on the RISING clock edge and sample on the FALLING.  This is Mode 2

    ENCODERSPI.INTCTRL = SPI_INTLVL_OFF_gc;
     7a0:	e0 ec       	ldi	r30, 0xC0	; 192
     7a2:	f8 e0       	ldi	r31, 0x08	; 8
     7a4:	11 82       	std	Z+1, r1	; 0x01
    ENCODERSPI.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_2_gc | SPI_PRESCALER_DIV64_gc | SPI_CLK2X_bm;
     7a6:	8a ed       	ldi	r24, 0xDA	; 218
     7a8:	80 83       	st	Z, r24
}
     7aa:	08 95       	ret

000007ac <readEncoder>:

uint16_t readEncoder(void)
{
    uint8_t temp;
    uint8_t temp2;
    configureSPIModulesEncoder();
     7ac:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <configureSPIModulesEncoder>
     7b0:	8a e0       	ldi	r24, 0x0A	; 10
     7b2:	8a 95       	dec	r24
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <readEncoder+0x6>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <readEncoder+0xc>
    _delay_us(1);

    ENCODERSPI.DATA = 0x00;
     7b8:	e0 ec       	ldi	r30, 0xC0	; 192
     7ba:	f8 e0       	ldi	r31, 0x08	; 8
     7bc:	13 82       	std	Z+3, r1	; 0x03
    while(!(ENCODERSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     7be:	80 91 c2 08 	lds	r24, 0x08C2
     7c2:	87 ff       	sbrs	r24, 7
     7c4:	fc cf       	rjmp	.-8      	; 0x7be <readEncoder+0x12>
    temp = ENCODERSPI.DATA;
     7c6:	20 91 c3 08 	lds	r18, 0x08C3

    ENCODERSPI.DATA = 0x00;
     7ca:	e0 ec       	ldi	r30, 0xC0	; 192
     7cc:	f8 e0       	ldi	r31, 0x08	; 8
     7ce:	13 82       	std	Z+3, r1	; 0x03
    while(!(ENCODERSPI.STATUS & SPI_IF_bm)); //wait for it to finish
     7d0:	80 91 c2 08 	lds	r24, 0x08C2
     7d4:	87 ff       	sbrs	r24, 7
     7d6:	fc cf       	rjmp	.-8      	; 0x7d0 <readEncoder+0x24>
    temp2 = ENCODERSPI.DATA;
     7d8:	80 91 c3 08 	lds	r24, 0x08C3

    //The serial port is likely strange because the encoder will likely have a dummy bit at the front.
    return ((temp << 3) & 0x3F8) | ((temp2 >> 5) & 0x007); //BA: shift left 3 instead of 4
     7dc:	82 95       	swap	r24
     7de:	86 95       	lsr	r24
     7e0:	87 70       	andi	r24, 0x07	; 7
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	43 e0       	ldi	r20, 0x03	; 3
     7e8:	22 0f       	add	r18, r18
     7ea:	33 1f       	adc	r19, r19
     7ec:	4a 95       	dec	r20
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <readEncoder+0x3c>
     7f0:	28 7f       	andi	r18, 0xF8	; 248
     7f2:	33 70       	andi	r19, 0x03	; 3
     7f4:	82 2b       	or	r24, r18
     7f6:	93 2b       	or	r25, r19
}
     7f8:	08 95       	ret

000007fa <configurePortIODistal>:
    //PA3 - DISTAL3
    //PA4 - DISTAL4
    //PA5 - SPARE1
    //PA6 - NC
    //PA7 - NC
    PORTA.OUT = 0x00;
     7fa:	e0 e0       	ldi	r30, 0x00	; 0
     7fc:	f6 e0       	ldi	r31, 0x06	; 6
     7fe:	14 82       	std	Z+4, r1	; 0x04
    PORTA.DIR = 0x00;
     800:	10 82       	st	Z, r1

    //PB0 - nCS1
    //PB1 - nCS2
    //PB2 - nCS3
    //PB3 - nCS4
    PORTB.OUT = 0x0F;
     802:	e0 e2       	ldi	r30, 0x20	; 32
     804:	f6 e0       	ldi	r31, 0x06	; 6
     806:	8f e0       	ldi	r24, 0x0F	; 15
     808:	84 83       	std	Z+4, r24	; 0x04
    PORTB.DIR = 0x0F;
     80a:	80 83       	st	Z, r24
    //PC3 - nCS7
    //PC4 - nCS8
    //PC5 - MOSI
    //PC6 - MISO
    //PC7 - SCK
    PORTC.OUT = 0x1e;
     80c:	e0 e4       	ldi	r30, 0x40	; 64
     80e:	f6 e0       	ldi	r31, 0x06	; 6
     810:	8e e1       	ldi	r24, 0x1E	; 30
     812:	84 83       	std	Z+4, r24	; 0x04
    PORTC.DIR = 0xBF;
     814:	8f eb       	ldi	r24, 0xBF	; 191
     816:	80 83       	st	Z, r24
    //PD3 - TX_INBOUND
    //PD4 - NC
    //PD5 - ACC MOSI
    //PD6 - ACC MISO
    //PD7 - ACC_SCK
    PORTD.OUT = 0x02;
     818:	e0 e6       	ldi	r30, 0x60	; 96
     81a:	f6 e0       	ldi	r31, 0x06	; 6
     81c:	82 e0       	ldi	r24, 0x02	; 2
     81e:	84 83       	std	Z+4, r24	; 0x04
    PORTD.DIR = 0xAB;
     820:	8b ea       	ldi	r24, 0xAB	; 171
     822:	80 83       	st	Z, r24

    //PE0 - NC
    //PE1 - nCS9
    //PE2 - nCS10
    //PE3 - nCS11
    PORTE.OUT = 0x0E;
     824:	e0 e8       	ldi	r30, 0x80	; 128
     826:	f6 e0       	ldi	r31, 0x06	; 6
     828:	8e e0       	ldi	r24, 0x0E	; 14
     82a:	84 83       	std	Z+4, r24	; 0x04
    PORTE.DIR = 0x0E;
     82c:	80 83       	st	Z, r24
    
    //PR0 - INT1
    //PR1 - INT2
    PORTR.OUT = 0x00;
     82e:	e0 ee       	ldi	r30, 0xE0	; 224
     830:	f7 e0       	ldi	r31, 0x07	; 7
     832:	14 82       	std	Z+4, r1	; 0x04
    PORTR.DIR = 0x00;
     834:	10 82       	st	Z, r1

}
     836:	08 95       	ret

00000838 <getDoubleWord>:
}



static void getDoubleWord(uint8_t startingOpcode, uint16_t *firstResponse)
{
     838:	fb 01       	movw	r30, r22
    uint8_t dummyRead;

    //Send the data.
    SPI0.DATA = startingOpcode;
     83a:	a0 ec       	ldi	r26, 0xC0	; 192
     83c:	b8 e0       	ldi	r27, 0x08	; 8
     83e:	13 96       	adiw	r26, 0x03	; 3
     840:	8c 93       	st	X, r24
     842:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
     844:	90 91 c2 08 	lds	r25, 0x08C2
     848:	97 ff       	sbrs	r25, 7
     84a:	fc cf       	rjmp	.-8      	; 0x844 <getDoubleWord+0xc>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     84c:	90 91 c3 08 	lds	r25, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
     850:	a0 ec       	ldi	r26, 0xC0	; 192
     852:	b8 e0       	ldi	r27, 0x08	; 8
     854:	13 96       	adiw	r26, 0x03	; 3
     856:	1c 92       	st	X, r1
     858:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
     85a:	90 91 c2 08 	lds	r25, 0x08C2
     85e:	97 ff       	sbrs	r25, 7
     860:	fc cf       	rjmp	.-8      	; 0x85a <getDoubleWord+0x22>

    //Read the MSB data
    dummyRead = SPI0.DATA;
     862:	90 91 c3 08 	lds	r25, 0x08C3
    *firstResponse = dummyRead << 8;
     866:	10 82       	st	Z, r1
     868:	91 83       	std	Z+1, r25	; 0x01

    //Send the data.
    SPI0.DATA = startingOpcode+2;
     86a:	8e 5f       	subi	r24, 0xFE	; 254
     86c:	a0 ec       	ldi	r26, 0xC0	; 192
     86e:	b8 e0       	ldi	r27, 0x08	; 8
     870:	13 96       	adiw	r26, 0x03	; 3
     872:	8c 93       	st	X, r24
     874:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
     876:	80 91 c2 08 	lds	r24, 0x08C2
     87a:	87 ff       	sbrs	r24, 7
     87c:	fc cf       	rjmp	.-8      	; 0x876 <getDoubleWord+0x3e>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     87e:	80 91 c3 08 	lds	r24, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
     882:	a0 ec       	ldi	r26, 0xC0	; 192
     884:	b8 e0       	ldi	r27, 0x08	; 8
     886:	13 96       	adiw	r26, 0x03	; 3
     888:	1c 92       	st	X, r1
     88a:	13 97       	sbiw	r26, 0x03	; 3

    while(!(SPI0.STATUS & SPI_IF_bm));
     88c:	80 91 c2 08 	lds	r24, 0x08C2
     890:	87 ff       	sbrs	r24, 7
     892:	fc cf       	rjmp	.-8      	; 0x88c <getDoubleWord+0x54>

    //Read the LSB data
    dummyRead = SPI0.DATA;
     894:	20 91 c3 08 	lds	r18, 0x08C3
    *firstResponse |= dummyRead;
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	82 2b       	or	r24, r18
     8a0:	93 2b       	or	r25, r19
     8a2:	80 83       	st	Z, r24
     8a4:	91 83       	std	Z+1, r25	; 0x01

    return;
}
     8a6:	08 95       	ret

000008a8 <selectSensor>:
static void selectSensor(uint8_t tactAddress)
{
    uint8_t dummyRead;

    //Now assert the proper chip select
    switch(tactAddress)
     8a8:	88 30       	cpi	r24, 0x08	; 8
     8aa:	18 f4       	brcc	.+6      	; 0x8b2 <selectSensor+0xa>
     8ac:	84 30       	cpi	r24, 0x04	; 4
     8ae:	80 f4       	brcc	.+32     	; 0x8d0 <selectSensor+0x28>
     8b0:	05 c0       	rjmp	.+10     	; 0x8bc <selectSensor+0x14>
     8b2:	8b 30       	cpi	r24, 0x0B	; 11
     8b4:	c8 f0       	brcs	.+50     	; 0x8e8 <selectSensor+0x40>
     8b6:	8b 30       	cpi	r24, 0x0B	; 11
     8b8:	49 f5       	brne	.+82     	; 0x90c <selectSensor+0x64>
     8ba:	23 c0       	rjmp	.+70     	; 0x902 <selectSensor+0x5a>
    {
        case 0x00:
        case 0x01:
        case 0x02:
        case 0x03:
            PORTB.OUTCLR = 1 << tactAddress;
     8bc:	21 e0       	ldi	r18, 0x01	; 1
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <selectSensor+0x1e>
     8c2:	22 0f       	add	r18, r18
     8c4:	33 1f       	adc	r19, r19
     8c6:	8a 95       	dec	r24
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <selectSensor+0x1a>
     8ca:	e0 e2       	ldi	r30, 0x20	; 32
     8cc:	f6 e0       	ldi	r31, 0x06	; 6
     8ce:	17 c0       	rjmp	.+46     	; 0x8fe <selectSensor+0x56>
            break;
        case 0x04:
        case 0x05:
        case 0x06:
        case 0x07:
            PORTC.OUTCLR = 1 << (tactAddress - 0x03);
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	03 97       	sbiw	r24, 0x03	; 3
     8d4:	21 e0       	ldi	r18, 0x01	; 1
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <selectSensor+0x36>
     8da:	22 0f       	add	r18, r18
     8dc:	33 1f       	adc	r19, r19
     8de:	8a 95       	dec	r24
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <selectSensor+0x32>
     8e2:	e0 e4       	ldi	r30, 0x40	; 64
     8e4:	f6 e0       	ldi	r31, 0x06	; 6
     8e6:	0b c0       	rjmp	.+22     	; 0x8fe <selectSensor+0x56>
            break;
        case 0x08:
        case 0x09:
        case 0x0A:
            PORTE.OUTCLR = 1 << (tactAddress - 0x07);
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	07 97       	sbiw	r24, 0x07	; 7
     8ec:	21 e0       	ldi	r18, 0x01	; 1
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <selectSensor+0x4e>
     8f2:	22 0f       	add	r18, r18
     8f4:	33 1f       	adc	r19, r19
     8f6:	8a 95       	dec	r24
     8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <selectSensor+0x4a>
     8fa:	e0 e8       	ldi	r30, 0x80	; 128
     8fc:	f6 e0       	ldi	r31, 0x06	; 6
     8fe:	26 83       	std	Z+6, r18	; 0x06
            break;
     900:	16 c0       	rjmp	.+44     	; 0x92e <selectSensor+0x86>
        case 0x0B:
            PORTA.OUTCLR = 0x20;
     902:	80 e2       	ldi	r24, 0x20	; 32
     904:	e0 e0       	ldi	r30, 0x00	; 0
     906:	f6 e0       	ldi	r31, 0x06	; 6
     908:	86 83       	std	Z+6, r24	; 0x06
            break;
     90a:	11 c0       	rjmp	.+34     	; 0x92e <selectSensor+0x86>
        default:
            //Should never get here.  Invalid address
            //Reset chip select lines and get out
            PORTA.OUTSET = TACT_PORTA_MASK;
     90c:	80 e6       	ldi	r24, 0x60	; 96
     90e:	e0 e0       	ldi	r30, 0x00	; 0
     910:	f6 e0       	ldi	r31, 0x06	; 6
     912:	85 83       	std	Z+5, r24	; 0x05
            PORTB.OUTSET = TACT_PORTB_MASK;
     914:	8f e0       	ldi	r24, 0x0F	; 15
     916:	e0 e2       	ldi	r30, 0x20	; 32
     918:	f6 e0       	ldi	r31, 0x06	; 6
     91a:	85 83       	std	Z+5, r24	; 0x05
            PORTC.OUTSET = TACT_PORTC_MASK;
     91c:	8e e1       	ldi	r24, 0x1E	; 30
     91e:	e0 e4       	ldi	r30, 0x40	; 64
     920:	f6 e0       	ldi	r31, 0x06	; 6
     922:	85 83       	std	Z+5, r24	; 0x05
            PORTE.OUTSET = TACT_PORTE_MASK;
     924:	8e e0       	ldi	r24, 0x0E	; 14
     926:	e0 e8       	ldi	r30, 0x80	; 128
     928:	f6 e0       	ldi	r31, 0x06	; 6
     92a:	85 83       	std	Z+5, r24	; 0x05
     92c:	08 95       	ret
            return;
    }

    //Make sure transmitters are OK
    if(SPI0.STATUS & SPI_IF_bm)
     92e:	80 91 c2 08 	lds	r24, 0x08C2
     932:	87 ff       	sbrs	r24, 7
     934:	02 c0       	rjmp	.+4      	; 0x93a <selectSensor+0x92>
    {
        dummyRead = SPI0.DATA;
     936:	80 91 c3 08 	lds	r24, 0x08C3
     93a:	08 95       	ret

0000093c <__vector_20>:
static void selectSensor(uint8_t tactAddress);

volatile uint8_t tactReady = 0;

ISR(TACT_TC_vect)
{
     93c:	1f 92       	push	r1
     93e:	0f 92       	push	r0
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	0f 92       	push	r0
     944:	11 24       	eor	r1, r1
     946:	8f 93       	push	r24
    tactReady = 1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	80 93 dc 20 	sts	0x20DC, r24
    TACT_TC.CTRLA = TC_CLKSEL_OFF_gc;
     94e:	10 92 40 08 	sts	0x0840, r1
    return;
}
     952:	8f 91       	pop	r24
     954:	0f 90       	pop	r0
     956:	0f be       	out	0x3f, r0	; 63
     958:	0f 90       	pop	r0
     95a:	1f 90       	pop	r1
     95c:	18 95       	reti

0000095e <configureSPIModulesPressure>:

//The system can take 8 MHz.  Peripheral clock is set to 32 MHz internally, so a divide by 4 prescaler is correct
//volatile uint8_t dummyRead;
void configureSPIModulesPressure(void)
{
    SPI0.INTCTRL = SPI_INTLVL_OFF_gc;
     95e:	e0 ec       	ldi	r30, 0xC0	; 192
     960:	f8 e0       	ldi	r31, 0x08	; 8
     962:	11 82       	std	Z+1, r1	; 0x01
    SPI0.CTRL = SPI_ENABLE_bm | SPI_MASTER_bm | SPI_MODE_0_gc | SPI_PRESCALER_DIV4_gc;
     964:	80 e5       	ldi	r24, 0x50	; 80
     966:	80 83       	st	Z, r24
}
     968:	08 95       	ret

0000096a <initTactileModule>:

//initialization
void initTactileModule(void)
{
     96a:	0f 93       	push	r16
     96c:	1f 93       	push	r17
     96e:	cf 93       	push	r28
     970:	df 93       	push	r29
     972:	05 ef       	ldi	r16, 0xF5	; 245
     974:	10 e2       	ldi	r17, 0x20	; 32
     976:	ad ed       	ldi	r26, 0xDD	; 221
     978:	b0 e2       	ldi	r27, 0x20	; 32
     97a:	c1 e3       	ldi	r28, 0x31	; 49
     97c:	d1 e2       	ldi	r29, 0x21	; 33
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	91 e2       	ldi	r25, 0x21	; 33
     982:	29 e1       	ldi	r18, 0x19	; 25
     984:	31 e2       	ldi	r19, 0x21	; 33
     986:	49 e4       	ldi	r20, 0x49	; 73
     988:	51 e2       	ldi	r21, 0x21	; 33
     98a:	6c e0       	ldi	r22, 0x0C	; 12
    for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
    {
        pressureCalibrated[i] = 0;
     98c:	f8 01       	movw	r30, r16
     98e:	11 92       	st	Z+, r1
     990:	8f 01       	movw	r16, r30
        pressureData[i] = 0;
     992:	1d 92       	st	X+, r1
     994:	1d 92       	st	X+, r1
        pressureDataOffset[i] = 0;
     996:	19 92       	st	Y+, r1
     998:	19 92       	st	Y+, r1
        pressureTempData[i] = 0;
     99a:	fc 01       	movw	r30, r24
     99c:	11 92       	st	Z+, r1
     99e:	11 92       	st	Z+, r1
     9a0:	cf 01       	movw	r24, r30
        // b1coeff[i] = 0;
        // b2coeff[i] = 0;
        // c12coeff[i] = 0;
        // rawpressure[i] = 0;
        // rawtemp[i] = 0;
        lastPressure[i] = 0;
     9a2:	f9 01       	movw	r30, r18
     9a4:	11 92       	st	Z+, r1
     9a6:	11 92       	st	Z+, r1
     9a8:	9f 01       	movw	r18, r30
        adjustedPressure[i] = 0;
     9aa:	fa 01       	movw	r30, r20
     9ac:	11 92       	st	Z+, r1
     9ae:	11 92       	st	Z+, r1
     9b0:	af 01       	movw	r20, r30
     9b2:	61 50       	subi	r22, 0x01	; 1
}

//initialization
void initTactileModule(void)
{
    for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
     9b4:	59 f7       	brne	.-42     	; 0x98c <initTactileModule+0x22>
        // rawpressure[i] = 0;
        // rawtemp[i] = 0;
        lastPressure[i] = 0;
        adjustedPressure[i] = 0;
    }
}
     9b6:	df 91       	pop	r29
     9b8:	cf 91       	pop	r28
     9ba:	1f 91       	pop	r17
     9bc:	0f 91       	pop	r16
     9be:	08 95       	ret

000009c0 <collectAllCalibrationValues>:

void collectAllCalibrationValues(void)
{
    //First set the pins to known values to tighten inner reading loops

    PORTB.OUTSET = TACT_PORTB_MASK;
     9c0:	8f e0       	ldi	r24, 0x0F	; 15
     9c2:	e0 e2       	ldi	r30, 0x20	; 32
     9c4:	f6 e0       	ldi	r31, 0x06	; 6
     9c6:	85 83       	std	Z+5, r24	; 0x05
    PORTC.OUTSET = TACT_PORTC_MASK;
     9c8:	8e e1       	ldi	r24, 0x1E	; 30
     9ca:	e0 e4       	ldi	r30, 0x40	; 64
     9cc:	f6 e0       	ldi	r31, 0x06	; 6
     9ce:	85 83       	std	Z+5, r24	; 0x05
    PORTA.OUTSET = TACT_PORTA_MASK;
     9d0:	80 e6       	ldi	r24, 0x60	; 96
     9d2:	e0 e0       	ldi	r30, 0x00	; 0
     9d4:	f6 e0       	ldi	r31, 0x06	; 6
     9d6:	85 83       	std	Z+5, r24	; 0x05
    PORTE.OUTSET = TACT_PORTE_MASK;
     9d8:	8e e0       	ldi	r24, 0x0E	; 14
     9da:	e0 e8       	ldi	r30, 0x80	; 128
     9dc:	f6 e0       	ldi	r31, 0x06	; 6
     9de:	85 83       	std	Z+5, r24	; 0x05
    // {
    //     readCoefficient(i);
    // }

    //Set the Tactile Timer to expire at 3 ms
    TACT_TC.CTRLB = TC_WGMODE_NORMAL_gc;
     9e0:	e0 e4       	ldi	r30, 0x40	; 64
     9e2:	f8 e0       	ldi	r31, 0x08	; 8
     9e4:	11 82       	std	Z+1, r1	; 0x01
    TACT_TC.CTRLC = 0x00;
     9e6:	12 82       	std	Z+2, r1	; 0x02
    TACT_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     9e8:	13 82       	std	Z+3, r1	; 0x03
    TACT_TC.CTRLE = 0x00;
     9ea:	14 82       	std	Z+4, r1	; 0x04
    TACT_TC.PERBUF = TACT_TIMEOUT;
     9ec:	80 e6       	ldi	r24, 0x60	; 96
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	86 ab       	sts	0x56, r24
     9f2:	97 ab       	sts	0x57, r25
    TACT_TC.CNT = 0x0000;
     9f4:	10 a2       	lds	r17, 0x90
     9f6:	11 a2       	lds	r17, 0x91
    TACT_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	86 83       	std	Z+6, r24	; 0x06
    TACT_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
     9fc:	87 e0       	ldi	r24, 0x07	; 7
     9fe:	80 83       	st	Z, r24

    return;
}
     a00:	08 95       	ret

00000a02 <compensatePressure>:
 * This routine was pulled from Freescale app note AN3785 and modified
 * for this microprocessor.  The original code assumed two extra parameters
 * that have now been removed.
 ************************************************************************/
void compensatePressure(uint16_t tempReading, uint16_t pressureReading, uint8_t sensorIndex)
{
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
    // int32_t si_a2x2,si_y1,si_a1x1,si_c12x2,si_a1;

    // int16_t siPcomp;
    //float decPcomp;

    pressureLocal=pressureReading>>6; //Note that the PressCntdec is the raw value from the MPL115A data address. Its shifted >>6 since its 10 bit.
     a0e:	36 e0       	ldi	r19, 0x06	; 6
     a10:	76 95       	lsr	r23
     a12:	67 95       	ror	r22
     a14:	3a 95       	dec	r19
     a16:	e1 f7       	brne	.-8      	; 0xa10 <compensatePressure+0xe>
    tempLocal=tempReading>>6; //Note that the TempCntdec is the raw value from the MPL115A data address. Its shifted >>6 since its 10 bit.
     a18:	7c 01       	movw	r14, r24
     a1a:	56 e0       	ldi	r21, 0x06	; 6
     a1c:	f6 94       	lsr	r15
     a1e:	e7 94       	ror	r14
     a20:	5a 95       	dec	r21
     a22:	e1 f7       	brne	.-8      	; 0xa1c <compensatePressure+0x1a>

    // since we are operating the sensor outside its normal range, it seems to behave as if it has 11 bytes of data.
    // however, its range is still 10 bits, (0-1023).  So we need to track the "actual" value of the sensor across multiple overflows.
    {
        if (!pressureCalibrated[sensorIndex])
     a24:	04 2f       	mov	r16, r20
     a26:	10 e0       	ldi	r17, 0x00	; 0
     a28:	d8 01       	movw	r26, r16
     a2a:	ab 50       	subi	r26, 0x0B	; 11
     a2c:	bf 4d       	sbci	r27, 0xDF	; 223
     a2e:	2c 91       	ld	r18, X
     a30:	c8 01       	movw	r24, r16
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	22 23       	and	r18, r18
     a38:	61 f4       	brne	.+24     	; 0xa52 <compensatePressure+0x50>
        {
            lastPressure[sensorIndex] = pressureLocal;
     a3a:	fc 01       	movw	r30, r24
     a3c:	e7 5e       	subi	r30, 0xE7	; 231
     a3e:	fe 4d       	sbci	r31, 0xDE	; 222
     a40:	60 83       	st	Z, r22
     a42:	71 83       	std	Z+1, r23	; 0x01
            adjustedPressure[sensorIndex] = pressureLocal;
     a44:	fc 01       	movw	r30, r24
     a46:	e7 5b       	subi	r30, 0xB7	; 183
     a48:	fe 4d       	sbci	r31, 0xDE	; 222
     a4a:	60 83       	st	Z, r22
     a4c:	71 83       	std	Z+1, r23	; 0x01
            pressureCalibrated[sensorIndex] = 1;
     a4e:	21 e0       	ldi	r18, 0x01	; 1
     a50:	2c 93       	st	X, r18
        }

        int16_t delta = pressureLocal - lastPressure[sensorIndex];
     a52:	dc 01       	movw	r26, r24
     a54:	a7 5e       	subi	r26, 0xE7	; 231
     a56:	be 4d       	sbci	r27, 0xDE	; 222
     a58:	4d 91       	ld	r20, X+
     a5a:	5c 91       	ld	r21, X
     a5c:	11 97       	sbiw	r26, 0x01	; 1
     a5e:	9b 01       	movw	r18, r22
     a60:	24 1b       	sub	r18, r20
     a62:	35 0b       	sbc	r19, r21

        if (abs(delta) < 512)
     a64:	e9 01       	movw	r28, r18
     a66:	c1 50       	subi	r28, 0x01	; 1
     a68:	de 4f       	sbci	r29, 0xFE	; 254
     a6a:	fc 01       	movw	r30, r24
     a6c:	e7 5b       	subi	r30, 0xB7	; 183
     a6e:	fe 4d       	sbci	r31, 0xDE	; 222
     a70:	83 e0       	ldi	r24, 0x03	; 3
     a72:	cf 3f       	cpi	r28, 0xFF	; 255
     a74:	d8 07       	cpc	r29, r24
     a76:	30 f4       	brcc	.+12     	; 0xa84 <compensatePressure+0x82>
        {
            lastPressure[sensorIndex] = pressureLocal;
     a78:	6d 93       	st	X+, r22
     a7a:	7c 93       	st	X, r23
     a7c:	11 97       	sbiw	r26, 0x01	; 1
            adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] + delta;
     a7e:	80 81       	ld	r24, Z
     a80:	91 81       	ldd	r25, Z+1	; 0x01
     a82:	11 c0       	rjmp	.+34     	; 0xaa6 <compensatePressure+0xa4>
        }
        else
        {
            int16_t bottom = lastPressure[sensorIndex] + (1024 - pressureLocal);
     a84:	46 1b       	sub	r20, r22
     a86:	57 0b       	sbc	r21, r23
     a88:	40 50       	subi	r20, 0x00	; 0
     a8a:	5c 4f       	sbci	r21, 0xFC	; 252
            int16_t top = pressureLocal + (1024 - lastPressure[sensorIndex]);
     a8c:	20 50       	subi	r18, 0x00	; 0
     a8e:	3c 4f       	sbci	r19, 0xFC	; 252
            lastPressure[sensorIndex] = pressureLocal;
     a90:	6d 93       	st	X+, r22
     a92:	7c 93       	st	X, r23
     a94:	11 97       	sbiw	r26, 0x01	; 1
            if (bottom<top) // crossing 0
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] - bottom;
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
        else
        {
            int16_t bottom = lastPressure[sensorIndex] + (1024 - pressureLocal);
            int16_t top = pressureLocal + (1024 - lastPressure[sensorIndex]);
            lastPressure[sensorIndex] = pressureLocal;
            if (bottom<top) // crossing 0
     a9a:	42 17       	cp	r20, r18
     a9c:	53 07       	cpc	r21, r19
     a9e:	1c f4       	brge	.+6      	; 0xaa6 <compensatePressure+0xa4>
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] - bottom;
     aa0:	84 1b       	sub	r24, r20
     aa2:	95 0b       	sbc	r25, r21
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <compensatePressure+0xa8>
            else // crossing 1024
                adjustedPressure[sensorIndex] = adjustedPressure[sensorIndex] + top;
     aa6:	82 0f       	add	r24, r18
     aa8:	93 1f       	adc	r25, r19
     aaa:	80 83       	st	Z, r24
     aac:	91 83       	std	Z+1, r25	; 0x01
    // siPcomp = (int16_t)(lt3>>14); //&0x3FF); // goes to no fractional parts since this is an ADC count.
    // //decPcomp is defined as a floating point number.
    // //Conversion to Decimal value from 1023 ADC count value. ADC counts are 0 to 1023. Pressure is 50 to 115kPa correspondingly.
    // //decPcomp = ((65.0/1023.0)*(float)siPcomp)+50.0;
    
    pressureTempData[sensorIndex] = tempLocal;
     aae:	c8 01       	movw	r24, r16
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	fc 01       	movw	r30, r24
     ab6:	ef 5f       	subi	r30, 0xFF	; 255
     ab8:	fe 4d       	sbci	r31, 0xDE	; 222
     aba:	e0 82       	st	Z, r14
     abc:	f1 82       	std	Z+1, r15	; 0x01
    //pressureData[sensorIndex] = siPcomp - pressureDataOffset[sensorIndex];
    pressureData[sensorIndex] = adjustedPressure[sensorIndex] - pressureDataOffset[sensorIndex];
     abe:	dc 01       	movw	r26, r24
     ac0:	a3 52       	subi	r26, 0x23	; 35
     ac2:	bf 4d       	sbci	r27, 0xDF	; 223
     ac4:	fc 01       	movw	r30, r24
     ac6:	e7 5b       	subi	r30, 0xB7	; 183
     ac8:	fe 4d       	sbci	r31, 0xDE	; 222
     aca:	8f 5c       	subi	r24, 0xCF	; 207
     acc:	9e 4d       	sbci	r25, 0xDE	; 222
     ace:	20 81       	ld	r18, Z
     ad0:	31 81       	ldd	r19, Z+1	; 0x01
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	28 1b       	sub	r18, r24
     ada:	39 0b       	sbc	r19, r25
     adc:	2d 93       	st	X+, r18
     ade:	3c 93       	st	X, r19
     ae0:	11 97       	sbiw	r26, 0x01	; 1
    return;
}
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	08 95       	ret

00000af0 <doTactSensors>:
}

uint8_t activeSensor = 0;

void doTactSensors(void)
{
     af0:	2f 92       	push	r2
     af2:	3f 92       	push	r3
     af4:	4f 92       	push	r4
     af6:	5f 92       	push	r5
     af8:	6f 92       	push	r6
     afa:	7f 92       	push	r7
     afc:	8f 92       	push	r8
     afe:	9f 92       	push	r9
     b00:	af 92       	push	r10
     b02:	bf 92       	push	r11
     b04:	cf 92       	push	r12
     b06:	df 92       	push	r13
     b08:	ef 92       	push	r14
     b0a:	ff 92       	push	r15
     b0c:	0f 93       	push	r16
     b0e:	1f 93       	push	r17
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	cd b7       	in	r28, 0x3d	; 61
     b16:	de b7       	in	r29, 0x3e	; 62
     b18:	25 97       	sbiw	r28, 0x05	; 5
     b1a:	cd bf       	out	0x3d, r28	; 61
     b1c:	de bf       	out	0x3e, r29	; 62
    uint8_t i;

    //Set all chip selects high
    PORTB.OUTSET = TACT_PORTB_MASK;
     b1e:	8f e0       	ldi	r24, 0x0F	; 15
     b20:	e0 e2       	ldi	r30, 0x20	; 32
     b22:	f6 e0       	ldi	r31, 0x06	; 6
     b24:	85 83       	std	Z+5, r24	; 0x05
    PORTC.OUTSET = TACT_PORTC_MASK;
     b26:	8e e1       	ldi	r24, 0x1E	; 30
     b28:	e0 e4       	ldi	r30, 0x40	; 64
     b2a:	f6 e0       	ldi	r31, 0x06	; 6
     b2c:	85 83       	std	Z+5, r24	; 0x05
    PORTA.OUTSET = TACT_PORTA_MASK;
     b2e:	80 e6       	ldi	r24, 0x60	; 96
     b30:	e0 e0       	ldi	r30, 0x00	; 0
     b32:	f6 e0       	ldi	r31, 0x06	; 6
     b34:	85 83       	std	Z+5, r24	; 0x05
    PORTE.OUTSET = TACT_PORTE_MASK;
     b36:	8e e0       	ldi	r24, 0x0E	; 14
     b38:	e0 e8       	ldi	r30, 0x80	; 128
     b3a:	f6 e0       	ldi	r31, 0x06	; 6
     b3c:	85 83       	std	Z+5, r24	; 0x05

    configureSPIModulesPressure();
     b3e:	0e 94 af 04 	call	0x95e	; 0x95e <configureSPIModulesPressure>

    if(activeSensor >= numPressureSensors)
     b42:	40 91 db 20 	lds	r20, 0x20DB
     b46:	80 91 71 21 	lds	r24, 0x2171
     b4a:	48 17       	cp	r20, r24
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <doTactSensors+0x60>
     b4e:	56 c0       	rjmp	.+172    	; 0xbfc <doTactSensors+0x10c>
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
     b50:	f8 94       	cli
        tactReady = 0;
     b52:	10 92 dc 20 	sts	0x20DC, r1
        for(i=0;i<numPressureSensors;i++)
     b56:	10 e0       	ldi	r17, 0x00	; 0
{
    uint8_t dummyRead;
    selectSensor(tactAddress);

    //Send the data.
    SPI0.DATA = CONVERT_OPCODE;
     b58:	f0 ec       	ldi	r31, 0xC0	; 192
     b5a:	af 2e       	mov	r10, r31
     b5c:	f8 e0       	ldi	r31, 0x08	; 8
     b5e:	bf 2e       	mov	r11, r31
     b60:	a4 e2       	ldi	r26, 0x24	; 36
     b62:	ca 2e       	mov	r12, r26

    while(!(SPI0.STATUS & SPI_IF_bm));
     b64:	b0 ec       	ldi	r27, 0xC0	; 192
     b66:	8b 2e       	mov	r8, r27
     b68:	b8 e0       	ldi	r27, 0x08	; 8
     b6a:	9b 2e       	mov	r9, r27

    //Read the dummy data
    dummyRead = SPI0.DATA;

    //Reset the chip select and address lines
    PORTB.OUTSET = TACT_PORTB_MASK;
     b6c:	00 e2       	ldi	r16, 0x20	; 32
     b6e:	60 2e       	mov	r6, r16
     b70:	06 e0       	ldi	r16, 0x06	; 6
     b72:	70 2e       	mov	r7, r16
     b74:	8f e0       	ldi	r24, 0x0F	; 15
     b76:	d8 2e       	mov	r13, r24
    PORTC.OUTSET = TACT_PORTC_MASK;
     b78:	90 e4       	ldi	r25, 0x40	; 64
     b7a:	49 2e       	mov	r4, r25
     b7c:	96 e0       	ldi	r25, 0x06	; 6
     b7e:	59 2e       	mov	r5, r25
     b80:	2e e1       	ldi	r18, 0x1E	; 30
     b82:	e2 2e       	mov	r14, r18
    PORTA.OUTSET = TACT_PORTA_MASK;
     b84:	21 2c       	mov	r2, r1
     b86:	36 e0       	ldi	r19, 0x06	; 6
     b88:	33 2e       	mov	r3, r19
     b8a:	40 e6       	ldi	r20, 0x60	; 96
     b8c:	f4 2e       	mov	r15, r20
    PORTE.OUTSET = TACT_PORTE_MASK;
     b8e:	0e e0       	ldi	r16, 0x0E	; 14
    if(activeSensor >= numPressureSensors)
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
        tactReady = 0;
        for(i=0;i<numPressureSensors;i++)
     b90:	1c c0       	rjmp	.+56     	; 0xbca <doTactSensors+0xda>
}

static void convertTactSensor(uint8_t tactAddress)
{
    uint8_t dummyRead;
    selectSensor(tactAddress);
     b92:	81 2f       	mov	r24, r17
     b94:	0e 94 54 04 	call	0x8a8	; 0x8a8 <selectSensor>

    //Send the data.
    SPI0.DATA = CONVERT_OPCODE;
     b98:	f5 01       	movw	r30, r10
     b9a:	c3 82       	std	Z+3, r12	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
     b9c:	80 91 c2 08 	lds	r24, 0x08C2
     ba0:	87 ff       	sbrs	r24, 7
     ba2:	fc cf       	rjmp	.-8      	; 0xb9c <doTactSensors+0xac>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     ba4:	80 91 c3 08 	lds	r24, 0x08C3

    //Send the dummy byte
    SPI0.DATA = 0x00;
     ba8:	f4 01       	movw	r30, r8
     baa:	13 82       	std	Z+3, r1	; 0x03

    while(!(SPI0.STATUS & SPI_IF_bm));
     bac:	80 91 c2 08 	lds	r24, 0x08C2
     bb0:	87 ff       	sbrs	r24, 7
     bb2:	fc cf       	rjmp	.-8      	; 0xbac <doTactSensors+0xbc>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     bb4:	80 91 c3 08 	lds	r24, 0x08C3

    //Reset the chip select and address lines
    PORTB.OUTSET = TACT_PORTB_MASK;
     bb8:	f3 01       	movw	r30, r6
     bba:	d5 82       	std	Z+5, r13	; 0x05
    PORTC.OUTSET = TACT_PORTC_MASK;
     bbc:	f2 01       	movw	r30, r4
     bbe:	e5 82       	std	Z+5, r14	; 0x05
    PORTA.OUTSET = TACT_PORTA_MASK;
     bc0:	f1 01       	movw	r30, r2
     bc2:	f5 82       	std	Z+5, r15	; 0x05
    PORTE.OUTSET = TACT_PORTE_MASK;
     bc4:	00 93 85 06 	sts	0x0685, r16
    if(activeSensor >= numPressureSensors)
    {
        //Set the Tactile Timer to expire at 3 ms and begin conversion
        cli();
        tactReady = 0;
        for(i=0;i<numPressureSensors;i++)
     bc8:	1f 5f       	subi	r17, 0xFF	; 255
     bca:	80 91 71 21 	lds	r24, 0x2171
     bce:	18 17       	cp	r17, r24
     bd0:	00 f3       	brcs	.-64     	; 0xb92 <doTactSensors+0xa2>
        {
            convertTactSensor(i);
        }
        TACT_TC.CTRLB = TC_WGMODE_NORMAL_gc;
     bd2:	e0 e4       	ldi	r30, 0x40	; 64
     bd4:	f8 e0       	ldi	r31, 0x08	; 8
     bd6:	11 82       	std	Z+1, r1	; 0x01
        TACT_TC.CTRLC = 0x00;
     bd8:	12 82       	std	Z+2, r1	; 0x02
        TACT_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     bda:	13 82       	std	Z+3, r1	; 0x03
        TACT_TC.CTRLE = 0x00;
     bdc:	14 82       	std	Z+4, r1	; 0x04
        TACT_TC.PERBUF = TACT_TIMEOUT;
     bde:	80 e6       	ldi	r24, 0x60	; 96
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	86 ab       	sts	0x56, r24
     be4:	97 ab       	sts	0x57, r25
        TACT_TC.CNT = 0x0000;
     be6:	10 a2       	lds	r17, 0x90
     be8:	11 a2       	lds	r17, 0x91
        TACT_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	86 83       	std	Z+6, r24	; 0x06
        TACT_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
     bee:	87 e0       	ldi	r24, 0x07	; 7
     bf0:	80 93 40 08 	sts	0x0840, r24
        activeSensor = 0;
     bf4:	10 92 db 20 	sts	0x20DB, r1
        sei();
     bf8:	78 94       	sei
        return;
     bfa:	38 c0       	rjmp	.+112    	; 0xc6c <doTactSensors+0x17c>
{
    uint8_t dummyRead;
    uint16_t firstPressureReading;
    uint16_t firstTempReading;

    selectSensor(tactAddress);
     bfc:	84 2f       	mov	r24, r20
     bfe:	4d 83       	std	Y+5, r20	; 0x05
     c00:	0e 94 54 04 	call	0x8a8	; 0x8a8 <selectSensor>

    getDoubleWord(READ_PRESSURE_MSB_OPCODE,&firstPressureReading);
     c04:	80 e8       	ldi	r24, 0x80	; 128
     c06:	be 01       	movw	r22, r28
     c08:	6d 5f       	subi	r22, 0xFD	; 253
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	0e 94 1c 04 	call	0x838	; 0x838 <getDoubleWord>

    getDoubleWord(READ_TEMPERATURE_MSB_OPCODE,&firstTempReading);
     c10:	84 e8       	ldi	r24, 0x84	; 132
     c12:	be 01       	movw	r22, r28
     c14:	6f 5f       	subi	r22, 0xFF	; 255
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	0e 94 1c 04 	call	0x838	; 0x838 <getDoubleWord>

    //Do a final dummy write

    //Send the data.
    SPI0.DATA = 0x00;
     c1c:	e0 ec       	ldi	r30, 0xC0	; 192
     c1e:	f8 e0       	ldi	r31, 0x08	; 8
     c20:	13 82       	std	Z+3, r1	; 0x03
     c22:	4d 81       	ldd	r20, Y+5	; 0x05

    while(!(SPI0.STATUS & SPI_IF_bm));
     c24:	80 91 c2 08 	lds	r24, 0x08C2
     c28:	87 ff       	sbrs	r24, 7
     c2a:	fc cf       	rjmp	.-8      	; 0xc24 <doTactSensors+0x134>

    //Read the dummy data
    dummyRead = SPI0.DATA;
     c2c:	80 91 c3 08 	lds	r24, 0x08C3

    //Reset the chip select and address lines
    PORTA.OUTSET = TACT_PORTA_MASK;
     c30:	80 e6       	ldi	r24, 0x60	; 96
     c32:	e0 e0       	ldi	r30, 0x00	; 0
     c34:	f6 e0       	ldi	r31, 0x06	; 6
     c36:	85 83       	std	Z+5, r24	; 0x05
    PORTB.OUTSET = TACT_PORTB_MASK;
     c38:	8f e0       	ldi	r24, 0x0F	; 15
     c3a:	e0 e2       	ldi	r30, 0x20	; 32
     c3c:	f6 e0       	ldi	r31, 0x06	; 6
     c3e:	85 83       	std	Z+5, r24	; 0x05
    PORTC.OUTSET = TACT_PORTC_MASK;
     c40:	8e e1       	ldi	r24, 0x1E	; 30
     c42:	e0 e4       	ldi	r30, 0x40	; 64
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	85 83       	std	Z+5, r24	; 0x05
    PORTE.OUTSET = TACT_PORTE_MASK;
     c48:	8e e0       	ldi	r24, 0x0E	; 14
     c4a:	e0 e8       	ldi	r30, 0x80	; 128
     c4c:	f6 e0       	ldi	r31, 0x06	; 6
     c4e:	85 83       	std	Z+5, r24	; 0x05

    // protect against bad data if reading accelerometer
    if (firstPressureReading == 0)
     c50:	6b 81       	ldd	r22, Y+3	; 0x03
     c52:	7c 81       	ldd	r23, Y+4	; 0x04
     c54:	61 15       	cp	r22, r1
     c56:	71 05       	cpc	r23, r1
     c58:	21 f0       	breq	.+8      	; 0xc62 <doTactSensors+0x172>
        return;

    //floatingPressureData[tactAddress] = compensatePressure(firstTempReading,firstPressureReading,tactAddress);
    compensatePressure(firstTempReading, firstPressureReading, tactAddress);
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	0e 94 01 05 	call	0xa02	; 0xa02 <compensatePressure>
        sei();
        return;
    }

    readTactSensor(activeSensor);
    activeSensor++;
     c62:	80 91 db 20 	lds	r24, 0x20DB
     c66:	8f 5f       	subi	r24, 0xFF	; 255
     c68:	80 93 db 20 	sts	0x20DB, r24

    //Leave tactReady asserted so that we can quickly return after giving command a chance
}
     c6c:	25 96       	adiw	r28, 0x05	; 5
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	bf 90       	pop	r11
     c84:	af 90       	pop	r10
     c86:	9f 90       	pop	r9
     c88:	8f 90       	pop	r8
     c8a:	7f 90       	pop	r7
     c8c:	6f 90       	pop	r6
     c8e:	5f 90       	pop	r5
     c90:	4f 90       	pop	r4
     c92:	3f 90       	pop	r3
     c94:	2f 90       	pop	r2
     c96:	08 95       	ret

00000c98 <ReadIntFromEEPROM>:
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
     c98:	ef 92       	push	r14
     c9a:	ff 92       	push	r15
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	cf 93       	push	r28
     ca2:	df 93       	push	r29
     ca4:	0f 92       	push	r0
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
     caa:	e8 2e       	mov	r14, r24
     cac:	ff 24       	eor	r15, r15
     cae:	ee 0c       	add	r14, r14
     cb0:	ff 1c       	adc	r15, r15
     cb2:	ee 0c       	add	r14, r14
     cb4:	ff 1c       	adc	r15, r15
     cb6:	8b 01       	movw	r16, r22
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4; i++)
     cb8:	20 e0       	ldi	r18, 0x00	; 0
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
     cba:	c7 01       	movw	r24, r14
     cbc:	29 83       	std	Y+1, r18	; 0x01
     cbe:	0e 94 8b 08 	call	0x1116	; 0x1116 <__eerd_byte_x32a4u>
     cc2:	f8 01       	movw	r30, r16
     cc4:	81 93       	st	Z+, r24
     cc6:	8f 01       	movw	r16, r30
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4; i++)
     cc8:	29 81       	ldd	r18, Y+1	; 0x01
     cca:	2f 5f       	subi	r18, 0xFF	; 255
     ccc:	08 94       	sec
     cce:	e1 1c       	adc	r14, r1
     cd0:	f1 1c       	adc	r15, r1
     cd2:	24 30       	cpi	r18, 0x04	; 4
     cd4:	91 f7       	brne	.-28     	; 0xcba <ReadIntFromEEPROM+0x22>
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
}
     cd6:	0f 90       	pop	r0
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
     cdc:	1f 91       	pop	r17
     cde:	0f 91       	pop	r16
     ce0:	ff 90       	pop	r15
     ce2:	ef 90       	pop	r14
     ce4:	08 95       	ret

00000ce6 <WriteIntToEEPROM>:
    else
        LEDoff();
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
     ce6:	ef 92       	push	r14
     ce8:	ff 92       	push	r15
     cea:	0f 93       	push	r16
     cec:	1f 93       	push	r17
     cee:	cf 93       	push	r28
     cf0:	df 93       	push	r29
     cf2:	0f 92       	push	r0
     cf4:	cd b7       	in	r28, 0x3d	; 61
     cf6:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
     cf8:	8b 01       	movw	r16, r22
     cfa:	e8 2e       	mov	r14, r24
     cfc:	ff 24       	eor	r15, r15
     cfe:	ee 0c       	add	r14, r14
     d00:	ff 1c       	adc	r15, r15
     d02:	ee 0c       	add	r14, r14
     d04:	ff 1c       	adc	r15, r15
        LEDoff();
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
     d06:	20 e0       	ldi	r18, 0x00	; 0
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
     d08:	f8 01       	movw	r30, r16
     d0a:	61 91       	ld	r22, Z+
     d0c:	8f 01       	movw	r16, r30
     d0e:	c7 01       	movw	r24, r14
     d10:	29 83       	std	Y+1, r18	; 0x01
     d12:	0e 94 9b 08 	call	0x1136	; 0x1136 <__eewr_byte_x32a4u>
        LEDoff();
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
     d16:	29 81       	ldd	r18, Y+1	; 0x01
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	08 94       	sec
     d1c:	e1 1c       	adc	r14, r1
     d1e:	f1 1c       	adc	r15, r1
     d20:	24 30       	cpi	r18, 0x04	; 4
     d22:	91 f7       	brne	.-28     	; 0xd08 <WriteIntToEEPROM+0x22>
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}
     d24:	0f 90       	pop	r0
     d26:	df 91       	pop	r29
     d28:	cf 91       	pop	r28
     d2a:	1f 91       	pop	r17
     d2c:	0f 91       	pop	r16
     d2e:	ff 90       	pop	r15
     d30:	ef 90       	pop	r14
     d32:	08 95       	ret

00000d34 <processCommand>:
  return 5; // never get here, but keep compiler happy
}


int processCommand(uint8_t *commandPacket,uint8_t *outputBuffer)
{
     d34:	cf 92       	push	r12
     d36:	df 92       	push	r13
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	64 97       	sbiw	r28, 0x14	; 20
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	de bf       	out	0x3e, r29	; 62
     d4e:	8c 01       	movw	r16, r24
     d50:	6b 01       	movw	r12, r22
  uint8_t opcode;

  //LEDtoggle();

  opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
     d52:	fc 01       	movw	r30, r24
     d54:	81 81       	ldd	r24, Z+1	; 0x01
     d56:	98 2f       	mov	r25, r24
     d58:	90 7f       	andi	r25, 0xF0	; 240

  switch(opcode)
     d5a:	90 38       	cpi	r25, 0x80	; 128
     d5c:	09 f4       	brne	.+2      	; 0xd60 <processCommand+0x2c>
     d5e:	9a c0       	rjmp	.+308    	; 0xe94 <processCommand+0x160>
     d60:	91 38       	cpi	r25, 0x81	; 129
     d62:	48 f4       	brcc	.+18     	; 0xd76 <processCommand+0x42>
     d64:	90 36       	cpi	r25, 0x60	; 96
     d66:	09 f4       	brne	.+2      	; 0xd6a <processCommand+0x36>
     d68:	95 c0       	rjmp	.+298    	; 0xe94 <processCommand+0x160>
     d6a:	90 37       	cpi	r25, 0x70	; 112
     d6c:	09 f4       	brne	.+2      	; 0xd70 <processCommand+0x3c>
     d6e:	92 c0       	rjmp	.+292    	; 0xe94 <processCommand+0x160>
     d70:	99 23       	and	r25, r25
     d72:	59 f0       	breq	.+22     	; 0xd8a <processCommand+0x56>
     d74:	0a c1       	rjmp	.+532    	; 0xf8a <processCommand+0x256>
     d76:	90 3b       	cpi	r25, 0xB0	; 176
     d78:	09 f4       	brne	.+2      	; 0xd7c <processCommand+0x48>
     d7a:	fe c0       	rjmp	.+508    	; 0xf78 <processCommand+0x244>
     d7c:	90 3c       	cpi	r25, 0xC0	; 192
     d7e:	09 f4       	brne	.+2      	; 0xd82 <processCommand+0x4e>
     d80:	d5 c0       	rjmp	.+426    	; 0xf2c <processCommand+0x1f8>
     d82:	90 39       	cpi	r25, 0x90	; 144
     d84:	09 f0       	breq	.+2      	; 0xd88 <processCommand+0x54>
     d86:	01 c1       	rjmp	.+514    	; 0xf8a <processCommand+0x256>
     d88:	85 c0       	rjmp	.+266    	; 0xe94 <processCommand+0x160>
    uint16_t collectionBitfield;
    int16_t adcData[7];
    uint8_t accelData[6];

    //collectionBitfield = (uint16_t) (commandPacket[PAYLOAD_OFFSET]);
    memcpy(&collectionBitfield,&commandPacket[PAYLOAD_OFFSET],2);
     d8a:	f8 01       	movw	r30, r16
     d8c:	e2 80       	ldd	r14, Z+2	; 0x02
     d8e:	f3 80       	ldd	r15, Z+3	; 0x03

    if (collectionBitfield & (DATA_COLLECTION_DISTALJOINT_BITMASK | DATA_COLLECTION_DYNAMIC_BITMASK))
     d90:	c7 01       	movw	r24, r14
     d92:	80 70       	andi	r24, 0x00	; 0
     d94:	90 75       	andi	r25, 0x50	; 80
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	21 f0       	breq	.+8      	; 0xda2 <processCommand+0x6e>
    {
        captureSweep(adcData);
     d9a:	ce 01       	movw	r24, r28
     d9c:	07 96       	adiw	r24, 0x07	; 7
     d9e:	0e 94 86 01 	call	0x30c	; 0x30c <captureSweep>
    }

    if(collectionBitfield & DATA_COLLECTION_ACCELERATION_BITMASK)
     da2:	f7 fe       	sbrs	r15, 7
     da4:	0f c0       	rjmp	.+30     	; 0xdc4 <processCommand+0x90>
      {
        readAxes(accelData);
     da6:	ce 01       	movw	r24, r28
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	0e 94 56 01 	call	0x2ac	; 0x2ac <readAxes>
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&accelData,6);
     dae:	f6 01       	movw	r30, r12
     db0:	33 96       	adiw	r30, 0x03	; 3
     db2:	de 01       	movw	r26, r28
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	86 e0       	ldi	r24, 0x06	; 6
     db8:	0d 90       	ld	r0, X+
     dba:	01 92       	st	Z+, r0
     dbc:	81 50       	subi	r24, 0x01	; 1
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <processCommand+0x84>
        responseSize += 6;
     dc0:	06 e0       	ldi	r16, 0x06	; 6
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <processCommand+0x92>
  numPressureSensors = 10;
}

static int handleCollectionCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint8_t responseSize = 0;
     dc4:	00 e0       	ldi	r16, 0x00	; 0
        readAxes(accelData);
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&accelData,6);
        responseSize += 6;
      }

    if(collectionBitfield & DATA_COLLECTION_DYNAMIC_BITMASK)
     dc6:	f6 fe       	sbrs	r15, 6
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <processCommand+0xb0>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&adcData[DYNAMIC_OFFSET],6);
     dca:	e0 2f       	mov	r30, r16
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	33 96       	adiw	r30, 0x03	; 3
     dd0:	ec 0d       	add	r30, r12
     dd2:	fd 1d       	adc	r31, r13
     dd4:	de 01       	movw	r26, r28
     dd6:	1f 96       	adiw	r26, 0x0f	; 15
     dd8:	86 e0       	ldi	r24, 0x06	; 6
     dda:	0d 90       	ld	r0, X+
     ddc:	01 92       	st	Z+, r0
     dde:	81 50       	subi	r24, 0x01	; 1
     de0:	e1 f7       	brne	.-8      	; 0xdda <processCommand+0xa6>
        responseSize += 6;
     de2:	0a 5f       	subi	r16, 0xFA	; 250
    }

    if(collectionBitfield & DATA_COLLECTION_DISTALJOINT_BITMASK)
     de4:	f4 fe       	sbrs	r15, 4
     de6:	0d c0       	rjmp	.+26     	; 0xe02 <processCommand+0xce>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&adcData[DISTALJOINT_OFFSET],8);
     de8:	e0 2f       	mov	r30, r16
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	33 96       	adiw	r30, 0x03	; 3
     dee:	ec 0d       	add	r30, r12
     df0:	fd 1d       	adc	r31, r13
     df2:	de 01       	movw	r26, r28
     df4:	17 96       	adiw	r26, 0x07	; 7
     df6:	88 e0       	ldi	r24, 0x08	; 8
     df8:	0d 90       	ld	r0, X+
     dfa:	01 92       	st	Z+, r0
     dfc:	81 50       	subi	r24, 0x01	; 1
     dfe:	e1 f7       	brne	.-8      	; 0xdf8 <processCommand+0xc4>
        responseSize += 8;
     e00:	08 5f       	subi	r16, 0xF8	; 248
    //         memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&encoderData,6);
    //         responseSize += 2;
    //     }
    // }

    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
     e02:	f1 fe       	sbrs	r15, 1
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <processCommand+0xf6>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &pressureData, numPressureSensors*2);
     e06:	40 91 71 21 	lds	r20, 0x2171
     e0a:	80 2f       	mov	r24, r16
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	03 96       	adiw	r24, 0x03	; 3
     e10:	8c 0d       	add	r24, r12
     e12:	9d 1d       	adc	r25, r13
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	44 0f       	add	r20, r20
     e18:	55 1f       	adc	r21, r21
     e1a:	6d ed       	ldi	r22, 0xDD	; 221
     e1c:	70 e2       	ldi	r23, 0x20	; 32
     e1e:	0e 94 82 08 	call	0x1104	; 0x1104 <memcpy>
        responseSize += numPressureSensors*2;
     e22:	80 91 71 21 	lds	r24, 0x2171
     e26:	88 0f       	add	r24, r24
     e28:	08 0f       	add	r16, r24
    }
    
    if(collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
     e2a:	e1 fe       	sbrs	r14, 1
     e2c:	0a c0       	rjmp	.+20     	; 0xe42 <processCommand+0x10e>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&RxCheckSumErrCnt,2);
     e2e:	80 91 00 20 	lds	r24, 0x2000
     e32:	90 91 01 20 	lds	r25, 0x2001
     e36:	f6 01       	movw	r30, r12
     e38:	e0 0f       	add	r30, r16
     e3a:	f1 1d       	adc	r31, r1
     e3c:	83 83       	std	Z+3, r24	; 0x03
     e3e:	94 83       	std	Z+4, r25	; 0x04
        responseSize += 2;
     e40:	0e 5f       	subi	r16, 0xFE	; 254
    }
    
    if(collectionBitfield & DATA_COLLECTION_TACTILE_TEMP_BITMASK)
     e42:	e0 fe       	sbrs	r14, 0
     e44:	12 c0       	rjmp	.+36     	; 0xe6a <processCommand+0x136>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize], &pressureTempData, numPressureSensors*2);
     e46:	40 91 71 21 	lds	r20, 0x2171
     e4a:	80 2f       	mov	r24, r16
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	03 96       	adiw	r24, 0x03	; 3
     e50:	8c 0d       	add	r24, r12
     e52:	9d 1d       	adc	r25, r13
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	44 0f       	add	r20, r20
     e58:	55 1f       	adc	r21, r21
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	71 e2       	ldi	r23, 0x21	; 33
     e5e:	0e 94 82 08 	call	0x1104	; 0x1104 <memcpy>
        responseSize += numPressureSensors*2;
     e62:	80 91 71 21 	lds	r24, 0x2171
     e66:	88 0f       	add	r24, r24
     e68:	08 0f       	add	r16, r24
    }
    
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3+responseSize;
     e6a:	80 2f       	mov	r24, r16
     e6c:	8d 5f       	subi	r24, 0xFD	; 253
     e6e:	f6 01       	movw	r30, r12
     e70:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = DATA_COLLECTION_OPCODE;
     e72:	11 82       	std	Z+1, r1	; 0x01
    outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
     e74:	12 82       	std	Z+2, r1	; 0x02
    outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
     e76:	10 e0       	ldi	r17, 0x00	; 0
     e78:	b8 01       	movw	r22, r16
     e7a:	6d 5f       	subi	r22, 0xFD	; 253
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	76 01       	movw	r14, r12
     e80:	e6 0e       	add	r14, r22
     e82:	f7 1e       	adc	r15, r23
     e84:	c6 01       	movw	r24, r12
     e86:	0e 94 02 03 	call	0x604	; 0x604 <computeChecksum>
     e8a:	f7 01       	movw	r30, r14
     e8c:	80 83       	st	Z, r24
    //LEDoff();
    return 4+responseSize;
     e8e:	c8 01       	movw	r24, r16
     e90:	04 96       	adiw	r24, 0x04	; 4
  opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;

  switch(opcode)
  {
      case DATA_COLLECTION_OPCODE:
          return handleCollectionCommand(commandPacket,outputBuffer);
     e92:	8a c0       	rjmp	.+276    	; 0xfa8 <processCommand+0x274>
    uint8_t opcode;
    uint8_t address;
    uint8_t responseSize = 4;

    opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    address = commandPacket[COMMAND_OFFSET] & 0x1F;
     e94:	8f 71       	andi	r24, 0x1F	; 31

    switch(opcode)
     e96:	90 37       	cpi	r25, 0x70	; 112
     e98:	51 f0       	breq	.+20     	; 0xeae <processCommand+0x17a>
     e9a:	91 37       	cpi	r25, 0x71	; 113
     e9c:	18 f4       	brcc	.+6      	; 0xea4 <processCommand+0x170>
     e9e:	90 36       	cpi	r25, 0x60	; 96
     ea0:	e9 f5       	brne	.+122    	; 0xf1c <processCommand+0x1e8>
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <processCommand+0x17a>
     ea4:	90 38       	cpi	r25, 0x80	; 128
     ea6:	d1 f0       	breq	.+52     	; 0xedc <processCommand+0x1a8>
     ea8:	90 39       	cpi	r25, 0x90	; 144
     eaa:	c1 f5       	brne	.+112    	; 0xf1c <processCommand+0x1e8>
     eac:	17 c0       	rjmp	.+46     	; 0xedc <processCommand+0x1a8>
    {
        case MOTOR_PARAMETER_RE_L_OPCODE:
        case MOTOR_PARAMETER_RE_H_OPCODE:
            // Read 4 bytes of data
            ReadIntFromEEPROM(address, &outputBuffer[RESPONSE_PAYLOAD_OFFSET]);
     eae:	b6 01       	movw	r22, r12
     eb0:	6d 5f       	subi	r22, 0xFD	; 253
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	0e 94 4c 06 	call	0xc98	; 0xc98 <ReadIntFromEEPROM>
            // finish up the packet
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3+responseSize;
     eb8:	87 e0       	ldi	r24, 0x07	; 7
     eba:	f6 01       	movw	r30, r12
     ebc:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
     ebe:	f8 01       	movw	r30, r16
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	f6 01       	movw	r30, r12
     ec4:	81 83       	std	Z+1, r24	; 0x01
            outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
     ec6:	12 82       	std	Z+2, r1	; 0x02
            outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
     ec8:	c6 01       	movw	r24, r12
     eca:	67 e0       	ldi	r22, 0x07	; 7
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	0e 94 02 03 	call	0x604	; 0x604 <computeChecksum>
     ed2:	f6 01       	movw	r30, r12
     ed4:	87 83       	std	Z+7, r24	; 0x07
            return 4+responseSize;
     ed6:	88 e0       	ldi	r24, 0x08	; 8
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	66 c0       	rjmp	.+204    	; 0xfa8 <processCommand+0x274>
        case MOTOR_PARAMETER_WR_L_OPCODE:
        case MOTOR_PARAMETER_WR_H_OPCODE:
            if(address==EEPROM_ADDRESS_LED) {
     edc:	8f 31       	cpi	r24, 0x1F	; 31
     ede:	91 f4       	brne	.+36     	; 0xf04 <processCommand+0x1d0>
                if(commandPacket[PAYLOAD_OFFSET+0]
     ee0:	f8 01       	movw	r30, r16
     ee2:	93 81       	ldd	r25, Z+3	; 0x03
     ee4:	22 81       	ldd	r18, Z+2	; 0x02
     ee6:	92 2b       	or	r25, r18
     ee8:	24 81       	ldd	r18, Z+4	; 0x04
     eea:	92 2b       	or	r25, r18
     eec:	25 81       	ldd	r18, Z+5	; 0x05
     eee:	92 2b       	or	r25, r18
     ef0:	29 f0       	breq	.+10     	; 0xefc <processCommand+0x1c8>
}

void LEDon(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTSET = 0x01;
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	e0 e4       	ldi	r30, 0x40	; 64
     ef6:	f6 e0       	ldi	r31, 0x06	; 6
     ef8:	95 83       	std	Z+5, r25	; 0x05
     efa:	04 c0       	rjmp	.+8      	; 0xf04 <processCommand+0x1d0>
}

void LEDoff(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTCLR = 0x01;
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	e0 e4       	ldi	r30, 0x40	; 64
     f00:	f6 e0       	ldi	r31, 0x06	; 6
     f02:	96 83       	std	Z+6, r25	; 0x06
                else {
                    LEDoff();
                }
            }
            // Write 32 bits of data
            WriteIntToEEPROM(address, &commandPacket[PAYLOAD_OFFSET]);
     f04:	b8 01       	movw	r22, r16
     f06:	6e 5f       	subi	r22, 0xFE	; 254
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	0e 94 73 06 	call	0xce6	; 0xce6 <WriteIntToEEPROM>
            // ack the command
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
     f0e:	83 e0       	ldi	r24, 0x03	; 3
     f10:	f6 01       	movw	r30, r12
     f12:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
     f14:	f8 01       	movw	r30, r16
     f16:	81 81       	ldd	r24, Z+1	; 0x01
     f18:	f6 01       	movw	r30, r12
     f1a:	2b c0       	rjmp	.+86     	; 0xf72 <processCommand+0x23e>
            outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
            outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
            return 4;
        default:
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
     f1c:	83 e0       	ldi	r24, 0x03	; 3
     f1e:	f6 01       	movw	r30, r12
     f20:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = commandPacket[COMMAND_OFFSET];
     f22:	f8 01       	movw	r30, r16
     f24:	81 81       	ldd	r24, Z+1	; 0x01
     f26:	f6 01       	movw	r30, r12
     f28:	81 83       	std	Z+1, r24	; 0x01
     f2a:	33 c0       	rjmp	.+102    	; 0xf92 <processCommand+0x25e>

static int handleCalibrationCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint16_t collectionBitfield;
    
    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
     f2c:	f8 01       	movw	r30, r16
     f2e:	42 81       	ldd	r20, Z+2	; 0x02
     f30:	53 81       	ldd	r21, Z+3	; 0x03
    
    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
     f32:	51 ff       	sbrs	r21, 1
     f34:	10 c0       	rjmp	.+32     	; 0xf56 <processCommand+0x222>
     f36:	ad ed       	ldi	r26, 0xDD	; 221
     f38:	b0 e2       	ldi	r27, 0x20	; 32
     f3a:	e1 e3       	ldi	r30, 0x31	; 49
     f3c:	f1 e2       	ldi	r31, 0x21	; 33
     f3e:	60 e0       	ldi	r22, 0x00	; 0
    {
        // zero out pressure readings with an offset
        for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
        {
            pressureDataOffset[i] = pressureData[i] + pressureDataOffset[i];
     f40:	2d 91       	ld	r18, X+
     f42:	3d 91       	ld	r19, X+
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	82 0f       	add	r24, r18
     f4a:	93 1f       	adc	r25, r19
     f4c:	81 93       	st	Z+, r24
     f4e:	91 93       	st	Z+, r25
    memcpy(&collectionBitfield, &commandPacket[PAYLOAD_OFFSET], 2);
    
    if(collectionBitfield & DATA_COLLECTION_TACTILE_BITMASK)
    {
        // zero out pressure readings with an offset
        for(uint8_t i=0; i<MAXIMUM_NUMBER_OF_TACTILE_SENSORS; i++)
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	6c 30       	cpi	r22, 0x0C	; 12
     f54:	a9 f7       	brne	.-22     	; 0xf40 <processCommand+0x20c>
        {
            pressureDataOffset[i] = pressureData[i] + pressureDataOffset[i];
        }
    }
    
    if (collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
     f56:	41 ff       	sbrs	r20, 1
     f58:	08 c0       	rjmp	.+16     	; 0xf6a <processCommand+0x236>
    {
        RxCheckSumErrCnt[0] = 0;
     f5a:	10 92 00 20 	sts	0x2000, r1
     f5e:	10 92 01 20 	sts	0x2001, r1
        RxCheckSumErrCnt[1] = 0;
     f62:	10 92 02 20 	sts	0x2002, r1
     f66:	10 92 03 20 	sts	0x2003, r1
    }
    
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	f6 01       	movw	r30, r12
     f6e:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = CALIBRATION_OPCODE;
     f70:	80 ec       	ldi	r24, 0xC0	; 192
     f72:	81 83       	std	Z+1, r24	; 0x01
    outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
     f74:	12 82       	std	Z+2, r1	; 0x02
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <processCommand+0x262>
    return 4;
}
static int handleBootloaderCommand(uint8_t *commandPacket)
{
  // self bootload
  wdt_enable(WDT_PER_8CLK_gc);
     f78:	93 e0       	ldi	r25, 0x03	; 3
     f7a:	88 ed       	ldi	r24, 0xD8	; 216
     f7c:	08 b6       	in	r0, 0x38	; 56
     f7e:	84 bf       	out	0x34, r24	; 52
     f80:	90 93 80 00 	sts	0x0080, r25
     f84:	a8 95       	wdr
     f86:	08 be       	out	0x38, r0	; 56
     f88:	ff cf       	rjmp	.-2      	; 0xf88 <processCommand+0x254>

      case BOOTLOADER_OPCODE:
	  return handleBootloaderCommand(commandPacket);

      default:
          outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
     f8a:	83 e0       	ldi	r24, 0x03	; 3
     f8c:	f6 01       	movw	r30, r12
     f8e:	80 83       	st	Z, r24
          outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = opcode;
     f90:	91 83       	std	Z+1, r25	; 0x01
          outputBuffer[RESPONSE_STATUSCODE_OFFSET] = UNKNOWN_COMMAND;
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	82 83       	std	Z+2, r24	; 0x02
          outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
     f96:	c6 01       	movw	r24, r12
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	0e 94 02 03 	call	0x604	; 0x604 <computeChecksum>
     fa0:	f6 01       	movw	r30, r12
     fa2:	83 83       	std	Z+3, r24	; 0x03
          return 4;
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	90 e0       	ldi	r25, 0x00	; 0
  }
}
     fa8:	64 96       	adiw	r28, 0x14	; 20
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	08 95       	ret

00000fc0 <LEDon>:

void LEDon(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTSET = 0x01;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	e0 e4       	ldi	r30, 0x40	; 64
     fc4:	f6 e0       	ldi	r31, 0x06	; 6
     fc6:	85 83       	std	Z+5, r24	; 0x05
}
     fc8:	08 95       	ret

00000fca <LEDoff>:

void LEDoff(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTCLR = 0x01;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	e0 e4       	ldi	r30, 0x40	; 64
     fce:	f6 e0       	ldi	r31, 0x06	; 6
     fd0:	86 83       	std	Z+6, r24	; 0x06
}
     fd2:	08 95       	ret

00000fd4 <LEDtoggle>:

void LEDtoggle(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTTGL = 0x01;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	e0 e4       	ldi	r30, 0x40	; 64
     fd8:	f6 e0       	ldi	r31, 0x06	; 6
     fda:	87 83       	std	Z+7, r24	; 0x07
}
     fdc:	08 95       	ret

00000fde <main>:
*
* This initializes the other port modules and polls a few volatile status
* bits set in ISRs.
************************************************************************/
int main(void)
{
     fde:	cf 93       	push	r28
     fe0:	df 93       	push	r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <main+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <main+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
    cli();                                    //disable all interrupts for clock reset
     fea:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fec:	8f e3       	ldi	r24, 0x3F	; 63
     fee:	9f e1       	ldi	r25, 0x1F	; 31
     ff0:	01 97       	sbiw	r24, 0x01	; 1
     ff2:	f1 f7       	brne	.-4      	; 0xff0 <main+0x12>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <main+0x18>
     ff6:	00 00       	nop
* is running.  This will feed a 1.024 kHz clock to the RTC.
* The system clock will use the onboard 32MHz oscillator
************************************************************************/
static void configureClocks(void)
{
    OSC.CTRL = OSC_RC32MEN_bm | OSC_RC32KEN_bm;            //enable the 32MHz ring oscillator and the 32kHz RTC oscillator
     ff8:	86 e0       	ldi	r24, 0x06	; 6
     ffa:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm));                //wait for 32MHz to stabilize
     ffe:	80 91 51 00 	lds	r24, 0x0051
    1002:	81 ff       	sbrs	r24, 1
    1004:	fc cf       	rjmp	.-8      	; 0xffe <main+0x20>
    while(!(OSC.STATUS & OSC_RC32KRDY_bm));                //wait for 32kHz to stabilize
    1006:	80 91 51 00 	lds	r24, 0x0051
    100a:	82 ff       	sbrs	r24, 2
    100c:	fc cf       	rjmp	.-8      	; 0x1006 <main+0x28>

    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    100e:	ff 24       	eor	r15, r15
    1010:	f3 94       	inc	r15
    1012:	f0 92 60 00 	sts	0x0060, r15
    DFLLRC2M.CTRL = DFLL_ENABLE_bm;
    1016:	f0 92 68 00 	sts	0x0068, r15

    CCP = CCP_IOREG_gc;                                    //clock is protected by Configuration Change Protection - must be properly disabled to change clock source
    101a:	88 ed       	ldi	r24, 0xD8	; 216
    101c:	84 bf       	out	0x34, r24	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;                    //switch to 32MHz oscillator
    101e:	f0 92 40 00 	sts	0x0040, r15
    CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;    //Select 1.024 kHz from internal oscillator for RTC clock source
    1022:	85 e0       	ldi	r24, 0x05	; 5
    1024:	e0 e4       	ldi	r30, 0x40	; 64
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	83 83       	std	Z+3, r24	; 0x03
    102a:	ef e3       	ldi	r30, 0x3F	; 63
    102c:	ff e1       	ldi	r31, 0x1F	; 31
    102e:	31 97       	sbiw	r30, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <main+0x50>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <main+0x56>
    1034:	00 00       	nop
}

static void detectProximalDistal(void)
{
    //isProximal = 0;
  numPressureSensors = 10;
    1036:	8a e0       	ldi	r24, 0x0A	; 10
    1038:	80 93 71 21 	sts	0x2171, r24
    cli();                                    //disable all interrupts for clock reset
    _delay_ms(1); // for stability of supplies
    configureClocks();
    _delay_ms(1); // for stability of clocks
    detectProximalDistal();
    configurePortIODistal();
    103c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <configurePortIODistal>
}

void LEDon(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTSET = 0x01;
    1040:	00 e4       	ldi	r16, 0x40	; 64
    1042:	16 e0       	ldi	r17, 0x06	; 6
    1044:	f8 01       	movw	r30, r16
    1046:	f5 82       	std	Z+5, r15	; 0x05
    detectProximalDistal();
    configurePortIODistal();

    LEDon();

    configureADC();
    1048:	0e 94 c5 01 	call	0x38a	; 0x38a <configureADC>

    configureDaisyUSART();
    104c:	0e 94 13 03 	call	0x626	; 0x626 <configureDaisyUSART>

    initTactileModule(); // initialize variables of the tactile buffer
    1050:	0e 94 b5 04 	call	0x96a	; 0x96a <initTactileModule>

    PMIC.CTRL |= PMIC_LOLVLEN_bm;            //tell event system to pay attention to low-priority interrupts
    1054:	80 91 a2 00 	lds	r24, 0x00A2
    1058:	81 60       	ori	r24, 0x01	; 1
    105a:	e0 ea       	ldi	r30, 0xA0	; 160
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	82 83       	std	Z+2, r24	; 0x02
    sei();
    1060:	78 94       	sei

    configureSPIModulesPressure();
    1062:	0e 94 af 04 	call	0x95e	; 0x95e <configureSPIModulesPressure>
    collectAllCalibrationValues();
    1066:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <collectAllCalibrationValues>

    configureSPIModulesAccel();
    106a:	0e 94 3a 01 	call	0x274	; 0x274 <configureSPIModulesAccel>
    configAccel();
    106e:	0e 94 4d 01 	call	0x29a	; 0x29a <configAccel>
}

void LEDoff(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTCLR = 0x01;
    1072:	f8 01       	movw	r30, r16
    1074:	f6 82       	std	Z+6, r15	; 0x06
    return 4+responseSize;
}

static void initStateFromEEPROM(void)
{
    uint32_t zero_check = 0;
    1076:	19 82       	std	Y+1, r1	; 0x01
    1078:	1a 82       	std	Y+2, r1	; 0x02
    107a:	1b 82       	std	Y+3, r1	; 0x03
    107c:	1c 82       	std	Y+4, r1	; 0x04
    ReadIntFromEEPROM(EEPROM_ADDRESS_LED, (uint8_t*)&zero_check);
    107e:	8f e1       	ldi	r24, 0x1F	; 31
    1080:	be 01       	movw	r22, r28
    1082:	6f 5f       	subi	r22, 0xFF	; 255
    1084:	7f 4f       	sbci	r23, 0xFF	; 255
    1086:	0e 94 4c 06 	call	0xc98	; 0xc98 <ReadIntFromEEPROM>
    
    if(zero_check)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	ab 81       	ldd	r26, Y+3	; 0x03
    1090:	bc 81       	ldd	r27, Y+4	; 0x04
}

void LEDon(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTSET = 0x01;
    1092:	f8 01       	movw	r30, r16
static void initStateFromEEPROM(void)
{
    uint32_t zero_check = 0;
    ReadIntFromEEPROM(EEPROM_ADDRESS_LED, (uint8_t*)&zero_check);
    
    if(zero_check)
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	a1 05       	cpc	r26, r1
    1098:	b1 05       	cpc	r27, r1
    109a:	11 f0       	breq	.+4      	; 0x10a0 <main+0xc2>
}

void LEDon(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTSET = 0x01;
    109c:	f5 82       	std	Z+5, r15	; 0x05
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <main+0xc4>
}

void LEDoff(void)
{
    //PORTC.DIRSET = 0x01;
    PORTC.OUTCLR = 0x01;
    10a0:	f6 82       	std	Z+6, r15	; 0x06
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
}

static void verifyVersion()
{
    uint32_t readversion = 0;
    10a2:	19 82       	std	Y+1, r1	; 0x01
    10a4:	1a 82       	std	Y+2, r1	; 0x02
    10a6:	1b 82       	std	Y+3, r1	; 0x03
    10a8:	1c 82       	std	Y+4, r1	; 0x04
    ReadIntFromEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    10aa:	8d e1       	ldi	r24, 0x1D	; 29
    10ac:	be 01       	movw	r22, r28
    10ae:	6f 5f       	subi	r22, 0xFF	; 255
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	0e 94 4c 06 	call	0xc98	; 0xc98 <ReadIntFromEEPROM>
    if (readversion != FIRMWARE_VERSION)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	ab 81       	ldd	r26, Y+3	; 0x03
    10bc:	bc 81       	ldd	r27, Y+4	; 0x04
    10be:	8d 32       	cpi	r24, 0x2D	; 45
    10c0:	f1 e0       	ldi	r31, 0x01	; 1
    10c2:	9f 07       	cpc	r25, r31
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	af 07       	cpc	r26, r31
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	bf 07       	cpc	r27, r31
    10cc:	71 f0       	breq	.+28     	; 0x10ea <main+0x10c>
    {
        readversion = FIRMWARE_VERSION;
    10ce:	8d e2       	ldi	r24, 0x2D	; 45
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	a0 e0       	ldi	r26, 0x00	; 0
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	89 83       	std	Y+1, r24	; 0x01
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	ab 83       	std	Y+3, r26	; 0x03
    10dc:	bc 83       	std	Y+4, r27	; 0x04
        WriteIntToEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    10de:	8d e1       	ldi	r24, 0x1D	; 29
    10e0:	be 01       	movw	r22, r28
    10e2:	6f 5f       	subi	r22, 0xFF	; 255
    10e4:	7f 4f       	sbci	r23, 0xFF	; 255
    10e6:	0e 94 73 06 	call	0xce6	; 0xce6 <WriteIntToEEPROM>
    initStateFromEEPROM();
    verifyVersion();
    
    while(1){
        
        if(notifyDaisy)
    10ea:	80 91 04 20 	lds	r24, 0x2004
    10ee:	88 23       	and	r24, r24
    10f0:	11 f0       	breq	.+4      	; 0x10f6 <main+0x118>
        {
            doDaisyTask();
    10f2:	0e 94 31 03 	call	0x662	; 0x662 <doDaisyTask>
        }

        if(tactReady)
    10f6:	80 91 dc 20 	lds	r24, 0x20DC
    10fa:	88 23       	and	r24, r24
    10fc:	b1 f3       	breq	.-20     	; 0x10ea <main+0x10c>
        {
            doTactSensors();
    10fe:	0e 94 78 05 	call	0xaf0	; 0xaf0 <doTactSensors>
    1102:	f3 cf       	rjmp	.-26     	; 0x10ea <main+0x10c>

00001104 <memcpy>:
    1104:	fb 01       	movw	r30, r22
    1106:	dc 01       	movw	r26, r24
    1108:	02 c0       	rjmp	.+4      	; 0x110e <memcpy+0xa>
    110a:	01 90       	ld	r0, Z+
    110c:	0d 92       	st	X+, r0
    110e:	41 50       	subi	r20, 0x01	; 1
    1110:	50 40       	sbci	r21, 0x00	; 0
    1112:	d8 f7       	brcc	.-10     	; 0x110a <memcpy+0x6>
    1114:	08 95       	ret

00001116 <__eerd_byte_x32a4u>:
    1116:	03 d0       	rcall	.+6      	; 0x111e <eeprom_mapen>
    1118:	80 81       	ld	r24, Z
    111a:	99 27       	eor	r25, r25
    111c:	08 95       	ret

0000111e <eeprom_mapen>:
    111e:	e0 ec       	ldi	r30, 0xC0	; 192
    1120:	f1 e0       	ldi	r31, 0x01	; 1
    1122:	37 85       	ldd	r19, Z+15	; 0x0f
    1124:	37 fd       	sbrc	r19, 7
    1126:	fd cf       	rjmp	.-6      	; 0x1122 <eeprom_mapen+0x4>
    1128:	34 85       	ldd	r19, Z+12	; 0x0c
    112a:	38 60       	ori	r19, 0x08	; 8
    112c:	34 87       	std	Z+12, r19	; 0x0c
    112e:	fc 01       	movw	r30, r24
    1130:	e0 50       	subi	r30, 0x00	; 0
    1132:	f0 4f       	sbci	r31, 0xF0	; 240
    1134:	08 95       	ret

00001136 <__eewr_byte_x32a4u>:
    1136:	26 2f       	mov	r18, r22

00001138 <__eewr_r18_x32a4u>:
    1138:	e0 ec       	ldi	r30, 0xC0	; 192
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	37 85       	ldd	r19, Z+15	; 0x0f
    113e:	37 fd       	sbrc	r19, 7
    1140:	fd cf       	rjmp	.-6      	; 0x113c <__eewr_r18_x32a4u+0x4>
    1142:	34 85       	ldd	r19, Z+12	; 0x0c
    1144:	37 7f       	andi	r19, 0xF7	; 247
    1146:	34 87       	std	Z+12, r19	; 0x0c
    1148:	37 85       	ldd	r19, Z+15	; 0x0f
    114a:	31 ff       	sbrs	r19, 1
    114c:	09 c0       	rjmp	.+18     	; 0x1160 <__eewr_r18_x32a4u+0x28>
    114e:	36 e3       	ldi	r19, 0x36	; 54
    1150:	32 87       	std	Z+10, r19	; 0x0a
    1152:	38 ed       	ldi	r19, 0xD8	; 216
    1154:	34 bf       	out	0x34, r19	; 52
    1156:	31 e0       	ldi	r19, 0x01	; 1
    1158:	33 87       	std	Z+11, r19	; 0x0b
    115a:	37 85       	ldd	r19, Z+15	; 0x0f
    115c:	37 fd       	sbrc	r19, 7
    115e:	fd cf       	rjmp	.-6      	; 0x115a <__eewr_r18_x32a4u+0x22>
    1160:	33 e3       	ldi	r19, 0x33	; 51
    1162:	32 87       	std	Z+10, r19	; 0x0a
    1164:	80 83       	st	Z, r24
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	12 82       	std	Z+2, r1	; 0x02
    116a:	24 83       	std	Z+4, r18	; 0x04
    116c:	25 e3       	ldi	r18, 0x35	; 53
    116e:	22 87       	std	Z+10, r18	; 0x0a
    1170:	28 ed       	ldi	r18, 0xD8	; 216
    1172:	31 e0       	ldi	r19, 0x01	; 1
    1174:	24 bf       	out	0x34, r18	; 52
    1176:	33 87       	std	Z+11, r19	; 0x0b
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	08 95       	ret

0000117c <_exit>:
    117c:	f8 94       	cli

0000117e <__stop_program>:
    117e:	ff cf       	rjmp	.-2      	; 0x117e <__stop_program>
