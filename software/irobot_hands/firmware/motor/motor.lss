
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00802000  00003b2e  00003bc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000024c  0080203a  0080203a  00003bfc  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000042c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000e8  00000000  00000000  0000434d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d22  00000000  00000000  00004435  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104f  00000000  00000000  0000a157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010fb  00000000  00000000  0000b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000096c  00000000  00000000  0000c2a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004305  00000000  00000000  0000cc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000029a1  00000000  00000000  00010f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000138b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__ctors_end>
       4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
       8:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__vector_2>
       c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      10:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      14:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      18:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_6>
      1c:	0c 94 c2 04 	jmp	0x984	; 0x984 <__vector_7>
      20:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      24:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      28:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__vector_10>
      2c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      30:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      34:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      38:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      3c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      40:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      44:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      48:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      4c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      50:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      54:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      58:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      5c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      60:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      64:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      68:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      6c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      70:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      74:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      78:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      7c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      80:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      84:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      88:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      8c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      90:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      94:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      98:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      9c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      a0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      a4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      a8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      ac:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      b0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      b4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      b8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      bc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      c0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      c4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      c8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      cc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      d0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      d4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      d8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      dc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      e0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      e4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      e8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      ec:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      f0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      f4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      f8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
      fc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     100:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     104:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     108:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     10c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     110:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     114:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     118:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     11c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     120:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     124:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     128:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     12c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     130:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     134:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_77>
     138:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     13c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     140:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     144:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     148:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     14c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     150:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     154:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     158:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     15c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     160:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     164:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     168:	0c 94 88 04 	jmp	0x910	; 0x910 <__vector_90>
     16c:	0c 94 95 03 	jmp	0x72a	; 0x72a <__vector_91>
     170:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     174:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_93>
     178:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     17c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     180:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     184:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     188:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     18c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     190:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     194:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     198:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     19c:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1a0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1a4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1a8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1ac:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1b0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1b4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1b8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1bc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1c0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1c4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1c8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1cc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1d0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1d4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1d8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1dc:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1e0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1e4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1e8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1ec:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1f0:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1f4:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1f8:	0c 94 5c 01 	jmp	0x2b8	; 0x2b8 <__bad_interrupt>
     1fc:	07 63       	ori	r16, 0x37	; 55
     1fe:	42 36       	cpi	r20, 0x62	; 98
     200:	b7 9b       	sbis	0x16, 7	; 22
     202:	d8 a7       	lds	r29, 0x78
     204:	1a 39       	cpi	r17, 0x9A	; 154
     206:	68 56       	subi	r22, 0x68	; 104
     208:	18 ae       	sts	0xb8, r17
     20a:	ba ab       	sts	0x5a, r27
     20c:	55 8c       	ldd	r5, Z+29	; 0x1d
     20e:	1d 3c       	cpi	r17, 0xCD	; 205
     210:	b7 cc       	rjmp	.-1682   	; 0xfffffb80 <__eeprom_end+0xff7efb80>
     212:	57 63       	ori	r21, 0x37	; 55
     214:	bd 6d       	ori	r27, 0xDD	; 221
     216:	ed fd       	.word	0xfded	; ????
     218:	75 3e       	cpi	r23, 0xE5	; 229
     21a:	f6 17       	cp	r31, r22
     21c:	72 31       	cpi	r23, 0x12	; 18
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	08 00       	.word	0x0008	; ????
     226:	00 00       	nop
     228:	be 92       	st	-X, r11
     22a:	24 49       	sbci	r18, 0x94	; 148
     22c:	12 3e       	cpi	r17, 0xE2	; 226
     22e:	ab aa       	sts	0x9b, r26
     230:	aa 2a       	or	r10, r26
     232:	be cd       	rjmp	.-1156   	; 0xfffffdb0 <__eeprom_end+0xff7efdb0>
     234:	cc cc       	rjmp	.-1640   	; 0xfffffbce <__eeprom_end+0xff7efbce>
     236:	4c 3e       	cpi	r20, 0xEC	; 236
     238:	00 00       	nop
     23a:	00 80       	ld	r0, Z
     23c:	be ab       	sts	0x5e, r27
     23e:	aa aa       	sts	0x9a, r26
     240:	aa 3e       	cpi	r26, 0xEA	; 234
     242:	00 00       	nop
     244:	00 00       	nop
     246:	bf 00       	.word	0x00bf	; ????
     248:	00 00       	nop
     24a:	80 3f       	cpi	r24, 0xF0	; 240
     24c:	00 00       	nop
     24e:	00 00       	nop
     250:	00 08       	sbc	r0, r0
     252:	41 78       	andi	r20, 0x81	; 129
     254:	d3 bb       	out	0x13, r29	; 19
     256:	43 87       	std	Z+11, r20	; 0x0b
     258:	d1 13       	cpse	r29, r17
     25a:	3d 19       	sub	r19, r13
     25c:	0e 3c       	cpi	r16, 0xCE	; 206
     25e:	c3 bd       	out	0x23, r28	; 35
     260:	42 82       	std	Z+2, r4	; 0x02
     262:	ad 2b       	or	r26, r29
     264:	3e 68       	ori	r19, 0x8E	; 142
     266:	ec 82       	std	Y+4, r14	; 0x04
     268:	76 be       	out	0x36, r7	; 54
     26a:	d9 8f       	std	Y+25, r29	; 0x19
     26c:	e1 a9       	sts	0x41, r30
     26e:	3e 4c       	sbci	r19, 0xCE	; 206
     270:	80 ef       	ldi	r24, 0xF0	; 240
     272:	ff be       	out	0x3f, r15	; 63
     274:	01 c4       	rjmp	.+2050   	; 0xa78 <passthroughToUpstream+0x7c>
     276:	ff 7f       	andi	r31, 0xFF	; 255
     278:	3f 00       	.word	0x003f	; ????
     27a:	00 00       	nop
	...

0000027e <__ctors_end>:
     27e:	11 24       	eor	r1, r1
     280:	1f be       	out	0x3f, r1	; 63
     282:	cf ef       	ldi	r28, 0xFF	; 255
     284:	df e2       	ldi	r29, 0x2F	; 47
     286:	de bf       	out	0x3e, r29	; 62
     288:	cd bf       	out	0x3d, r28	; 61

0000028a <__do_copy_data>:
     28a:	10 e2       	ldi	r17, 0x20	; 32
     28c:	a0 e0       	ldi	r26, 0x00	; 0
     28e:	b0 e2       	ldi	r27, 0x20	; 32
     290:	ee e2       	ldi	r30, 0x2E	; 46
     292:	fb e3       	ldi	r31, 0x3B	; 59
     294:	02 c0       	rjmp	.+4      	; 0x29a <__do_copy_data+0x10>
     296:	05 90       	lpm	r0, Z+
     298:	0d 92       	st	X+, r0
     29a:	aa 33       	cpi	r26, 0x3A	; 58
     29c:	b1 07       	cpc	r27, r17
     29e:	d9 f7       	brne	.-10     	; 0x296 <__do_copy_data+0xc>

000002a0 <__do_clear_bss>:
     2a0:	12 e2       	ldi	r17, 0x22	; 34
     2a2:	aa e3       	ldi	r26, 0x3A	; 58
     2a4:	b0 e2       	ldi	r27, 0x20	; 32
     2a6:	01 c0       	rjmp	.+2      	; 0x2aa <.do_clear_bss_start>

000002a8 <.do_clear_bss_loop>:
     2a8:	1d 92       	st	X+, r1

000002aa <.do_clear_bss_start>:
     2aa:	a6 38       	cpi	r26, 0x86	; 134
     2ac:	b1 07       	cpc	r27, r17
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <.do_clear_bss_loop>
     2b0:	0e 94 ba 18 	call	0x3174	; 0x3174 <main>
     2b4:	0c 94 95 1d 	jmp	0x3b2a	; 0x3b2a <_exit>

000002b8 <__bad_interrupt>:
     2b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002bc <configureADC>:
*
* Note that an internal reference is being used in this test setup.
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
     2bc:	cf 93       	push	r28
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	80 93 ca 01 	sts	0x01CA, r24
    result = pgm_read_byte(index);
     2c4:	e0 e2       	ldi	r30, 0x20	; 32
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     2ca:	10 92 ca 01 	sts	0x01CA, r1
* Note that an internal reference is being used in this test setup.
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
    CURRENT_ADC.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
     2ce:	a0 e0       	ldi	r26, 0x00	; 0
     2d0:	b2 e0       	ldi	r27, 0x02	; 2
     2d2:	1c 96       	adiw	r26, 0x0c	; 12
     2d4:	ec 93       	st	X, r30
     2d6:	1c 97       	sbiw	r26, 0x0c	; 12
static uint8_t ReadCalibrationByte(uint8_t index)
{
    uint8_t result;

    // Load the NVM Command register to read the calibration row.
    NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     2d8:	80 93 ca 01 	sts	0x01CA, r24
    result = pgm_read_byte(index);
     2dc:	e1 e2       	ldi	r30, 0x21	; 33
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	e4 91       	lpm	r30, Z

    //Clean up NVM Command register.
    NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     2e2:	10 92 ca 01 	sts	0x01CA, r1
* The production system will have an external one available.
************************************************************************/
void configureADC(void)
{
    CURRENT_ADC.CALL = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL0) );
    CURRENT_ADC.CALH = ReadCalibrationByte( offsetof(NVM_PROD_SIGNATURES_t, ADCACAL1) );
     2e6:	1d 96       	adiw	r26, 0x0d	; 13
     2e8:	ec 93       	st	X, r30
     2ea:	1d 97       	sbiw	r26, 0x0d	; 13

    //Use the Event System to actuate sweeps

    EVSYS.CH3MUX = EVSYS_CHMUX_PRESCALER_8192_gc;
     2ec:	e0 e8       	ldi	r30, 0x80	; 128
     2ee:	f1 e0       	ldi	r31, 0x01	; 1
     2f0:	9d e8       	ldi	r25, 0x8D	; 141
     2f2:	93 83       	std	Z+3, r25	; 0x03
    EVSYS.CH3CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
     2f4:	13 86       	std	Z+11, r1	; 0x0b

    CURRENT_ADC.EVCTRL = ADC_SWEEP_0123_gc | ADC_EVSEL_3456_gc | ADC_EVACT_SWEEP_gc;
     2f6:	9d ed       	ldi	r25, 0xDD	; 221
     2f8:	13 96       	adiw	r26, 0x03	; 3
     2fa:	9c 93       	st	X, r25
     2fc:	13 97       	sbiw	r26, 0x03	; 3

    //Maximum ADC clock is 2 MHz.  This requires a prescaler of 16 on a CPU clock of 32 MHz
    CURRENT_ADC.PRESCALER = ADC_PRESCALER_DIV16_gc;
     2fe:	14 96       	adiw	r26, 0x04	; 4
     300:	8c 93       	st	X, r24
     302:	14 97       	sbiw	r26, 0x04	; 4

#ifdef USE_INTERNAL_REF
    CURRENT_ADC.REFCTRL = ADC_REFSEL_VCC_gc;
#else
    CURRENT_ADC.REFCTRL = ADC_REFSEL_AREFA_gc;
     304:	90 e2       	ldi	r25, 0x20	; 32
     306:	12 96       	adiw	r26, 0x02	; 2
     308:	9c 93       	st	X, r25
     30a:	12 97       	sbiw	r26, 0x02	; 2
#endif

    #warning The ADC.CH structure is wrong in AU parts.  Just use the ADC_CH0_MUXCTRL, etc. defines instead
    //CH0 is the temperature
    CURRENT_ADC_CH0_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	90 93 20 02 	sts	0x0220, r25
    CURRENT_ADC_CH0_MUXCTRL = ADC_CH_MUXPOS_PIN1_gc;
     312:	28 e0       	ldi	r18, 0x08	; 8
     314:	20 93 21 02 	sts	0x0221, r18
    CURRENT_ADC_CH0_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     318:	10 92 22 02 	sts	0x0222, r1

    //CH1 is the current monitor.  It arrives inverted due to limitations in the part

    CURRENT_ADC_CH1_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_DIFF_gc;
     31c:	80 93 28 02 	sts	0x0228, r24
    CURRENT_ADC_CH1_MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_PIN2_gc;
     320:	8a e2       	ldi	r24, 0x2A	; 42
     322:	80 93 29 02 	sts	0x0229, r24
    CURRENT_ADC_CH1_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;
     326:	10 92 2a 02 	sts	0x022A, r1
    // CURRENT_ADC_CH3_CTRL = ADC_CH_GAIN_1X_gc | ADC_CH_INPUTMODE_SINGLEENDED_gc;
    // CURRENT_ADC_CH3_MUXCTRL = ADC_CH_MUXPOS_PIN4_gc;
    // CURRENT_ADC_CH3_INTCTRL = ADC_CH_INTMODE_COMPLETE_gc | ADC_CH_INTLVL_OFF_gc;

    //Configure for Signed operation
    CURRENT_ADC.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
     32a:	80 e1       	ldi	r24, 0x10	; 16
     32c:	11 96       	adiw	r26, 0x01	; 1
     32e:	8c 93       	st	X, r24
     330:	11 97       	sbiw	r26, 0x01	; 1
    CURRENT_ADC.CTRLA = ADC_ENABLE_bm;
     332:	90 93 00 02 	sts	0x0200, r25
     336:	21 e1       	ldi	r18, 0x11	; 17
     338:	30 e0       	ldi	r19, 0x00	; 0
* appropriate offset estimation for calibration
************************************************************************/
static void calibrateCurrentADC(void)
{
    int i=0;
    int32_t calibrationAccumulator=0;
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	ba 01       	movw	r22, r20
    while(i<16)
    {
        if(CURRENT_ADC.INTFLAGS & ADC_CH1IF_bm)
     340:	e0 e0       	ldi	r30, 0x00	; 0
     342:	f2 e0       	ldi	r31, 0x02	; 2
        {
            CURRENT_ADC.INTFLAGS = ADC_CH1IF_bm;
     344:	c2 e0       	ldi	r28, 0x02	; 2
     346:	0f c0       	rjmp	.+30     	; 0x366 <configureADC+0xaa>
{
    int i=0;
    int32_t calibrationAccumulator=0;
    while(i<16)
    {
        if(CURRENT_ADC.INTFLAGS & ADC_CH1IF_bm)
     348:	80 91 06 02 	lds	r24, 0x0206
     34c:	81 ff       	sbrs	r24, 1
     34e:	fc cf       	rjmp	.-8      	; 0x348 <configureADC+0x8c>
        {
            CURRENT_ADC.INTFLAGS = ADC_CH1IF_bm;
     350:	c6 83       	std	Z+6, r28	; 0x06
            calibrationAccumulator += CURRENT_ADC.CH1RES;
     352:	80 91 12 02 	lds	r24, 0x0212
     356:	90 91 13 02 	lds	r25, 0x0213
     35a:	a0 e0       	ldi	r26, 0x00	; 0
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	48 0f       	add	r20, r24
     360:	59 1f       	adc	r21, r25
     362:	6a 1f       	adc	r22, r26
     364:	7b 1f       	adc	r23, r27
     366:	21 50       	subi	r18, 0x01	; 1
     368:	30 40       	sbci	r19, 0x00	; 0
************************************************************************/
static void calibrateCurrentADC(void)
{
    int i=0;
    int32_t calibrationAccumulator=0;
    while(i<16)
     36a:	71 f7       	brne	.-36     	; 0x348 <configureADC+0x8c>
            CURRENT_ADC.INTFLAGS = ADC_CH1IF_bm;
            calibrationAccumulator += CURRENT_ADC.CH1RES;
            i++;
        }
    }
    ADCCurrentCalibration = round((float) calibrationAccumulator / 16.0);
     36c:	cb 01       	movw	r24, r22
     36e:	ba 01       	movw	r22, r20
     370:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__floatsisf>
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	30 e0       	ldi	r19, 0x00	; 0
     378:	40 e8       	ldi	r20, 0x80	; 128
     37a:	5d e3       	ldi	r21, 0x3D	; 61
     37c:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
     380:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <round>
     384:	0e 94 88 1a 	call	0x3510	; 0x3510 <__fixsfsi>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	80 93 44 20 	sts	0x2044, r24
     390:	90 93 45 20 	sts	0x2045, r25
    CURRENT_ADC.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm;
    CURRENT_ADC.CTRLA = ADC_ENABLE_bm;

    //Calibrate the ADC
    calibrateCurrentADC();
}
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <readCurrentSignals>:
* Reads the most recent captures into appropriate buffers for each motor
************************************************************************/
float thermistorVoltage;
int rawReading;
void readCurrentSignals()
{
     398:	cf 92       	push	r12
     39a:	df 92       	push	r13
     39c:	ef 92       	push	r14
     39e:	ff 92       	push	r15
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29

    float tempMotorCurrent;

    if(CURRENT_ADC.INTFLAGS & ADC_CH0IF_bm)
     3a8:	80 91 06 02 	lds	r24, 0x0206
     3ac:	80 ff       	sbrs	r24, 0
     3ae:	6d c0       	rjmp	.+218    	; 0x48a <readCurrentSignals+0xf2>
    {
        CURRENT_ADC.INTFLAGS = ADC_CH0IF_bm;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	e0 e0       	ldi	r30, 0x00	; 0
     3b4:	f2 e0       	ldi	r31, 0x02	; 2
     3b6:	86 83       	std	Z+6, r24	; 0x06
        rawReading = CURRENT_ADC.CH0RES;
     3b8:	60 91 10 02 	lds	r22, 0x0210
     3bc:	70 91 11 02 	lds	r23, 0x0211
     3c0:	60 93 11 22 	sts	0x2211, r22
     3c4:	70 93 12 22 	sts	0x2212, r23
        thermistorVoltage = ADC_CODES_TO_VOLTS_SIGNED(rawReading);
     3c8:	88 27       	eor	r24, r24
     3ca:	77 fd       	sbrc	r23, 7
     3cc:	80 95       	com	r24
     3ce:	98 2f       	mov	r25, r24
     3d0:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__floatsisf>
     3d4:	20 e0       	ldi	r18, 0x00	; 0
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	40 e2       	ldi	r20, 0x20	; 32
     3da:	50 e4       	ldi	r21, 0x40	; 64
     3dc:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	5a e3       	ldi	r21, 0x3A	; 58
     3e8:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
     3ec:	9b 01       	movw	r18, r22
     3ee:	f8 2f       	mov	r31, r24
     3f0:	e9 2f       	mov	r30, r25
     3f2:	46 2f       	mov	r20, r22
     3f4:	53 2f       	mov	r21, r19
     3f6:	68 2f       	mov	r22, r24
     3f8:	79 2f       	mov	r23, r25
     3fa:	40 93 0d 22 	sts	0x220D, r20
     3fe:	50 93 0e 22 	sts	0x220E, r21
     402:	60 93 0f 22 	sts	0x220F, r22
     406:	70 93 10 22 	sts	0x2210, r23
        statorTemperature = Thermistor_RtoT(Thermistor_VtoR(thermistorVoltage));
     40a:	82 2f       	mov	r24, r18
     40c:	93 2f       	mov	r25, r19
     40e:	af 2f       	mov	r26, r31
     410:	be 2f       	mov	r27, r30
     412:	bc 01       	movw	r22, r24
     414:	cd 01       	movw	r24, r26
     416:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <Thermistor_VtoR>
     41a:	0e 94 b2 11 	call	0x2364	; 0x2364 <Thermistor_RtoT>
     41e:	60 93 00 20 	sts	0x2000, r22
     422:	70 93 01 20 	sts	0x2001, r23
     426:	80 93 02 20 	sts	0x2002, r24
     42a:	90 93 03 20 	sts	0x2003, r25
        if(statorTemperature < 0) statorTemperature = 0;
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	a9 01       	movw	r20, r18
     434:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
     438:	87 ff       	sbrs	r24, 7
     43a:	0b c0       	rjmp	.+22     	; 0x452 <readCurrentSignals+0xba>
     43c:	80 e0       	ldi	r24, 0x00	; 0
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	dc 01       	movw	r26, r24
     442:	80 93 00 20 	sts	0x2000, r24
     446:	90 93 01 20 	sts	0x2001, r25
     44a:	a0 93 02 20 	sts	0x2002, r26
     44e:	b0 93 03 20 	sts	0x2003, r27
        if(statorTemperature > 130) statorTemperature = 130;
     452:	60 91 00 20 	lds	r22, 0x2000
     456:	70 91 01 20 	lds	r23, 0x2001
     45a:	80 91 02 20 	lds	r24, 0x2002
     45e:	90 91 03 20 	lds	r25, 0x2003
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	42 e0       	ldi	r20, 0x02	; 2
     468:	53 e4       	ldi	r21, 0x43	; 67
     46a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
     46e:	18 16       	cp	r1, r24
     470:	64 f4       	brge	.+24     	; 0x48a <readCurrentSignals+0xf2>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	a2 e0       	ldi	r26, 0x02	; 2
     478:	b3 e4       	ldi	r27, 0x43	; 67
     47a:	80 93 00 20 	sts	0x2000, r24
     47e:	90 93 01 20 	sts	0x2001, r25
     482:	a0 93 02 20 	sts	0x2002, r26
     486:	b0 93 03 20 	sts	0x2003, r27
    }

    if(CURRENT_ADC.INTFLAGS & ADC_CH1IF_bm)
     48a:	80 91 06 02 	lds	r24, 0x0206
     48e:	81 ff       	sbrs	r24, 1
     490:	9e c0       	rjmp	.+316    	; 0x5ce <readCurrentSignals+0x236>
    {
        CURRENT_ADC.INTFLAGS = ADC_CH1IF_bm;
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	e0 e0       	ldi	r30, 0x00	; 0
     496:	f2 e0       	ldi	r31, 0x02	; 2
     498:	86 83       	std	Z+6, r24	; 0x06
        rawMotorCurrent = CURRENT_ADC.CH1RES;
     49a:	60 91 12 02 	lds	r22, 0x0212
     49e:	70 91 13 02 	lds	r23, 0x0213
        rawMotorCurrent = rawMotorCurrent - ADCCurrentCalibration;
     4a2:	80 91 44 20 	lds	r24, 0x2044
     4a6:	90 91 45 20 	lds	r25, 0x2045
     4aa:	68 1b       	sub	r22, r24
     4ac:	79 0b       	sbc	r23, r25
     4ae:	60 93 3e 20 	sts	0x203E, r22
     4b2:	70 93 3f 20 	sts	0x203F, r23
        tempMotorCurrent = compensateCurrent(ADC_CODES_TO_AMPERES((float)rawMotorCurrent));
     4b6:	88 27       	eor	r24, r24
     4b8:	77 fd       	sbrc	r23, 7
     4ba:	80 95       	com	r24
     4bc:	98 2f       	mov	r25, r24
     4be:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__floatsisf>
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	40 e2       	ldi	r20, 0x20	; 32
     4c8:	50 e4       	ldi	r21, 0x40	; 64
     4ca:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	5a e3       	ldi	r21, 0x3A	; 58
     4d6:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
     4da:	2a e9       	ldi	r18, 0x9A	; 154
     4dc:	39 e9       	ldi	r19, 0x99	; 153
     4de:	49 ed       	ldi	r20, 0xD9	; 217
     4e0:	5f e3       	ldi	r21, 0x3F	; 63
     4e2:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
     4e6:	c6 2f       	mov	r28, r22
     4e8:	c7 2e       	mov	r12, r23
     4ea:	e8 2e       	mov	r14, r24
     4ec:	d9 2e       	mov	r13, r25
* the compensated current should be non-zero.  Therefore, the value is capped
* when the duty cycle is less than the LOW_THRESHOLD_DUTY_CYCLE.
************************************************************************/
static float compensateCurrent(float inCurrent)
{
    float dutyCycle = (256.0 + (float) getOldControlValue()) / 512.0;
     4ee:	0e 94 02 07 	call	0xe04	; 0xe04 <getOldControlValue>
     4f2:	68 2f       	mov	r22, r24
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	40 e8       	ldi	r20, 0x80	; 128
     504:	53 e4       	ldi	r21, 0x43	; 67
     506:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	5b e3       	ldi	r21, 0x3B	; 59
     512:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
     516:	f6 2e       	mov	r15, r22
     518:	17 2f       	mov	r17, r23
     51a:	d8 2f       	mov	r29, r24
     51c:	09 2f       	mov	r16, r25

    if(dutyCycle < TEMPERATURE_CORRECTION_LOW_THRESHOLD_DUTY_CYCLE)
     51e:	86 2f       	mov	r24, r22
     520:	91 2f       	mov	r25, r17
     522:	ad 2f       	mov	r26, r29
     524:	b0 2f       	mov	r27, r16
     526:	bc 01       	movw	r22, r24
     528:	cd 01       	movw	r24, r26
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	40 e1       	ldi	r20, 0x10	; 16
     530:	5f e3       	ldi	r21, 0x3F	; 63
     532:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
     536:	87 ff       	sbrs	r24, 7
     538:	04 c0       	rjmp	.+8      	; 0x542 <readCurrentSignals+0x1aa>
    {
        dutyCycle = TEMPERATURE_CORRECTION_LOW_THRESHOLD_DUTY_CYCLE;
     53a:	ff 24       	eor	r15, r15
     53c:	10 e0       	ldi	r17, 0x00	; 0
     53e:	d0 e1       	ldi	r29, 0x10	; 16
     540:	0f e3       	ldi	r16, 0x3F	; 63
    }
    return inCurrent / (dutyCycle*2.0 - 1.0);
     542:	8f 2d       	mov	r24, r15
     544:	91 2f       	mov	r25, r17
     546:	ad 2f       	mov	r26, r29
     548:	b0 2f       	mov	r27, r16
     54a:	bc 01       	movw	r22, r24
     54c:	cd 01       	movw	r24, r26
     54e:	0f 2d       	mov	r16, r15
     550:	2d 2f       	mov	r18, r29
     552:	3b 2f       	mov	r19, r27
     554:	a9 01       	movw	r20, r18
     556:	98 01       	movw	r18, r16
     558:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
     55c:	20 e0       	ldi	r18, 0x00	; 0
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	40 e8       	ldi	r20, 0x80	; 128
     562:	5f e3       	ldi	r21, 0x3F	; 63
     564:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
     568:	9b 01       	movw	r18, r22
     56a:	ac 01       	movw	r20, r24
     56c:	8c 2f       	mov	r24, r28
     56e:	9c 2d       	mov	r25, r12
     570:	ae 2d       	mov	r26, r14
     572:	bd 2d       	mov	r27, r13
     574:	bc 01       	movw	r22, r24
     576:	cd 01       	movw	r24, r26
     578:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
     57c:	c6 2e       	mov	r12, r22
     57e:	d7 2e       	mov	r13, r23
     580:	e8 2e       	mov	r14, r24
     582:	f9 2e       	mov	r15, r25
        tempMotorCurrent = compensateCurrent(ADC_CODES_TO_AMPERES((float)rawMotorCurrent));
        
        //motorCurrent = fabs(tempMotorCurrent);
        
        // only noise will be positive.
        if(tempMotorCurrent > 0.0)
     584:	46 2f       	mov	r20, r22
     586:	57 2f       	mov	r21, r23
     588:	68 2f       	mov	r22, r24
     58a:	79 2f       	mov	r23, r25
     58c:	cb 01       	movw	r24, r22
     58e:	ba 01       	movw	r22, r20
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	a9 01       	movw	r20, r18
     596:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
     59a:	18 16       	cp	r1, r24
     59c:	64 f4       	brge	.+24     	; 0x5b6 <readCurrentSignals+0x21e>
        {
            motorCurrent = 0;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	dc 01       	movw	r26, r24
     5a4:	80 93 40 20 	sts	0x2040, r24
     5a8:	90 93 41 20 	sts	0x2041, r25
     5ac:	a0 93 42 20 	sts	0x2042, r26
     5b0:	b0 93 43 20 	sts	0x2043, r27
     5b4:	0c c0       	rjmp	.+24     	; 0x5ce <readCurrentSignals+0x236>
        } else {
            motorCurrent = -tempMotorCurrent;
     5b6:	f7 fa       	bst	r15, 7
     5b8:	f0 94       	com	r15
     5ba:	f7 f8       	bld	r15, 7
     5bc:	f0 94       	com	r15
     5be:	c0 92 40 20 	sts	0x2040, r12
     5c2:	d0 92 41 20 	sts	0x2041, r13
     5c6:	e0 92 42 20 	sts	0x2042, r14
     5ca:	f0 92 43 20 	sts	0x2043, r15
    // if(CURRENT_ADC.INTFLAGS & ADC_CH3IF_bm)
    // {
    //     CURRENT_ADC.INTFLAGS = ADC_CH3IF_bm;
    //     tension[1] = CURRENT_ADC.CH3RES;
    // }
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	08 95       	ret

000005e0 <prepareDMAChannel>:
* it into the buffer targetBuffer.
*
* This should be called before fireDMAChannel()
************************************************************************/
static void prepareDMAChannel(DMA_CH_t *selectedChannel, uint8_t usartTrigger, USART_t *targetUSART, volatile uint8_t *targetBuffer, uint8_t isOutbound)
{
     5e0:	0f 93       	push	r16
     5e2:	fc 01       	movw	r30, r24
     5e4:	da 01       	movw	r26, r20
    //Configure the chosen channel to read from a fixed UART into a linear array
    if(isOutbound)
     5e6:	00 23       	and	r16, r16
     5e8:	11 f0       	breq	.+4      	; 0x5ee <prepareDMAChannel+0xe>
    {
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_TRANSACTION_gc | DMA_CH_SRCDIR_INC_gc | \
     5ea:	88 ed       	ldi	r24, 0xD8	; 216
     5ec:	01 c0       	rjmp	.+2      	; 0x5f0 <prepareDMAChannel+0x10>
                       DMA_CH_DESTRELOAD_BURST_gc | DMA_CH_DESTDIR_FIXED_gc;
    } else {
        selectedChannel->ADDRCTRL = DMA_CH_SRCRELOAD_BURST_gc | DMA_CH_SRCDIR_FIXED_gc | \
     5ee:	8d e8       	ldi	r24, 0x8D	; 141
     5f0:	82 83       	std	Z+2, r24	; 0x02
                       DMA_CH_DESTRELOAD_TRANSACTION_gc | DMA_CH_DESTDIR_INC_gc;
    }

    //Set to perform one block transfer corresponding to one command packet
    //Technically not necessary because REPEAT will not be set in CTRLA
    selectedChannel->REPCNT = 0x01;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	86 83       	std	Z+6, r24	; 0x06
    //This part has 16 bit pointers, so cast appropriately.
    //Memory addresses are 24 bits to allow for external memory to be mapped into one address space
    //Same with internal EEPROM Data memory.
    //Since these locations are in lower memory, fix the high order address bits to zero.
    //Mapping external memory will require more care.
    if(isOutbound)
     5f6:	00 23       	and	r16, r16
     5f8:	31 f0       	breq	.+12     	; 0x606 <prepareDMAChannel+0x26>
    {
        selectedChannel->DESTADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     5fa:	a4 87       	std	Z+12, r26	; 0x0c
        selectedChannel->DESTADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     5fc:	b5 87       	std	Z+13, r27	; 0x0d
        selectedChannel->DESTADDR2 = 0;
     5fe:	16 86       	std	Z+14, r1	; 0x0e

        selectedChannel->SRCADDR0 = (uint16_t)targetBuffer & 0x00FF;
     600:	20 87       	std	Z+8, r18	; 0x08
        selectedChannel->SRCADDR1 = (uint16_t)targetBuffer >> 8;
     602:	31 87       	std	Z+9, r19	; 0x09
     604:	05 c0       	rjmp	.+10     	; 0x610 <prepareDMAChannel+0x30>
        selectedChannel->SRCADDR2 = 0;
    } else {
        selectedChannel->DESTADDR0 = (uint16_t)targetBuffer & 0x00FF;
     606:	24 87       	std	Z+12, r18	; 0x0c
        selectedChannel->DESTADDR1 = (uint16_t)targetBuffer >> 8;
     608:	35 87       	std	Z+13, r19	; 0x0d
        selectedChannel->DESTADDR2 = 0;
     60a:	16 86       	std	Z+14, r1	; 0x0e

        selectedChannel->SRCADDR0 = (uint16_t) &targetUSART->DATA & 0x00FF;
     60c:	a0 87       	std	Z+8, r26	; 0x08
        selectedChannel->SRCADDR1 = (uint16_t) &targetUSART->DATA >> 8;
     60e:	b1 87       	std	Z+9, r27	; 0x09
        selectedChannel->SRCADDR2 = 0;
     610:	12 86       	std	Z+10, r1	; 0x0a
    }

    //Trigger on received data
    selectedChannel->TRIGSRC = usartTrigger;
     612:	63 83       	std	Z+3, r22	; 0x03

    //Interrupt on this channel when the transaction is complete, and clear any pending flags
    if(isOutbound)
     614:	00 23       	and	r16, r16
     616:	59 f0       	breq	.+22     	; 0x62e <prepareDMAChannel+0x4e>
    {
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_OFF_gc | DMA_CH_TRNIF_bm;
     618:	80 e1       	ldi	r24, 0x10	; 16
     61a:	81 83       	std	Z+1, r24	; 0x01
        targetUSART->STATUS = USART_TXCIF_bm;
     61c:	80 e4       	ldi	r24, 0x40	; 64
     61e:	11 96       	adiw	r26, 0x01	; 1
     620:	8c 93       	st	X, r24
     622:	11 97       	sbiw	r26, 0x01	; 1
        targetUSART->CTRLA = USART_TXCINTLVL_LO_gc | USART_RXCINTLVL_OFF_gc;
     624:	84 e0       	ldi	r24, 0x04	; 4
     626:	13 96       	adiw	r26, 0x03	; 3
     628:	8c 93       	st	X, r24
     62a:	13 97       	sbiw	r26, 0x03	; 3
     62c:	02 c0       	rjmp	.+4      	; 0x632 <prepareDMAChannel+0x52>
    } else
    {
        selectedChannel->CTRLB = DMA_CH_TRNINTLVL_LO_gc | DMA_CH_TRNIF_bm;
     62e:	81 e1       	ldi	r24, 0x11	; 17
     630:	81 83       	std	Z+1, r24	; 0x01
    }
}
     632:	0f 91       	pop	r16
     634:	08 95       	ret

00000636 <configureHalfDuplexLink>:
 *
 * Configures hardware and DMA channels to support the requested stream configuration
 ************************************************************************/

static void configureHalfDuplexLink(SERIAL_STREAM_t selectedStream, SERIAL_DIRECTION_t selectedDirection)
{
     636:	0f 93       	push	r16
    cli();
     638:	f8 94       	cli
    switch(selectedStream)
     63a:	88 23       	and	r24, r24
     63c:	21 f0       	breq	.+8      	; 0x646 <configureHalfDuplexLink+0x10>
     63e:	81 30       	cpi	r24, 0x01	; 1
     640:	09 f0       	breq	.+2      	; 0x644 <configureHalfDuplexLink+0xe>
     642:	70 c0       	rjmp	.+224    	; 0x724 <configureHalfDuplexLink+0xee>
     644:	34 c0       	rjmp	.+104    	; 0x6ae <configureHalfDuplexLink+0x78>
    {
#if USE_DOWNSTREAM
        case DOWNSTREAM:
            //Abort any pending DMA transfers
            if(DOWNSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm)
     646:	80 91 21 01 	lds	r24, 0x0121
     64a:	87 ff       	sbrs	r24, 7
     64c:	05 c0       	rjmp	.+10     	; 0x658 <configureHalfDuplexLink+0x22>
            {
                DOWNSTREAM_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
     64e:	80 91 20 01 	lds	r24, 0x0120
     652:	8f 77       	andi	r24, 0x7F	; 127
     654:	80 93 20 01 	sts	0x0120, r24
            }

            //downstreamXmitDone = 0;
            downstreamSizeReceived = 0;
     658:	10 92 1b 21 	sts	0x211B, r1
            downstreamBusy = 0;
     65c:	10 92 4a 20 	sts	0x204A, r1

            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
     660:	66 23       	and	r22, r22
     662:	99 f4       	brne	.+38     	; 0x68a <configureHalfDuplexLink+0x54>
            {
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_INBOUND_TRIGGER, &DOWNSTREAM_USART, inbound_downstream_data,0);
     664:	80 e2       	ldi	r24, 0x20	; 32
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	6e e6       	ldi	r22, 0x6E	; 110
     66a:	40 eb       	ldi	r20, 0xB0	; 176
     66c:	59 e0       	ldi	r21, 0x09	; 9
     66e:	23 e5       	ldi	r18, 0x53	; 83
     670:	30 e2       	ldi	r19, 0x20	; 32
     672:	00 e0       	ldi	r16, 0x00	; 0
     674:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
                DOWNSTREAM_USART.CTRLA |= USART_RXCINTLVL_LO_gc;
     678:	80 91 b3 09 	lds	r24, 0x09B3
     67c:	80 61       	ori	r24, 0x10	; 16
     67e:	e0 eb       	ldi	r30, 0xB0	; 176
     680:	f9 e0       	ldi	r31, 0x09	; 9
     682:	83 83       	std	Z+3, r24	; 0x03
                DOWNSTREAM_CONFIG = INBOUND;
     684:	10 92 04 20 	sts	0x2004, r1
     688:	4d c0       	rjmp	.+154    	; 0x724 <configureHalfDuplexLink+0xee>
            } else {
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     68a:	80 e4       	ldi	r24, 0x40	; 64
     68c:	e0 eb       	ldi	r30, 0xB0	; 176
     68e:	f9 e0       	ldi	r31, 0x09	; 9
     690:	81 83       	std	Z+1, r24	; 0x01
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     692:	80 e2       	ldi	r24, 0x20	; 32
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	6f e6       	ldi	r22, 0x6F	; 111
     698:	40 eb       	ldi	r20, 0xB0	; 176
     69a:	59 e0       	ldi	r21, 0x09	; 9
     69c:	2c e4       	ldi	r18, 0x4C	; 76
     69e:	30 e2       	ldi	r19, 0x20	; 32
     6a0:	01 e0       	ldi	r16, 0x01	; 1
     6a2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>

                DOWNSTREAM_CONFIG = OUTBOUND;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	80 93 04 20 	sts	0x2004, r24
     6ac:	3b c0       	rjmp	.+118    	; 0x724 <configureHalfDuplexLink+0xee>
            }
            break;
#endif
        case UPSTREAM:
            //Abort any pending DMA transfers
            if(UPSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm)
     6ae:	80 91 11 01 	lds	r24, 0x0111
     6b2:	87 ff       	sbrs	r24, 7
     6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <configureHalfDuplexLink+0x8c>
            {
                UPSTREAM_DMA.CTRLA &= ~DMA_CH_ENABLE_bm;
     6b6:	80 91 10 01 	lds	r24, 0x0110
     6ba:	8f 77       	andi	r24, 0x7F	; 127
     6bc:	e0 e0       	ldi	r30, 0x00	; 0
     6be:	f1 e0       	ldi	r31, 0x01	; 1
     6c0:	80 8b       	std	Z+16, r24	; 0x10
            }

            upstreamRxDone = 0;
     6c2:	10 92 1f 21 	sts	0x211F, r1
     6c6:	10 92 20 21 	sts	0x2120, r1
            //upstreamTxDone = 0;
            upstreamBusy = 0;
     6ca:	10 92 1c 21 	sts	0x211C, r1

            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
     6ce:	66 23       	and	r22, r22
     6d0:	b1 f4       	brne	.+44     	; 0x6fe <configureHalfDuplexLink+0xc8>
            {
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
     6d2:	80 e1       	ldi	r24, 0x10	; 16
     6d4:	91 e0       	ldi	r25, 0x01	; 1
     6d6:	6b e6       	ldi	r22, 0x6B	; 107
     6d8:	40 ea       	ldi	r20, 0xA0	; 160
     6da:	59 e0       	ldi	r21, 0x09	; 9
     6dc:	2a ee       	ldi	r18, 0xEA	; 234
     6de:	31 e2       	ldi	r19, 0x21	; 33
     6e0:	00 e0       	ldi	r16, 0x00	; 0
     6e2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     6e6:	87 e0       	ldi	r24, 0x07	; 7
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	e0 e1       	ldi	r30, 0x10	; 16
     6ec:	f1 e0       	ldi	r31, 0x01	; 1
     6ee:	84 83       	std	Z+4, r24	; 0x04
     6f0:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     6f2:	84 e8       	ldi	r24, 0x84	; 132
     6f4:	80 93 10 01 	sts	0x0110, r24
            //Configure the transceivers and prepare DMA
            if(selectedDirection == INBOUND)
            {
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
                activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
                UPSTREAM_CONFIG = INBOUND;
     6f8:	10 92 21 21 	sts	0x2121, r1
     6fc:	13 c0       	rjmp	.+38     	; 0x724 <configureHalfDuplexLink+0xee>

            } else {
                UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     6fe:	e0 ea       	ldi	r30, 0xA0	; 160
     700:	f9 e0       	ldi	r31, 0x09	; 9
     702:	80 e4       	ldi	r24, 0x40	; 64
     704:	81 83       	std	Z+1, r24	; 0x01
                UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc | USART_RXCINTLVL_OFF_gc;
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	83 83       	std	Z+3, r24	; 0x03
                //Do not send all data through DMA.  Instead send outbound upstream data + 1.  This allows for the insertion of a small delay between size and data
                prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data + 1,1);
     70a:	80 e1       	ldi	r24, 0x10	; 16
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	6c e6       	ldi	r22, 0x6C	; 108
     710:	40 ea       	ldi	r20, 0xA0	; 160
     712:	59 e0       	ldi	r21, 0x09	; 9
     714:	23 e2       	ldi	r18, 0x23	; 35
     716:	31 e2       	ldi	r19, 0x21	; 33
     718:	01 e0       	ldi	r16, 0x01	; 1
     71a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
                UPSTREAM_CONFIG = OUTBOUND;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 21 21 	sts	0x2121, r24
            break;
        default:
            break;
    }

    sei();
     724:	78 94       	sei
    return;

}
     726:	0f 91       	pop	r16
     728:	08 95       	ret

0000072a <__vector_91>:
 *
 * The Upstream USART only receives fixed COMMAND_PACKET_SIZE packets, so it simply needs an
 * armed DMA channel
 ************************************************************************/
ISR(DOWNSTREAM_USART_RX_vect)
{
     72a:	1f 92       	push	r1
     72c:	0f 92       	push	r0
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	0f 92       	push	r0
     732:	11 24       	eor	r1, r1
     734:	0f 93       	push	r16
     736:	2f 93       	push	r18
     738:	3f 93       	push	r19
     73a:	4f 93       	push	r20
     73c:	5f 93       	push	r21
     73e:	6f 93       	push	r22
     740:	7f 93       	push	r23
     742:	8f 93       	push	r24
     744:	9f 93       	push	r25
     746:	af 93       	push	r26
     748:	bf 93       	push	r27
     74a:	cf 93       	push	r28
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
    uint8_t packetSize;
    //Status bits must be polled before reading the data or they are invalidated
    if(DOWNSTREAM_USART.STATUS & (USART_FERR_bm | USART_BUFOVF_bm))
     750:	80 91 b1 09 	lds	r24, 0x09B1
     754:	88 71       	andi	r24, 0x18	; 24
     756:	19 f0       	breq	.+6      	; 0x75e <__vector_91+0x34>
    {
        //Framing or overflow error. Discard and do nothing else
        packetSize = DOWNSTREAM_USART.DATA;
     758:	80 91 b0 09 	lds	r24, 0x09B0
        return;
     75c:	20 c0       	rjmp	.+64     	; 0x79e <__vector_91+0x74>

    //Packetsize is defined as the number of additional bytes to arrive
    //The buffer is of size MAX_PACKET_SIZE, so packetSize can be up to
    //MAX_PACKET_SIZE - 1.  If it is equal to MAX_PACKET_SIZE or greater, reject

    packetSize = DOWNSTREAM_USART.DATA;
     75e:	c0 91 b0 09 	lds	r28, 0x09B0
    if((packetSize >= MAX_PACKET_SIZE) || (packetSize < MIN_PACKET_SIZE))
     762:	8c 2f       	mov	r24, r28
     764:	83 50       	subi	r24, 0x03	; 3
     766:	85 3c       	cpi	r24, 0xC5	; 197
     768:	d0 f4       	brcc	.+52     	; 0x79e <__vector_91+0x74>
        return;
    }

    //Packet size looks good.  Arm DMA

    prepareDMAChannel(&DOWNSTREAM_DMA,DOWNSTREAM_USART_INBOUND_TRIGGER,&DOWNSTREAM_USART,inbound_downstream_data+1,0);
     76a:	80 e2       	ldi	r24, 0x20	; 32
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	6e e6       	ldi	r22, 0x6E	; 110
     770:	40 eb       	ldi	r20, 0xB0	; 176
     772:	59 e0       	ldi	r21, 0x09	; 9
     774:	24 e5       	ldi	r18, 0x54	; 84
     776:	30 e2       	ldi	r19, 0x20	; 32
     778:	00 e0       	ldi	r16, 0x00	; 0
     77a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
    activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
     77e:	8c 2f       	mov	r24, r28
     780:	90 e0       	ldi	r25, 0x00	; 0
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     782:	e0 e2       	ldi	r30, 0x20	; 32
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	84 83       	std	Z+4, r24	; 0x04
     788:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     78a:	84 e8       	ldi	r24, 0x84	; 132
     78c:	80 93 20 01 	sts	0x0120, r24

    //Packet size looks good.  Arm DMA

    prepareDMAChannel(&DOWNSTREAM_DMA,DOWNSTREAM_USART_INBOUND_TRIGGER,&DOWNSTREAM_USART,inbound_downstream_data+1,0);
    activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
    inbound_downstream_data[0] = packetSize;
     790:	c0 93 53 20 	sts	0x2053, r28

    //Disable all interrupts and let the DMA take command.
    DOWNSTREAM_USART.CTRLA = 0x00;
     794:	e0 eb       	ldi	r30, 0xB0	; 176
     796:	f9 e0       	ldi	r31, 0x09	; 9
     798:	13 82       	std	Z+3, r1	; 0x03

    downstreamBusy = 0;
     79a:	10 92 4a 20 	sts	0x204A, r1
    //activateDMAChannel(&DOWNSTREAM_DMA,packetSize);
    //inbound_downstream_data[0] = packetSize;

    //Disable the RX interrupt for now and let the DMA take control.
    //DOWNSTREAM_USART.CTRLA &= ~USART_RXCINTLVL_OFF_gc;            //Clear the interrupt (assumes that OFF is zeroing it out)
}
     79e:	ff 91       	pop	r31
     7a0:	ef 91       	pop	r30
     7a2:	cf 91       	pop	r28
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	0f 91       	pop	r16
     7ba:	0f 90       	pop	r0
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	0f 90       	pop	r0
     7c0:	1f 90       	pop	r1
     7c2:	18 95       	reti

000007c4 <__vector_77>:

#define DOWNSTREAM_TIMEOUT_MS 15
#define DOWNSTREAM_OUTBOUND_TIMEOUT_MS 5

ISR(DAISY_TC_vect)
{
     7c4:	1f 92       	push	r1
     7c6:	0f 92       	push	r0
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	0f 92       	push	r0
     7cc:	11 24       	eor	r1, r1
     7ce:	8f 93       	push	r24
  notifyTC=1;
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 46 20 	sts	0x2046, r24
}
     7d6:	8f 91       	pop	r24
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <handleTC>:

void handleTC(void)
{
     7e2:	0f 93       	push	r16
  if(notifyTC) // set by the timer interrupt
     7e4:	80 91 46 20 	lds	r24, 0x2046
     7e8:	88 23       	and	r24, r24
     7ea:	09 f4       	brne	.+2      	; 0x7ee <handleTC+0xc>
     7ec:	64 c0       	rjmp	.+200    	; 0x8b6 <handleTC+0xd4>
    {
      notifyTC=0; // clear the flag
     7ee:	10 92 46 20 	sts	0x2046, r1

      //Check if the DMA is busy and waiting on incoming data
      if(UPSTREAM_CONFIG == OUTBOUND)
     7f2:	80 91 21 21 	lds	r24, 0x2121
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	19 f4       	brne	.+6      	; 0x800 <handleTC+0x1e>
	{
	  //No need to reset DMA
	  upstreamBusy = 0;
     7fa:	10 92 1c 21 	sts	0x211C, r1
     7fe:	2f c0       	rjmp	.+94     	; 0x85e <handleTC+0x7c>
	}
      else
	{
	  if((UPSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm) || !(UPSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm))
     800:	80 91 11 01 	lds	r24, 0x0111
     804:	87 fd       	sbrc	r24, 7
     806:	04 c0       	rjmp	.+8      	; 0x810 <handleTC+0x2e>
     808:	80 91 10 01 	lds	r24, 0x0110
     80c:	87 fd       	sbrc	r24, 7
     80e:	05 c0       	rjmp	.+10     	; 0x81a <handleTC+0x38>
	    {
	      upstreamBusy++;
     810:	80 91 1c 21 	lds	r24, 0x211C
     814:	8f 5f       	subi	r24, 0xFF	; 255
     816:	80 93 1c 21 	sts	0x211C, r24
	    }
	  
	  if(upstreamBusy > 2)
     81a:	80 91 1c 21 	lds	r24, 0x211C
     81e:	83 30       	cpi	r24, 0x03	; 3
     820:	f0 f0       	brcs	.+60     	; 0x85e <handleTC+0x7c>
	    {
	      //Cancel and rearm the incoming DMA
	      UPSTREAM_DMA.CTRLA = 0x00;
     822:	e0 e0       	ldi	r30, 0x00	; 0
     824:	f1 e0       	ldi	r31, 0x01	; 1
     826:	10 8a       	std	Z+16, r1	; 0x10
	      //Wait for it to disable
	      while(UPSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     828:	80 91 10 01 	lds	r24, 0x0110
     82c:	87 fd       	sbrc	r24, 7
     82e:	fc cf       	rjmp	.-8      	; 0x828 <handleTC+0x46>
	      
	      //Issue a reset
	      UPSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     830:	80 e4       	ldi	r24, 0x40	; 64
     832:	e0 e0       	ldi	r30, 0x00	; 0
     834:	f1 e0       	ldi	r31, 0x01	; 1
     836:	80 8b       	std	Z+16, r24	; 0x10
	      
	      //Re-arm
	      prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_INBOUND_TRIGGER, &UPSTREAM_USART, inbound_upstream_data,0);
     838:	80 e1       	ldi	r24, 0x10	; 16
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	6b e6       	ldi	r22, 0x6B	; 107
     83e:	40 ea       	ldi	r20, 0xA0	; 160
     840:	59 e0       	ldi	r21, 0x09	; 9
     842:	2a ee       	ldi	r18, 0xEA	; 234
     844:	31 e2       	ldi	r19, 0x21	; 33
     846:	00 e0       	ldi	r16, 0x00	; 0
     848:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     84c:	87 e0       	ldi	r24, 0x07	; 7
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	e0 e1       	ldi	r30, 0x10	; 16
     852:	f1 e0       	ldi	r31, 0x01	; 1
     854:	84 83       	std	Z+4, r24	; 0x04
     856:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     858:	84 e8       	ldi	r24, 0x84	; 132
     85a:	80 93 10 01 	sts	0x0110, r24
	      activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
	    }
	}
#if USE_DOWNSTREAM
      //Check if downstream might be stalled
      if(DOWNSTREAM_CONFIG == OUTBOUND)
     85e:	80 91 04 20 	lds	r24, 0x2004
     862:	81 30       	cpi	r24, 0x01	; 1
     864:	99 f4       	brne	.+38     	; 0x88c <handleTC+0xaa>
	{
	  if (downstreamBusyCounter++ > (2 * DOWNSTREAM_OUTBOUND_TIMEOUT_MS)) //loop is 0.5 ms
     866:	90 91 48 20 	lds	r25, 0x2048
     86a:	29 2f       	mov	r18, r25
     86c:	2f 5f       	subi	r18, 0xFF	; 255
     86e:	20 93 48 20 	sts	0x2048, r18
     872:	9b 30       	cpi	r25, 0x0B	; 11
     874:	40 f0       	brcs	.+16     	; 0x886 <handleTC+0xa4>
	    {
	      notifyDaisy = 1;
     876:	80 93 47 20 	sts	0x2047, r24
	      downstreamTimedout = 1;
     87a:	80 93 49 20 	sts	0x2049, r24
	      //downstreamBusy = 0;
	      passthroughWaiting = 0;
     87e:	10 92 4b 20 	sts	0x204B, r1
	      downstreamSizeReceived = 0;
     882:	10 92 1b 21 	sts	0x211B, r1
	    }
	  
	  //No need
	  downstreamBusy = 0;
     886:	10 92 4a 20 	sts	0x204A, r1
     88a:	15 c0       	rjmp	.+42     	; 0x8b6 <handleTC+0xd4>
	}
      else
	{
	  downstreamBusyCounter = 0;
     88c:	10 92 48 20 	sts	0x2048, r1
	  //if((DOWNSTREAM_DMA.CTRLB & DMA_CH_CHBUSY_bm) || (passthroughWaiting == 1))
	  //{
	  //    downstreamBusy++;
	  //}
	  
	  if(downstreamBusy++ > (2 * DOWNSTREAM_TIMEOUT_MS)) //loop is 0.5 ms
     890:	80 91 4a 20 	lds	r24, 0x204A
     894:	98 2f       	mov	r25, r24
     896:	9f 5f       	subi	r25, 0xFF	; 255
     898:	90 93 4a 20 	sts	0x204A, r25
     89c:	8f 31       	cpi	r24, 0x1F	; 31
     89e:	58 f0       	brcs	.+22     	; 0x8b6 <handleTC+0xd4>
	    {
	      //Notify the daisy chain task so that the upstream can potentially be fixed up.
	      notifyDaisy = 1;
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	80 93 47 20 	sts	0x2047, r24
	      downstreamTimedout = 1;
     8a6:	80 93 49 20 	sts	0x2049, r24
	      downstreamBusy = 0;
     8aa:	10 92 4a 20 	sts	0x204A, r1
	      passthroughWaiting = 0;
     8ae:	10 92 4b 20 	sts	0x204B, r1
	      //downstreamXmitDone = 0;
	      downstreamSizeReceived = 0;
     8b2:	10 92 1b 21 	sts	0x211B, r1
	    }
	}
#endif
    }
}
     8b6:	0f 91       	pop	r16
     8b8:	08 95       	ret

000008ba <__vector_6>:
/************************************************************************
 * ISRs for the DMA engines.
 * Set flags for the Daisy Chain Task
 ************************************************************************/
ISR(UPSTREAM_USART_DMA_vect)
{
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	8f 93       	push	r24
     8c6:	9f 93       	push	r25
     8c8:	ef 93       	push	r30
     8ca:	ff 93       	push	r31
    if(UPSTREAM_DMA.CTRLB & DMA_CH_ERRIF_bm)
     8cc:	80 91 11 01 	lds	r24, 0x0111
     8d0:	85 fd       	sbrc	r24, 5
     8d2:	15 c0       	rjmp	.+42     	; 0x8fe <__vector_6+0x44>
        //UPSTREAM_DMA.CTRLB = UPSTREAM_DMA.CTRLB | DMA_CH_ERRIF_bm;
        //Cancel and rearm the incoming DMA
        return;
    }

    if(UPSTREAM_DMA.CTRLB & DMA_CH_TRNIF_bm)
     8d4:	80 91 11 01 	lds	r24, 0x0111
     8d8:	84 ff       	sbrs	r24, 4
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <__vector_6+0x44>
    {
        //The transfer is complete and should be acked
        UPSTREAM_DMA.CTRLB = UPSTREAM_DMA.CTRLB | DMA_CH_TRNIF_bm;
     8dc:	80 91 11 01 	lds	r24, 0x0111
     8e0:	80 61       	ori	r24, 0x10	; 16
     8e2:	e0 e0       	ldi	r30, 0x00	; 0
     8e4:	f1 e0       	ldi	r31, 0x01	; 1
     8e6:	81 8b       	std	Z+17, r24	; 0x11
        upstreamBusy = 0;
     8e8:	10 92 1c 21 	sts	0x211C, r1
        notifyDaisy = 1;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 47 20 	sts	0x2047, r24
        //if(UPSTREAM_CONFIG == OUTBOUND)
        //{
        //    upstreamTxDone = 1;
        //} else
        //{
            upstreamRxDone = 1;
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	80 93 1f 21 	sts	0x211F, r24
     8fa:	90 93 20 21 	sts	0x2120, r25
        //}

    }
}
     8fe:	ff 91       	pop	r31
     900:	ef 91       	pop	r30
     902:	9f 91       	pop	r25
     904:	8f 91       	pop	r24
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <__vector_90>:

ISR(UPSTREAM_USART_TXDONE_vect)
{
     910:	1f 92       	push	r1
     912:	0f 92       	push	r0
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	0f 92       	push	r0
     918:	11 24       	eor	r1, r1
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	ef 93       	push	r30
     920:	ff 93       	push	r31
    upstreamBusy = 0;
     922:	10 92 1c 21 	sts	0x211C, r1
    notifyDaisy = 1;
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	80 93 47 20 	sts	0x2047, r24
    upstreamTxDone = 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	80 93 1d 21 	sts	0x211D, r24
     934:	90 93 1e 21 	sts	0x211E, r25
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_OFF_gc;
     938:	e0 ea       	ldi	r30, 0xA0	; 160
     93a:	f9 e0       	ldi	r31, 0x09	; 9
     93c:	13 82       	std	Z+3, r1	; 0x03
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     93e:	80 e4       	ldi	r24, 0x40	; 64
     940:	81 83       	std	Z+1, r24	; 0x01
}
     942:	ff 91       	pop	r31
     944:	ef 91       	pop	r30
     946:	9f 91       	pop	r25
     948:	8f 91       	pop	r24
     94a:	0f 90       	pop	r0
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	0f 90       	pop	r0
     950:	1f 90       	pop	r1
     952:	18 95       	reti

00000954 <__vector_93>:

#if USE_DOWNSTREAM

ISR(DOWNSTREAM_USART_TXDONE_vect)
{
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	8f 93       	push	r24
     960:	ef 93       	push	r30
     962:	ff 93       	push	r31
    //prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_INBOUND_TRIGGER, &DOWNSTREAM_USART, inbound_downstream_data,0);
    DOWNSTREAM_CONFIG = INBOUND;
     964:	10 92 04 20 	sts	0x2004, r1
    //Shut down the TXC interrupt
    //DOWNSTREAM_USART.CTRLA &= ~USART_TXCINTLVL_gm;
    DOWNSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc | USART_RXCINTLVL_LO_gc;
     968:	80 e1       	ldi	r24, 0x10	; 16
     96a:	e0 eb       	ldi	r30, 0xB0	; 176
     96c:	f9 e0       	ldi	r31, 0x09	; 9
     96e:	83 83       	std	Z+3, r24	; 0x03
    downstreamBusy = 0;
     970:	10 92 4a 20 	sts	0x204A, r1
}
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	8f 91       	pop	r24
     97a:	0f 90       	pop	r0
     97c:	0f be       	out	0x3f, r0	; 63
     97e:	0f 90       	pop	r0
     980:	1f 90       	pop	r1
     982:	18 95       	reti

00000984 <__vector_7>:
 * When a OUTBOUND transfer finishes, enable the RX interrupt to capture the reply.
 * When an INBOUND transfer finishes, switch back to outbound mode and notify
 * userspace.
 ************************************************************************/
ISR(DOWNSTREAM_USART_DMA_vect)
{
     984:	1f 92       	push	r1
     986:	0f 92       	push	r0
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	0f 92       	push	r0
     98c:	11 24       	eor	r1, r1
     98e:	8f 93       	push	r24
     990:	ef 93       	push	r30
     992:	ff 93       	push	r31
    if(DOWNSTREAM_DMA.CTRLB & DMA_CH_ERRIF_bm)
     994:	e0 e2       	ldi	r30, 0x20	; 32
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	80 91 21 01 	lds	r24, 0x0121
     99c:	85 ff       	sbrs	r24, 5
     99e:	05 c0       	rjmp	.+10     	; 0x9aa <__vector_7+0x26>
    {
        //Acknowledge the error
        //It may be from an aborted transfer, so just return.
        DOWNSTREAM_DMA.CTRLB = DOWNSTREAM_DMA.CTRLB | DMA_CH_ERRIF_bm;
     9a0:	80 91 21 01 	lds	r24, 0x0121
     9a4:	80 62       	ori	r24, 0x20	; 32
     9a6:	81 83       	std	Z+1, r24	; 0x01
        return;
     9a8:	10 c0       	rjmp	.+32     	; 0x9ca <__vector_7+0x46>
    }

    if(DOWNSTREAM_DMA.CTRLB & DMA_CH_TRNIF_bm)
     9aa:	80 91 21 01 	lds	r24, 0x0121
     9ae:	84 ff       	sbrs	r24, 4
     9b0:	0c c0       	rjmp	.+24     	; 0x9ca <__vector_7+0x46>
    {
        //The transfer is complete and should be acked
        DOWNSTREAM_DMA.CTRLB = DOWNSTREAM_DMA.CTRLB | DMA_CH_TRNIF_bm;
     9b2:	80 91 21 01 	lds	r24, 0x0121
     9b6:	80 61       	ori	r24, 0x10	; 16
     9b8:	81 83       	std	Z+1, r24	; 0x01
        //
        //if(DOWNSTREAM_CONFIG == INBOUND)
        //{
            //Just finished receiving response into singleDownstreamBuffer.  Signal userspace
            //The number of bytes received is the size field plus 1 (to account for the size field itself)
            downstreamSizeReceived = inbound_downstream_data[0] + 1;
     9ba:	80 91 53 20 	lds	r24, 0x2053
     9be:	8f 5f       	subi	r24, 0xFF	; 255
     9c0:	80 93 1b 21 	sts	0x211B, r24
            notifyDaisy = 1;
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	80 93 47 20 	sts	0x2047, r24
                downstreamXmitDone = 1;
                break;
        }
        */
    }
}
     9ca:	ff 91       	pop	r31
     9cc:	ef 91       	pop	r30
     9ce:	8f 91       	pop	r24
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <computeChecksum>:
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     9da:	fc 01       	movw	r30, r24
    for(int i=0;i<packetSize;i++)
     9dc:	20 e0       	ldi	r18, 0x00	; 0
     9de:	30 e0       	ldi	r19, 0x00	; 0
 * As a shortcut, feeding an entire packet to this routine should result in a return
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
    for(int i=0;i<packetSize;i++)
     9e2:	04 c0       	rjmp	.+8      	; 0x9ec <computeChecksum+0x12>
    {
        accumulator += packetBuffer[i];
     9e4:	91 91       	ld	r25, Z+
     9e6:	89 0f       	add	r24, r25
 * value of zero for a proper packet.
 ************************************************************************/
int computeChecksum(uint8_t *packetBuffer, int packetSize)
{
    uint8_t accumulator = 0;
    for(int i=0;i<packetSize;i++)
     9e8:	2f 5f       	subi	r18, 0xFF	; 255
     9ea:	3f 4f       	sbci	r19, 0xFF	; 255
     9ec:	26 17       	cp	r18, r22
     9ee:	37 07       	cpc	r19, r23
     9f0:	cc f3       	brlt	.-14     	; 0x9e4 <computeChecksum+0xa>
    {
        accumulator += packetBuffer[i];
    }

    return (0x00 - accumulator);
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	90 95       	com	r25
     9f6:	81 95       	neg	r24
     9f8:	9f 4f       	sbci	r25, 0xFF	; 255
}
     9fa:	08 95       	ret

000009fc <passthroughToUpstream>:
 *
 * Pass the data directly from the downstream INBOUND buffer to the
 * upstream OUTBOUND buffer.  Send a corrupt checksum error if necessary
 ************************************************************************/
static void passthroughToUpstream(void)
{
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
    //It is assumed that the upstream DMA is able to accept additional data at this point
    //A data packet has arrived from downstream.  Validate it
    //The volatile keyword can be discarded because the DMA routines are inactive while this function executes
    if(computeChecksum((uint8_t *)inbound_downstream_data,downstreamSizeReceived) != 0x00)
     a04:	60 91 1b 21 	lds	r22, 0x211B
     a08:	c3 e5       	ldi	r28, 0x53	; 83
     a0a:	d0 e2       	ldi	r29, 0x20	; 32
     a0c:	ce 01       	movw	r24, r28
     a0e:	70 e0       	ldi	r23, 0x00	; 0
     a10:	0e 94 ed 04 	call	0x9da	; 0x9da <computeChecksum>
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	b9 f1       	breq	.+110    	; 0xa86 <passthroughToUpstream+0x8a>
    {
        //Invalid checksum
      RxCheckSumErrCnt[1]++;
     a18:	80 91 15 22 	lds	r24, 0x2215
     a1c:	90 91 16 22 	lds	r25, 0x2216
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	80 93 15 22 	sts	0x2215, r24
     a26:	90 93 16 22 	sts	0x2216, r25
        outbound_upstream_data[0] = 3; //Packet size
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	80 93 22 21 	sts	0x2122, r24
        outbound_upstream_data[1] = inbound_upstream_data[1]; //Reflected command byte
     a30:	80 91 eb 21 	lds	r24, 0x21EB
     a34:	80 93 23 21 	sts	0x2123, r24
        outbound_upstream_data[2] = CHECKSUM_ERROR; //Checksum error
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	80 93 24 21 	sts	0x2124, r24
        outbound_upstream_data[3] = computeChecksum((uint8_t *)outbound_upstream_data,3); //checksum
     a3e:	82 e2       	ldi	r24, 0x22	; 34
     a40:	91 e2       	ldi	r25, 0x21	; 33
     a42:	63 e0       	ldi	r22, 0x03	; 3
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	0e 94 ed 04 	call	0x9da	; 0x9da <computeChecksum>
     a4a:	80 93 25 21 	sts	0x2125, r24
        //configureHalfDuplexLink(UPSTREAM,OUTBOUND);
        UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     a4e:	e0 ea       	ldi	r30, 0xA0	; 160
     a50:	f9 e0       	ldi	r31, 0x09	; 9
     a52:	13 82       	std	Z+3, r1	; 0x03
        UPSTREAM_USART.DATA = outbound_upstream_data[0];
     a54:	80 91 22 21 	lds	r24, 0x2122
     a58:	80 93 a0 09 	sts	0x09A0, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a5c:	8a e6       	ldi	r24, 0x6A	; 106
     a5e:	8a 95       	dec	r24
     a60:	f1 f7       	brne	.-4      	; 0xa5e <passthroughToUpstream+0x62>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <passthroughToUpstream+0x68>
        //_delay_us(10);
        DELAY_ROUTINE();
        UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	81 83       	std	Z+1, r24	; 0x01
        UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     a68:	84 e0       	ldi	r24, 0x04	; 4
     a6a:	83 83       	std	Z+3, r24	; 0x03
        prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
     a6c:	80 e1       	ldi	r24, 0x10	; 16
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	6c e6       	ldi	r22, 0x6C	; 108
     a72:	40 ea       	ldi	r20, 0xA0	; 160
     a74:	59 e0       	ldi	r21, 0x09	; 9
     a76:	23 e2       	ldi	r18, 0x23	; 35
     a78:	31 e2       	ldi	r19, 0x21	; 33
     a7a:	01 e0       	ldi	r16, 0x01	; 1
     a7c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     a80:	83 e0       	ldi	r24, 0x03	; 3
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	27 c0       	rjmp	.+78     	; 0xad4 <passthroughToUpstream+0xd8>
        prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
        activateDMAChannel(&UPSTREAM_DMA,3);
        downstreamSizeReceived = 0;
        return;
    }
    memcpy((uint8_t *)outbound_upstream_data,(uint8_t *)inbound_downstream_data,downstreamSizeReceived);
     a86:	40 91 1b 21 	lds	r20, 0x211B
     a8a:	02 e2       	ldi	r16, 0x22	; 34
     a8c:	11 e2       	ldi	r17, 0x21	; 33
     a8e:	c8 01       	movw	r24, r16
     a90:	be 01       	movw	r22, r28
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <memcpy>
    //for(int i=0;i<inbound_downstream_data[0];i++)
    //{
    //    outbound_upstream_data[i] = inbound_downstream_data[i];
    //}
    //configureHalfDuplexLink(UPSTREAM,OUTBOUND);
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     a98:	e0 ea       	ldi	r30, 0xA0	; 160
     a9a:	f9 e0       	ldi	r31, 0x09	; 9
     a9c:	13 82       	std	Z+3, r1	; 0x03
    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     a9e:	80 91 22 21 	lds	r24, 0x2122
     aa2:	80 93 a0 09 	sts	0x09A0, r24
     aa6:	8a e6       	ldi	r24, 0x6A	; 106
     aa8:	8a 95       	dec	r24
     aaa:	f1 f7       	brne	.-4      	; 0xaa8 <passthroughToUpstream+0xac>
     aac:	00 c0       	rjmp	.+0      	; 0xaae <passthroughToUpstream+0xb2>
    //_delay_us(10);
    DELAY_ROUTINE();
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     aae:	80 e4       	ldi	r24, 0x40	; 64
     ab0:	81 83       	std	Z+1, r24	; 0x01
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     ab2:	84 e0       	ldi	r24, 0x04	; 4
     ab4:	83 83       	std	Z+3, r24	; 0x03
    prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
     ab6:	80 e1       	ldi	r24, 0x10	; 16
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	6c e6       	ldi	r22, 0x6C	; 108
     abc:	40 ea       	ldi	r20, 0xA0	; 160
     abe:	59 e0       	ldi	r21, 0x09	; 9
     ac0:	98 01       	movw	r18, r16
     ac2:	2f 5f       	subi	r18, 0xFF	; 255
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	01 e0       	ldi	r16, 0x01	; 1
     ac8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
    activateDMAChannel(&UPSTREAM_DMA,downstreamSizeReceived-1);
     acc:	80 91 1b 21 	lds	r24, 0x211B
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	01 97       	sbiw	r24, 0x01	; 1
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     ad4:	e0 e1       	ldi	r30, 0x10	; 16
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	84 83       	std	Z+4, r24	; 0x04
     ada:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     adc:	84 e8       	ldi	r24, 0x84	; 132
     ade:	80 93 10 01 	sts	0x0110, r24
    DELAY_ROUTINE();
    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
    prepareDMAChannel(&UPSTREAM_DMA, UPSTREAM_USART_OUTBOUND_TRIGGER, &UPSTREAM_USART, outbound_upstream_data+1,1);
    activateDMAChannel(&UPSTREAM_DMA,downstreamSizeReceived-1);
    downstreamSizeReceived = 0;
     ae2:	10 92 1b 21 	sts	0x211B, r1
    return;
}
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	1f 91       	pop	r17
     aec:	0f 91       	pop	r16
     aee:	08 95       	ret

00000af0 <configureDaisyUSART>:
        //COMMAND_USART.BAUDCTRLA = 34;                            //Configure for 57600 baud rate with normal baud rate generation
        //COMMAND_USART.BAUDCTRLB = 0;
        targetUSART->BAUDCTRLA = 33;                            //Configure for 115200 with fractional baud rate generation
        targetUSART->BAUDCTRLB = 0xF0;
    } else {
        targetUSART->BAUDCTRLA = 0;                                //Configure for 2 MBaud by setting baud rate to zero
     af0:	e0 ea       	ldi	r30, 0xA0	; 160
     af2:	f9 e0       	ldi	r31, 0x09	; 9
     af4:	16 82       	std	Z+6, r1	; 0x06
        targetUSART->BAUDCTRLB = 0x00;                            //and BSEL to zero
     af6:	17 82       	std	Z+7, r1	; 0x07
    }
    targetUSART->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | \
     af8:	93 e0       	ldi	r25, 0x03	; 3
     afa:	95 83       	std	Z+5, r25	; 0x05
                         USART_PMODE_DISABLED_gc | \
                          USART_CHSIZE_8BIT_gc;                //Configure port settings for 8 bits of data, 1 stop bit.
    targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     afc:	84 81       	ldd	r24, Z+4	; 0x04
     afe:	88 61       	ori	r24, 0x18	; 24
     b00:	84 83       	std	Z+4, r24	; 0x04
************************************************************************/
static void configureUSARTHardware(USART_t *targetUSART, int isPC, int isDownstream)
{
    if(isDownstream)
    {
        targetUSART->CTRLA = USART_RXCINTLVL_LO_gc;            //Enable RX interrupt at LO priority
     b02:	e0 eb       	ldi	r30, 0xB0	; 176
     b04:	f9 e0       	ldi	r31, 0x09	; 9
     b06:	80 e1       	ldi	r24, 0x10	; 16
     b08:	83 83       	std	Z+3, r24	; 0x03
        //COMMAND_USART.BAUDCTRLA = 34;                            //Configure for 57600 baud rate with normal baud rate generation
        //COMMAND_USART.BAUDCTRLB = 0;
        targetUSART->BAUDCTRLA = 33;                            //Configure for 115200 with fractional baud rate generation
        targetUSART->BAUDCTRLB = 0xF0;
    } else {
        targetUSART->BAUDCTRLA = 0;                                //Configure for 2 MBaud by setting baud rate to zero
     b0a:	16 82       	std	Z+6, r1	; 0x06
        targetUSART->BAUDCTRLB = 0x00;                            //and BSEL to zero
     b0c:	17 82       	std	Z+7, r1	; 0x07
    }
    targetUSART->CTRLC = USART_CMODE_ASYNCHRONOUS_gc | \
     b0e:	95 83       	std	Z+5, r25	; 0x05
                         USART_PMODE_DISABLED_gc | \
                          USART_CHSIZE_8BIT_gc;                //Configure port settings for 8 bits of data, 1 stop bit.
    targetUSART->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
     b10:	84 81       	ldd	r24, Z+4	; 0x04
     b12:	88 61       	ori	r24, 0x18	; 24
     b14:	84 83       	std	Z+4, r24	; 0x04
    //Now initialize the downstream
    configureUSARTHardware(&DOWNSTREAM_USART,0,1);
#endif

    //Prepare DMA transfers
    DMA.CTRL = DMA_ENABLE_bm;
     b16:	80 e8       	ldi	r24, 0x80	; 128
     b18:	80 93 00 01 	sts	0x0100, r24

    //Assume default configuration with downstream OUT and upstream IN
#if USE_DOWNSTREAM
    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>
#endif
    configureHalfDuplexLink(UPSTREAM,INBOUND);
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>

    //Activate the heartbeat timer for resetting inbound DMA as necessary
    //Interrupt every half millisecond
    //At 32 MHz internal oscillator with 1024 prescaler,
    DAISY_TC.CTRLB = TC_WGMODE_NORMAL_gc;
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f9 e0       	ldi	r31, 0x09	; 9
     b30:	11 82       	std	Z+1, r1	; 0x01
    DAISY_TC.CTRLC = 0x00;
     b32:	12 82       	std	Z+2, r1	; 0x02
    DAISY_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     b34:	13 82       	std	Z+3, r1	; 0x03
    DAISY_TC.CTRLE = 0x00;
     b36:	14 82       	std	Z+4, r1	; 0x04
    DAISY_TC.PERBUF = 16;
     b38:	80 e1       	ldi	r24, 0x10	; 16
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	86 ab       	sts	0x56, r24
     b3e:	97 ab       	sts	0x57, r25
    DAISY_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	86 83       	std	Z+6, r24	; 0x06
    DAISY_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
     b44:	87 e0       	ldi	r24, 0x07	; 7
     b46:	80 83       	st	Z, r24

    //Activate the Upstream DMA for a command packet of data
    //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);
}
     b48:	08 95       	ret

00000b4a <doDaisyTask>:
 * Maintains system state and manages the transmission/reception of chained data
 * Should be called whenever notifyDaisy is set to 1.
 ************************************************************************/

void doDaisyTask(void)
{
     b4a:	0f 93       	push	r16
     b4c:	cf 93       	push	r28
    uint8_t packetSize;
    //First clear the daisy notification flag
    cli();
     b4e:	f8 94       	cli
    notifyDaisy = 0;
     b50:	10 92 47 20 	sts	0x2047, r1
    sei();
     b54:	78 94       	sei
        configureHalfDuplexLink(DOWNSTREAM,INBOUND);
    }
#endif
*/

    switch(daisyState)
     b56:	80 91 f1 21 	lds	r24, 0x21F1
     b5a:	88 23       	and	r24, r24
     b5c:	21 f0       	breq	.+8      	; 0xb66 <doDaisyTask+0x1c>
     b5e:	81 30       	cpi	r24, 0x01	; 1
     b60:	09 f0       	breq	.+2      	; 0xb64 <doDaisyTask+0x1a>
     b62:	4a c1       	rjmp	.+660    	; 0xdf8 <doDaisyTask+0x2ae>
     b64:	01 c1       	rjmp	.+514    	; 0xd68 <doDaisyTask+0x21e>
    {
        case DAISY_IDLE:
#if USE_DOWNSTREAM
            //The daisy chain module is not transmitting, though a passthrough may be waiting

            if(downstreamSizeReceived && passthroughWaiting)
     b66:	80 91 1b 21 	lds	r24, 0x211B
     b6a:	88 23       	and	r24, r24
     b6c:	a1 f0       	breq	.+40     	; 0xb96 <doDaisyTask+0x4c>
     b6e:	80 91 4b 20 	lds	r24, 0x204B
     b72:	88 23       	and	r24, r24
     b74:	81 f0       	breq	.+32     	; 0xb96 <doDaisyTask+0x4c>
            {
                //Since a downstream reply was heard, pass it through to upstream
                passthroughWaiting = 0;
     b76:	10 92 4b 20 	sts	0x204B, r1
                daisyState = DAISY_TRANSMITTING;
     b7a:	81 e0       	ldi	r24, 0x01	; 1
     b7c:	80 93 f1 21 	sts	0x21F1, r24
                if(UPSTREAM_CONFIG == INBOUND)
     b80:	80 91 21 21 	lds	r24, 0x2121
     b84:	88 23       	and	r24, r24
     b86:	21 f4       	brne	.+8      	; 0xb90 <doDaisyTask+0x46>
                {
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>
                }
                passthroughToUpstream();
     b90:	0e 94 fe 04 	call	0x9fc	; 0x9fc <passthroughToUpstream>
     b94:	0c c0       	rjmp	.+24     	; 0xbae <doDaisyTask+0x64>

                cli();
                downstreamTimedout = 0;
                sei();

            } else if(downstreamSizeReceived)
     b96:	80 91 1b 21 	lds	r24, 0x211B
     b9a:	88 23       	and	r24, r24
     b9c:	61 f0       	breq	.+24     	; 0xbb6 <doDaisyTask+0x6c>
            {
                //Error condition.  Just clear it out and restart
                configureHalfDuplexLink(UPSTREAM,INBOUND);
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>
                //activateDMAChannel(&UPSTREAM_DMA,COMMAND_PACKET_SIZE);

                configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>

                cli();
     bae:	f8 94       	cli
                downstreamTimedout = 0;
     bb0:	10 92 49 20 	sts	0x2049, r1
                sei();
     bb4:	78 94       	sei

            }

            if(downstreamTimedout)
     bb6:	80 91 49 20 	lds	r24, 0x2049
     bba:	88 23       	and	r24, r24
     bbc:	29 f1       	breq	.+74     	; 0xc08 <doDaisyTask+0xbe>
            {
                cli();
     bbe:	f8 94       	cli
                downstreamTimedout = 0;
     bc0:	10 92 49 20 	sts	0x2049, r1
                sei();
     bc4:	78 94       	sei

                //Cancel waiting for a downstream
                DOWNSTREAM_DMA.CTRLA = 0x00;
     bc6:	10 92 20 01 	sts	0x0120, r1
                //Wait for it to disable
                while(DOWNSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     bca:	80 91 20 01 	lds	r24, 0x0120
     bce:	87 fd       	sbrc	r24, 7
     bd0:	fc cf       	rjmp	.-8      	; 0xbca <doDaisyTask+0x80>

                //Issue a reset
                DOWNSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     bd2:	c0 e4       	ldi	r28, 0x40	; 64
     bd4:	c0 93 20 01 	sts	0x0120, r28

                //Now set back to outbound and wait
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     bd8:	80 e2       	ldi	r24, 0x20	; 32
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	6f e6       	ldi	r22, 0x6F	; 111
     bde:	40 eb       	ldi	r20, 0xB0	; 176
     be0:	59 e0       	ldi	r21, 0x09	; 9
     be2:	2c e4       	ldi	r18, 0x4C	; 76
     be4:	30 e2       	ldi	r19, 0x20	; 32
     be6:	01 e0       	ldi	r16, 0x01	; 1
     be8:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     bec:	e0 eb       	ldi	r30, 0xB0	; 176
     bee:	f9 e0       	ldi	r31, 0x09	; 9
     bf0:	c1 83       	std	Z+1, r28	; 0x01
                DOWNSTREAM_CONFIG = OUTBOUND;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 04 20 	sts	0x2004, r24
                DOWNSTREAM_USART.CTRLA = 0x00;
     bf8:	13 82       	std	Z+3, r1	; 0x03

                //Make sure Upstream is facing the proper direction
                if(UPSTREAM_CONFIG == OUTBOUND)
     bfa:	80 91 21 21 	lds	r24, 0x2121
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	19 f4       	brne	.+6      	; 0xc08 <doDaisyTask+0xbe>
                {
                    //while(!(UPSTREAM_USART.STATUS & USART_TXCIF_bm));
                    configureHalfDuplexLink(UPSTREAM,INBOUND);
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>
            }


#endif

            if(upstreamRxDone)
     c08:	80 91 1f 21 	lds	r24, 0x211F
     c0c:	90 91 20 21 	lds	r25, 0x2120
     c10:	00 97       	sbiw	r24, 0x00	; 0
     c12:	09 f4       	brne	.+2      	; 0xc16 <doDaisyTask+0xcc>
     c14:	f1 c0       	rjmp	.+482    	; 0xdf8 <doDaisyTask+0x2ae>
            {
                //A packet arrived from upstream.  Parse it and compute some sort of reply.
                cli();
     c16:	f8 94       	cli
                upstreamRxDone = 0;
     c18:	10 92 1f 21 	sts	0x211F, r1
     c1c:	10 92 20 21 	sts	0x2120, r1
                sei();
     c20:	78 94       	sei

                //A data packet has arrived from upstream.  Validate it
                if(computeChecksum((uint8_t *)inbound_upstream_data,COMMAND_PACKET_SIZE) != 0x00)
     c22:	8a ee       	ldi	r24, 0xEA	; 234
     c24:	91 e2       	ldi	r25, 0x21	; 33
     c26:	67 e0       	ldi	r22, 0x07	; 7
     c28:	70 e0       	ldi	r23, 0x00	; 0
     c2a:	0e 94 ed 04 	call	0x9da	; 0x9da <computeChecksum>
     c2e:	00 97       	sbiw	r24, 0x00	; 0
     c30:	e1 f1       	breq	.+120    	; 0xcaa <doDaisyTask+0x160>
                {
                    //Invalid checksum
                  RxCheckSumErrCnt[0]++;
     c32:	80 91 13 22 	lds	r24, 0x2213
     c36:	90 91 14 22 	lds	r25, 0x2214
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	80 93 13 22 	sts	0x2213, r24
     c40:	90 93 14 22 	sts	0x2214, r25
                    outbound_upstream_data[0] = 3; //Packet size
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	80 93 22 21 	sts	0x2122, r24
                    outbound_upstream_data[1] = inbound_upstream_data[1]; //Reflected command byte
     c4a:	80 91 eb 21 	lds	r24, 0x21EB
     c4e:	80 93 23 21 	sts	0x2123, r24
                    outbound_upstream_data[2] = CHECKSUM_ERROR; //Checksum error
     c52:	c1 e0       	ldi	r28, 0x01	; 1
     c54:	c0 93 24 21 	sts	0x2124, r28
                    outbound_upstream_data[3] = computeChecksum((uint8_t *)outbound_upstream_data,3); //checksum
     c58:	82 e2       	ldi	r24, 0x22	; 34
     c5a:	91 e2       	ldi	r25, 0x21	; 33
     c5c:	63 e0       	ldi	r22, 0x03	; 3
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	0e 94 ed 04 	call	0x9da	; 0x9da <computeChecksum>
     c64:	80 93 25 21 	sts	0x2125, r24
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     c70:	e0 ea       	ldi	r30, 0xA0	; 160
     c72:	f9 e0       	ldi	r31, 0x09	; 9
     c74:	13 82       	std	Z+3, r1	; 0x03
                    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     c76:	80 91 22 21 	lds	r24, 0x2122
     c7a:	80 93 a0 09 	sts	0x09A0, r24
     c7e:	8a e6       	ldi	r24, 0x6A	; 106
     c80:	8a 95       	dec	r24
     c82:	f1 f7       	brne	.-4      	; 0xc80 <doDaisyTask+0x136>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <doDaisyTask+0x13c>
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     c86:	80 e4       	ldi	r24, 0x40	; 64
     c88:	81 83       	std	Z+1, r24	; 0x01
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     c8a:	84 e0       	ldi	r24, 0x04	; 4
     c8c:	83 83       	std	Z+3, r24	; 0x03
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	e0 e1       	ldi	r30, 0x10	; 16
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	84 83       	std	Z+4, r24	; 0x04
     c98:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     c9a:	84 e8       	ldi	r24, 0x84	; 132
     c9c:	80 93 10 01 	sts	0x0110, r24
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
                    activateDMAChannel(&UPSTREAM_DMA,3);
                    daisyState = DAISY_TRANSMITTING;
     ca0:	c0 93 f1 21 	sts	0x21F1, r28
#if USE_DOWNSTREAM
                    //No passthrough occurred, so do not wait on a downstream reply.
                    passthroughWaiting = 0;
     ca4:	10 92 4b 20 	sts	0x204B, r1
#endif
                    break;
     ca8:	a7 c0       	rjmp	.+334    	; 0xdf8 <doDaisyTask+0x2ae>
                }
#if USE_DOWNSTREAM
                if((inbound_upstream_data[0] & 0x0F) != 0)
     caa:	80 91 ea 21 	lds	r24, 0x21EA
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	8f 70       	andi	r24, 0x0F	; 15
     cb2:	90 70       	andi	r25, 0x00	; 0
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	19 f1       	breq	.+70     	; 0xcfe <doDaisyTask+0x1b4>
                {
                    //This packet is going downstream

                    memcpy((uint8_t *)outbound_downstream_data,(uint8_t *)inbound_upstream_data,COMMAND_PACKET_SIZE);
     cb8:	ac e4       	ldi	r26, 0x4C	; 76
     cba:	b0 e2       	ldi	r27, 0x20	; 32
     cbc:	ea ee       	ldi	r30, 0xEA	; 234
     cbe:	f1 e2       	ldi	r31, 0x21	; 33
     cc0:	87 e0       	ldi	r24, 0x07	; 7
     cc2:	01 90       	ld	r0, Z+
     cc4:	0d 92       	st	X+, r0
     cc6:	81 50       	subi	r24, 0x01	; 1
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <doDaisyTask+0x178>

                    //Adjust the Destination Header and the checksum for the new destination
                    outbound_downstream_data[0]--;
     cca:	80 91 4c 20 	lds	r24, 0x204C
     cce:	81 50       	subi	r24, 0x01	; 1
     cd0:	80 93 4c 20 	sts	0x204C, r24
                    outbound_downstream_data[CHECKSUM_OFFSET]++;
     cd4:	80 91 52 20 	lds	r24, 0x2052
     cd8:	8f 5f       	subi	r24, 0xFF	; 255
     cda:	80 93 52 20 	sts	0x2052, r24
                    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     ce6:	87 e0       	ldi	r24, 0x07	; 7
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	e0 e2       	ldi	r30, 0x20	; 32
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	84 83       	std	Z+4, r24	; 0x04
     cf0:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     cf2:	84 e8       	ldi	r24, 0x84	; 132
     cf4:	80 93 20 01 	sts	0x0120, r24
                    outbound_downstream_data[CHECKSUM_OFFSET]++;
                    configureHalfDuplexLink(DOWNSTREAM,OUTBOUND);
                    activateDMAChannel(&DOWNSTREAM_DMA,COMMAND_PACKET_SIZE);

                    //A downstream reply will be expected
                    passthroughWaiting = 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	80 93 4b 20 	sts	0x204B, r24
                }
#endif

                if(((inbound_upstream_data[0] & 0xF0) == 0xF0) || ((inbound_upstream_data[0] & 0x0F) == 0x00))
     cfe:	80 91 ea 21 	lds	r24, 0x21EA
     d02:	80 7f       	andi	r24, 0xF0	; 240
     d04:	80 3f       	cpi	r24, 0xF0	; 240
     d06:	41 f0       	breq	.+16     	; 0xd18 <doDaisyTask+0x1ce>
     d08:	80 91 ea 21 	lds	r24, 0x21EA
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	8f 70       	andi	r24, 0x0F	; 15
     d10:	90 70       	andi	r25, 0x00	; 0
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	09 f0       	breq	.+2      	; 0xd18 <doDaisyTask+0x1ce>
     d16:	70 c0       	rjmp	.+224    	; 0xdf8 <doDaisyTask+0x2ae>
                {
                    //PORTC.OUT |= 0x80; //BA: turn on LED
                    //This packet should be responded to
                    packetSize = processCommand((uint8_t *)inbound_upstream_data,(uint8_t *)outbound_upstream_data);
     d18:	8a ee       	ldi	r24, 0xEA	; 234
     d1a:	91 e2       	ldi	r25, 0x21	; 33
     d1c:	62 e2       	ldi	r22, 0x22	; 34
     d1e:	71 e2       	ldi	r23, 0x21	; 33
     d20:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <processCommand>
     d24:	c8 2f       	mov	r28, r24

                    //Assume the command processor handled the packetization
                    configureHalfDuplexLink(UPSTREAM,OUTBOUND);
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	61 e0       	ldi	r22, 0x01	; 1
     d2a:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_OFF_gc;
     d2e:	e0 ea       	ldi	r30, 0xA0	; 160
     d30:	f9 e0       	ldi	r31, 0x09	; 9
     d32:	13 82       	std	Z+3, r1	; 0x03
                    UPSTREAM_USART.DATA = outbound_upstream_data[0];
     d34:	80 91 22 21 	lds	r24, 0x2122
     d38:	80 93 a0 09 	sts	0x09A0, r24
     d3c:	8a e6       	ldi	r24, 0x6A	; 106
     d3e:	8a 95       	dec	r24
     d40:	f1 f7       	brne	.-4      	; 0xd3e <doDaisyTask+0x1f4>
     d42:	00 c0       	rjmp	.+0      	; 0xd44 <doDaisyTask+0x1fa>
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
     d44:	80 e4       	ldi	r24, 0x40	; 64
     d46:	81 83       	std	Z+1, r24	; 0x01
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
     d48:	84 e0       	ldi	r24, 0x04	; 4
     d4a:	83 83       	std	Z+3, r24	; 0x03
                    activateDMAChannel(&UPSTREAM_DMA,packetSize-1);
     d4c:	8c 2f       	mov	r24, r28
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	01 97       	sbiw	r24, 0x01	; 1
 * with prepareDMAChannel().
 ************************************************************************/
static void activateDMAChannel(DMA_CH_t *selectedChannel,int numBytes)
{
    //Set block size to packet size
    selectedChannel->TRFCNT = numBytes;
     d52:	e0 e1       	ldi	r30, 0x10	; 16
     d54:	f1 e0       	ldi	r31, 0x01	; 1
     d56:	84 83       	std	Z+4, r24	; 0x04
     d58:	95 83       	std	Z+5, r25	; 0x05
    //Enable the channel on single shot mode with a burst length of one.  Whenever the trigger arrives,
    //only one burst will be performed.
    selectedChannel->CTRLA = DMA_CH_BURSTLEN_1BYTE_gc | DMA_CH_SINGLE_bm | DMA_CH_ENABLE_bm;
     d5a:	84 e8       	ldi	r24, 0x84	; 132
     d5c:	80 93 10 01 	sts	0x0110, r24
                    //_delay_us(10);
                    DELAY_ROUTINE();
                    UPSTREAM_USART.STATUS = USART_TXCIF_bm;
                    UPSTREAM_USART.CTRLA = USART_TXCINTLVL_LO_gc;
                    activateDMAChannel(&UPSTREAM_DMA,packetSize-1);
                    daisyState = DAISY_TRANSMITTING;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	80 93 f1 21 	sts	0x21F1, r24
     d66:	48 c0       	rjmp	.+144    	; 0xdf8 <doDaisyTask+0x2ae>
            }
            break;

        case DAISY_TRANSMITTING:
#if USE_DOWNSTREAM
            if(downstreamTimedout)
     d68:	80 91 49 20 	lds	r24, 0x2049
     d6c:	88 23       	and	r24, r24
     d6e:	f1 f0       	breq	.+60     	; 0xdac <doDaisyTask+0x262>
            {
                cli();
     d70:	f8 94       	cli
                downstreamTimedout = 0;
     d72:	10 92 49 20 	sts	0x2049, r1
                sei();
     d76:	78 94       	sei
                //Downstream timed out, so just finish transmitting upstream and take no further action
                //Cancel waiting for a downstream
                DOWNSTREAM_DMA.CTRLA = 0x00;
     d78:	10 92 20 01 	sts	0x0120, r1
                //Wait for it to disable
                while(DOWNSTREAM_DMA.CTRLA & DMA_CH_ENABLE_bm);
     d7c:	80 91 20 01 	lds	r24, 0x0120
     d80:	87 fd       	sbrc	r24, 7
     d82:	fc cf       	rjmp	.-8      	; 0xd7c <doDaisyTask+0x232>

                //Issue a reset
                DOWNSTREAM_DMA.CTRLA = DMA_CH_RESET_bm;
     d84:	c0 e4       	ldi	r28, 0x40	; 64
     d86:	c0 93 20 01 	sts	0x0120, r28

                //Now set back to outbound and wait
                prepareDMAChannel(&DOWNSTREAM_DMA, DOWNSTREAM_USART_OUTBOUND_TRIGGER, &DOWNSTREAM_USART, outbound_downstream_data,1);
     d8a:	80 e2       	ldi	r24, 0x20	; 32
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	6f e6       	ldi	r22, 0x6F	; 111
     d90:	40 eb       	ldi	r20, 0xB0	; 176
     d92:	59 e0       	ldi	r21, 0x09	; 9
     d94:	2c e4       	ldi	r18, 0x4C	; 76
     d96:	30 e2       	ldi	r19, 0x20	; 32
     d98:	01 e0       	ldi	r16, 0x01	; 1
     d9a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <prepareDMAChannel>
                DOWNSTREAM_USART.STATUS = USART_TXCIF_bm;
     d9e:	e0 eb       	ldi	r30, 0xB0	; 176
     da0:	f9 e0       	ldi	r31, 0x09	; 9
     da2:	c1 83       	std	Z+1, r28	; 0x01
                DOWNSTREAM_CONFIG = OUTBOUND;
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	80 93 04 20 	sts	0x2004, r24
                DOWNSTREAM_USART.CTRLA = 0x00;
     daa:	13 82       	std	Z+3, r1	; 0x03
            }
#endif
            //System is pushing data upstream, but it might be done
            if(upstreamTxDone)
     dac:	80 91 1d 21 	lds	r24, 0x211D
     db0:	90 91 1e 21 	lds	r25, 0x211E
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	01 f1       	breq	.+64     	; 0xdf8 <doDaisyTask+0x2ae>
            {
                //The upstream transmitter is loaded with data (but possibly not done)

                cli();
     db8:	f8 94       	cli
                upstreamTxDone = 0;
     dba:	10 92 1d 21 	sts	0x211D, r1
     dbe:	10 92 1e 21 	sts	0x211E, r1
                sei();
     dc2:	78 94       	sei
#if USE_DOWNSTREAM
                if(downstreamSizeReceived && passthroughWaiting)
     dc4:	80 91 1b 21 	lds	r24, 0x211B
     dc8:	88 23       	and	r24, r24
     dca:	61 f0       	breq	.+24     	; 0xde4 <doDaisyTask+0x29a>
     dcc:	80 91 4b 20 	lds	r24, 0x204B
     dd0:	88 23       	and	r24, r24
     dd2:	41 f0       	breq	.+16     	; 0xde4 <doDaisyTask+0x29a>
                {
                    //The passthrough packet has already arrived.  Just send it upstream
                    passthroughWaiting = 0;
     dd4:	10 92 4b 20 	sts	0x204B, r1
                    daisyState = DAISY_TRANSMITTING;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	80 93 f1 21 	sts	0x21F1, r24
                    passthroughToUpstream();
     dde:	0e 94 fe 04 	call	0x9fc	; 0x9fc <passthroughToUpstream>
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <doDaisyTask+0x2ae>
                }
                else if(passthroughWaiting)
     de4:	80 91 4b 20 	lds	r24, 0x204B
                {
                    //Just go back to idle.  Another notification will arrive to wake up when the downstream reply is delivered
                    daisyState = DAISY_IDLE;
     de8:	10 92 f1 21 	sts	0x21F1, r1
                    //The passthrough packet has already arrived.  Just send it upstream
                    passthroughWaiting = 0;
                    daisyState = DAISY_TRANSMITTING;
                    passthroughToUpstream();
                }
                else if(passthroughWaiting)
     dec:	88 23       	and	r24, r24
     dee:	21 f4       	brne	.+8      	; 0xdf8 <doDaisyTask+0x2ae>
                    //Nothing else is coming  Reset to idle after full transmission complete
#endif
                    daisyState = DAISY_IDLE;
                    //Now wait for the transmission to complete entirely
                    //while(!(UPSTREAM_USART.STATUS & USART_TXCIF_bm));
                    configureHalfDuplexLink(UPSTREAM,INBOUND);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	0e 94 1b 03 	call	0x636	; 0x636 <configureHalfDuplexLink>

        default:
            break;
    }

}
     df8:	cf 91       	pop	r28
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <getMotorDirection>:
 *
 * Accessor for the current programmed motor direction
 ************************************************************************/
DIRECTION_MODE_t getMotorDirection(void)
{
    return direction;
     dfe:	80 91 f5 21 	lds	r24, 0x21F5
}
     e02:	08 95       	ret

00000e04 <getOldControlValue>:
 * Accessor for the current programmed motor direction
 ************************************************************************/
uint8_t getOldControlValue(void)
{
    return oldControlSignal;
}
     e04:	80 91 f6 21 	lds	r24, 0x21F6
     e08:	08 95       	ret

00000e0a <updateMotorVoltage>:
 *
 * Changes Motor to have speed marked by controlSignal
 *
 ************************************************************************/
void updateMotorVoltage(uint8_t controlSignal)
{
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	cf 93       	push	r28
     e14:	c8 2f       	mov	r28, r24
    if (controlSignal > Parameter[PARAMETER_MAXIMUM_PWM])
     e16:	c0 90 72 22 	lds	r12, 0x2272
     e1a:	d0 90 73 22 	lds	r13, 0x2273
     e1e:	e0 90 74 22 	lds	r14, 0x2274
     e22:	f0 90 75 22 	lds	r15, 0x2275
     e26:	68 2f       	mov	r22, r24
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__floatsisf>
     e32:	a7 01       	movw	r20, r14
     e34:	96 01       	movw	r18, r12
     e36:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
     e3a:	18 16       	cp	r1, r24
     e3c:	2c f4       	brge	.+10     	; 0xe48 <updateMotorVoltage+0x3e>
        controlSignal = Parameter[PARAMETER_MAXIMUM_PWM];
     e3e:	c7 01       	movw	r24, r14
     e40:	b6 01       	movw	r22, r12
     e42:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fixunssfsi>
     e46:	c6 2f       	mov	r28, r22
    
    if(controlSignal != oldControlSignal)
     e48:	80 91 f6 21 	lds	r24, 0x21F6
     e4c:	c8 17       	cp	r28, r24
     e4e:	71 f0       	breq	.+28     	; 0xe6c <updateMotorVoltage+0x62>
    {
        MOTOR1_PWMA_CCBUF = controlSignal + 256;
     e50:	8c 2f       	mov	r24, r28
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	80 50       	subi	r24, 0x00	; 0
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	e0 e0       	ldi	r30, 0x00	; 0
     e5a:	f8 e0       	ldi	r31, 0x08	; 8
     e5c:	80 af       	sts	0x70, r24
     e5e:	91 af       	sts	0x71, r25
        MOTOR1_PWMB_CCBUF = controlSignal + 256;
     e60:	82 af       	sts	0x72, r24
     e62:	93 af       	sts	0x73, r25
        MOTOR1_PWMC_CCBUF = controlSignal + 256;
     e64:	84 af       	sts	0x74, r24
     e66:	95 af       	sts	0x75, r25
#ifdef USE_SWITCHING
        MOTOR1_INVCURRENT_CCBUF = controlSignal + 256;
#endif
        oldControlSignal = controlSignal;
     e68:	c0 93 f6 21 	sts	0x21F6, r28
    }
}
     e6c:	cf 91       	pop	r28
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	08 95       	ret

00000e78 <updateMotorDirection>:
 * Updates the motor in the direction of newDirection.  newDirection can have the value
 * DIRECTION_NO_CHANGE to ensure that no attempt is made to change the direction.
 * Otherwise, direction can be DIRECTION_FORWARD, DIRECTION_STOP, or DIRECTION_REVERSE
 ************************************************************************/
void updateMotorDirection(DIRECTION_MODE_t newDirection)
{
     e78:	cf 93       	push	r28
     e7a:	c8 2f       	mov	r28, r24
    if((newDirection == DIRECTION_STOP) || 
     e7c:	88 23       	and	r24, r24
     e7e:	31 f0       	breq	.+12     	; 0xe8c <updateMotorDirection+0x14>
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	59 f0       	breq	.+22     	; 0xe9a <updateMotorDirection+0x22>
       (newDirection != DIRECTION_NO_CHANGE && direction != newDirection))
     e84:	80 91 f5 21 	lds	r24, 0x21F5
     e88:	8c 17       	cp	r24, r28
     e8a:	39 f0       	breq	.+14     	; 0xe9a <updateMotorDirection+0x22>
    {
        updateMotorVoltage(0);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	0e 94 05 07 	call	0xe0a	; 0xe0a <updateMotorVoltage>
        resetVelocityCounter();
     e92:	0e 94 f5 11 	call	0x23ea	; 0x23ea <resetVelocityCounter>
        direction = newDirection;
     e96:	c0 93 f5 21 	sts	0x21F5, r28
    }
}
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <configurePortIO>:
    //PA3 - TENSION1
    //PA4 - TENSION2
    //PA5 - IMON_REF
    //PA6 - NC
    //PA7 - NC
    PORTA.OUT = 0x00;
     e9e:	e0 e0       	ldi	r30, 0x00	; 0
     ea0:	f6 e0       	ldi	r31, 0x06	; 6
     ea2:	14 82       	std	Z+4, r1	; 0x04
    PORTA.DIR = 0x00;
     ea4:	10 82       	st	Z, r1

    //Port B is entirely no-connect, except for CPU debug load
    PORTB.OUT = 0x00;
     ea6:	e0 e2       	ldi	r30, 0x20	; 32
     ea8:	f6 e0       	ldi	r31, 0x06	; 6
     eaa:	14 82       	std	Z+4, r1	; 0x04
    PORTB.DIR = 0x04;
     eac:	84 e0       	ldi	r24, 0x04	; 4
     eae:	80 83       	st	Z, r24
    //PC3 - SEL
    //PC4 - HA1
    //PC5 - HB1
    //PC6 - HC1
    //PC7 - LED/ID
    PORTC.OUT = 0x00;
     eb0:	e0 e4       	ldi	r30, 0x40	; 64
     eb2:	f6 e0       	ldi	r31, 0x06	; 6
     eb4:	14 82       	std	Z+4, r1	; 0x04
    PORTC.DIR = 0x8F; //BA: used to be 0F
     eb6:	8f e8       	ldi	r24, 0x8F	; 143
     eb8:	80 83       	st	Z, r24
    //PD3 - TX_PROX1 (also debug to PC)
    //PD4 - RX_PROX2_EN
    //PD5 - TX_PROX2_EN
    //PD6 - RX_PROX2
    //PD7 - TX_PROX2
    PORTD.OUT = 0x22;
     eba:	e0 e6       	ldi	r30, 0x60	; 96
     ebc:	f6 e0       	ldi	r31, 0x06	; 6
     ebe:	82 e2       	ldi	r24, 0x22	; 34
     ec0:	84 83       	std	Z+4, r24	; 0x04
    PORTD.DIR = 0xBB;
     ec2:	8b eb       	ldi	r24, 0xBB	; 187
     ec4:	80 83       	st	Z, r24

    //PE0 - nRESET_A1
    //PE1 - nRESET_B1
    //PE2 - nRESET_C1
    //PE3 - LED
    PORTE.OUT = 0x08;
     ec6:	e0 e8       	ldi	r30, 0x80	; 128
     ec8:	f6 e0       	ldi	r31, 0x06	; 6
     eca:	88 e0       	ldi	r24, 0x08	; 8
     ecc:	84 83       	std	Z+4, r24	; 0x04
    PORTE.DIR = 0x0F;
     ece:	8f e0       	ldi	r24, 0x0F	; 15
     ed0:	80 83       	st	Z, r24

    //PR0 - nFAULT
    //PR1 - nOTW
    PORTR.OUT = 0x00;
     ed2:	e0 ee       	ldi	r30, 0xE0	; 224
     ed4:	f7 e0       	ldi	r31, 0x07	; 7
     ed6:	14 82       	std	Z+4, r1	; 0x04
    PORTR.DIR = 0x00;
     ed8:	10 82       	st	Z, r1

    //Configure open collector outputs from the motor controller driver to have pullups
    PORTR.PIN0CTRL = PORT_OPC_PULLUP_gc;
     eda:	88 e1       	ldi	r24, 0x18	; 24
     edc:	80 8b       	std	Z+16, r24	; 0x10
    PORTR.PIN1CTRL = PORT_OPC_PULLUP_gc;
     ede:	81 8b       	std	Z+17, r24	; 0x11
}
     ee0:	08 95       	ret

00000ee2 <configurePinInterrupts>:
 * Also handle the port change interrupts for FAULT conditions.
 ************************************************************************/
void configurePinInterrupts(void)
{
    //Set to interrupt on BOTH edges with TOTEM drivers and no slew rate control
    MOTOR1_HA_PINCTRL = PORT_ISC_BOTHEDGES_gc | PORT_OPC_TOTEM_gc;
     ee2:	e0 e4       	ldi	r30, 0x40	; 64
     ee4:	f6 e0       	ldi	r31, 0x06	; 6
     ee6:	14 8a       	std	Z+20, r1	; 0x14
    MOTOR1_HB_PINCTRL = PORT_ISC_BOTHEDGES_gc | PORT_OPC_TOTEM_gc;
     ee8:	15 8a       	std	Z+21, r1	; 0x15
    MOTOR1_HC_PINCTRL = PORT_ISC_BOTHEDGES_gc | PORT_OPC_TOTEM_gc;
     eea:	16 8a       	std	Z+22, r1	; 0x16

    //Set to interrupt on FALLING edges and be with pullups as input
    MOTOR1_FAULT_PINCTRL = PORT_ISC_FALLING_gc | PORT_OPC_PULLUP_gc;
     eec:	a0 ee       	ldi	r26, 0xE0	; 224
     eee:	b7 e0       	ldi	r27, 0x07	; 7
     ef0:	8a e1       	ldi	r24, 0x1A	; 26
     ef2:	51 96       	adiw	r26, 0x11	; 17
     ef4:	8c 93       	st	X, r24
     ef6:	51 97       	sbiw	r26, 0x11	; 17
    MOTOR1_OTW_PINCTRL = PORT_ISC_FALLING_gc | PORT_OPC_PULLUP_gc;
     ef8:	50 96       	adiw	r26, 0x10	; 16
     efa:	8c 93       	st	X, r24
     efc:	50 97       	sbiw	r26, 0x10	; 16

    //Configure Hall sensor pins to interrupt group zero.
    MOTOR1PORT.INT0MASK = (1 << MOTOR1_HA_PIN) | (1 << MOTOR1_HB_PIN) | ( 1 << MOTOR1_HC_PIN);
     efe:	80 e7       	ldi	r24, 0x70	; 112
     f00:	82 87       	std	Z+10, r24	; 0x0a

    //Configure Fault sensor pins to interrupt group one.
    //MOTOR1PORT.INT1MASK = (1 << MOTOR1_FAULT_PIN) | (1 << MOTOR1_OTW_PIN);

    //Enable interrupt 0 on PORTC to priority LOW
    MOTOR1PORT.INTCTRL = PORT_INT0LVL_LO_gc;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	81 87       	std	Z+9, r24	; 0x09
    //MOTOR1PORT.INTCTRL = PORT_INT1LVL_LO_gc | PORT_INT0LVL_LO_gc;
}
     f06:	08 95       	ret

00000f08 <configureMotorPWMs>:
void configureMotorPWMs(void)
{
    //Now configure the PWMs for the appropriate frequency and pin outputs
    //The clock will be the 32MHz RC Oscillator onboard the chip
    //No prescaling is required, and it will give better PWM duty cycle granularity
    direction = DIRECTION_STOP;
     f08:	10 92 f5 21 	sts	0x21F5, r1

    //Shutdown all TC outputs before configuration
    MOTOR1_TC.CTRLC = 0x00;
     f0c:	e0 e0       	ldi	r30, 0x00	; 0
     f0e:	f8 e0       	ldi	r31, 0x08	; 8
     f10:	12 82       	std	Z+2, r1	; 0x02

    //Disable event actions
    MOTOR1_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
     f12:	13 82       	std	Z+3, r1	; 0x03

    //Set all TC modules to 16-bit mode
    MOTOR1_TC.CTRLE = 0x00;
     f14:	14 82       	std	Z+4, r1	; 0x04

    //Set the period to 512 counts to make duty cycle increments work at 8 bits
    //Value is 511 because counter moves from 0 to the value and then back to zero on the following cycle.
    //This creates a frequency of 62.5 kHz, because 32MHz / 512 = 62.5 kHz.
    MOTOR1_TC.PERBUF = 511;
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	86 ab       	sts	0x56, r24
     f1c:	97 ab       	sts	0x57, r25

    //For now, initialize to a duty cycle of 50%, a command of 0.
    //Each pin can have different duty cycles, so each one is on its own
    MOTOR1_PWMA_CCBUF = 256;
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	91 e0       	ldi	r25, 0x01	; 1
     f22:	80 af       	sts	0x70, r24
     f24:	91 af       	sts	0x71, r25
    MOTOR1_PWMB_CCBUF = 256;
     f26:	82 af       	sts	0x72, r24
     f28:	93 af       	sts	0x73, r25
    MOTOR1_PWMC_CCBUF = 256;
     f2a:	84 af       	sts	0x74, r24
     f2c:	95 af       	sts	0x75, r25
#ifdef USE_SWITCHING
    MOTOR1_INVCURRENT_CCBUF = 256;
#endif

    MOTOR1_TC.CTRLB = TC_WGMODE_SS_gc;
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	81 83       	std	Z+1, r24	; 0x01

    //Activate the Timer Counters
    MOTOR1_TC.CTRLA = TC_CLKSEL_DIV1_gc;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	80 83       	st	Z, r24
}
     f36:	08 95       	ret

00000f38 <updateMotor>:
    DIRECTION_MODE_t thisDirection;
    uint8_t sensorState;

    //First get the state of the Hall Effect Sensors
    //sensorState.0 is 1, sensorState.1 is 2, and sensorState.2 is 3
    sensorState = (MOTOR1PORT.IN & 0x70) >> 4;
     f38:	e0 e4       	ldi	r30, 0x40	; 64
     f3a:	f6 e0       	ldi	r31, 0x06	; 6
     f3c:	20 91 48 06 	lds	r18, 0x0648
    thisDirection = direction;
     f40:	80 91 f5 21 	lds	r24, 0x21F5

    //Configure pin outputs to match the Hall state
    //In comments, H3-H2-H1 is given to match Hall Sensor states
    //Reverse just involves swapping A and B

    if(thisDirection == DIRECTION_STOP)
     f44:	88 23       	and	r24, r24
     f46:	01 f5       	brne	.+64     	; 0xf88 <updateMotor+0x50>
    {
        MOTOR1_RESETPORT.OUT = (MOTOR1_RESETPORT.OUT & ~MOTOR1_RESET_bm);
     f48:	80 91 84 06 	lds	r24, 0x0684
     f4c:	88 7f       	andi	r24, 0xF8	; 248
     f4e:	a0 e8       	ldi	r26, 0x80	; 128
     f50:	b6 e0       	ldi	r27, 0x06	; 6
     f52:	14 96       	adiw	r26, 0x04	; 4
     f54:	8c 93       	st	X, r24
        MOTOR1_PWMA_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
     f56:	87 e0       	ldi	r24, 0x07	; 7
     f58:	80 8b       	std	Z+16, r24	; 0x10
        MOTOR1_PWMB_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
     f5a:	81 8b       	std	Z+17, r24	; 0x11
        MOTOR1_PWMC_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
     f5c:	82 8b       	std	Z+18, r24	; 0x12
#ifdef USE_SWITCHING
        MOTOR1_INVCURRENT_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
#endif
        MOTOR1_TC.CTRLB = TC_WGMODE_SS_gc;
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	e0 e0       	ldi	r30, 0x00	; 0
     f62:	f8 e0       	ldi	r31, 0x08	; 8
     f64:	81 83       	std	Z+1, r24	; 0x01
        averagePeriod = 65534;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	9e ef       	ldi	r25, 0xFE	; 254
     f6a:	af e7       	ldi	r26, 0x7F	; 127
     f6c:	b7 e4       	ldi	r27, 0x47	; 71
     f6e:	80 93 32 20 	sts	0x2032, r24
     f72:	90 93 33 20 	sts	0x2033, r25
     f76:	a0 93 34 20 	sts	0x2034, r26
     f7a:	b0 93 35 20 	sts	0x2035, r27
        averageRPM = 0;
     f7e:	10 92 02 22 	sts	0x2202, r1
     f82:	10 92 03 22 	sts	0x2203, r1
        return;
     f86:	08 95       	ret
    DIRECTION_MODE_t thisDirection;
    uint8_t sensorState;

    //First get the state of the Hall Effect Sensors
    //sensorState.0 is 1, sensorState.1 is 2, and sensorState.2 is 3
    sensorState = (MOTOR1PORT.IN & 0x70) >> 4;
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	20 77       	andi	r18, 0x70	; 112
     f8c:	30 70       	andi	r19, 0x00	; 0
     f8e:	94 e0       	ldi	r25, 0x04	; 4
     f90:	35 95       	asr	r19
     f92:	27 95       	ror	r18
     f94:	9a 95       	dec	r25
     f96:	e1 f7       	brne	.-8      	; 0xf90 <updateMotor+0x58>
    //The current inversion PWM is always active if the motor is active
    //It is inverted because of the required hookup of the ADC differential inputs
    MOTOR1_INVCURRENT_PINCTRL = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
#endif

    switch(sensorState)
     f98:	23 30       	cpi	r18, 0x03	; 3
     f9a:	d9 f1       	breq	.+118    	; 0x1012 <updateMotor+0xda>
     f9c:	24 30       	cpi	r18, 0x04	; 4
     f9e:	30 f4       	brcc	.+12     	; 0xfac <updateMotor+0x74>
     fa0:	21 30       	cpi	r18, 0x01	; 1
     fa2:	71 f0       	breq	.+28     	; 0xfc0 <updateMotor+0x88>
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	09 f0       	breq	.+2      	; 0xfaa <updateMotor+0x72>
     fa8:	93 c0       	rjmp	.+294    	; 0x10d0 <updateMotor+0x198>
     faa:	1f c0       	rjmp	.+62     	; 0xfea <updateMotor+0xb2>
     fac:	25 30       	cpi	r18, 0x05	; 5
     fae:	09 f4       	brne	.+2      	; 0xfb2 <updateMotor+0x7a>
     fb0:	5c c0       	rjmp	.+184    	; 0x106a <updateMotor+0x132>
     fb2:	25 30       	cpi	r18, 0x05	; 5
     fb4:	08 f4       	brcc	.+2      	; 0xfb8 <updateMotor+0x80>
     fb6:	40 c0       	rjmp	.+128    	; 0x1038 <updateMotor+0x100>
     fb8:	26 30       	cpi	r18, 0x06	; 6
     fba:	09 f0       	breq	.+2      	; 0xfbe <updateMotor+0x86>
     fbc:	89 c0       	rjmp	.+274    	; 0x10d0 <updateMotor+0x198>
     fbe:	6f c0       	rjmp	.+222    	; 0x109e <updateMotor+0x166>
    {
        case 0x01:
            //0-0-1 - A and -C with reset on B for reverse
            MOTOR1_RESETPORT.OUT = (MOTOR1_RESETPORT.OUT & ~MOTOR1_RESET_bm) | MOTOR1_RESETA_DIS | MOTOR1_RESETC_DIS;
     fc0:	90 91 84 06 	lds	r25, 0x0684
     fc4:	98 7f       	andi	r25, 0xF8	; 248
     fc6:	95 60       	ori	r25, 0x05	; 5
     fc8:	a0 e8       	ldi	r26, 0x80	; 128
     fca:	b6 e0       	ldi	r27, 0x06	; 6
     fcc:	14 96       	adiw	r26, 0x04	; 4
     fce:	9c 93       	st	X, r25
            MOTOR1_PWMB_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
     fd0:	97 e0       	ldi	r25, 0x07	; 7
     fd2:	91 8b       	std	Z+17, r25	; 0x11
#ifdef USE_SWITCHING
            MOTOR1_TC.CTRLB = MOTOR1_PWMA_EN | MOTOR1_PWMC_EN | MOTOR1_INVCURRENT_EN | TC_WGMODE_SS_gc;
#else
            MOTOR1_TC.CTRLB = MOTOR1_PWMA_EN | MOTOR1_PWMC_EN | TC_WGMODE_SS_gc;
     fd4:	23 e5       	ldi	r18, 0x53	; 83
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b8 e0       	ldi	r27, 0x08	; 8
     fda:	11 96       	adiw	r26, 0x01	; 1
     fdc:	2c 93       	st	X, r18
     fde:	11 97       	sbiw	r26, 0x01	; 1
#endif
            if(thisDirection == DIRECTION_REVERSE)
     fe0:	82 30       	cpi	r24, 0x02	; 2
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <updateMotor+0xae>
     fe4:	6e c0       	rjmp	.+220    	; 0x10c2 <updateMotor+0x18a>
            {
                MOTOR1_PWMA_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
     fe6:	90 8b       	std	Z+16, r25	; 0x10
     fe8:	3d c0       	rjmp	.+122    	; 0x1064 <updateMotor+0x12c>
                MOTOR1_PWMC_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
            }
            break;
        case 0x02:
            //0-1-0 - B and -A with reset on C for reverse
            MOTOR1_RESETPORT.OUT = (MOTOR1_RESETPORT.OUT & ~MOTOR1_RESET_bm) | MOTOR1_RESETA_DIS | MOTOR1_RESETB_DIS;
     fea:	90 91 84 06 	lds	r25, 0x0684
     fee:	98 7f       	andi	r25, 0xF8	; 248
     ff0:	93 60       	ori	r25, 0x03	; 3
     ff2:	a0 e8       	ldi	r26, 0x80	; 128
     ff4:	b6 e0       	ldi	r27, 0x06	; 6
     ff6:	14 96       	adiw	r26, 0x04	; 4
     ff8:	9c 93       	st	X, r25
            MOTOR1_PWMC_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
     ffa:	97 e0       	ldi	r25, 0x07	; 7
     ffc:	92 8b       	std	Z+18, r25	; 0x12
#ifdef USE_SWITCHING
            MOTOR1_TC.CTRLB = MOTOR1_PWMA_EN | MOTOR1_PWMB_EN | MOTOR1_INVCURRENT_EN | TC_WGMODE_SS_gc;
#else
            MOTOR1_TC.CTRLB = MOTOR1_PWMA_EN | MOTOR1_PWMB_EN | TC_WGMODE_SS_gc;
     ffe:	23 e3       	ldi	r18, 0x33	; 51
    1000:	a0 e0       	ldi	r26, 0x00	; 0
    1002:	b8 e0       	ldi	r27, 0x08	; 8
    1004:	11 96       	adiw	r26, 0x01	; 1
    1006:	2c 93       	st	X, r18
    1008:	11 97       	sbiw	r26, 0x01	; 1
#endif
            if(thisDirection == DIRECTION_REVERSE)
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	09 f0       	breq	.+2      	; 0x1010 <updateMotor+0xd8>
    100e:	3f c0       	rjmp	.+126    	; 0x108e <updateMotor+0x156>
    1010:	42 c0       	rjmp	.+132    	; 0x1096 <updateMotor+0x15e>
                MOTOR1_PWMB_PINCTRL = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
            }
            break;
        case 0x03:
            //0-1-1 - B and -C with reset on A for reverse
            MOTOR1_RESETPORT.OUT = (MOTOR1_RESETPORT.OUT & ~MOTOR1_RESET_bm) | MOTOR1_RESETB_DIS | MOTOR1_RESETC_DIS;
    1012:	90 91 84 06 	lds	r25, 0x0684
    1016:	98 7f       	andi	r25, 0xF8	; 248
    1018:	96 60       	ori	r25, 0x06	; 6
    101a:	a0 e8       	ldi	r26, 0x80	; 128
    101c:	b6 e0       	ldi	r27, 0x06	; 6
    101e:	14 96       	adiw	r26, 0x04	; 4
    1020:	9c 93       	st	X, r25
            MOTOR1_PWMA_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    1022:	97 e0       	ldi	r25, 0x07	; 7
    1024:	90 8b       	std	Z+16, r25	; 0x10
#ifdef USE_SWITCHING
            MOTOR1_TC.CTRLB = MOTOR1_PWMB_EN | MOTOR1_PWMC_EN | MOTOR1_INVCURRENT_EN | TC_WGMODE_SS_gc;
#else
            MOTOR1_TC.CTRLB = MOTOR1_PWMB_EN | MOTOR1_PWMC_EN | TC_WGMODE_SS_gc;
    1026:	23 e6       	ldi	r18, 0x63	; 99
    1028:	a0 e0       	ldi	r26, 0x00	; 0
    102a:	b8 e0       	ldi	r27, 0x08	; 8
    102c:	11 96       	adiw	r26, 0x01	; 1
    102e:	2c 93       	st	X, r18
    1030:	11 97       	sbiw	r26, 0x01	; 1
#endif
            if(thisDirection == DIRECTION_REVERSE)
    1032:	82 30       	cpi	r24, 0x02	; 2
    1034:	99 f4       	brne	.+38     	; 0x105c <updateMotor+0x124>
    1036:	15 c0       	rjmp	.+42     	; 0x1062 <updateMotor+0x12a>
                MOTOR1_PWMC_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
            }
            break;
        case 0x04:
            //1-0-0 - C and -B with reset on A for reverse
            MOTOR1_RESETPORT.OUT = (MOTOR1_RESETPORT.OUT & ~MOTOR1_RESET_bm) | MOTOR1_RESETB_DIS | MOTOR1_RESETC_DIS;
    1038:	90 91 84 06 	lds	r25, 0x0684
    103c:	98 7f       	andi	r25, 0xF8	; 248
    103e:	96 60       	ori	r25, 0x06	; 6
    1040:	a0 e8       	ldi	r26, 0x80	; 128
    1042:	b6 e0       	ldi	r27, 0x06	; 6
    1044:	14 96       	adiw	r26, 0x04	; 4
    1046:	9c 93       	st	X, r25
            MOTOR1_PWMA_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    1048:	97 e0       	ldi	r25, 0x07	; 7
    104a:	90 8b       	std	Z+16, r25	; 0x10
#ifdef USE_SWITCHING
            MOTOR1_TC.CTRLB = MOTOR1_PWMB_EN | MOTOR1_PWMC_EN | MOTOR1_INVCURRENT_EN | TC_WGMODE_SS_gc;
#else
            MOTOR1_TC.CTRLB = MOTOR1_PWMB_EN | MOTOR1_PWMC_EN | TC_WGMODE_SS_gc;
    104c:	23 e6       	ldi	r18, 0x63	; 99
    104e:	a0 e0       	ldi	r26, 0x00	; 0
    1050:	b8 e0       	ldi	r27, 0x08	; 8
    1052:	11 96       	adiw	r26, 0x01	; 1
    1054:	2c 93       	st	X, r18
    1056:	11 97       	sbiw	r26, 0x01	; 1
#endif
            if(thisDirection == DIRECTION_REVERSE)
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	19 f4       	brne	.+6      	; 0x1062 <updateMotor+0x12a>
            {
                MOTOR1_PWMB_PINCTRL = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    105c:	87 e4       	ldi	r24, 0x47	; 71
    105e:	81 8b       	std	Z+17, r24	; 0x11
    1060:	32 c0       	rjmp	.+100    	; 0x10c6 <updateMotor+0x18e>
                MOTOR1_PWMC_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
            }
            else
            {
                MOTOR1_PWMB_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    1062:	91 8b       	std	Z+17, r25	; 0x11
                MOTOR1_PWMC_PINCTRL = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    1064:	87 e4       	ldi	r24, 0x47	; 71
    1066:	82 8b       	std	Z+18, r24	; 0x12
    1068:	08 95       	ret
            }
            break;
        case 0x05:
            //1-0-1 - A and -B with reset on C for reverse
            MOTOR1_RESETPORT.OUT = (MOTOR1_RESETPORT.OUT & ~MOTOR1_RESET_bm) | MOTOR1_RESETA_DIS | MOTOR1_RESETB_DIS;
    106a:	90 91 84 06 	lds	r25, 0x0684
    106e:	98 7f       	andi	r25, 0xF8	; 248
    1070:	93 60       	ori	r25, 0x03	; 3
    1072:	a0 e8       	ldi	r26, 0x80	; 128
    1074:	b6 e0       	ldi	r27, 0x06	; 6
    1076:	14 96       	adiw	r26, 0x04	; 4
    1078:	9c 93       	st	X, r25
            MOTOR1_PWMC_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    107a:	97 e0       	ldi	r25, 0x07	; 7
    107c:	92 8b       	std	Z+18, r25	; 0x12
#ifdef USE_SWITCHING
            MOTOR1_TC.CTRLB = MOTOR1_PWMA_EN | MOTOR1_PWMB_EN | MOTOR1_INVCURRENT_EN | TC_WGMODE_SS_gc;
#else
            MOTOR1_TC.CTRLB = MOTOR1_PWMA_EN | MOTOR1_PWMB_EN | TC_WGMODE_SS_gc;
    107e:	23 e3       	ldi	r18, 0x33	; 51
    1080:	a0 e0       	ldi	r26, 0x00	; 0
    1082:	b8 e0       	ldi	r27, 0x08	; 8
    1084:	11 96       	adiw	r26, 0x01	; 1
    1086:	2c 93       	st	X, r18
    1088:	11 97       	sbiw	r26, 0x01	; 1
#endif
            if(thisDirection == DIRECTION_REVERSE)
    108a:	82 30       	cpi	r24, 0x02	; 2
    108c:	21 f4       	brne	.+8      	; 0x1096 <updateMotor+0x15e>
            {
                MOTOR1_PWMA_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    108e:	90 8b       	std	Z+16, r25	; 0x10
                MOTOR1_PWMB_PINCTRL = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    1090:	87 e4       	ldi	r24, 0x47	; 71
    1092:	81 8b       	std	Z+17, r24	; 0x11
    1094:	08 95       	ret
            }
            else
            {
                MOTOR1_PWMA_PINCTRL = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    1096:	87 e4       	ldi	r24, 0x47	; 71
    1098:	80 8b       	std	Z+16, r24	; 0x10
                MOTOR1_PWMB_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    109a:	91 8b       	std	Z+17, r25	; 0x11
    109c:	08 95       	ret
            }
            break;
        case 0x06:
            //1-1-0 - C and -A with reset on B
            MOTOR1_RESETPORT.OUT = (MOTOR1_RESETPORT.OUT & ~MOTOR1_RESET_bm) | MOTOR1_RESETA_DIS | MOTOR1_RESETC_DIS;
    109e:	90 91 84 06 	lds	r25, 0x0684
    10a2:	98 7f       	andi	r25, 0xF8	; 248
    10a4:	95 60       	ori	r25, 0x05	; 5
    10a6:	a0 e8       	ldi	r26, 0x80	; 128
    10a8:	b6 e0       	ldi	r27, 0x06	; 6
    10aa:	14 96       	adiw	r26, 0x04	; 4
    10ac:	9c 93       	st	X, r25
            MOTOR1_PWMB_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    10ae:	97 e0       	ldi	r25, 0x07	; 7
    10b0:	91 8b       	std	Z+17, r25	; 0x11
#ifdef USE_SWITCHING
            MOTOR1_TC.CTRLB = MOTOR1_PWMA_EN | MOTOR1_PWMC_EN | MOTOR1_INVCURRENT_EN | TC_WGMODE_SS_gc;
#else
            MOTOR1_TC.CTRLB = MOTOR1_PWMA_EN | MOTOR1_PWMC_EN | TC_WGMODE_SS_gc;
    10b2:	23 e5       	ldi	r18, 0x53	; 83
    10b4:	a0 e0       	ldi	r26, 0x00	; 0
    10b6:	b8 e0       	ldi	r27, 0x08	; 8
    10b8:	11 96       	adiw	r26, 0x01	; 1
    10ba:	2c 93       	st	X, r18
    10bc:	11 97       	sbiw	r26, 0x01	; 1
#endif
            if(thisDirection == DIRECTION_REVERSE)
    10be:	82 30       	cpi	r24, 0x02	; 2
    10c0:	21 f4       	brne	.+8      	; 0x10ca <updateMotor+0x192>
            {
                MOTOR1_PWMA_PINCTRL = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    10c2:	87 e4       	ldi	r24, 0x47	; 71
    10c4:	80 8b       	std	Z+16, r24	; 0x10
                MOTOR1_PWMC_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    10c6:	92 8b       	std	Z+18, r25	; 0x12
    10c8:	08 95       	ret
            }
            else
            {
                MOTOR1_PWMA_PINCTRL = PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    10ca:	90 8b       	std	Z+16, r25	; 0x10
                MOTOR1_PWMC_PINCTRL = PORT_INVEN_bm | PORT_ISC_INPUT_DISABLE_gc | PORT_OPC_TOTEM_gc;
    10cc:	87 e4       	ldi	r24, 0x47	; 71
    10ce:	82 8b       	std	Z+18, r24	; 0x12
    10d0:	08 95       	ret

000010d2 <__vector_2>:
 * Interrupt handler for Motor 1 pin change.  When any Hall sensor changes
 * state, this will fire.  It updates the capture accumulator with the new
 * period and moves the motor to the next commutation state
 ************************************************************************/
ISR(MOTOR1_INT_vect)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	2f 93       	push	r18
    10de:	3f 93       	push	r19
    10e0:	4f 93       	push	r20
    10e2:	5f 93       	push	r21
    10e4:	6f 93       	push	r22
    10e6:	7f 93       	push	r23
    10e8:	8f 93       	push	r24
    10ea:	9f 93       	push	r25
    10ec:	af 93       	push	r26
    10ee:	bf 93       	push	r27
    10f0:	ef 93       	push	r30
    10f2:	ff 93       	push	r31
    uint8_t currentHall = (MOTOR1PORT.IN & 0x70) >> 4;
    10f4:	80 91 48 06 	lds	r24, 0x0648
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	80 77       	andi	r24, 0x70	; 112
    10fc:	90 70       	andi	r25, 0x00	; 0
    10fe:	e4 e0       	ldi	r30, 0x04	; 4
    1100:	95 95       	asr	r25
    1102:	87 95       	ror	r24
    1104:	ea 95       	dec	r30
    1106:	e1 f7       	brne	.-8      	; 0x1100 <__vector_2+0x2e>
    encoder += getHallIncrement(lastHall, currentHall);
    1108:	20 91 f2 21 	lds	r18, 0x21F2
    110c:	30 91 f3 21 	lds	r19, 0x21F3
    1110:	40 91 f4 21 	lds	r20, 0x21F4
//static void updateMotor1(void);

// Convert hall readings into +/- encoder value
static int8_t getHallIncrement(uint8_t last, uint8_t current)
{
    if (last == 0)
    1114:	44 23       	and	r20, r20
    1116:	81 f0       	breq	.+32     	; 0x1138 <__vector_2+0x66>
        return 0;
    return HallIncrement[6 * (last-1) + (current-1)];
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	41 50       	subi	r20, 0x01	; 1
    111c:	50 40       	sbci	r21, 0x00	; 0
    111e:	fa 01       	movw	r30, r20
    1120:	ee 0f       	add	r30, r30
    1122:	ff 1f       	adc	r31, r31
    1124:	e4 0f       	add	r30, r20
    1126:	f5 1f       	adc	r31, r21
    1128:	ee 0f       	add	r30, r30
    112a:	ff 1f       	adc	r31, r31
    112c:	e8 0f       	add	r30, r24
    112e:	f1 1d       	adc	r31, r1
    1130:	ec 5f       	subi	r30, 0xFC	; 252
    1132:	ff 4d       	sbci	r31, 0xDF	; 223
    1134:	40 81       	ld	r20, Z
    1136:	01 c0       	rjmp	.+2      	; 0x113a <__vector_2+0x68>

// Convert hall readings into +/- encoder value
static int8_t getHallIncrement(uint8_t last, uint8_t current)
{
    if (last == 0)
        return 0;
    1138:	40 e0       	ldi	r20, 0x00	; 0
 * period and moves the motor to the next commutation state
 ************************************************************************/
ISR(MOTOR1_INT_vect)
{
    uint8_t currentHall = (MOTOR1PORT.IN & 0x70) >> 4;
    encoder += getHallIncrement(lastHall, currentHall);
    113a:	55 27       	eor	r21, r21
    113c:	47 fd       	sbrc	r20, 7
    113e:	50 95       	com	r21
    1140:	42 0f       	add	r20, r18
    1142:	53 1f       	adc	r21, r19
    1144:	40 93 f2 21 	sts	0x21F2, r20
    1148:	50 93 f3 21 	sts	0x21F3, r21
    lastHall = currentHall;
    114c:	80 93 f4 21 	sts	0x21F4, r24

    //ASSERT_DEBUG_LINE();
    updateMotorCount();
    1150:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <updateMotorCount>
    updateMotor();
    1154:	0e 94 9c 07 	call	0xf38	; 0xf38 <updateMotor>
    //DEASSERT_DEBUG_LINE();
    return;
}
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <PID_Clamp>:
* PID_Clamp(*val,low,high)
*
* Clamps val to between low and high.
************************************************************************/
static void PID_Clamp(float *val, float low, float high)
{
    117a:	8f 92       	push	r8
    117c:	9f 92       	push	r9
    117e:	af 92       	push	r10
    1180:	bf 92       	push	r11
    1182:	cf 92       	push	r12
    1184:	df 92       	push	r13
    1186:	ef 92       	push	r14
    1188:	ff 92       	push	r15
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	ec 01       	movw	r28, r24
    1194:	6a 01       	movw	r12, r20
    1196:	7b 01       	movw	r14, r22
    1198:	48 01       	movw	r8, r16
    119a:	59 01       	movw	r10, r18
    if(*val<low)    {*val = low;}
    119c:	68 81       	ld	r22, Y
    119e:	79 81       	ldd	r23, Y+1	; 0x01
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	a7 01       	movw	r20, r14
    11a6:	96 01       	movw	r18, r12
    11a8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    11ac:	87 ff       	sbrs	r24, 7
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <PID_Clamp+0x3e>
    11b0:	c8 82       	st	Y, r12
    11b2:	d9 82       	std	Y+1, r13	; 0x01
    11b4:	ea 82       	std	Y+2, r14	; 0x02
    11b6:	fb 82       	std	Y+3, r15	; 0x03
    if(*val>high)    {*val = high;}
    11b8:	68 81       	ld	r22, Y
    11ba:	79 81       	ldd	r23, Y+1	; 0x01
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	a5 01       	movw	r20, r10
    11c2:	94 01       	movw	r18, r8
    11c4:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    11c8:	18 16       	cp	r1, r24
    11ca:	24 f4       	brge	.+8      	; 0x11d4 <PID_Clamp+0x5a>
    11cc:	88 82       	st	Y, r8
    11ce:	99 82       	std	Y+1, r9	; 0x01
    11d0:	aa 82       	std	Y+2, r10	; 0x02
    11d2:	bb 82       	std	Y+3, r11	; 0x03
    if(low == high)    {*val = low;}
    11d4:	c7 01       	movw	r24, r14
    11d6:	b6 01       	movw	r22, r12
    11d8:	a5 01       	movw	r20, r10
    11da:	94 01       	movw	r18, r8
    11dc:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    11e0:	88 23       	and	r24, r24
    11e2:	21 f4       	brne	.+8      	; 0x11ec <PID_Clamp+0x72>
    11e4:	c8 82       	st	Y, r12
    11e6:	d9 82       	std	Y+1, r13	; 0x01
    11e8:	ea 82       	std	Y+2, r14	; 0x02
    11ea:	fb 82       	std	Y+3, r15	; 0x03
}
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	ff 90       	pop	r15
    11f6:	ef 90       	pop	r14
    11f8:	df 90       	pop	r13
    11fa:	cf 90       	pop	r12
    11fc:	bf 90       	pop	r11
    11fe:	af 90       	pop	r10
    1200:	9f 90       	pop	r9
    1202:	8f 90       	pop	r8
    1204:	08 95       	ret

00001206 <resetPIDController>:
* disconnected.  This does not stop the motor.  It just stops the PID
* controller.
************************************************************************/
void resetPIDController(void)
{
    PID_state.integrationError = 0;
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	dc 01       	movw	r26, r24
    120c:	80 93 17 22 	sts	0x2217, r24
    1210:	90 93 18 22 	sts	0x2218, r25
    1214:	a0 93 19 22 	sts	0x2219, r26
    1218:	b0 93 1a 22 	sts	0x221A, r27
    PID_state.previousError = 0;
    121c:	80 93 1b 22 	sts	0x221B, r24
    1220:	90 93 1c 22 	sts	0x221C, r25
    1224:	a0 93 1d 22 	sts	0x221D, r26
    1228:	b0 93 1e 22 	sts	0x221E, r27
}
    122c:	08 95       	ret

0000122e <positionControl>:

// do position control on the hall effect sensor and return the targetRPM
// suitable for feeding into the velocity control control scheme.
uint16_t positionControl(int16_t setpoint)
{
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    // position control
    int16_t perr = setpoint - encoder;
    123e:	20 91 f2 21 	lds	r18, 0x21F2
    1242:	30 91 f3 21 	lds	r19, 0x21F3
    1246:	ec 01       	movw	r28, r24
    1248:	c2 1b       	sub	r28, r18
    124a:	d3 0b       	sbc	r29, r19
    if (abs(perr) < Parameter[PARAMETER_POSITION_DEADBAND])
    124c:	be 01       	movw	r22, r28
    124e:	d7 ff       	sbrs	r29, 7
    1250:	04 c0       	rjmp	.+8      	; 0x125a <positionControl+0x2c>
    1252:	66 27       	eor	r22, r22
    1254:	77 27       	eor	r23, r23
    1256:	6c 1b       	sub	r22, r28
    1258:	7d 0b       	sbc	r23, r29
    125a:	88 27       	eor	r24, r24
    125c:	77 fd       	sbrc	r23, 7
    125e:	80 95       	com	r24
    1260:	98 2f       	mov	r25, r24
    1262:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__floatsisf>
    1266:	20 91 7a 22 	lds	r18, 0x227A
    126a:	30 91 7b 22 	lds	r19, 0x227B
    126e:	40 91 7c 22 	lds	r20, 0x227C
    1272:	50 91 7d 22 	lds	r21, 0x227D
    1276:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    127a:	87 ff       	sbrs	r24, 7
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <positionControl+0x54>
        perr = 0;
    127e:	c0 e0       	ldi	r28, 0x00	; 0
    1280:	d0 e0       	ldi	r29, 0x00	; 0
    
    float targetRPM = perr * Parameter[PARAMETER_POSITION_KP];
    1282:	be 01       	movw	r22, r28
    1284:	88 27       	eor	r24, r24
    1286:	77 fd       	sbrc	r23, 7
    1288:	80 95       	com	r24
    128a:	98 2f       	mov	r25, r24
    128c:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__floatsisf>
    1290:	20 91 76 22 	lds	r18, 0x2276
    1294:	30 91 77 22 	lds	r19, 0x2277
    1298:	40 91 78 22 	lds	r20, 0x2278
    129c:	50 91 79 22 	lds	r21, 0x2279
    12a0:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    12a4:	eb 01       	movw	r28, r22
    12a6:	18 2f       	mov	r17, r24
    12a8:	09 2f       	mov	r16, r25
    
    // cap between (-MAX, -MIN) and (MIN, MAX).
    if (targetRPM > Parameter[PARAMETER_MAXIMUM_RPM])
    12aa:	c0 90 6a 22 	lds	r12, 0x226A
    12ae:	d0 90 6b 22 	lds	r13, 0x226B
    12b2:	e0 90 6c 22 	lds	r14, 0x226C
    12b6:	f0 90 6d 22 	lds	r15, 0x226D
    12ba:	98 01       	movw	r18, r16
    12bc:	86 2f       	mov	r24, r22
    12be:	9d 2f       	mov	r25, r29
    12c0:	a3 2f       	mov	r26, r19
    12c2:	b2 2f       	mov	r27, r18
    12c4:	bc 01       	movw	r22, r24
    12c6:	cd 01       	movw	r24, r26
    12c8:	a7 01       	movw	r20, r14
    12ca:	96 01       	movw	r18, r12
    12cc:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	1c f4       	brge	.+6      	; 0x12da <positionControl+0xac>
        targetRPM = Parameter[PARAMETER_MAXIMUM_RPM];
    12d4:	e6 01       	movw	r28, r12
    12d6:	1e 2d       	mov	r17, r14
    12d8:	0f 2d       	mov	r16, r15
    if (targetRPM < -Parameter[PARAMETER_MAXIMUM_RPM])
    12da:	f7 fa       	bst	r15, 7
    12dc:	f0 94       	com	r15
    12de:	f7 f8       	bld	r15, 7
    12e0:	f0 94       	com	r15
    12e2:	98 01       	movw	r18, r16
    12e4:	8c 2f       	mov	r24, r28
    12e6:	9d 2f       	mov	r25, r29
    12e8:	a3 2f       	mov	r26, r19
    12ea:	b0 2f       	mov	r27, r16
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	a7 01       	movw	r20, r14
    12f2:	96 01       	movw	r18, r12
    12f4:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    12f8:	87 fd       	sbrc	r24, 7
    12fa:	05 c0       	rjmp	.+10     	; 0x1306 <positionControl+0xd8>
    12fc:	c8 01       	movw	r24, r16
    12fe:	cc 2e       	mov	r12, r28
    1300:	dd 2e       	mov	r13, r29
    1302:	e9 2e       	mov	r14, r25
    1304:	f0 2e       	mov	r15, r16
        targetRPM = -Parameter[PARAMETER_MAXIMUM_RPM];
    if (targetRPM > 0 && targetRPM < MINIMUM_VELOCITY_COMMAND)
    1306:	c7 01       	movw	r24, r14
    1308:	b6 01       	movw	r22, r12
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	a9 01       	movw	r20, r18
    1310:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    1314:	18 16       	cp	r1, r24
    1316:	a4 f4       	brge	.+40     	; 0x1340 <positionControl+0x112>
    1318:	c7 01       	movw	r24, r14
    131a:	b6 01       	movw	r22, r12
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	48 e4       	ldi	r20, 0x48	; 72
    1322:	53 e4       	ldi	r21, 0x43	; 67
    1324:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    1328:	87 ff       	sbrs	r24, 7
    132a:	0a c0       	rjmp	.+20     	; 0x1340 <positionControl+0x112>
        targetRPM = MINIMUM_VELOCITY_COMMAND;
    132c:	0f 2e       	mov	r0, r31
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	cf 2e       	mov	r12, r31
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	df 2e       	mov	r13, r31
    1336:	f8 e4       	ldi	r31, 0x48	; 72
    1338:	ef 2e       	mov	r14, r31
    133a:	f3 e4       	ldi	r31, 0x43	; 67
    133c:	ff 2e       	mov	r15, r31
    133e:	f0 2d       	mov	r31, r0
    if (targetRPM < 0 && targetRPM > -MINIMUM_VELOCITY_COMMAND)
    1340:	c7 01       	movw	r24, r14
    1342:	b6 01       	movw	r22, r12
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	a9 01       	movw	r20, r18
    134a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    134e:	87 ff       	sbrs	r24, 7
    1350:	14 c0       	rjmp	.+40     	; 0x137a <positionControl+0x14c>
    1352:	c7 01       	movw	r24, r14
    1354:	b6 01       	movw	r22, r12
    1356:	20 e0       	ldi	r18, 0x00	; 0
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	48 e4       	ldi	r20, 0x48	; 72
    135c:	53 ec       	ldi	r21, 0xC3	; 195
    135e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    1362:	18 16       	cp	r1, r24
    1364:	54 f4       	brge	.+20     	; 0x137a <positionControl+0x14c>
        targetRPM = -MINIMUM_VELOCITY_COMMAND;
    1366:	0f 2e       	mov	r0, r31
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	cf 2e       	mov	r12, r31
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	df 2e       	mov	r13, r31
    1370:	f8 e4       	ldi	r31, 0x48	; 72
    1372:	ef 2e       	mov	r14, r31
    1374:	f3 ec       	ldi	r31, 0xC3	; 195
    1376:	ff 2e       	mov	r15, r31
    1378:	f0 2d       	mov	r31, r0
    
    // switch direction if required
    DIRECTION_MODE_t newDirection = getMotorDirection();
    137a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    if (targetRPM > 0)
    137e:	c7 01       	movw	r24, r14
    1380:	b6 01       	movw	r22, r12
    1382:	20 e0       	ldi	r18, 0x00	; 0
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    138c:	18 16       	cp	r1, r24
    138e:	64 f0       	brlt	.+24     	; 0x13a8 <positionControl+0x17a>
        newDirection = DIRECTION_FORWARD;
    else if (targetRPM < 0)
    1390:	c7 01       	movw	r24, r14
    1392:	b6 01       	movw	r22, r12
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
        newDirection = DIRECTION_REVERSE;
    else
        newDirection = DIRECTION_STOP;
    139e:	88 1f       	adc	r24, r24
    13a0:	88 27       	eor	r24, r24
    13a2:	88 1f       	adc	r24, r24
    13a4:	88 0f       	add	r24, r24
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <positionControl+0x17c>
        targetRPM = -MINIMUM_VELOCITY_COMMAND;
    
    // switch direction if required
    DIRECTION_MODE_t newDirection = getMotorDirection();
    if (targetRPM > 0)
        newDirection = DIRECTION_FORWARD;
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    else if (targetRPM < 0)
        newDirection = DIRECTION_REVERSE;
    else
        newDirection = DIRECTION_STOP;
    
    updateMotorDirection(newDirection);
    13aa:	0e 94 3c 07 	call	0xe78	; 0xe78 <updateMotorDirection>
    
    return abs(targetRPM);
    13ae:	c7 01       	movw	r24, r14
    13b0:	b6 01       	movw	r22, r12
    13b2:	0e 94 88 1a 	call	0x3510	; 0x3510 <__fixsfsi>
    13b6:	cb 01       	movw	r24, r22
    13b8:	77 ff       	sbrs	r23, 7
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <positionControl+0x194>
    13bc:	90 95       	com	r25
    13be:	81 95       	neg	r24
    13c0:	9f 4f       	sbci	r25, 0xFF	; 255
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	ef 90       	pop	r14
    13ce:	df 90       	pop	r13
    13d0:	cf 90       	pop	r12
    13d2:	08 95       	ret

000013d4 <PIDPreset>:
* set for Velocity and Current control.  Since the setpoint for Power
* is created dynamically, this function does not care in that case.  The
* PID controller does not run in Voltage mode, so that is also ignored.
************************************************************************/
void PIDPreset(PID_SCHEME_t newScheme)
{
    13d4:	7f 92       	push	r7
    13d6:	8f 92       	push	r8
    13d8:	9f 92       	push	r9
    13da:	af 92       	push	r10
    13dc:	bf 92       	push	r11
    13de:	cf 92       	push	r12
    13e0:	df 92       	push	r13
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <PIDPreset+0x1c>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <PIDPreset+0x1e>
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
    //float PID_KD; // BA: there seems to be no D control, so commenting this out to remove compiler warning
    float PID_KI;
    float PID_KP;

    //Need to compute the proper integral error such that in power control mode the computed control value is the same as before
    switch(newScheme)
    13f6:	82 30       	cpi	r24, 0x02	; 2
    13f8:	39 f1       	breq	.+78     	; 0x1448 <PIDPreset+0x74>
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	20 f4       	brcc	.+8      	; 0x1406 <PIDPreset+0x32>
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	09 f0       	breq	.+2      	; 0x1404 <PIDPreset+0x30>
    1402:	30 c1       	rjmp	.+608    	; 0x1664 <PIDPreset+0x290>
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <PIDPreset+0x40>
    1406:	83 30       	cpi	r24, 0x03	; 3
    1408:	09 f4       	brne	.+2      	; 0x140c <PIDPreset+0x38>
    140a:	50 c0       	rjmp	.+160    	; 0x14ac <PIDPreset+0xd8>
    140c:	84 30       	cpi	r24, 0x04	; 4
    140e:	09 f0       	breq	.+2      	; 0x1412 <PIDPreset+0x3e>
    1410:	29 c1       	rjmp	.+594    	; 0x1664 <PIDPreset+0x290>
    1412:	8a c0       	rjmp	.+276    	; 0x1528 <PIDPreset+0x154>
            //desiredVoltage = (float) PID_state.setpoint / speedConstant[0];
            //PID_Clamp(&desiredVoltage,0.0,48.0);
            //oldValue = floor(desiredVoltage * 255.0 / 48.0);

            //For now, just drive the oldValue as before.  We can experiment with the new system as time allows
            oldValue = getOldControlValue();
    1414:	0e 94 02 07 	call	0xe04	; 0xe04 <getOldControlValue>
    1418:	78 2e       	mov	r7, r24
            inputSignal = averageRPM;
            currentError = PID_state.setpoint - inputSignal;
    141a:	60 91 20 22 	lds	r22, 0x2220
    141e:	70 91 21 22 	lds	r23, 0x2221
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    142a:	6b 01       	movw	r12, r22
    142c:	7c 01       	movw	r14, r24
            //PID_Clamp(&desiredVoltage,0.0,48.0);
            //oldValue = floor(desiredVoltage * 255.0 / 48.0);

            //For now, just drive the oldValue as before.  We can experiment with the new system as time allows
            oldValue = getOldControlValue();
            inputSignal = averageRPM;
    142e:	60 91 02 22 	lds	r22, 0x2202
    1432:	70 91 03 22 	lds	r23, 0x2203
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    143e:	9b 01       	movw	r18, r22
    1440:	ac 01       	movw	r20, r24
            currentError = PID_state.setpoint - inputSignal;
    1442:	c7 01       	movw	r24, r14
    1444:	b6 01       	movw	r22, r12
    1446:	99 c0       	rjmp	.+306    	; 0x157a <PIDPreset+0x1a6>
            break;
        case CONTROL_SCHEME_CURRENT:
            //Read a current
            //In Current control mode, it would be nice to operate on raw ADC values for less floating point overhead
            //For now. just operate in terms of milliamperes
            oldValue = getOldControlValue();
    1448:	0e 94 02 07 	call	0xe04	; 0xe04 <getOldControlValue>
    144c:	78 2e       	mov	r7, r24
            inputSignal = motorCurrent * 1000;
            currentError = PID_state.setpoint - inputSignal;
    144e:	60 91 20 22 	lds	r22, 0x2220
    1452:	70 91 21 22 	lds	r23, 0x2221
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    145e:	6b 01       	movw	r12, r22
    1460:	7c 01       	movw	r14, r24
        case CONTROL_SCHEME_CURRENT:
            //Read a current
            //In Current control mode, it would be nice to operate on raw ADC values for less floating point overhead
            //For now. just operate in terms of milliamperes
            oldValue = getOldControlValue();
            inputSignal = motorCurrent * 1000;
    1462:	60 91 40 20 	lds	r22, 0x2040
    1466:	70 91 41 20 	lds	r23, 0x2041
    146a:	80 91 42 20 	lds	r24, 0x2042
    146e:	90 91 43 20 	lds	r25, 0x2043
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	4a e7       	ldi	r20, 0x7A	; 122
    1478:	54 e4       	ldi	r21, 0x44	; 68
    147a:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    147e:	9b 01       	movw	r18, r22
    1480:	ac 01       	movw	r20, r24
            currentError = PID_state.setpoint - inputSignal;
    1482:	c7 01       	movw	r24, r14
    1484:	b6 01       	movw	r22, r12
    1486:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
            //PID_KD = Parameter[PARAMETER_TORQUE_KD];
            PID_KI = Parameter[PARAMETER_TORQUE_KI];
    148a:	c0 90 26 22 	lds	r12, 0x2226
    148e:	d0 90 27 22 	lds	r13, 0x2227
    1492:	e0 90 28 22 	lds	r14, 0x2228
    1496:	f0 90 29 22 	lds	r15, 0x2229
            PID_KP = Parameter[PARAMETER_TORQUE_KP];
    149a:	00 91 22 22 	lds	r16, 0x2222
    149e:	10 91 23 22 	lds	r17, 0x2223
    14a2:	20 91 24 22 	lds	r18, 0x2224
    14a6:	30 91 25 22 	lds	r19, 0x2225
            break;
    14aa:	79 c0       	rjmp	.+242    	; 0x159e <PIDPreset+0x1ca>
        case CONTROL_SCHEME_POWER:
            oldValue = getOldControlValue();
    14ac:	0e 94 02 07 	call	0xe04	; 0xe04 <getOldControlValue>
    14b0:	78 2e       	mov	r7, r24
            powerLimit = getPowerSetpoint();
    14b2:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <getPowerSetpoint>
    14b6:	4b 01       	movw	r8, r22
    14b8:	5c 01       	movw	r10, r24
            inputSignal = getWindingResistance() * pow(motorCurrent,2);
    14ba:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <getWindingResistance>
    14be:	6b 01       	movw	r12, r22
    14c0:	7c 01       	movw	r14, r24
    14c2:	20 91 40 20 	lds	r18, 0x2040
    14c6:	30 91 41 20 	lds	r19, 0x2041
    14ca:	40 91 42 20 	lds	r20, 0x2042
    14ce:	50 91 43 20 	lds	r21, 0x2043
    14d2:	ca 01       	movw	r24, r20
    14d4:	b9 01       	movw	r22, r18
    14d6:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    14da:	b6 2f       	mov	r27, r22
    14dc:	a7 2f       	mov	r26, r23
    14de:	38 2f       	mov	r19, r24
    14e0:	29 2f       	mov	r18, r25
    14e2:	c7 01       	movw	r24, r14
    14e4:	b6 01       	movw	r22, r12
    14e6:	fd 01       	movw	r30, r26
    14e8:	a9 01       	movw	r20, r18
    14ea:	0f 2f       	mov	r16, r31
    14ec:	1e 2f       	mov	r17, r30
    14ee:	25 2f       	mov	r18, r21
    14f0:	34 2f       	mov	r19, r20
    14f2:	a9 01       	movw	r20, r18
    14f4:	98 01       	movw	r18, r16
    14f6:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    14fa:	9b 01       	movw	r18, r22
    14fc:	ac 01       	movw	r20, r24
            currentError = powerLimit - inputSignal;
    14fe:	c5 01       	movw	r24, r10
    1500:	b4 01       	movw	r22, r8
    1502:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
            //PID_KD = Parameter[PARAMETER_POWER_KD];
            PID_KI = Parameter[PARAMETER_POWER_KI];
    1506:	c0 90 3e 22 	lds	r12, 0x223E
    150a:	d0 90 3f 22 	lds	r13, 0x223F
    150e:	e0 90 40 22 	lds	r14, 0x2240
    1512:	f0 90 41 22 	lds	r15, 0x2241
            PID_KP = Parameter[PARAMETER_POWER_KP];
    1516:	00 91 3a 22 	lds	r16, 0x223A
    151a:	10 91 3b 22 	lds	r17, 0x223B
    151e:	20 91 3c 22 	lds	r18, 0x223C
    1522:	30 91 3d 22 	lds	r19, 0x223D
            break;
    1526:	3b c0       	rjmp	.+118    	; 0x159e <PIDPreset+0x1ca>
        case CONTROL_SCHEME_POSITION:
        {
            oldValue = getOldControlValue();
    1528:	0e 94 02 07 	call	0xe04	; 0xe04 <getOldControlValue>
    152c:	78 2e       	mov	r7, r24
            inputSignal = averageRPM;
    152e:	60 91 02 22 	lds	r22, 0x2202
    1532:	70 91 03 22 	lds	r23, 0x2203
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    153e:	16 2f       	mov	r17, r22
    1540:	87 2e       	mov	r8, r23
    1542:	c8 2e       	mov	r12, r24
    1544:	09 2f       	mov	r16, r25
            PID_state.setpoint = positionControl(positionSetPoint);
    1546:	80 91 f8 21 	lds	r24, 0x21F8
    154a:	90 91 f9 21 	lds	r25, 0x21F9
    154e:	0e 94 17 09 	call	0x122e	; 0x122e <positionControl>
    1552:	80 93 20 22 	sts	0x2220, r24
    1556:	90 93 21 22 	sts	0x2221, r25
            currentError = PID_state.setpoint - inputSignal;
    155a:	bc 01       	movw	r22, r24
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    1564:	ab 01       	movw	r20, r22
    1566:	bc 01       	movw	r22, r24
    1568:	cb 01       	movw	r24, r22
    156a:	ba 01       	movw	r22, r20
    156c:	40 2f       	mov	r20, r16
    156e:	01 2f       	mov	r16, r17
    1570:	18 2d       	mov	r17, r8
    1572:	2c 2d       	mov	r18, r12
    1574:	34 2f       	mov	r19, r20
    1576:	a9 01       	movw	r20, r18
    1578:	98 01       	movw	r18, r16
    157a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
            //PID_KD = Parameter[PARAMETER_VELOCITY_KD];
            PID_KI = Parameter[PARAMETER_VELOCITY_KI];
    157e:	c0 90 32 22 	lds	r12, 0x2232
    1582:	d0 90 33 22 	lds	r13, 0x2233
    1586:	e0 90 34 22 	lds	r14, 0x2234
    158a:	f0 90 35 22 	lds	r15, 0x2235
            PID_KP = Parameter[PARAMETER_VELOCITY_KP];
    158e:	00 91 2e 22 	lds	r16, 0x222E
    1592:	10 91 2f 22 	lds	r17, 0x222F
    1596:	20 91 30 22 	lds	r18, 0x2230
    159a:	30 91 31 22 	lds	r19, 0x2231
        }

    //Now the error has been computed for the destination control mode and the proper PID constants have been loaded

    //the control signal is just Kp * powerError + Ki * integrationError
    proportionalGain = currentError * PID_KP;
    159e:	58 2f       	mov	r21, r24
    15a0:	49 2f       	mov	r20, r25
    15a2:	86 2f       	mov	r24, r22
    15a4:	97 2f       	mov	r25, r23
    15a6:	a5 2f       	mov	r26, r21
    15a8:	b4 2f       	mov	r27, r20
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	a9 01       	movw	r20, r18
    15b0:	98 01       	movw	r18, r16
    15b2:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	9a 83       	std	Y+2, r25	; 0x02
    15be:	ab 83       	std	Y+3, r26	; 0x03
    15c0:	bc 83       	std	Y+4, r27	; 0x04
    //PID_Clamp(&proportionalGain,OUTPUT_LOW_VAL,OUTPUT_HIGH_VAL);
    PID_Clamp(&proportionalGain, -maximumOutputCommand, maximumOutputCommand);
    15c2:	00 91 29 20 	lds	r16, 0x2029
    15c6:	10 91 2a 20 	lds	r17, 0x202A
    15ca:	20 91 2b 20 	lds	r18, 0x202B
    15ce:	30 91 2c 20 	lds	r19, 0x202C
    15d2:	b9 01       	movw	r22, r18
    15d4:	a8 01       	movw	r20, r16
    15d6:	70 58       	subi	r23, 0x80	; 128
    15d8:	ce 01       	movw	r24, r28
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	0e 94 bd 08 	call	0x117a	; 0x117a <PID_Clamp>
    residualError = oldValue - proportionalGain;
    15e0:	67 2d       	mov	r22, r7
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__floatsisf>
    15ec:	29 81       	ldd	r18, Y+1	; 0x01
    15ee:	3a 81       	ldd	r19, Y+2	; 0x02
    15f0:	4b 81       	ldd	r20, Y+3	; 0x03
    15f2:	5c 81       	ldd	r21, Y+4	; 0x04
    15f4:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>

    //Now residualError = Ki * integration error
    PID_state.integrationError = residualError / PID_KI;
    15f8:	a7 01       	movw	r20, r14
    15fa:	96 01       	movw	r18, r12
    15fc:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	80 93 17 22 	sts	0x2217, r24
    1608:	90 93 18 22 	sts	0x2218, r25
    160c:	a0 93 19 22 	sts	0x2219, r26
    1610:	b0 93 1a 22 	sts	0x221A, r27
    PID_Clamp(&(PID_state.integrationError), (float)(OUTPUT_LOW_VAL) / PID_KI, maximumOutputCommand / PID_KI);
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	cb 01       	movw	r24, r22
    161a:	a7 01       	movw	r20, r14
    161c:	96 01       	movw	r18, r12
    161e:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    1622:	4b 01       	movw	r8, r22
    1624:	5c 01       	movw	r10, r24
    1626:	60 91 29 20 	lds	r22, 0x2029
    162a:	70 91 2a 20 	lds	r23, 0x202A
    162e:	80 91 2b 20 	lds	r24, 0x202B
    1632:	90 91 2c 20 	lds	r25, 0x202C
    1636:	a7 01       	movw	r20, r14
    1638:	96 01       	movw	r18, r12
    163a:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    163e:	8b 01       	movw	r16, r22
    1640:	9c 01       	movw	r18, r24
    1642:	87 e1       	ldi	r24, 0x17	; 23
    1644:	92 e2       	ldi	r25, 0x22	; 34
    1646:	b5 01       	movw	r22, r10
    1648:	a4 01       	movw	r20, r8
    164a:	0e 94 bd 08 	call	0x117a	; 0x117a <PID_Clamp>
    PID_state.previousError = 0;
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	dc 01       	movw	r26, r24
    1654:	80 93 1b 22 	sts	0x221B, r24
    1658:	90 93 1c 22 	sts	0x221C, r25
    165c:	a0 93 1d 22 	sts	0x221D, r26
    1660:	b0 93 1e 22 	sts	0x221E, r27
}
    1664:	24 96       	adiw	r28, 0x04	; 4
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	bf 90       	pop	r11
    167c:	af 90       	pop	r10
    167e:	9f 90       	pop	r9
    1680:	8f 90       	pop	r8
    1682:	7f 90       	pop	r7
    1684:	08 95       	ret

00001686 <configurePIDController>:
* The RTC is used in order to conserve valuable Timer Counter resources
* for other uses.
************************************************************************/
void configurePIDController(void)
{
    resetPIDController();
    1686:	0e 94 03 09 	call	0x1206	; 0x1206 <resetPIDController>

    //Configure the Control Loop counter for about 5 ms
    while(CONTROL_LOOP_RTC.STATUS & RTC_SYNCBUSY_bm);    //Wait for sync with RTC clock domain
    168a:	80 91 01 04 	lds	r24, 0x0401
    168e:	80 fd       	sbrc	r24, 0
    1690:	fc cf       	rjmp	.-8      	; 0x168a <configurePIDController+0x4>
    CONTROL_LOOP_RTC.PER = 5;                            //Set the period
    1692:	85 e0       	ldi	r24, 0x05	; 5
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	e0 e0       	ldi	r30, 0x00	; 0
    1698:	f4 e0       	ldi	r31, 0x04	; 4
    169a:	82 87       	std	Z+10, r24	; 0x0a
    169c:	93 87       	std	Z+11, r25	; 0x0b
    while(CONTROL_LOOP_RTC.STATUS & RTC_SYNCBUSY_bm);    //Wait for sync again
    169e:	e0 e0       	ldi	r30, 0x00	; 0
    16a0:	f4 e0       	ldi	r31, 0x04	; 4
    16a2:	80 91 01 04 	lds	r24, 0x0401
    16a6:	80 fd       	sbrc	r24, 0
    16a8:	fa cf       	rjmp	.-12     	; 0x169e <configurePIDController+0x18>
    CONTROL_LOOP_RTC.CNT = 0;                            //Reset the count
    16aa:	10 86       	std	Z+8, r1	; 0x08
    16ac:	11 86       	std	Z+9, r1	; 0x09
    CONTROL_LOOP_RTC.COMP = 10;                            //Ensure it will not trigger a compare
    16ae:	8a e0       	ldi	r24, 0x0A	; 10
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	84 87       	std	Z+12, r24	; 0x0c
    16b4:	95 87       	std	Z+13, r25	; 0x0d
    CONTROL_LOOP_RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	82 83       	std	Z+2, r24	; 0x02
    CONTROL_LOOP_RTC.CTRL = RTC_PRESCALER_DIV1_gc;        //Activate the clock first
    16ba:	80 93 00 04 	sts	0x0400, r24
    //CONTROL_LOOP_TC.CTRLD = TC_EVACT_OFF_gc | TC_EVSEL_OFF_gc;
    //CONTROL_LOOP_TC.CTRLE = 0x00;
    //CONTROL_LOOP_TC.PERBUF = 3125;
    //CONTROL_LOOP_TC.INTCTRLA = TC_OVFINTLVL_LO_gc;
    //CONTROL_LOOP_TC.CTRLA = TC_CLKSEL_DIV1024_gc;
}
    16be:	08 95       	ret

000016c0 <runPIDController>:
* refreshed by the caller.
*
* This outputs a control signal suitable for passing to updateMotorVoltage()
************************************************************************/
uint8_t runPIDController(void)
{
    16c0:	4f 92       	push	r4
    16c2:	5f 92       	push	r5
    16c4:	6f 92       	push	r6
    16c6:	7f 92       	push	r7
    16c8:	8f 92       	push	r8
    16ca:	9f 92       	push	r9
    16cc:	af 92       	push	r10
    16ce:	bf 92       	push	r11
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	2c 97       	sbiw	r28, 0x0c	; 12
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	de bf       	out	0x3e, r29	; 62
    float PID_KI;
    float PID_KP;
    float powerLimit;
    uint8_t controlSignal;

    powerLimit = getPowerSetpoint();
    16ea:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <getPowerSetpoint>
    16ee:	6b 01       	movw	r12, r22
    16f0:	7c 01       	movw	r14, r24
    if(powerLimit >= 0)
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    16fc:	87 fd       	sbrc	r24, 7
    16fe:	43 c0       	rjmp	.+134    	; 0x1786 <runPIDController+0xc6>
    {
        //System in power control mode.  Override
        inputSignal = getWindingResistance() * pow(motorCurrent,2);
    1700:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <getWindingResistance>
    1704:	4b 01       	movw	r8, r22
    1706:	5c 01       	movw	r10, r24
    1708:	20 91 40 20 	lds	r18, 0x2040
    170c:	30 91 41 20 	lds	r19, 0x2041
    1710:	40 91 42 20 	lds	r20, 0x2042
    1714:	50 91 43 20 	lds	r21, 0x2043
    1718:	ca 01       	movw	r24, r20
    171a:	b9 01       	movw	r22, r18
    171c:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1720:	b6 2f       	mov	r27, r22
    1722:	a7 2f       	mov	r26, r23
    1724:	38 2f       	mov	r19, r24
    1726:	29 2f       	mov	r18, r25
    1728:	c5 01       	movw	r24, r10
    172a:	b4 01       	movw	r22, r8
    172c:	fd 01       	movw	r30, r26
    172e:	a9 01       	movw	r20, r18
    1730:	0f 2f       	mov	r16, r31
    1732:	1e 2f       	mov	r17, r30
    1734:	25 2f       	mov	r18, r21
    1736:	34 2f       	mov	r19, r20
    1738:	a9 01       	movw	r20, r18
    173a:	98 01       	movw	r18, r16
    173c:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1740:	9b 01       	movw	r18, r22
    1742:	ac 01       	movw	r20, r24
        currentError = powerLimit - inputSignal;
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    174c:	b6 2e       	mov	r11, r22
    174e:	a7 2e       	mov	r10, r23
    1750:	98 2e       	mov	r9, r24
    1752:	89 2e       	mov	r8, r25
        PID_KD = Parameter[PARAMETER_POWER_KD];
    1754:	40 90 42 22 	lds	r4, 0x2242
    1758:	50 90 43 22 	lds	r5, 0x2243
    175c:	60 90 44 22 	lds	r6, 0x2244
    1760:	70 90 45 22 	lds	r7, 0x2245
        PID_KI = Parameter[PARAMETER_POWER_KI];
    1764:	c0 90 3e 22 	lds	r12, 0x223E
    1768:	d0 90 3f 22 	lds	r13, 0x223F
    176c:	e0 90 40 22 	lds	r14, 0x2240
    1770:	f0 90 41 22 	lds	r15, 0x2241
        PID_KP = Parameter[PARAMETER_POWER_KP];
    1774:	00 91 3a 22 	lds	r16, 0x223A
    1778:	10 91 3b 22 	lds	r17, 0x223B
    177c:	20 91 3c 22 	lds	r18, 0x223C
    1780:	30 91 3d 22 	lds	r19, 0x223D
    1784:	a3 c0       	rjmp	.+326    	; 0x18cc <runPIDController+0x20c>
    } else
    {
        //System OK.  Run the normal loop.

        switch(PID_state.controlScheme)
    1786:	80 91 1f 22 	lds	r24, 0x221F
    178a:	82 30       	cpi	r24, 0x02	; 2
    178c:	e9 f0       	breq	.+58     	; 0x17c8 <runPIDController+0x108>
    178e:	84 30       	cpi	r24, 0x04	; 4
    1790:	09 f4       	brne	.+2      	; 0x1794 <runPIDController+0xd4>
    1792:	55 c0       	rjmp	.+170    	; 0x183e <runPIDController+0x17e>
    1794:	81 30       	cpi	r24, 0x01	; 1
    1796:	09 f0       	breq	.+2      	; 0x179a <runPIDController+0xda>
    1798:	96 c0       	rjmp	.+300    	; 0x18c6 <runPIDController+0x206>
            case CONTROL_SCHEME_VELOCITY:
                //The setpoint is in terms of Hall state period length in ticks of the main timer-counter.
                //inputSignal = averagePeriod;
                //currentError = inputSignal - PID_state.setpoint;
                inputSignal = averageRPM;
                currentError = PID_state.setpoint - inputSignal;
    179a:	60 91 20 22 	lds	r22, 0x2220
    179e:	70 91 21 22 	lds	r23, 0x2221
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    17aa:	6b 01       	movw	r12, r22
    17ac:	7c 01       	movw	r14, r24
        {
            case CONTROL_SCHEME_VELOCITY:
                //The setpoint is in terms of Hall state period length in ticks of the main timer-counter.
                //inputSignal = averagePeriod;
                //currentError = inputSignal - PID_state.setpoint;
                inputSignal = averageRPM;
    17ae:	60 91 02 22 	lds	r22, 0x2202
    17b2:	70 91 03 22 	lds	r23, 0x2203
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
                currentError = PID_state.setpoint - inputSignal;
    17c2:	c7 01       	movw	r24, r14
    17c4:	b6 01       	movw	r22, r12
    17c6:	60 c0       	rjmp	.+192    	; 0x1888 <runPIDController+0x1c8>
            case CONTROL_SCHEME_CURRENT:
                //Read a current
                //In Current control mode, it would be nice to operate on raw ADC values for less floating point overhead
                //For now. just operate in terms of milliamperes
                inputSignal = motorCurrent * 1000;
                currentError = PID_state.setpoint - inputSignal;
    17c8:	60 91 20 22 	lds	r22, 0x2220
    17cc:	70 91 21 22 	lds	r23, 0x2221
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    17d8:	6b 01       	movw	r12, r22
    17da:	7c 01       	movw	r14, r24
                break;
            case CONTROL_SCHEME_CURRENT:
                //Read a current
                //In Current control mode, it would be nice to operate on raw ADC values for less floating point overhead
                //For now. just operate in terms of milliamperes
                inputSignal = motorCurrent * 1000;
    17dc:	60 91 40 20 	lds	r22, 0x2040
    17e0:	70 91 41 20 	lds	r23, 0x2041
    17e4:	80 91 42 20 	lds	r24, 0x2042
    17e8:	90 91 43 20 	lds	r25, 0x2043
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a e7       	ldi	r20, 0x7A	; 122
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    17f8:	9b 01       	movw	r18, r22
    17fa:	ac 01       	movw	r20, r24
                currentError = PID_state.setpoint - inputSignal;
    17fc:	c7 01       	movw	r24, r14
    17fe:	b6 01       	movw	r22, r12
    1800:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1804:	b6 2e       	mov	r11, r22
    1806:	a7 2e       	mov	r10, r23
    1808:	98 2e       	mov	r9, r24
    180a:	89 2e       	mov	r8, r25
                PID_KD = Parameter[PARAMETER_TORQUE_KD];
    180c:	40 90 2a 22 	lds	r4, 0x222A
    1810:	50 90 2b 22 	lds	r5, 0x222B
    1814:	60 90 2c 22 	lds	r6, 0x222C
    1818:	70 90 2d 22 	lds	r7, 0x222D
                PID_KI = Parameter[PARAMETER_TORQUE_KI];
    181c:	c0 90 26 22 	lds	r12, 0x2226
    1820:	d0 90 27 22 	lds	r13, 0x2227
    1824:	e0 90 28 22 	lds	r14, 0x2228
    1828:	f0 90 29 22 	lds	r15, 0x2229
                PID_KP = Parameter[PARAMETER_TORQUE_KP];
    182c:	00 91 22 22 	lds	r16, 0x2222
    1830:	10 91 23 22 	lds	r17, 0x2223
    1834:	20 91 24 22 	lds	r18, 0x2224
    1838:	30 91 25 22 	lds	r19, 0x2225
                break;
    183c:	47 c0       	rjmp	.+142    	; 0x18cc <runPIDController+0x20c>
            case CONTROL_SCHEME_POSITION:
            {
                inputSignal = averageRPM;
    183e:	60 91 02 22 	lds	r22, 0x2202
    1842:	70 91 03 22 	lds	r23, 0x2203
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    184e:	5b 01       	movw	r10, r22
    1850:	c8 2e       	mov	r12, r24
    1852:	09 2f       	mov	r16, r25
                PID_state.setpoint = positionControl(positionSetPoint);
    1854:	80 91 f8 21 	lds	r24, 0x21F8
    1858:	90 91 f9 21 	lds	r25, 0x21F9
    185c:	0e 94 17 09 	call	0x122e	; 0x122e <positionControl>
    1860:	80 93 20 22 	sts	0x2220, r24
    1864:	90 93 21 22 	sts	0x2221, r25
                currentError = PID_state.setpoint - inputSignal;
    1868:	bc 01       	movw	r22, r24
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    1872:	ab 01       	movw	r20, r22
    1874:	bc 01       	movw	r22, r24
    1876:	cb 01       	movw	r24, r22
    1878:	ba 01       	movw	r22, r20
    187a:	40 2f       	mov	r20, r16
    187c:	0a 2d       	mov	r16, r10
    187e:	1b 2d       	mov	r17, r11
    1880:	2c 2d       	mov	r18, r12
    1882:	34 2f       	mov	r19, r20
    1884:	a9 01       	movw	r20, r18
    1886:	98 01       	movw	r18, r16
    1888:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    188c:	b6 2e       	mov	r11, r22
    188e:	a7 2e       	mov	r10, r23
    1890:	98 2e       	mov	r9, r24
    1892:	89 2e       	mov	r8, r25
                PID_KD = Parameter[PARAMETER_VELOCITY_KD];
    1894:	40 90 36 22 	lds	r4, 0x2236
    1898:	50 90 37 22 	lds	r5, 0x2237
    189c:	60 90 38 22 	lds	r6, 0x2238
    18a0:	70 90 39 22 	lds	r7, 0x2239
                PID_KI = Parameter[PARAMETER_VELOCITY_KI];
    18a4:	c0 90 32 22 	lds	r12, 0x2232
    18a8:	d0 90 33 22 	lds	r13, 0x2233
    18ac:	e0 90 34 22 	lds	r14, 0x2234
    18b0:	f0 90 35 22 	lds	r15, 0x2235
                PID_KP = Parameter[PARAMETER_VELOCITY_KP];
    18b4:	00 91 2e 22 	lds	r16, 0x222E
    18b8:	10 91 2f 22 	lds	r17, 0x222F
    18bc:	20 91 30 22 	lds	r18, 0x2230
    18c0:	30 91 31 22 	lds	r19, 0x2231
                break;
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <runPIDController+0x20c>
            }
            case CONTROL_SCHEME_VOLTAGE:
                //Voltage setpoints are the byte directly suitable for passing to updateMotorVoltage.
                //These 8 bits are stored in the upper word of the 16 bit PID setpoint.
            default:
                controlSignal = PID_state.setpoint / 256;
    18c6:	80 91 21 22 	lds	r24, 0x2221
                return controlSignal;
    18ca:	fc c0       	rjmp	.+504    	; 0x1ac4 <runPIDController+0x404>
        }
    }

    temp = currentError * PID_KP;
    18cc:	b5 01       	movw	r22, r10
    18ce:	a4 01       	movw	r20, r8
    18d0:	87 2f       	mov	r24, r23
    18d2:	9a 2d       	mov	r25, r10
    18d4:	a5 2f       	mov	r26, r21
    18d6:	b8 2d       	mov	r27, r8
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	a9 01       	movw	r20, r18
    18de:	98 01       	movw	r18, r16
    18e0:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	8d 83       	std	Y+5, r24	; 0x05
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	af 83       	std	Y+7, r26	; 0x07
    18ee:	b8 87       	std	Y+8, r27	; 0x08
    PID_Clamp(&temp,-maximumOutputCommand, maximumOutputCommand);
    18f0:	00 91 29 20 	lds	r16, 0x2029
    18f4:	10 91 2a 20 	lds	r17, 0x202A
    18f8:	20 91 2b 20 	lds	r18, 0x202B
    18fc:	30 91 2c 20 	lds	r19, 0x202C
    1900:	b9 01       	movw	r22, r18
    1902:	a8 01       	movw	r20, r16
    1904:	70 58       	subi	r23, 0x80	; 128
    1906:	ce 01       	movw	r24, r28
    1908:	05 96       	adiw	r24, 0x05	; 5
    190a:	0e 94 bd 08 	call	0x117a	; 0x117a <PID_Clamp>
    sum = temp;
    190e:	8d 81       	ldd	r24, Y+5	; 0x05
    1910:	9e 81       	ldd	r25, Y+6	; 0x06
    1912:	af 81       	ldd	r26, Y+7	; 0x07
    1914:	b8 85       	ldd	r27, Y+8	; 0x08
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	ab 83       	std	Y+3, r26	; 0x03
    191c:	bc 83       	std	Y+4, r27	; 0x04

    PID_state.integrationError += currentError;
    191e:	60 91 17 22 	lds	r22, 0x2217
    1922:	70 91 18 22 	lds	r23, 0x2218
    1926:	80 91 19 22 	lds	r24, 0x2219
    192a:	90 91 1a 22 	lds	r25, 0x221A
    192e:	f5 01       	movw	r30, r10
    1930:	a4 01       	movw	r20, r8
    1932:	0f 2f       	mov	r16, r31
    1934:	1a 2d       	mov	r17, r10
    1936:	25 2f       	mov	r18, r21
    1938:	38 2d       	mov	r19, r8
    193a:	a9 01       	movw	r20, r18
    193c:	98 01       	movw	r18, r16
    193e:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	80 93 17 22 	sts	0x2217, r24
    194a:	90 93 18 22 	sts	0x2218, r25
    194e:	a0 93 19 22 	sts	0x2219, r26
    1952:	b0 93 1a 22 	sts	0x221A, r27
    if(PID_KI == 0)
    1956:	c7 01       	movw	r24, r14
    1958:	b6 01       	movw	r22, r12
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	a9 01       	movw	r20, r18
    1960:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    1964:	88 23       	and	r24, r24
    1966:	61 f4       	brne	.+24     	; 0x1980 <runPIDController+0x2c0>
    {
        PID_state.integrationError = 0;
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	dc 01       	movw	r26, r24
    196e:	80 93 17 22 	sts	0x2217, r24
    1972:	90 93 18 22 	sts	0x2218, r25
    1976:	a0 93 19 22 	sts	0x2219, r26
    197a:	b0 93 1a 22 	sts	0x221A, r27
    197e:	21 c0       	rjmp	.+66     	; 0x19c2 <runPIDController+0x302>
    } else {
        PID_Clamp(&(PID_state.integrationError),(float)(OUTPUT_LOW_VAL) / PID_KI, maximumOutputCommand / PID_KI);
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	cb 01       	movw	r24, r22
    1986:	a7 01       	movw	r20, r14
    1988:	96 01       	movw	r18, r12
    198a:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    198e:	69 87       	std	Y+9, r22	; 0x09
    1990:	7a 87       	std	Y+10, r23	; 0x0a
    1992:	8b 87       	std	Y+11, r24	; 0x0b
    1994:	9c 87       	std	Y+12, r25	; 0x0c
    1996:	60 91 29 20 	lds	r22, 0x2029
    199a:	70 91 2a 20 	lds	r23, 0x202A
    199e:	80 91 2b 20 	lds	r24, 0x202B
    19a2:	90 91 2c 20 	lds	r25, 0x202C
    19a6:	a7 01       	movw	r20, r14
    19a8:	96 01       	movw	r18, r12
    19aa:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    19ae:	8b 01       	movw	r16, r22
    19b0:	9c 01       	movw	r18, r24
    19b2:	87 e1       	ldi	r24, 0x17	; 23
    19b4:	92 e2       	ldi	r25, 0x22	; 34
    19b6:	49 85       	ldd	r20, Y+9	; 0x09
    19b8:	5a 85       	ldd	r21, Y+10	; 0x0a
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	0e 94 bd 08 	call	0x117a	; 0x117a <PID_Clamp>
    }
    sum += PID_state.integrationError * PID_KI;
    19c2:	c7 01       	movw	r24, r14
    19c4:	b6 01       	movw	r22, r12
    19c6:	20 91 17 22 	lds	r18, 0x2217
    19ca:	30 91 18 22 	lds	r19, 0x2218
    19ce:	40 91 19 22 	lds	r20, 0x2219
    19d2:	50 91 1a 22 	lds	r21, 0x221A
    19d6:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    19da:	9b 01       	movw	r18, r22
    19dc:	ac 01       	movw	r20, r24
    19de:	69 81       	ldd	r22, Y+1	; 0x01
    19e0:	7a 81       	ldd	r23, Y+2	; 0x02
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	9a 83       	std	Y+2, r25	; 0x02
    19f2:	ab 83       	std	Y+3, r26	; 0x03
    19f4:	bc 83       	std	Y+4, r27	; 0x04

    temp = currentError - PID_state.previousError;
    19f6:	a5 01       	movw	r20, r10
    19f8:	94 01       	movw	r18, r8
    19fa:	85 2f       	mov	r24, r21
    19fc:	9a 2d       	mov	r25, r10
    19fe:	a3 2f       	mov	r26, r19
    1a00:	b8 2d       	mov	r27, r8
    1a02:	bc 01       	movw	r22, r24
    1a04:	cd 01       	movw	r24, r26
    1a06:	20 91 1b 22 	lds	r18, 0x221B
    1a0a:	30 91 1c 22 	lds	r19, 0x221C
    1a0e:	40 91 1d 22 	lds	r20, 0x221D
    1a12:	50 91 1e 22 	lds	r21, 0x221E
    1a16:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1a1a:	26 2f       	mov	r18, r22
    1a1c:	b7 2f       	mov	r27, r23
    PID_state.previousError = currentError;
    1a1e:	4b 2d       	mov	r20, r11
    1a20:	5a 2d       	mov	r21, r10
    1a22:	69 2d       	mov	r22, r9
    1a24:	78 2d       	mov	r23, r8
    1a26:	40 93 1b 22 	sts	0x221B, r20
    1a2a:	50 93 1c 22 	sts	0x221C, r21
    1a2e:	60 93 1d 22 	sts	0x221D, r22
    1a32:	70 93 1e 22 	sts	0x221E, r23
    temp = temp * PID_KD;
    1a36:	42 2f       	mov	r20, r18
    1a38:	5b 2f       	mov	r21, r27
    1a3a:	68 2f       	mov	r22, r24
    1a3c:	79 2f       	mov	r23, r25
    1a3e:	cb 01       	movw	r24, r22
    1a40:	ba 01       	movw	r22, r20
    1a42:	a3 01       	movw	r20, r6
    1a44:	92 01       	movw	r18, r4
    1a46:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1a4a:	dc 01       	movw	r26, r24
    1a4c:	cb 01       	movw	r24, r22
    1a4e:	8d 83       	std	Y+5, r24	; 0x05
    1a50:	9e 83       	std	Y+6, r25	; 0x06
    1a52:	af 83       	std	Y+7, r26	; 0x07
    1a54:	b8 87       	std	Y+8, r27	; 0x08
    PID_Clamp(&temp, -maximumOutputCommand, maximumOutputCommand);
    1a56:	00 91 29 20 	lds	r16, 0x2029
    1a5a:	10 91 2a 20 	lds	r17, 0x202A
    1a5e:	20 91 2b 20 	lds	r18, 0x202B
    1a62:	30 91 2c 20 	lds	r19, 0x202C
    1a66:	b9 01       	movw	r22, r18
    1a68:	a8 01       	movw	r20, r16
    1a6a:	70 58       	subi	r23, 0x80	; 128
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	05 96       	adiw	r24, 0x05	; 5
    1a70:	0e 94 bd 08 	call	0x117a	; 0x117a <PID_Clamp>
    sum += temp;
    1a74:	69 81       	ldd	r22, Y+1	; 0x01
    1a76:	7a 81       	ldd	r23, Y+2	; 0x02
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a80:	4f 81       	ldd	r20, Y+7	; 0x07
    1a82:	58 85       	ldd	r21, Y+8	; 0x08
    1a84:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1a88:	dc 01       	movw	r26, r24
    1a8a:	cb 01       	movw	r24, r22
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	ab 83       	std	Y+3, r26	; 0x03
    1a92:	bc 83       	std	Y+4, r27	; 0x04

    PID_Clamp(&sum, OUTPUT_LOW_VAL, maximumOutputCommand);
    1a94:	00 91 29 20 	lds	r16, 0x2029
    1a98:	10 91 2a 20 	lds	r17, 0x202A
    1a9c:	20 91 2b 20 	lds	r18, 0x202B
    1aa0:	30 91 2c 20 	lds	r19, 0x202C
    1aa4:	ce 01       	movw	r24, r28
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	50 e0       	ldi	r21, 0x00	; 0
    1aac:	ba 01       	movw	r22, r20
    1aae:	0e 94 bd 08 	call	0x117a	; 0x117a <PID_Clamp>

    controlSignal = ceil(sum);
    1ab2:	69 81       	ldd	r22, Y+1	; 0x01
    1ab4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <ceil>
    1abe:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fixunssfsi>
    1ac2:	86 2f       	mov	r24, r22
    return controlSignal;
}
    1ac4:	2c 96       	adiw	r28, 0x0c	; 12
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	de bf       	out	0x3e, r29	; 62
    1aca:	df 91       	pop	r29
    1acc:	cf 91       	pop	r28
    1ace:	1f 91       	pop	r17
    1ad0:	0f 91       	pop	r16
    1ad2:	ff 90       	pop	r15
    1ad4:	ef 90       	pop	r14
    1ad6:	df 90       	pop	r13
    1ad8:	cf 90       	pop	r12
    1ada:	bf 90       	pop	r11
    1adc:	af 90       	pop	r10
    1ade:	9f 90       	pop	r9
    1ae0:	8f 90       	pop	r8
    1ae2:	7f 90       	pop	r7
    1ae4:	6f 90       	pop	r6
    1ae6:	5f 90       	pop	r5
    1ae8:	4f 90       	pop	r4
    1aea:	08 95       	ret

00001aec <updateTemperatureEsimate>:
* Updates the system estimate of winding temperature
* newTemp is the new stator temperature in degrees Celsius, and newCurrent is
* the new motor current in Amperes
************************************************************************/
static float updateTemperatureEsimate(float newTemp, float newCurrent)
{
    1aec:	4f 92       	push	r4
    1aee:	5f 92       	push	r5
    1af0:	6f 92       	push	r6
    1af2:	7f 92       	push	r7
    1af4:	8f 92       	push	r8
    1af6:	9f 92       	push	r9
    1af8:	af 92       	push	r10
    1afa:	bf 92       	push	r11
    1afc:	cf 92       	push	r12
    1afe:	df 92       	push	r13
    1b00:	ef 92       	push	r14
    1b02:	ff 92       	push	r15
    1b04:	0f 93       	push	r16
    1b06:	1f 93       	push	r17
    1b08:	cf 93       	push	r28
    1b0a:	df 93       	push	r29
    1b0c:	2b 01       	movw	r4, r22
    1b0e:	3c 01       	movw	r6, r24
    1b10:	69 01       	movw	r12, r18
    1b12:	7a 01       	movw	r14, r20
    float powerSupplied;
    float deltaTFinal;

    //First compute the updated temperature assuming the old deltaT with the new
    //armature reading
    oldWindingTemperature = newTemp + oldDeltaT;
    1b14:	80 90 fa 21 	lds	r8, 0x21FA
    1b18:	90 90 fb 21 	lds	r9, 0x21FB
    1b1c:	a0 90 fc 21 	lds	r10, 0x21FC
    1b20:	b0 90 fd 21 	lds	r11, 0x21FD
    1b24:	a5 01       	movw	r20, r10
    1b26:	94 01       	movw	r18, r8
    1b28:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>

    //Compute winding electrical resistance taking the temperature reading into account
    realWindingResistance = Parameter[PARAMETER_WINDING_R]*(1 + Parameter[PARAMETER_CU_ALPHA]*(oldWindingTemperature-25));
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	48 ec       	ldi	r20, 0xC8	; 200
    1b32:	51 e4       	ldi	r21, 0x41	; 65
    1b34:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1b38:	20 91 5e 22 	lds	r18, 0x225E
    1b3c:	30 91 5f 22 	lds	r19, 0x225F
    1b40:	40 91 60 22 	lds	r20, 0x2260
    1b44:	50 91 61 22 	lds	r21, 0x2261
    1b48:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1b4c:	20 e0       	ldi	r18, 0x00	; 0
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	40 e8       	ldi	r20, 0x80	; 128
    1b52:	5f e3       	ldi	r21, 0x3F	; 63
    1b54:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1b58:	20 91 46 22 	lds	r18, 0x2246
    1b5c:	30 91 47 22 	lds	r19, 0x2247
    1b60:	40 91 48 22 	lds	r20, 0x2248
    1b64:	50 91 49 22 	lds	r21, 0x2249
    1b68:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1b6c:	d6 2f       	mov	r29, r22
    1b6e:	c7 2f       	mov	r28, r23
    1b70:	18 2f       	mov	r17, r24
    1b72:	09 2f       	mov	r16, r25
    1b74:	ae 01       	movw	r20, r28
    1b76:	98 01       	movw	r18, r16
    1b78:	85 2f       	mov	r24, r21
    1b7a:	94 2f       	mov	r25, r20
    1b7c:	a3 2f       	mov	r26, r19
    1b7e:	b2 2f       	mov	r27, r18
    1b80:	80 93 2d 20 	sts	0x202D, r24
    1b84:	90 93 2e 20 	sts	0x202E, r25
    1b88:	a0 93 2f 20 	sts	0x202F, r26
    1b8c:	b0 93 30 20 	sts	0x2030, r27
    
    //Compute the power supplied to the motor
    powerSupplied = newCurrent * newCurrent * realWindingResistance;
    1b90:	c7 01       	movw	r24, r14
    1b92:	b6 01       	movw	r22, r12
    1b94:	a7 01       	movw	r20, r14
    1b96:	96 01       	movw	r18, r12
    1b98:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	a8 01       	movw	r20, r16
    1ba0:	0f 2f       	mov	r16, r31
    1ba2:	1e 2f       	mov	r17, r30
    1ba4:	25 2f       	mov	r18, r21
    1ba6:	34 2f       	mov	r19, r20
    1ba8:	a9 01       	movw	r20, r18
    1baa:	98 01       	movw	r18, r16
    1bac:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>

    //Now compute the final temperature delta that would be reached if this power were applied for a long time
    deltaTFinal = powerSupplied * Parameter[PARAMETER_THERMAL_R];
    1bb0:	20 91 4a 22 	lds	r18, 0x224A
    1bb4:	30 91 4b 22 	lds	r19, 0x224B
    1bb8:	40 91 4c 22 	lds	r20, 0x224C
    1bbc:	50 91 4d 22 	lds	r21, 0x224D
    1bc0:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1bc4:	d6 2f       	mov	r29, r22
    1bc6:	c7 2f       	mov	r28, r23
    1bc8:	18 2f       	mov	r17, r24
    1bca:	09 2f       	mov	r16, r25

    //Update the oldDeltaT value by stepping forward the discrete estimate
    oldDeltaT = deltaTFinal - (deltaTFinal - oldDeltaT) * exp(-CONTROL_LOOP_PERIOD_MS/(Parameter[PARAMETER_WINDING_TAU]));
    1bcc:	6a e9       	ldi	r22, 0x9A	; 154
    1bce:	79 e9       	ldi	r23, 0x99	; 153
    1bd0:	89 eb       	ldi	r24, 0xB9	; 185
    1bd2:	90 ec       	ldi	r25, 0xC0	; 192
    1bd4:	20 91 56 22 	lds	r18, 0x2256
    1bd8:	30 91 57 22 	lds	r19, 0x2257
    1bdc:	40 91 58 22 	lds	r20, 0x2258
    1be0:	50 91 59 22 	lds	r21, 0x2259
    1be4:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    1be8:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <exp>
    1bec:	6b 01       	movw	r12, r22
    1bee:	7c 01       	movw	r14, r24
    1bf0:	ae 01       	movw	r20, r28
    1bf2:	98 01       	movw	r18, r16
    1bf4:	85 2f       	mov	r24, r21
    1bf6:	94 2f       	mov	r25, r20
    1bf8:	a3 2f       	mov	r26, r19
    1bfa:	b2 2f       	mov	r27, r18
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	a5 01       	movw	r20, r10
    1c02:	94 01       	movw	r18, r8
    1c04:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1c08:	a7 01       	movw	r20, r14
    1c0a:	96 01       	movw	r18, r12
    1c0c:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1c10:	9b 01       	movw	r18, r22
    1c12:	ac 01       	movw	r20, r24
    1c14:	fe 01       	movw	r30, r28
    1c16:	b8 01       	movw	r22, r16
    1c18:	8f 2f       	mov	r24, r31
    1c1a:	9e 2f       	mov	r25, r30
    1c1c:	a7 2f       	mov	r26, r23
    1c1e:	b6 2f       	mov	r27, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1c28:	f6 2f       	mov	r31, r22
    1c2a:	e7 2f       	mov	r30, r23
    1c2c:	38 2f       	mov	r19, r24
    1c2e:	29 2f       	mov	r18, r25
    1c30:	df 01       	movw	r26, r30
    1c32:	c9 01       	movw	r24, r18
    1c34:	4b 2f       	mov	r20, r27
    1c36:	5a 2f       	mov	r21, r26
    1c38:	69 2f       	mov	r22, r25
    1c3a:	78 2f       	mov	r23, r24
    1c3c:	40 93 fa 21 	sts	0x21FA, r20
    1c40:	50 93 fb 21 	sts	0x21FB, r21
    1c44:	60 93 fc 21 	sts	0x21FC, r22
    1c48:	70 93 fd 21 	sts	0x21FD, r23

    if(isnan(oldDeltaT)) oldDeltaT = 130;
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	ba 01       	movw	r22, r20
    1c50:	a9 01       	movw	r20, r18
    1c52:	0b 2f       	mov	r16, r27
    1c54:	1a 2f       	mov	r17, r26
    1c56:	25 2f       	mov	r18, r21
    1c58:	34 2f       	mov	r19, r20
    1c5a:	a9 01       	movw	r20, r18
    1c5c:	98 01       	movw	r18, r16
    1c5e:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__unordsf2>
    1c62:	88 23       	and	r24, r24
    1c64:	61 f0       	breq	.+24     	; 0x1c7e <updateTemperatureEsimate+0x192>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a2 e0       	ldi	r26, 0x02	; 2
    1c6c:	b3 e4       	ldi	r27, 0x43	; 67
    1c6e:	80 93 fa 21 	sts	0x21FA, r24
    1c72:	90 93 fb 21 	sts	0x21FB, r25
    1c76:	a0 93 fc 21 	sts	0x21FC, r26
    1c7a:	b0 93 fd 21 	sts	0x21FD, r27
    if(oldDeltaT > 130) oldDeltaT = 130;
    1c7e:	60 91 fa 21 	lds	r22, 0x21FA
    1c82:	70 91 fb 21 	lds	r23, 0x21FB
    1c86:	80 91 fc 21 	lds	r24, 0x21FC
    1c8a:	90 91 fd 21 	lds	r25, 0x21FD
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	42 e0       	ldi	r20, 0x02	; 2
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	64 f4       	brge	.+24     	; 0x1cb6 <updateTemperatureEsimate+0x1ca>
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	a2 e0       	ldi	r26, 0x02	; 2
    1ca4:	b3 e4       	ldi	r27, 0x43	; 67
    1ca6:	80 93 fa 21 	sts	0x21FA, r24
    1caa:	90 93 fb 21 	sts	0x21FB, r25
    1cae:	a0 93 fc 21 	sts	0x21FC, r26
    1cb2:	b0 93 fd 21 	sts	0x21FD, r27
    if(oldDeltaT < 0) oldDeltaT = 0;
    1cb6:	60 91 fa 21 	lds	r22, 0x21FA
    1cba:	70 91 fb 21 	lds	r23, 0x21FB
    1cbe:	80 91 fc 21 	lds	r24, 0x21FC
    1cc2:	90 91 fd 21 	lds	r25, 0x21FD
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	a9 01       	movw	r20, r18
    1ccc:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    1cd0:	87 ff       	sbrs	r24, 7
    1cd2:	0b c0       	rjmp	.+22     	; 0x1cea <updateTemperatureEsimate+0x1fe>
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	dc 01       	movw	r26, r24
    1cda:	80 93 fa 21 	sts	0x21FA, r24
    1cde:	90 93 fb 21 	sts	0x21FB, r25
    1ce2:	a0 93 fc 21 	sts	0x21FC, r26
    1ce6:	b0 93 fd 21 	sts	0x21FD, r27

    return oldDeltaT + newTemp;
    1cea:	c3 01       	movw	r24, r6
    1cec:	b2 01       	movw	r22, r4
    1cee:	20 91 fa 21 	lds	r18, 0x21FA
    1cf2:	30 91 fb 21 	lds	r19, 0x21FB
    1cf6:	40 91 fc 21 	lds	r20, 0x21FC
    1cfa:	50 91 fd 21 	lds	r21, 0x21FD
    1cfe:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
}
    1d02:	46 2f       	mov	r20, r22
    1d04:	57 2f       	mov	r21, r23
    1d06:	68 2f       	mov	r22, r24
    1d08:	79 2f       	mov	r23, r25
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	ba 01       	movw	r22, r20
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	bf 90       	pop	r11
    1d20:	af 90       	pop	r10
    1d22:	9f 90       	pop	r9
    1d24:	8f 90       	pop	r8
    1d26:	7f 90       	pop	r7
    1d28:	6f 90       	pop	r6
    1d2a:	5f 90       	pop	r5
    1d2c:	4f 90       	pop	r4
    1d2e:	08 95       	ret

00001d30 <isValidOverride>:
* isValidOverride( uint16_t setpoint, PID_SCHEME_t scheme)
* returns 1 if the configured setpoint is less than the power limit
* 0 otherwise.
************************************************************************/
static uint8_t isValidOverride(uint16_t setpoint, PID_SCHEME_t scheme)
{
    1d30:	8f 92       	push	r8
    1d32:	9f 92       	push	r9
    1d34:	af 92       	push	r10
    1d36:	bf 92       	push	r11
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15
    1d40:	4c 01       	movw	r8, r24
    float maximumCurrent;
    float maximumDeltaT;
    if(scheme == CONTROL_SCHEME_CURRENT)
    1d42:	62 30       	cpi	r22, 0x02	; 2
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <isValidOverride+0x18>
    1d46:	49 c0       	rjmp	.+146    	; 0x1dda <isValidOverride+0xaa>
    {
        //The maximum current is backed out from the power that would would hit tTarget
        maximumDeltaT = Parameter[PARAMETER_T_TARGET] - statorTemperature;
    1d48:	60 91 66 22 	lds	r22, 0x2266
    1d4c:	70 91 67 22 	lds	r23, 0x2267
    1d50:	80 91 68 22 	lds	r24, 0x2268
    1d54:	90 91 69 22 	lds	r25, 0x2269
    1d58:	20 91 00 20 	lds	r18, 0x2000
    1d5c:	30 91 01 20 	lds	r19, 0x2001
    1d60:	40 91 02 20 	lds	r20, 0x2002
    1d64:	50 91 03 20 	lds	r21, 0x2003
    1d68:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1d6c:	6b 01       	movw	r12, r22
    1d6e:	7c 01       	movw	r14, r24
        maximumCurrent = sqrt(maximumDeltaT / \
                      (Parameter[PARAMETER_THERMAL_R] * realWindingResistance));
    1d70:	60 91 4a 22 	lds	r22, 0x224A
    1d74:	70 91 4b 22 	lds	r23, 0x224B
    1d78:	80 91 4c 22 	lds	r24, 0x224C
    1d7c:	90 91 4d 22 	lds	r25, 0x224D
    1d80:	20 91 2d 20 	lds	r18, 0x202D
    1d84:	30 91 2e 20 	lds	r19, 0x202E
    1d88:	40 91 2f 20 	lds	r20, 0x202F
    1d8c:	50 91 30 20 	lds	r21, 0x2030
    1d90:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1d94:	9b 01       	movw	r18, r22
    1d96:	ac 01       	movw	r20, r24
    float maximumDeltaT;
    if(scheme == CONTROL_SCHEME_CURRENT)
    {
        //The maximum current is backed out from the power that would would hit tTarget
        maximumDeltaT = Parameter[PARAMETER_T_TARGET] - statorTemperature;
        maximumCurrent = sqrt(maximumDeltaT / \
    1d98:	c7 01       	movw	r24, r14
    1d9a:	b6 01       	movw	r22, r12
    1d9c:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    1da0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <sqrt>
    1da4:	6b 01       	movw	r12, r22
    1da6:	7c 01       	movw	r14, r24
                      (Parameter[PARAMETER_THERMAL_R] * realWindingResistance));
        //Setpoint is in milliamperes.
        if(setpoint < maximumCurrent * 1000)
    1da8:	b4 01       	movw	r22, r8
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    1db2:	4b 01       	movw	r8, r22
    1db4:	5c 01       	movw	r10, r24
    1db6:	c7 01       	movw	r24, r14
    1db8:	b6 01       	movw	r22, r12
    1dba:	20 e0       	ldi	r18, 0x00	; 0
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	4a e7       	ldi	r20, 0x7A	; 122
    1dc0:	54 e4       	ldi	r21, 0x44	; 68
    1dc2:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1dc6:	9b 01       	movw	r18, r22
    1dc8:	ac 01       	movw	r20, r24
        {
            return 1;
    1dca:	c5 01       	movw	r24, r10
    1dcc:	b4 01       	movw	r22, r8
    1dce:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    1dd2:	88 1f       	adc	r24, r24
    1dd4:	88 27       	eor	r24, r24
    1dd6:	88 1f       	adc	r24, r24
    1dd8:	4e c0       	rjmp	.+156    	; 0x1e76 <isValidOverride+0x146>
        }
    }
    if(scheme == CONTROL_SCHEME_VELOCITY)
    1dda:	61 30       	cpi	r22, 0x01	; 1
    1ddc:	09 f0       	breq	.+2      	; 0x1de0 <isValidOverride+0xb0>
    1dde:	4a c0       	rjmp	.+148    	; 0x1e74 <isValidOverride+0x144>
        //velocity controller wants to go lower.  Some margin is applied to the power controller ceiling to prevent oscillations.  This means that the motor can
        //run steady state at a low velocity setpoint that is heavily loaded.  If this condition is maintained, motor temperature will continue to climb until reaching
        //Tmax.

        //The maximum current is backed out from the power that would would hit tTarget
        maximumDeltaT = Parameter[PARAMETER_T_TARGET] - statorTemperature;
    1de0:	60 91 66 22 	lds	r22, 0x2266
    1de4:	70 91 67 22 	lds	r23, 0x2267
    1de8:	80 91 68 22 	lds	r24, 0x2268
    1dec:	90 91 69 22 	lds	r25, 0x2269
    1df0:	20 91 00 20 	lds	r18, 0x2000
    1df4:	30 91 01 20 	lds	r19, 0x2001
    1df8:	40 91 02 20 	lds	r20, 0x2002
    1dfc:	50 91 03 20 	lds	r21, 0x2003
    1e00:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    1e04:	6b 01       	movw	r12, r22
    1e06:	7c 01       	movw	r14, r24
        maximumCurrent = sqrt(maximumDeltaT / \
                      (Parameter[PARAMETER_THERMAL_R] * realWindingResistance));
    1e08:	60 91 4a 22 	lds	r22, 0x224A
    1e0c:	70 91 4b 22 	lds	r23, 0x224B
    1e10:	80 91 4c 22 	lds	r24, 0x224C
    1e14:	90 91 4d 22 	lds	r25, 0x224D
    1e18:	20 91 2d 20 	lds	r18, 0x202D
    1e1c:	30 91 2e 20 	lds	r19, 0x202E
    1e20:	40 91 2f 20 	lds	r20, 0x202F
    1e24:	50 91 30 20 	lds	r21, 0x2030
    1e28:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	ac 01       	movw	r20, r24
        //run steady state at a low velocity setpoint that is heavily loaded.  If this condition is maintained, motor temperature will continue to climb until reaching
        //Tmax.

        //The maximum current is backed out from the power that would would hit tTarget
        maximumDeltaT = Parameter[PARAMETER_T_TARGET] - statorTemperature;
        maximumCurrent = sqrt(maximumDeltaT / \
    1e30:	c7 01       	movw	r24, r14
    1e32:	b6 01       	movw	r22, r12
    1e34:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    1e38:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <sqrt>
                      (Parameter[PARAMETER_THERMAL_R] * realWindingResistance));


        if((motorCurrent <= (maximumCurrent * 1.25)) && (averageRPM >= setpoint))
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	40 ea       	ldi	r20, 0xA0	; 160
    1e42:	5f e3       	ldi	r21, 0x3F	; 63
    1e44:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    1e48:	9b 01       	movw	r18, r22
    1e4a:	ac 01       	movw	r20, r24
    1e4c:	60 91 40 20 	lds	r22, 0x2040
    1e50:	70 91 41 20 	lds	r23, 0x2041
    1e54:	80 91 42 20 	lds	r24, 0x2042
    1e58:	90 91 43 20 	lds	r25, 0x2043
    1e5c:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    1e60:	18 16       	cp	r1, r24
    1e62:	44 f0       	brlt	.+16     	; 0x1e74 <isValidOverride+0x144>
/************************************************************************
* isValidOverride( uint16_t setpoint, PID_SCHEME_t scheme)
* returns 1 if the configured setpoint is less than the power limit
* 0 otherwise.
************************************************************************/
static uint8_t isValidOverride(uint16_t setpoint, PID_SCHEME_t scheme)
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	20 91 02 22 	lds	r18, 0x2202
    1e6a:	30 91 03 22 	lds	r19, 0x2203
    1e6e:	28 15       	cp	r18, r8
    1e70:	39 05       	cpc	r19, r9
    1e72:	08 f4       	brcc	.+2      	; 0x1e76 <isValidOverride+0x146>
        {
            return 1;
        }
        return 0;
    }
    return 0;
    1e74:	80 e0       	ldi	r24, 0x00	; 0
}
    1e76:	ff 90       	pop	r15
    1e78:	ef 90       	pop	r14
    1e7a:	df 90       	pop	r13
    1e7c:	cf 90       	pop	r12
    1e7e:	bf 90       	pop	r11
    1e80:	af 90       	pop	r10
    1e82:	9f 90       	pop	r9
    1e84:	8f 90       	pop	r8
    1e86:	08 95       	ret

00001e88 <thermalCheckSetpoint>:
* return THERMAL_DISCARD for delete entirely
* return THERMAL_DELAY for apply later
* return THERMAL_OK for OK
************************************************************************/
int thermalCheckSetpoint(PID_SCHEME_t newScheme, int newSetpoint)
{
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	18 2f       	mov	r17, r24
    1e90:	eb 01       	movw	r28, r22
    switch(protectionState)
    1e92:	80 91 31 20 	lds	r24, 0x2031
    1e96:	82 30       	cpi	r24, 0x02	; 2
    1e98:	c9 f1       	breq	.+114    	; 0x1f0c <thermalCheckSetpoint+0x84>
    1e9a:	83 30       	cpi	r24, 0x03	; 3
    1e9c:	38 f4       	brcc	.+14     	; 0x1eac <thermalCheckSetpoint+0x24>
    1e9e:	88 23       	and	r24, r24
    1ea0:	09 f4       	brne	.+2      	; 0x1ea4 <thermalCheckSetpoint+0x1c>
    1ea2:	4a c0       	rjmp	.+148    	; 0x1f38 <thermalCheckSetpoint+0xb0>
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	09 f0       	breq	.+2      	; 0x1eaa <thermalCheckSetpoint+0x22>
    1ea8:	41 c0       	rjmp	.+130    	; 0x1f2c <thermalCheckSetpoint+0xa4>
    1eaa:	08 c0       	rjmp	.+16     	; 0x1ebc <thermalCheckSetpoint+0x34>
    1eac:	85 30       	cpi	r24, 0x05	; 5
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <thermalCheckSetpoint+0x2a>
    1eb0:	43 c0       	rjmp	.+134    	; 0x1f38 <thermalCheckSetpoint+0xb0>
    1eb2:	86 30       	cpi	r24, 0x06	; 6
    1eb4:	69 f0       	breq	.+26     	; 0x1ed0 <thermalCheckSetpoint+0x48>
    1eb6:	83 30       	cpi	r24, 0x03	; 3
    1eb8:	c9 f5       	brne	.+114    	; 0x1f2c <thermalCheckSetpoint+0xa4>
    1eba:	3e c0       	rjmp	.+124    	; 0x1f38 <thermalCheckSetpoint+0xb0>
            return THERMAL_OK;
        case MANDATORY_COOLDOWN:
            //No command is valid.  In addition, do not store the command for application after cooldown
            return THERMAL_DISCARD;
        case THERMAL_OVERLOAD:
            if(isValidOverride(newSetpoint, newScheme) == 1)
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	61 2f       	mov	r22, r17
    1ec0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <isValidOverride>
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	a9 f5       	brne	.+106    	; 0x1f32 <thermalCheckSetpoint+0xaa>
            {
                //The is a valid override
                protectionState = THERMAL_OVERLOAD_OVERRIDE;
    1ec8:	86 e0       	ldi	r24, 0x06	; 6
    1eca:	80 93 31 20 	sts	0x2031, r24
    1ece:	34 c0       	rjmp	.+104    	; 0x1f38 <thermalCheckSetpoint+0xb0>
            } else {
                //Delay application.
                return THERMAL_DELAY;
            }
        case THERMAL_OVERLOAD_OVERRIDE:
            if((statorTemperature + oldDeltaT) < Parameter[PARAMETER_T_PLUS])
    1ed0:	60 91 00 20 	lds	r22, 0x2000
    1ed4:	70 91 01 20 	lds	r23, 0x2001
    1ed8:	80 91 02 20 	lds	r24, 0x2002
    1edc:	90 91 03 20 	lds	r25, 0x2003
    1ee0:	20 91 fa 21 	lds	r18, 0x21FA
    1ee4:	30 91 fb 21 	lds	r19, 0x21FB
    1ee8:	40 91 fc 21 	lds	r20, 0x21FC
    1eec:	50 91 fd 21 	lds	r21, 0x21FD
    1ef0:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    1ef4:	20 91 4e 22 	lds	r18, 0x224E
    1ef8:	30 91 4f 22 	lds	r19, 0x224F
    1efc:	40 91 50 22 	lds	r20, 0x2250
    1f00:	50 91 51 22 	lds	r21, 0x2251
    1f04:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    1f08:	87 ff       	sbrs	r24, 7
    1f0a:	03 c0       	rjmp	.+6      	; 0x1f12 <thermalCheckSetpoint+0x8a>
            {
                protectionState = NORMAL_OPERATION;
    1f0c:	10 92 31 20 	sts	0x2031, r1
    1f10:	13 c0       	rjmp	.+38     	; 0x1f38 <thermalCheckSetpoint+0xb0>
                return THERMAL_OK;
            } else if(isValidOverride(newSetpoint, newScheme) == 1)
    1f12:	ce 01       	movw	r24, r28
    1f14:	61 2f       	mov	r22, r17
    1f16:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <isValidOverride>
    1f1a:	81 30       	cpi	r24, 0x01	; 1
    1f1c:	69 f0       	breq	.+26     	; 0x1f38 <thermalCheckSetpoint+0xb0>
            {
                //The motor is still in a valid override, so apply immediately
                return THERMAL_OK;
            } else {
                //Not a valid override.  Go back to normal OVERLOAD and delay
                protectionState = THERMAL_OVERLOAD;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 31 20 	sts	0x2031, r24
                PIDPreset(CONTROL_SCHEME_POWER);
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <PIDPreset>
    1f2a:	03 c0       	rjmp	.+6      	; 0x1f32 <thermalCheckSetpoint+0xaa>
            //Any command is OK
            protectionState = NORMAL_OPERATION;
            return THERMAL_OK;
        case MANDATORY_COOLDOWN:
            //No command is valid.  In addition, do not store the command for application after cooldown
            return THERMAL_DISCARD;
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <thermalCheckSetpoint+0xb4>
                //The is a valid override
                protectionState = THERMAL_OVERLOAD_OVERRIDE;
                return THERMAL_OK;
            } else {
                //Delay application.
                return THERMAL_DELAY;
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <thermalCheckSetpoint+0xb4>
                protectionState = NORMAL_OPERATION;
                return THERMAL_OK;
            } else if(isValidOverride(newSetpoint, newScheme) == 1)
            {
                //The motor is still in a valid override, so apply immediately
                return THERMAL_OK;
    1f38:	82 e0       	ldi	r24, 0x02	; 2
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
                return THERMAL_DELAY;
            }
        default:
            return THERMAL_DISCARD;
    }
}
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	08 95       	ret

00001f44 <getWindingResistance>:
* Returns the current winding resistance estimate
************************************************************************/
float getWindingResistance(void)
{
    return realWindingResistance;
}
    1f44:	50 91 2d 20 	lds	r21, 0x202D
    1f48:	40 91 2e 20 	lds	r20, 0x202E
    1f4c:	30 91 2f 20 	lds	r19, 0x202F
    1f50:	20 91 30 20 	lds	r18, 0x2030
    1f54:	85 2f       	mov	r24, r21
    1f56:	94 2f       	mov	r25, r20
    1f58:	a3 2f       	mov	r26, r19
    1f5a:	b2 2f       	mov	r27, r18
    1f5c:	bc 01       	movw	r22, r24
    1f5e:	cd 01       	movw	r24, r26
    1f60:	08 95       	ret

00001f62 <getPowerSetpoint>:
*
* Returns the power setpoint appropriate for the motor if in THERMAL_OVERLOAD
* Will return a negative number if power should not be used.
************************************************************************/
float getPowerSetpoint(void)
{
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    float powerSetpoint;
    float maximumDeltaD;
    if((protectionState == THERMAL_OVERLOAD) || \
    1f6a:	80 91 31 20 	lds	r24, 0x2031
    1f6e:	81 50       	subi	r24, 0x01	; 1
    1f70:	82 30       	cpi	r24, 0x02	; 2
    1f72:	90 f5       	brcc	.+100    	; 0x1fd8 <getPowerSetpoint+0x76>
       (protectionState == THERMAL_WARNING)) {
        maximumDeltaD = Parameter[PARAMETER_T_TARGET] - statorTemperature;
    1f74:	60 91 66 22 	lds	r22, 0x2266
    1f78:	70 91 67 22 	lds	r23, 0x2267
    1f7c:	80 91 68 22 	lds	r24, 0x2268
    1f80:	90 91 69 22 	lds	r25, 0x2269
    1f84:	20 91 00 20 	lds	r18, 0x2000
    1f88:	30 91 01 20 	lds	r19, 0x2001
    1f8c:	40 91 02 20 	lds	r20, 0x2002
    1f90:	50 91 03 20 	lds	r21, 0x2003
    1f94:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
       powerSetpoint = maximumDeltaD / Parameter[PARAMETER_THERMAL_R];
    1f98:	20 91 4a 22 	lds	r18, 0x224A
    1f9c:	30 91 4b 22 	lds	r19, 0x224B
    1fa0:	40 91 4c 22 	lds	r20, 0x224C
    1fa4:	50 91 4d 22 	lds	r21, 0x224D
    1fa8:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    1fac:	8b 01       	movw	r16, r22
    1fae:	d8 2f       	mov	r29, r24
    1fb0:	c9 2f       	mov	r28, r25
       if (powerSetpoint < 0)
    1fb2:	9e 01       	movw	r18, r28
    1fb4:	86 2f       	mov	r24, r22
    1fb6:	91 2f       	mov	r25, r17
    1fb8:	a3 2f       	mov	r26, r19
    1fba:	b2 2f       	mov	r27, r18
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	a9 01       	movw	r20, r18
    1fc6:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    1fca:	87 ff       	sbrs	r24, 7
    1fcc:	09 c0       	rjmp	.+18     	; 0x1fe0 <getPowerSetpoint+0x7e>
       {
           return 0.0;
    1fce:	00 e0       	ldi	r16, 0x00	; 0
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	d0 e0       	ldi	r29, 0x00	; 0
    1fd4:	c0 e0       	ldi	r28, 0x00	; 0
    1fd6:	04 c0       	rjmp	.+8      	; 0x1fe0 <getPowerSetpoint+0x7e>
       } else {
           return powerSetpoint;
       }
    } else {
       return -1.0;
    1fd8:	00 e0       	ldi	r16, 0x00	; 0
    1fda:	10 e0       	ldi	r17, 0x00	; 0
    1fdc:	d0 e8       	ldi	r29, 0x80	; 128
    1fde:	cf eb       	ldi	r28, 0xBF	; 191
    }
}
    1fe0:	9e 01       	movw	r18, r28
    1fe2:	80 2f       	mov	r24, r16
    1fe4:	91 2f       	mov	r25, r17
    1fe6:	a3 2f       	mov	r26, r19
    1fe8:	bc 2f       	mov	r27, r28
    1fea:	bc 01       	movw	r22, r24
    1fec:	cd 01       	movw	r24, r26
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	08 95       	ret

00001ff8 <updateThermalModel>:
* variable.  This state can override the PID controller with a power
* limiting mode of operation
************************************************************************/

void updateThermalModel(float newTemp, float newCurrent)
{
    1ff8:	cf 92       	push	r12
    1ffa:	df 92       	push	r13
    1ffc:	ef 92       	push	r14
    1ffe:	ff 92       	push	r15
    float estimatedWindingTemperature;
    switch(protectionState)
    2000:	e0 91 31 20 	lds	r30, 0x2031
    2004:	e3 30       	cpi	r30, 0x03	; 3
    2006:	41 f1       	breq	.+80     	; 0x2058 <updateThermalModel+0x60>
    2008:	e4 30       	cpi	r30, 0x04	; 4
    200a:	38 f4       	brcc	.+14     	; 0x201a <updateThermalModel+0x22>
    200c:	e1 30       	cpi	r30, 0x01	; 1
    200e:	09 f4       	brne	.+2      	; 0x2012 <updateThermalModel+0x1a>
    2010:	85 c0       	rjmp	.+266    	; 0x211c <updateThermalModel+0x124>
    2012:	e2 30       	cpi	r30, 0x02	; 2
    2014:	08 f0       	brcs	.+2      	; 0x2018 <updateThermalModel+0x20>
    2016:	ee c0       	rjmp	.+476    	; 0x21f4 <updateThermalModel+0x1fc>
    2018:	5b c0       	rjmp	.+182    	; 0x20d0 <updateThermalModel+0xd8>
    201a:	e5 30       	cpi	r30, 0x05	; 5
    201c:	09 f4       	brne	.+2      	; 0x2020 <updateThermalModel+0x28>
    201e:	60 c1       	rjmp	.+704    	; 0x22e0 <updateThermalModel+0x2e8>
    2020:	e5 30       	cpi	r30, 0x05	; 5
    2022:	20 f0       	brcs	.+8      	; 0x202c <updateThermalModel+0x34>
    2024:	e6 30       	cpi	r30, 0x06	; 6
    2026:	09 f0       	breq	.+2      	; 0x202a <updateThermalModel+0x32>
    2028:	61 c1       	rjmp	.+706    	; 0x22ec <updateThermalModel+0x2f4>
    202a:	b0 c0       	rjmp	.+352    	; 0x218c <updateThermalModel+0x194>
    {
        case MANDATORY_COOLDOWN:
            //It is startup or an over-temperature condition. Decrement the cooldown timer until the motor can power up
            updateTemperatureEsimate(newTemp, newCurrent);
    202c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <updateTemperatureEsimate>
            if(cooldownTimeRemaining > 0)
    2030:	c0 90 fe 21 	lds	r12, 0x21FE
    2034:	d0 90 ff 21 	lds	r13, 0x21FF
    2038:	e0 90 00 22 	lds	r14, 0x2200
    203c:	f0 90 01 22 	lds	r15, 0x2201
    2040:	c7 01       	movw	r24, r14
    2042:	b6 01       	movw	r22, r12
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	a9 01       	movw	r20, r18
    204a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    204e:	18 16       	cp	r1, r24
    2050:	a4 f4       	brge	.+40     	; 0x207a <updateThermalModel+0x82>
            {
                cooldownTimeRemaining = cooldownTimeRemaining - CONTROL_LOOP_PERIOD_MS;
    2052:	c7 01       	movw	r24, r14
    2054:	b6 01       	movw	r22, r12
    2056:	2b c0       	rjmp	.+86     	; 0x20ae <updateThermalModel+0xb6>
                protectionState = STOPPED;
            }
            break;
        case NORMAL_COOLDOWN:
            //The motor has been stopped and is cooling down.  Decrement the counter unless it has been started again
            updateTemperatureEsimate(newTemp, newCurrent);
    2058:	0e 94 76 0d 	call	0x1aec	; 0x1aec <updateTemperatureEsimate>
            if(cooldownTimeRemaining <= 0)
    205c:	60 91 fe 21 	lds	r22, 0x21FE
    2060:	70 91 ff 21 	lds	r23, 0x21FF
    2064:	80 91 00 22 	lds	r24, 0x2200
    2068:	90 91 01 22 	lds	r25, 0x2201
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	a9 01       	movw	r20, r18
    2072:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    2076:	18 16       	cp	r1, r24
    2078:	6c f0       	brlt	.+26     	; 0x2094 <updateThermalModel+0x9c>
            {
                //Cooldown complete.  Force temperature to zero
                oldDeltaT = 0.0;
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	dc 01       	movw	r26, r24
    2080:	80 93 fa 21 	sts	0x21FA, r24
    2084:	90 93 fb 21 	sts	0x21FB, r25
    2088:	a0 93 fc 21 	sts	0x21FC, r26
    208c:	b0 93 fd 21 	sts	0x21FD, r27
                protectionState = STOPPED;
    2090:	85 e0       	ldi	r24, 0x05	; 5
    2092:	0e c1       	rjmp	.+540    	; 0x22b0 <updateThermalModel+0x2b8>
            } else if(getMotorDirection() == DIRECTION_STOP)
    2094:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    2098:	88 23       	and	r24, r24
    209a:	09 f0       	breq	.+2      	; 0x209e <updateThermalModel+0xa6>
    209c:	25 c1       	rjmp	.+586    	; 0x22e8 <updateThermalModel+0x2f0>
            {
                cooldownTimeRemaining = cooldownTimeRemaining - CONTROL_LOOP_PERIOD_MS;
    209e:	60 91 fe 21 	lds	r22, 0x21FE
    20a2:	70 91 ff 21 	lds	r23, 0x21FF
    20a6:	80 91 00 22 	lds	r24, 0x2200
    20aa:	90 91 01 22 	lds	r25, 0x2201
    20ae:	2a e9       	ldi	r18, 0x9A	; 154
    20b0:	39 e9       	ldi	r19, 0x99	; 153
    20b2:	49 eb       	ldi	r20, 0xB9	; 185
    20b4:	50 e4       	ldi	r21, 0x40	; 64
    20b6:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	80 93 fe 21 	sts	0x21FE, r24
    20c2:	90 93 ff 21 	sts	0x21FF, r25
    20c6:	a0 93 00 22 	sts	0x2200, r26
    20ca:	b0 93 01 22 	sts	0x2201, r27
    20ce:	0e c1       	rjmp	.+540    	; 0x22ec <updateThermalModel+0x2f4>
                protectionState = NORMAL_OPERATION;
            }
            break;
        case NORMAL_OPERATION:
            //Check for over temperature or cooldown conditions
            estimatedWindingTemperature = updateTemperatureEsimate(newTemp, newCurrent);
    20d0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <updateTemperatureEsimate>
    20d4:	6b 01       	movw	r12, r22
    20d6:	7c 01       	movw	r14, r24
            if(getMotorDirection() == DIRECTION_STOP)
    20d8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    20dc:	88 23       	and	r24, r24
    20de:	09 f4       	brne	.+2      	; 0x20e2 <updateThermalModel+0xea>
    20e0:	91 c0       	rjmp	.+290    	; 0x2204 <updateThermalModel+0x20c>
            {
                //Begin cooldown
                protectionState = NORMAL_COOLDOWN;
                cooldownTimeRemaining = Parameter[PARAMETER_OFF_TIME] * Parameter[PARAMETER_WINDING_TAU];
            } else if(estimatedWindingTemperature >= Parameter[PARAMETER_T_MAX])
    20e2:	c7 01       	movw	r24, r14
    20e4:	b6 01       	movw	r22, r12
    20e6:	20 91 5a 22 	lds	r18, 0x225A
    20ea:	30 91 5b 22 	lds	r19, 0x225B
    20ee:	40 91 5c 22 	lds	r20, 0x225C
    20f2:	50 91 5d 22 	lds	r21, 0x225D
    20f6:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    20fa:	87 ff       	sbrs	r24, 7
    20fc:	a7 c0       	rjmp	.+334    	; 0x224c <updateThermalModel+0x254>
            {
                protectionState = MANDATORY_COOLDOWN;
                cooldownTimeRemaining = Parameter[PARAMETER_OFF_TIME] * Parameter[PARAMETER_WINDING_TAU];
                updateMotorDirection(DIRECTION_STOP);
            } else if(estimatedWindingTemperature >= Parameter[PARAMETER_T_PLUS])
    20fe:	c7 01       	movw	r24, r14
    2100:	b6 01       	movw	r22, r12
    2102:	20 91 4e 22 	lds	r18, 0x224E
    2106:	30 91 4f 22 	lds	r19, 0x224F
    210a:	40 91 50 22 	lds	r20, 0x2250
    210e:	50 91 51 22 	lds	r21, 0x2251
    2112:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    2116:	87 fd       	sbrc	r24, 7
    2118:	e9 c0       	rjmp	.+466    	; 0x22ec <updateThermalModel+0x2f4>
    211a:	67 c0       	rjmp	.+206    	; 0x21ea <updateThermalModel+0x1f2>
                PIDPreset(CONTROL_SCHEME_POWER);
            }
            break;
        case THERMAL_OVERLOAD:
            //Check for a low enough temperature to exit overload or stopped operation
            estimatedWindingTemperature = updateTemperatureEsimate(newTemp, newCurrent);
    211c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <updateTemperatureEsimate>
    2120:	6b 01       	movw	r12, r22
    2122:	7c 01       	movw	r14, r24
            if(getMotorDirection() == DIRECTION_STOP)
    2124:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    2128:	88 23       	and	r24, r24
    212a:	09 f4       	brne	.+2      	; 0x212e <updateThermalModel+0x136>
    212c:	6b c0       	rjmp	.+214    	; 0x2204 <updateThermalModel+0x20c>
            {
                //Begin cooldown
                protectionState = NORMAL_COOLDOWN;
                cooldownTimeRemaining = Parameter[PARAMETER_OFF_TIME] * Parameter[PARAMETER_WINDING_TAU];
            } else if(estimatedWindingTemperature >= Parameter[PARAMETER_T_MAX])
    212e:	c7 01       	movw	r24, r14
    2130:	b6 01       	movw	r22, r12
    2132:	20 91 5a 22 	lds	r18, 0x225A
    2136:	30 91 5b 22 	lds	r19, 0x225B
    213a:	40 91 5c 22 	lds	r20, 0x225C
    213e:	50 91 5d 22 	lds	r21, 0x225D
    2142:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    2146:	87 ff       	sbrs	r24, 7
    2148:	81 c0       	rjmp	.+258    	; 0x224c <updateThermalModel+0x254>
            {
                protectionState = MANDATORY_COOLDOWN;
                cooldownTimeRemaining = Parameter[PARAMETER_OFF_TIME] * Parameter[PARAMETER_WINDING_TAU];
                updateMotorDirection(DIRECTION_STOP);
            } else if(estimatedWindingTemperature < Parameter[PARAMETER_T_PLUS])
    214a:	c7 01       	movw	r24, r14
    214c:	b6 01       	movw	r22, r12
    214e:	20 91 4e 22 	lds	r18, 0x224E
    2152:	30 91 4f 22 	lds	r19, 0x224F
    2156:	40 91 50 22 	lds	r20, 0x2250
    215a:	50 91 51 22 	lds	r21, 0x2251
    215e:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    2162:	87 ff       	sbrs	r24, 7
    2164:	02 c0       	rjmp	.+4      	; 0x216a <updateThermalModel+0x172>
            {
                //Switch to warning mode.  PID loop will catch it
                protectionState = THERMAL_WARNING;
    2166:	82 e0       	ldi	r24, 0x02	; 2
    2168:	a3 c0       	rjmp	.+326    	; 0x22b0 <updateThermalModel+0x2b8>
            } else if(isValidOverride(PID_state.setpoint,PID_state.controlScheme) == 1)
    216a:	c0 90 1f 22 	lds	r12, 0x221F
    216e:	80 91 20 22 	lds	r24, 0x2220
    2172:	90 91 21 22 	lds	r25, 0x2221
    2176:	6c 2d       	mov	r22, r12
    2178:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <isValidOverride>
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	09 f0       	breq	.+2      	; 0x2182 <updateThermalModel+0x18a>
    2180:	b5 c0       	rjmp	.+362    	; 0x22ec <updateThermalModel+0x2f4>
            {
                //The setpoint is appropriate for OVERRIDE
                //Preset the PID
                PIDPreset(PID_state.controlScheme);
    2182:	8c 2d       	mov	r24, r12
    2184:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <PIDPreset>
                protectionState = THERMAL_OVERLOAD_OVERRIDE;
    2188:	86 e0       	ldi	r24, 0x06	; 6
    218a:	92 c0       	rjmp	.+292    	; 0x22b0 <updateThermalModel+0x2b8>
            }
            break;
        case THERMAL_OVERLOAD_OVERRIDE:
            //Check for a low enough temperature to exit overload or stopped operation
            estimatedWindingTemperature = updateTemperatureEsimate(newTemp, newCurrent);
    218c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <updateTemperatureEsimate>
    2190:	6b 01       	movw	r12, r22
    2192:	7c 01       	movw	r14, r24
            if(getMotorDirection() == DIRECTION_STOP)
    2194:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    2198:	88 23       	and	r24, r24
    219a:	a1 f1       	breq	.+104    	; 0x2204 <updateThermalModel+0x20c>
            {
                //Begin cooldown
                protectionState = NORMAL_COOLDOWN;
                cooldownTimeRemaining = Parameter[PARAMETER_OFF_TIME] * Parameter[PARAMETER_WINDING_TAU];
            } else if(estimatedWindingTemperature >= Parameter[PARAMETER_T_MAX])
    219c:	c7 01       	movw	r24, r14
    219e:	b6 01       	movw	r22, r12
    21a0:	20 91 5a 22 	lds	r18, 0x225A
    21a4:	30 91 5b 22 	lds	r19, 0x225B
    21a8:	40 91 5c 22 	lds	r20, 0x225C
    21ac:	50 91 5d 22 	lds	r21, 0x225D
    21b0:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    21b4:	87 ff       	sbrs	r24, 7
    21b6:	4a c0       	rjmp	.+148    	; 0x224c <updateThermalModel+0x254>
            {
                protectionState = MANDATORY_COOLDOWN;
                cooldownTimeRemaining = Parameter[PARAMETER_OFF_TIME] * Parameter[PARAMETER_WINDING_TAU];
                updateMotorDirection(DIRECTION_STOP);
            } else if(estimatedWindingTemperature < Parameter[PARAMETER_T_MINUS])
    21b8:	c7 01       	movw	r24, r14
    21ba:	b6 01       	movw	r22, r12
    21bc:	20 91 52 22 	lds	r18, 0x2252
    21c0:	30 91 53 22 	lds	r19, 0x2253
    21c4:	40 91 54 22 	lds	r20, 0x2254
    21c8:	50 91 55 22 	lds	r21, 0x2255
    21cc:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    21d0:	87 fd       	sbrc	r24, 7
    21d2:	7f c0       	rjmp	.+254    	; 0x22d2 <updateThermalModel+0x2da>
            {
                //Switch to normal mode.  PID loop will catch it
                protectionState = NORMAL_OPERATION;
                PIDPreset(PID_state.controlScheme);
            } else if(isValidOverride(PID_state.setpoint,PID_state.controlScheme) == 0)
    21d4:	80 91 20 22 	lds	r24, 0x2220
    21d8:	90 91 21 22 	lds	r25, 0x2221
    21dc:	60 91 1f 22 	lds	r22, 0x221F
    21e0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <isValidOverride>
    21e4:	88 23       	and	r24, r24
    21e6:	09 f0       	breq	.+2      	; 0x21ea <updateThermalModel+0x1f2>
    21e8:	81 c0       	rjmp	.+258    	; 0x22ec <updateThermalModel+0x2f4>
            {
                //The setpoint is not appropriate for OVERRIDE.  Go back to OVERLOAD
                protectionState = THERMAL_OVERLOAD;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	80 93 31 20 	sts	0x2031, r24
                PIDPreset(CONTROL_SCHEME_POWER);
    21f0:	83 e0       	ldi	r24, 0x03	; 3
    21f2:	73 c0       	rjmp	.+230    	; 0x22da <updateThermalModel+0x2e2>
            }
            break;
        case THERMAL_WARNING:
            //Check for entrance into overload or warning
            estimatedWindingTemperature = updateTemperatureEsimate(newTemp, newCurrent);
    21f4:	0e 94 76 0d 	call	0x1aec	; 0x1aec <updateTemperatureEsimate>
    21f8:	6b 01       	movw	r12, r22
    21fa:	7c 01       	movw	r14, r24
            if(getMotorDirection() == DIRECTION_STOP)
    21fc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    2200:	88 23       	and	r24, r24
    2202:	b1 f4       	brne	.+44     	; 0x2230 <updateThermalModel+0x238>
            {
                //Begin cooldown
                protectionState = NORMAL_COOLDOWN;
    2204:	83 e0       	ldi	r24, 0x03	; 3
    2206:	80 93 31 20 	sts	0x2031, r24
                cooldownTimeRemaining = Parameter[PARAMETER_OFF_TIME] * Parameter[PARAMETER_WINDING_TAU];
    220a:	60 91 62 22 	lds	r22, 0x2262
    220e:	70 91 63 22 	lds	r23, 0x2263
    2212:	80 91 64 22 	lds	r24, 0x2264
    2216:	90 91 65 22 	lds	r25, 0x2265
    221a:	20 91 56 22 	lds	r18, 0x2256
    221e:	30 91 57 22 	lds	r19, 0x2257
    2222:	40 91 58 22 	lds	r20, 0x2258
    2226:	50 91 59 22 	lds	r21, 0x2259
    222a:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    222e:	45 cf       	rjmp	.-374    	; 0x20ba <updateThermalModel+0xc2>
            } else if(estimatedWindingTemperature >= Parameter[PARAMETER_T_MAX])
    2230:	c7 01       	movw	r24, r14
    2232:	b6 01       	movw	r22, r12
    2234:	20 91 5a 22 	lds	r18, 0x225A
    2238:	30 91 5b 22 	lds	r19, 0x225B
    223c:	40 91 5c 22 	lds	r20, 0x225C
    2240:	50 91 5d 22 	lds	r21, 0x225D
    2244:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    2248:	87 fd       	sbrc	r24, 7
    224a:	23 c0       	rjmp	.+70     	; 0x2292 <updateThermalModel+0x29a>
            {
                protectionState = MANDATORY_COOLDOWN;
    224c:	84 e0       	ldi	r24, 0x04	; 4
    224e:	80 93 31 20 	sts	0x2031, r24
                cooldownTimeRemaining = Parameter[PARAMETER_OFF_TIME] * Parameter[PARAMETER_WINDING_TAU];
    2252:	60 91 62 22 	lds	r22, 0x2262
    2256:	70 91 63 22 	lds	r23, 0x2263
    225a:	80 91 64 22 	lds	r24, 0x2264
    225e:	90 91 65 22 	lds	r25, 0x2265
    2262:	20 91 56 22 	lds	r18, 0x2256
    2266:	30 91 57 22 	lds	r19, 0x2257
    226a:	40 91 58 22 	lds	r20, 0x2258
    226e:	50 91 59 22 	lds	r21, 0x2259
    2272:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	80 93 fe 21 	sts	0x21FE, r24
    227e:	90 93 ff 21 	sts	0x21FF, r25
    2282:	a0 93 00 22 	sts	0x2200, r26
    2286:	b0 93 01 22 	sts	0x2201, r27
                updateMotorDirection(DIRECTION_STOP);
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	0e 94 3c 07 	call	0xe78	; 0xe78 <updateMotorDirection>
    2290:	2d c0       	rjmp	.+90     	; 0x22ec <updateThermalModel+0x2f4>
            } else if(estimatedWindingTemperature >= Parameter[PARAMETER_T_PLUS])
    2292:	c7 01       	movw	r24, r14
    2294:	b6 01       	movw	r22, r12
    2296:	20 91 4e 22 	lds	r18, 0x224E
    229a:	30 91 4f 22 	lds	r19, 0x224F
    229e:	40 91 50 22 	lds	r20, 0x2250
    22a2:	50 91 51 22 	lds	r21, 0x2251
    22a6:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    22aa:	87 fd       	sbrc	r24, 7
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <updateThermalModel+0x2be>
            {
                //Switch to overload mode.  No need to preset because was already in power control
                protectionState = THERMAL_OVERLOAD;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	80 93 31 20 	sts	0x2031, r24
    22b4:	1b c0       	rjmp	.+54     	; 0x22ec <updateThermalModel+0x2f4>
            } else if(estimatedWindingTemperature < Parameter[PARAMETER_T_MINUS])
    22b6:	c7 01       	movw	r24, r14
    22b8:	b6 01       	movw	r22, r12
    22ba:	20 91 52 22 	lds	r18, 0x2252
    22be:	30 91 53 22 	lds	r19, 0x2253
    22c2:	40 91 54 22 	lds	r20, 0x2254
    22c6:	50 91 55 22 	lds	r21, 0x2255
    22ca:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    22ce:	87 ff       	sbrs	r24, 7
    22d0:	0d c0       	rjmp	.+26     	; 0x22ec <updateThermalModel+0x2f4>
            {
                //Full exit from thermal control
                protectionState = NORMAL_OPERATION;
    22d2:	10 92 31 20 	sts	0x2031, r1
                PIDPreset(PID_state.controlScheme);
    22d6:	80 91 1f 22 	lds	r24, 0x221F
    22da:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <PIDPreset>
    22de:	06 c0       	rjmp	.+12     	; 0x22ec <updateThermalModel+0x2f4>
            }
            break;
        case STOPPED:
            //Do not update the temperature with the exponential.
            if(getMotorDirection() != DIRECTION_STOP)
    22e0:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    22e4:	88 23       	and	r24, r24
    22e6:	11 f0       	breq	.+4      	; 0x22ec <updateThermalModel+0x2f4>
            {
                //Motor has started
                protectionState = NORMAL_OPERATION;
    22e8:	10 92 31 20 	sts	0x2031, r1
            break;
        default:
            break;
    }
    return;
}
    22ec:	ff 90       	pop	r15
    22ee:	ef 90       	pop	r14
    22f0:	df 90       	pop	r13
    22f2:	cf 90       	pop	r12
    22f4:	08 95       	ret

000022f6 <Thermistor_VtoR>:
*                pullup fixed R inputs.
*                Vt = Vp * (Rt / (Rt + Rp))
*                -> Rt = (Vt*Rp)/(Vp - Vt)
************************************************************************/
float Thermistor_VtoR(float ThermistorVoltage)
{
    22f6:	cf 92       	push	r12
    22f8:	df 92       	push	r13
    22fa:	ef 92       	push	r14
    22fc:	ff 92       	push	r15
    22fe:	0f 93       	push	r16
    2300:	1f 93       	push	r17
    2302:	cf 93       	push	r28
    2304:	df 93       	push	r29
    2306:	6b 01       	movw	r12, r22
    2308:	7c 01       	movw	r14, r24
    float ThermistorR;

    ThermistorR = ThermistorVoltage * THERMISTOR_FIXED_R;
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e4       	ldi	r19, 0x40	; 64
    230e:	4c e1       	ldi	r20, 0x1C	; 28
    2310:	56 e4       	ldi	r21, 0x46	; 70
    2312:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    2316:	d6 2f       	mov	r29, r22
    2318:	c7 2f       	mov	r28, r23
    231a:	18 2f       	mov	r17, r24
    231c:	09 2f       	mov	r16, r25
    ThermistorR /= (THERMISTOR_PULLUP_VOLTAGE - ThermistorVoltage);
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	80 e2       	ldi	r24, 0x20	; 32
    2324:	90 e4       	ldi	r25, 0x40	; 64
    2326:	a7 01       	movw	r20, r14
    2328:	96 01       	movw	r18, r12
    232a:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>
    232e:	9b 01       	movw	r18, r22
    2330:	ac 01       	movw	r20, r24
    2332:	fe 01       	movw	r30, r28
    2334:	b8 01       	movw	r22, r16
    2336:	8f 2f       	mov	r24, r31
    2338:	9e 2f       	mov	r25, r30
    233a:	a7 2f       	mov	r26, r23
    233c:	b6 2f       	mov	r27, r22
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>

    return ThermistorR;

}    // End of Thermistor_VtoR //
    2346:	46 2f       	mov	r20, r22
    2348:	57 2f       	mov	r21, r23
    234a:	68 2f       	mov	r22, r24
    234c:	79 2f       	mov	r23, r25
    234e:	cb 01       	movw	r24, r22
    2350:	ba 01       	movw	r22, r20
    2352:	df 91       	pop	r29
    2354:	cf 91       	pop	r28
    2356:	1f 91       	pop	r17
    2358:	0f 91       	pop	r16
    235a:	ff 90       	pop	r15
    235c:	ef 90       	pop	r14
    235e:	df 90       	pop	r13
    2360:	cf 90       	pop	r12
    2362:	08 95       	ret

00002364 <Thermistor_RtoT>:
*                Takes measured thermistor resistance, nominal resistance,
*                nominal temperature, and thermistor B constant as inputs.
*                (1/T) = (1/Tnom) + (1/B)* ln(R/Rnom)
************************************************************************/
float Thermistor_RtoT(float MeasR)
{
    2364:	0f 93       	push	r16
    2366:	1f 93       	push	r17
    float T;

    T = log(MeasR / THERMISTOR_NOMINAL_R);
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e4       	ldi	r19, 0x40	; 64
    236c:	4c e1       	ldi	r20, 0x1C	; 28
    236e:	56 e4       	ldi	r21, 0x46	; 70
    2370:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    2374:	0e 94 16 1c 	call	0x382c	; 0x382c <log>
    T *= (1/THERMISTOR_B);
    2378:	26 ef       	ldi	r18, 0xF6	; 246
    237a:	3d ee       	ldi	r19, 0xED	; 237
    237c:	43 e8       	ldi	r20, 0x83	; 131
    237e:	59 e3       	ldi	r21, 0x39	; 57
    2380:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    T += (1/THERMISTOR_NOMINAL_T);
    2384:	46 2f       	mov	r20, r22
    2386:	57 2f       	mov	r21, r23
    2388:	68 2f       	mov	r22, r24
    238a:	79 2f       	mov	r23, r25
    238c:	cb 01       	movw	r24, r22
    238e:	ba 01       	movw	r22, r20
    2390:	2f e0       	ldi	r18, 0x0F	; 15
    2392:	3f ec       	ldi	r19, 0xCF	; 207
    2394:	4b e5       	ldi	r20, 0x5B	; 91
    2396:	5b e3       	ldi	r21, 0x3B	; 59
    2398:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    239c:	b6 2f       	mov	r27, r22
    239e:	a7 2f       	mov	r26, r23
    23a0:	38 2f       	mov	r19, r24
    23a2:	29 2f       	mov	r18, r25
    T = (1/T);
    23a4:	60 e0       	ldi	r22, 0x00	; 0
    23a6:	70 e0       	ldi	r23, 0x00	; 0
    23a8:	80 e8       	ldi	r24, 0x80	; 128
    23aa:	9f e3       	ldi	r25, 0x3F	; 63
    23ac:	fd 01       	movw	r30, r26
    23ae:	a9 01       	movw	r20, r18
    23b0:	0f 2f       	mov	r16, r31
    23b2:	1e 2f       	mov	r17, r30
    23b4:	25 2f       	mov	r18, r21
    23b6:	34 2f       	mov	r19, r20
    23b8:	a9 01       	movw	r20, r18
    23ba:	98 01       	movw	r18, r16
    23bc:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    T -= 273.15;         //Convert from K to C
    23c0:	46 2f       	mov	r20, r22
    23c2:	57 2f       	mov	r21, r23
    23c4:	68 2f       	mov	r22, r24
    23c6:	79 2f       	mov	r23, r25
    23c8:	cb 01       	movw	r24, r22
    23ca:	ba 01       	movw	r22, r20
    23cc:	23 e3       	ldi	r18, 0x33	; 51
    23ce:	33 e9       	ldi	r19, 0x93	; 147
    23d0:	48 e8       	ldi	r20, 0x88	; 136
    23d2:	53 e4       	ldi	r21, 0x43	; 67
    23d4:	0e 94 73 19 	call	0x32e6	; 0x32e6 <__subsf3>

    return T;

}    // End of Thermistor_RtoT //
    23d8:	46 2f       	mov	r20, r22
    23da:	57 2f       	mov	r21, r23
    23dc:	68 2f       	mov	r22, r24
    23de:	79 2f       	mov	r23, r25
    23e0:	cb 01       	movw	r24, r22
    23e2:	ba 01       	movw	r22, r20
    23e4:	1f 91       	pop	r17
    23e6:	0f 91       	pop	r16
    23e8:	08 95       	ret

000023ea <resetVelocityCounter>:
* Resets the velocity counter so that the next period
* measurement starts from zero
************************************************************************/
void resetVelocityCounter(void)
{
    accumulationOverflow = 0;
    23ea:	10 92 09 22 	sts	0x2209, r1
    periodAccumulator = 0;
    23ee:	10 92 0b 22 	sts	0x220B, r1
    23f2:	10 92 0c 22 	sts	0x220C, r1
    samplesAccumulated = 0;
    23f6:	10 92 0a 22 	sts	0x220A, r1
    averagePeriod = 65534;
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	9e ef       	ldi	r25, 0xFE	; 254
    23fe:	af e7       	ldi	r26, 0x7F	; 127
    2400:	b7 e4       	ldi	r27, 0x47	; 71
    2402:	80 93 32 20 	sts	0x2032, r24
    2406:	90 93 33 20 	sts	0x2033, r25
    240a:	a0 93 34 20 	sts	0x2034, r26
    240e:	b0 93 35 20 	sts	0x2035, r27
    averageRPM = 0;
    2412:	10 92 02 22 	sts	0x2202, r1
    2416:	10 92 03 22 	sts	0x2203, r1
    //overspeedCounter = 0;
    stallCounter = 0;
    241a:	10 92 06 22 	sts	0x2206, r1
}
    241e:	08 95       	ret

00002420 <readVelocitySignal>:
* Consumes the period accumulator signal and averages it.  If nothing has
* been accumulated since its last run, it leaves averagePeriod alone.
* This causes the PID loop to get the same input it received previously.
************************************************************************/
void readVelocitySignal(void)
{
    2420:	cf 92       	push	r12
    2422:	df 92       	push	r13
    2424:	ef 92       	push	r14
    2426:	ff 92       	push	r15
    2428:	1f 93       	push	r17
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    //Average the accumulator if it is OK.
    //Otherwise fake a period measurement using the stall counter
    //The timer completely overflows with a period of 500 ms, but the control loop is polling at 5 ms.
    //At really slow speeds (or a stall), an appropriate velocity needs to be synthesized.
    //Reset accumulation regardless
    if((accumulationOverflow == 0) && (samplesAccumulated != 0))
    242e:	80 91 09 22 	lds	r24, 0x2209
    2432:	88 23       	and	r24, r24
    2434:	51 f5       	brne	.+84     	; 0x248a <readVelocitySignal+0x6a>
    2436:	80 91 0a 22 	lds	r24, 0x220A
    243a:	88 23       	and	r24, r24
    243c:	31 f1       	breq	.+76     	; 0x248a <readVelocitySignal+0x6a>
    {
        averagePeriod = (float) periodAccumulator / (float) samplesAccumulated;
    243e:	80 91 0b 22 	lds	r24, 0x220B
    2442:	90 91 0c 22 	lds	r25, 0x220C
    2446:	c0 91 0a 22 	lds	r28, 0x220A
    244a:	bc 01       	movw	r22, r24
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    2454:	6b 01       	movw	r12, r22
    2456:	7c 01       	movw	r14, r24
    2458:	6c 2f       	mov	r22, r28
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    2464:	9b 01       	movw	r18, r22
    2466:	ac 01       	movw	r20, r24
    2468:	c7 01       	movw	r24, r14
    246a:	b6 01       	movw	r22, r12
    246c:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	80 93 32 20 	sts	0x2032, r24
    2478:	90 93 33 20 	sts	0x2033, r25
    247c:	a0 93 34 20 	sts	0x2034, r26
    2480:	b0 93 35 20 	sts	0x2035, r27
        stallCounter = 0;
    2484:	10 92 06 22 	sts	0x2206, r1
    2488:	44 c0       	rjmp	.+136    	; 0x2512 <readVelocitySignal+0xf2>
    } else {
        //Nothing happened since the last check.  Increment the stall counter
        stallCounter++;
    248a:	80 91 06 22 	lds	r24, 0x2206
    248e:	8f 5f       	subi	r24, 0xFF	; 255
    2490:	80 93 06 22 	sts	0x2206, r24
        if(stallCounter >= 100)
    2494:	80 91 06 22 	lds	r24, 0x2206
    2498:	84 36       	cpi	r24, 0x64	; 100
    249a:	28 f0       	brcs	.+10     	; 0x24a6 <readVelocitySignal+0x86>
        {
            averagePeriod = 65534;
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	9e ef       	ldi	r25, 0xFE	; 254
    24a0:	af e7       	ldi	r26, 0x7F	; 127
    24a2:	b7 e4       	ldi	r27, 0x47	; 71
    24a4:	2e c0       	rjmp	.+92     	; 0x2502 <readVelocitySignal+0xe2>
        } else {
            stallTime = stallCounter * COUNTS_PER_CONTROL_PERIOD;
    24a6:	20 91 06 22 	lds	r18, 0x2206
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	81 e7       	ldi	r24, 0x71	; 113
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	28 9f       	mul	r18, r24
    24b2:	b0 01       	movw	r22, r0
    24b4:	29 9f       	mul	r18, r25
    24b6:	70 0d       	add	r23, r0
    24b8:	38 9f       	mul	r19, r24
    24ba:	70 0d       	add	r23, r0
    24bc:	11 24       	eor	r1, r1
    24be:	88 27       	eor	r24, r24
    24c0:	77 fd       	sbrc	r23, 7
    24c2:	80 95       	com	r24
    24c4:	98 2f       	mov	r25, r24
    24c6:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__floatsisf>
    24ca:	c6 2e       	mov	r12, r22
    24cc:	17 2f       	mov	r17, r23
    24ce:	d8 2f       	mov	r29, r24
    24d0:	c9 2f       	mov	r28, r25
            if(stallTime > averagePeriod)
    24d2:	9e 01       	movw	r18, r28
    24d4:	86 2f       	mov	r24, r22
    24d6:	91 2f       	mov	r25, r17
    24d8:	a3 2f       	mov	r26, r19
    24da:	b2 2f       	mov	r27, r18
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	20 91 32 20 	lds	r18, 0x2032
    24e4:	30 91 33 20 	lds	r19, 0x2033
    24e8:	40 91 34 20 	lds	r20, 0x2034
    24ec:	50 91 35 20 	lds	r21, 0x2035
    24f0:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    24f4:	18 16       	cp	r1, r24
    24f6:	6c f4       	brge	.+26     	; 0x2512 <readVelocitySignal+0xf2>
            {
                averagePeriod = stallTime;
    24f8:	9e 01       	movw	r18, r28
    24fa:	8c 2d       	mov	r24, r12
    24fc:	91 2f       	mov	r25, r17
    24fe:	a3 2f       	mov	r26, r19
    2500:	b2 2f       	mov	r27, r18
    2502:	80 93 32 20 	sts	0x2032, r24
    2506:	90 93 33 20 	sts	0x2033, r25
    250a:	a0 93 34 20 	sts	0x2034, r26
    250e:	b0 93 35 20 	sts	0x2035, r27
*
* Converts the measured Hall sensor period to RPM
************************************************************************/
static uint16_t periodToRPM(float period)
{
    float rawRPM = 1 / (PERIOD_CONVERSION_CONSTANT*MOTOR_POLE_PAIRS*period);
    2512:	60 91 32 20 	lds	r22, 0x2032
    2516:	70 91 33 20 	lds	r23, 0x2033
    251a:	80 91 34 20 	lds	r24, 0x2034
    251e:	90 91 35 20 	lds	r25, 0x2035
    2522:	25 e9       	ldi	r18, 0x95	; 149
    2524:	3f eb       	ldi	r19, 0xBF	; 191
    2526:	46 e5       	ldi	r20, 0x56	; 86
    2528:	56 e3       	ldi	r21, 0x36	; 54
    252a:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    252e:	9b 01       	movw	r18, r22
    2530:	ac 01       	movw	r20, r24
    2532:	60 e0       	ldi	r22, 0x00	; 0
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	80 e8       	ldi	r24, 0x80	; 128
    2538:	9f e3       	ldi	r25, 0x3F	; 63
    253a:	0e 94 ef 19 	call	0x33de	; 0x33de <__divsf3>
    253e:	16 2f       	mov	r17, r22
    2540:	d7 2f       	mov	r29, r23
    2542:	c8 2f       	mov	r28, r24
    2544:	c9 2e       	mov	r12, r25
    if (rawRPM > 65535) return 65535;
    2546:	86 2f       	mov	r24, r22
    2548:	9d 2f       	mov	r25, r29
    254a:	ac 2f       	mov	r26, r28
    254c:	bc 2d       	mov	r27, r12
    254e:	bc 01       	movw	r22, r24
    2550:	cd 01       	movw	r24, r26
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f e7       	ldi	r20, 0x7F	; 127
    2558:	57 e4       	ldi	r21, 0x47	; 71
    255a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    255e:	18 16       	cp	r1, r24
    2560:	b4 f0       	brlt	.+44     	; 0x258e <readVelocitySignal+0x16e>
    if (rawRPM < 0) return 0;
    2562:	81 2f       	mov	r24, r17
    2564:	9d 2f       	mov	r25, r29
    2566:	ac 2f       	mov	r26, r28
    2568:	bc 2d       	mov	r27, r12
    256a:	bc 01       	movw	r22, r24
    256c:	cd 01       	movw	r24, r26
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	a9 01       	movw	r20, r18
    2574:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__cmpsf2>
    2578:	87 fd       	sbrc	r24, 7
    257a:	0c c0       	rjmp	.+24     	; 0x2594 <readVelocitySignal+0x174>
    return rawRPM;
    257c:	81 2f       	mov	r24, r17
    257e:	9d 2f       	mov	r25, r29
    2580:	ac 2f       	mov	r26, r28
    2582:	bc 2d       	mov	r27, r12
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fixunssfsi>
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <readVelocitySignal+0x178>
* Converts the measured Hall sensor period to RPM
************************************************************************/
static uint16_t periodToRPM(float period)
{
    float rawRPM = 1 / (PERIOD_CONVERSION_CONSTANT*MOTOR_POLE_PAIRS*period);
    if (rawRPM > 65535) return 65535;
    258e:	6f ef       	ldi	r22, 0xFF	; 255
    2590:	7f ef       	ldi	r23, 0xFF	; 255
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <readVelocitySignal+0x178>
    if (rawRPM < 0) return 0;
    2594:	60 e0       	ldi	r22, 0x00	; 0
    2596:	70 e0       	ldi	r23, 0x00	; 0
            {
                averagePeriod = stallTime;
            }
        }
    }
    averageRPM = periodToRPM(averagePeriod);
    2598:	60 93 02 22 	sts	0x2202, r22
    259c:	70 93 03 22 	sts	0x2203, r23
        }
    } else {
        overspeedCounter[selectedMotor] = 0;
    }
*/
    accumulationOverflow = 0;
    25a0:	10 92 09 22 	sts	0x2209, r1
    periodAccumulator = 0;
    25a4:	10 92 0b 22 	sts	0x220B, r1
    25a8:	10 92 0c 22 	sts	0x220C, r1
    samplesAccumulated = 0;
    25ac:	10 92 0a 22 	sts	0x220A, r1
    return;
}
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	1f 91       	pop	r17
    25b6:	ff 90       	pop	r15
    25b8:	ef 90       	pop	r14
    25ba:	df 90       	pop	r13
    25bc:	cf 90       	pop	r12
    25be:	08 95       	ret

000025c0 <configureMotorCounters>:
************************************************************************/
void configureMotorCounters(void)
{
    //Configure the Event System to route the pin change signals for the Hall Effect sensors to the Timer Counters

    EVSYS.CH0MUX = EVENT_HALL_A1;
    25c0:	e0 e8       	ldi	r30, 0x80	; 128
    25c2:	f1 e0       	ldi	r31, 0x01	; 1
    25c4:	84 e6       	ldi	r24, 0x64	; 100
    25c6:	80 83       	st	Z, r24
    EVSYS.CH1MUX = EVENT_HALL_B1;
    25c8:	85 e6       	ldi	r24, 0x65	; 101
    25ca:	81 83       	std	Z+1, r24	; 0x01
    EVSYS.CH2MUX = EVENT_HALL_C1;
    25cc:	86 e6       	ldi	r24, 0x66	; 102
    25ce:	82 83       	std	Z+2, r24	; 0x02

    EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    25d0:	10 86       	std	Z+8, r1	; 0x08
    EVSYS.CH1CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    25d2:	11 86       	std	Z+9, r1	; 0x09
    EVSYS.CH2CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
    25d4:	12 86       	std	Z+10, r1	; 0x0a
    //Now make the final timer/counter sensitive to these events
    //The counter should have a period of 500 ms for now using a prescaler of 256.
    //For the Maxon EC-20, this results in a minimum velocity of 5 RPM
    //24 transitions per revolution (6 transitions per electrical cycle and four cycles per revolution)
    //Each transition at 500 ms yields 5 RPM.
    MOTOR1_EVENT_TIMER_TC.CTRLB = TC_WGMODE_NORMAL_gc | MOTOR1_HA_EN | MOTOR1_HB_EN | MOTOR1_HC_EN ;
    25d6:	e0 e0       	ldi	r30, 0x00	; 0
    25d8:	fa e0       	ldi	r31, 0x0A	; 10
    25da:	80 e7       	ldi	r24, 0x70	; 112
    25dc:	81 83       	std	Z+1, r24	; 0x01
    MOTOR1_EVENT_TIMER_TC.CTRLC = 0x00;
    25de:	12 82       	std	Z+2, r1	; 0x02
    MOTOR1_EVENT_TIMER_TC.CTRLD = TC_EVACT_CAPT_gc | TC_EVSEL_CH0_gc;
    25e0:	88 e2       	ldi	r24, 0x28	; 40
    25e2:	83 83       	std	Z+3, r24	; 0x03
    MOTOR1_EVENT_TIMER_TC.CTRLE = 0x00;
    25e4:	14 82       	std	Z+4, r1	; 0x04
    MOTOR1_EVENT_TIMER_TC.PERBUF = 0xFFFF;
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	9f ef       	ldi	r25, 0xFF	; 255
    25ea:	86 ab       	sts	0x56, r24
    25ec:	97 ab       	sts	0x57, r25
    MOTOR1_EVENT_TIMER_TC.CNT = 0x0000;
    25ee:	10 a2       	lds	r17, 0x90
    25f0:	11 a2       	lds	r17, 0x91
    MOTOR1_EVENT_TIMER_TC.CTRLA = TC_CLKSEL_DIV256_gc;
    25f2:	86 e0       	ldi	r24, 0x06	; 6
    25f4:	80 83       	st	Z, r24
}
    25f6:	08 95       	ret

000025f8 <updateMotorCount>:
    TC0_t *motorCounter;
    uint16_t sum;

    motorCounter = &MOTOR1_EVENT_TIMER_TC;

    uint8_t captureStatus = motorCounter->CTRLGSET & (TC0_CCABV_bm | TC0_CCBBV_bm | TC0_CCCBV_bm);
    25f8:	e0 e0       	ldi	r30, 0x00	; 0
    25fa:	fa e0       	ldi	r31, 0x0A	; 10
    25fc:	80 91 0b 0a 	lds	r24, 0x0A0B
    2600:	8e 70       	andi	r24, 0x0E	; 14
    uint16_t currentCapture;

    switch(captureStatus)
    2602:	84 30       	cpi	r24, 0x04	; 4
    2604:	49 f0       	breq	.+18     	; 0x2618 <updateMotorCount+0x20>
    2606:	88 30       	cpi	r24, 0x08	; 8
    2608:	61 f0       	breq	.+24     	; 0x2622 <updateMotorCount+0x2a>
    260a:	82 30       	cpi	r24, 0x02	; 2
    260c:	79 f4       	brne	.+30     	; 0x262c <updateMotorCount+0x34>
    {
        case TC0_CCABV_bm:
            currentCapture = motorCounter->CCABUF;
    260e:	80 91 38 0a 	lds	r24, 0x0A38
    2612:	90 91 39 0a 	lds	r25, 0x0A39
            break;
    2616:	13 c0       	rjmp	.+38     	; 0x263e <updateMotorCount+0x46>
        case TC0_CCBBV_bm:
            currentCapture = motorCounter->CCBBUF;
    2618:	80 91 3a 0a 	lds	r24, 0x0A3A
    261c:	90 91 3b 0a 	lds	r25, 0x0A3B
            break;
    2620:	0e c0       	rjmp	.+28     	; 0x263e <updateMotorCount+0x46>
        case TC0_CCCBV_bm:
            currentCapture = motorCounter->CCCBUF;
    2622:	80 91 3c 0a 	lds	r24, 0x0A3C
    2626:	90 91 3d 0a 	lds	r25, 0x0A3D
            break;
    262a:	09 c0       	rjmp	.+18     	; 0x263e <updateMotorCount+0x46>
        default:
            //Multiple or no captures.  Clear everything and hope for resynchronization next time around.
            motorCounter->CTRLGCLR = TC0_CCABV_bm | TC0_CCBBV_bm | TC0_CCCBV_bm;
    262c:	8e e0       	ldi	r24, 0x0E	; 14
    262e:	82 87       	std	Z+10, r24	; 0x0a

            //Skip remaining processing and dump this sample
            motorCounter->CNT = 0x0000;
    2630:	10 a2       	lds	r17, 0x90
    2632:	11 a2       	lds	r17, 0x91
            previousAbsoluteCount = 0;
    2634:	10 92 07 22 	sts	0x2207, r1
    2638:	10 92 08 22 	sts	0x2208, r1
            return;
    263c:	08 95       	ret
    }

    //Simplify.  For now, just do the straight subtraction with no information about overflow.  Unless the motor is
    //moving very slowly, this will give the correct answer
    currentRelativeCount = currentCapture - previousAbsoluteCount;
    263e:	20 91 07 22 	lds	r18, 0x2207
    2642:	30 91 08 22 	lds	r19, 0x2208
    2646:	ac 01       	movw	r20, r24
    2648:	42 1b       	sub	r20, r18
    264a:	53 0b       	sbc	r21, r19
    264c:	40 93 04 22 	sts	0x2204, r20
    2650:	50 93 05 22 	sts	0x2205, r21
    previousAbsoluteCount = currentCapture;
    2654:	80 93 07 22 	sts	0x2207, r24
    2658:	90 93 08 22 	sts	0x2208, r25

    //Accumulate
    sum = periodAccumulator + currentRelativeCount;
    265c:	20 91 0b 22 	lds	r18, 0x220B
    2660:	30 91 0c 22 	lds	r19, 0x220C
    2664:	80 91 04 22 	lds	r24, 0x2204
    2668:	90 91 05 22 	lds	r25, 0x2205
    if((samplesAccumulated == 255) || \
    266c:	40 91 0a 22 	lds	r20, 0x220A
    2670:	4f 3f       	cpi	r20, 0xFF	; 255
    2672:	49 f0       	breq	.+18     	; 0x2686 <updateMotorCount+0x8e>
    //moving very slowly, this will give the correct answer
    currentRelativeCount = currentCapture - previousAbsoluteCount;
    previousAbsoluteCount = currentCapture;

    //Accumulate
    sum = periodAccumulator + currentRelativeCount;
    2674:	82 0f       	add	r24, r18
    2676:	93 1f       	adc	r25, r19
    if((samplesAccumulated == 255) || \
       (sum < periodAccumulator))
    2678:	20 91 0b 22 	lds	r18, 0x220B
    267c:	30 91 0c 22 	lds	r19, 0x220C
    currentRelativeCount = currentCapture - previousAbsoluteCount;
    previousAbsoluteCount = currentCapture;

    //Accumulate
    sum = periodAccumulator + currentRelativeCount;
    if((samplesAccumulated == 255) || \
    2680:	82 17       	cp	r24, r18
    2682:	93 07       	cpc	r25, r19
    2684:	50 f4       	brcc	.+20     	; 0x269a <updateMotorCount+0xa2>
       (sum < periodAccumulator))
    {
        //Overflow error
        accumulationOverflow = 1;
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	80 93 09 22 	sts	0x2209, r24
        periodAccumulator = 0;
    268c:	10 92 0b 22 	sts	0x220B, r1
    2690:	10 92 0c 22 	sts	0x220C, r1
        samplesAccumulated = 0;
    2694:	10 92 0a 22 	sts	0x220A, r1
    2698:	08 95       	ret
    } else {
        periodAccumulator = sum;
    269a:	80 93 0b 22 	sts	0x220B, r24
    269e:	90 93 0c 22 	sts	0x220C, r25
        samplesAccumulated++;
    26a2:	80 91 0a 22 	lds	r24, 0x220A
    26a6:	8f 5f       	subi	r24, 0xFF	; 255
    26a8:	80 93 0a 22 	sts	0x220A, r24
    26ac:	08 95       	ret

000026ae <ReadIntFromEEPROM>:
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    26ae:	ef 92       	push	r14
    26b0:	ff 92       	push	r15
    26b2:	0f 93       	push	r16
    26b4:	1f 93       	push	r17
    26b6:	cf 93       	push	r28
    26b8:	df 93       	push	r29
    26ba:	0f 92       	push	r0
    26bc:	cd b7       	in	r28, 0x3d	; 61
    26be:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4;i++)
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
    26c0:	e8 2e       	mov	r14, r24
    26c2:	ff 24       	eor	r15, r15
    26c4:	ee 0c       	add	r14, r14
    26c6:	ff 1c       	adc	r15, r15
    26c8:	ee 0c       	add	r14, r14
    26ca:	ff 1c       	adc	r15, r15
    26cc:	8b 01       	movw	r16, r22
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4;i++)
    26ce:	20 e0       	ldi	r18, 0x00	; 0
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
    26d0:	c7 01       	movw	r24, r14
    26d2:	29 83       	std	Y+1, r18	; 0x01
    26d4:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__eerd_byte_x32a4u>
    26d8:	f8 01       	movw	r30, r16
    26da:	81 93       	st	Z+, r24
    26dc:	8f 01       	movw	r16, r30
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}

static void ReadIntFromEEPROM(uint8_t address, uint8_t* destination)
{
    for(uint8_t i=0; i<4;i++)
    26de:	29 81       	ldd	r18, Y+1	; 0x01
    26e0:	2f 5f       	subi	r18, 0xFF	; 255
    26e2:	08 94       	sec
    26e4:	e1 1c       	adc	r14, r1
    26e6:	f1 1c       	adc	r15, r1
    26e8:	24 30       	cpi	r18, 0x04	; 4
    26ea:	91 f7       	brne	.-28     	; 0x26d0 <ReadIntFromEEPROM+0x22>
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
}
    26ec:	0f 90       	pop	r0
    26ee:	df 91       	pop	r29
    26f0:	cf 91       	pop	r28
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	08 95       	ret

000026fc <WriteIntToEEPROM>:
    data >>= 8;
    eeprom_write_byte((uint8_t *) (address*4+3), data & 0xff);
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    26fc:	ef 92       	push	r14
    26fe:	ff 92       	push	r15
    2700:	0f 93       	push	r16
    2702:	1f 93       	push	r17
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	0f 92       	push	r0
    270a:	cd b7       	in	r28, 0x3d	; 61
    270c:	de b7       	in	r29, 0x3e	; 62
    for(uint8_t i=0; i<4; i++)
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
    270e:	8b 01       	movw	r16, r22
    2710:	e8 2e       	mov	r14, r24
    2712:	ff 24       	eor	r15, r15
    2714:	ee 0c       	add	r14, r14
    2716:	ff 1c       	adc	r15, r15
    2718:	ee 0c       	add	r14, r14
    271a:	ff 1c       	adc	r15, r15
    eeprom_write_byte((uint8_t *) (address*4+3), data & 0xff);
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
    271c:	20 e0       	ldi	r18, 0x00	; 0
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
    271e:	f8 01       	movw	r30, r16
    2720:	61 91       	ld	r22, Z+
    2722:	8f 01       	movw	r16, r30
    2724:	c7 01       	movw	r24, r14
    2726:	29 83       	std	Y+1, r18	; 0x01
    2728:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__eewr_byte_x32a4u>
    eeprom_write_byte((uint8_t *) (address*4+3), data & 0xff);
}

static void WriteIntToEEPROM(uint8_t address, uint8_t* value)
{
    for(uint8_t i=0; i<4; i++)
    272c:	29 81       	ldd	r18, Y+1	; 0x01
    272e:	2f 5f       	subi	r18, 0xFF	; 255
    2730:	08 94       	sec
    2732:	e1 1c       	adc	r14, r1
    2734:	f1 1c       	adc	r15, r1
    2736:	24 30       	cpi	r18, 0x04	; 4
    2738:	91 f7       	brne	.-28     	; 0x271e <WriteIntToEEPROM+0x22>
        eeprom_write_byte((uint8_t *) (address*4+i), *(value+i));
}
    273a:	0f 90       	pop	r0
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	ff 90       	pop	r15
    2746:	ef 90       	pop	r14
    2748:	08 95       	ret

0000274a <__vector_10>:
 * The timer tick interrupt.
 * this fires every 5 ms to increment a USART timeout register and signal the
 * PID control loop to fire in a non-interrupt context
 *************************************************************************/
ISR(CONTROL_TIMER_vect)
{
    274a:	1f 92       	push	r1
    274c:	0f 92       	push	r0
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	0f 92       	push	r0
    2752:	11 24       	eor	r1, r1
    2754:	8f 93       	push	r24
    cli();
    2756:	f8 94       	cli
    PID_runPID = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	80 93 f7 21 	sts	0x21F7, r24
//         }
//     } else {
//         faultCounter = 0;
//     }
// #endif
}
    275e:	8f 91       	pop	r24
    2760:	0f 90       	pop	r0
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	0f 90       	pop	r0
    2766:	1f 90       	pop	r1
    2768:	18 95       	reti

0000276a <WriteFloatToEEPROM>:
        LEDoff();
}


void WriteFloatToEEPROM(uint8_t address, float val)
{
    276a:	cf 92       	push	r12
    276c:	df 92       	push	r13
    276e:	ef 92       	push	r14
    2770:	ff 92       	push	r15
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    // Write to EEPROM
    uint32_t data;
    memcpy(&data,&val,4);
    2776:	6a 01       	movw	r12, r20
    2778:	7b 01       	movw	r14, r22
    // little endian
    eeprom_write_byte((uint8_t *) (address*4+0), data & 0xff);
    277a:	c8 2f       	mov	r28, r24
    277c:	d0 e0       	ldi	r29, 0x00	; 0
    277e:	cc 0f       	add	r28, r28
    2780:	dd 1f       	adc	r29, r29
    2782:	cc 0f       	add	r28, r28
    2784:	dd 1f       	adc	r29, r29
    2786:	ce 01       	movw	r24, r28
    2788:	64 2f       	mov	r22, r20
    278a:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__eewr_byte_x32a4u>
    data >>= 8;
    278e:	77 27       	eor	r23, r23
    2790:	6f 2d       	mov	r22, r15
    2792:	5e 2d       	mov	r21, r14
    2794:	4d 2d       	mov	r20, r13
    eeprom_write_byte((uint8_t *) (address*4+1), data & 0xff);
    2796:	ce 01       	movw	r24, r28
    2798:	01 96       	adiw	r24, 0x01	; 1
    279a:	64 2f       	mov	r22, r20
    279c:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__eewr_byte_x32a4u>
    data >>= 8;
    27a0:	a7 01       	movw	r20, r14
    27a2:	66 27       	eor	r22, r22
    27a4:	77 27       	eor	r23, r23
    eeprom_write_byte((uint8_t *) (address*4+2), data & 0xff);
    27a6:	ce 01       	movw	r24, r28
    27a8:	02 96       	adiw	r24, 0x02	; 2
    27aa:	64 2f       	mov	r22, r20
    27ac:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__eewr_byte_x32a4u>
    data >>= 8;
    27b0:	cf 2c       	mov	r12, r15
    27b2:	dd 24       	eor	r13, r13
    27b4:	ee 24       	eor	r14, r14
    27b6:	ff 24       	eor	r15, r15
    eeprom_write_byte((uint8_t *) (address*4+3), data & 0xff);
    27b8:	ce 01       	movw	r24, r28
    27ba:	03 96       	adiw	r24, 0x03	; 3
    27bc:	6c 2d       	mov	r22, r12
    27be:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__eewr_byte_x32a4u>
}
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	ff 90       	pop	r15
    27c8:	ef 90       	pop	r14
    27ca:	df 90       	pop	r13
    27cc:	cf 90       	pop	r12
    27ce:	08 95       	ret

000027d0 <initializeEEPROM>:
        WriteIntToEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    }
}

void initializeEEPROM(void)
{
    27d0:	1f 93       	push	r17
    27d2:	cf 93       	push	r28
    27d4:	df 93       	push	r29
    // default values for parameters
    Parameter[PARAMETER_TORQUE_KP] = 0.03;
    27d6:	8f e8       	ldi	r24, 0x8F	; 143
    27d8:	92 ec       	ldi	r25, 0xC2	; 194
    27da:	a5 ef       	ldi	r26, 0xF5	; 245
    27dc:	bc e3       	ldi	r27, 0x3C	; 60
    27de:	80 93 22 22 	sts	0x2222, r24
    27e2:	90 93 23 22 	sts	0x2223, r25
    27e6:	a0 93 24 22 	sts	0x2224, r26
    27ea:	b0 93 25 22 	sts	0x2225, r27
    Parameter[PARAMETER_TORQUE_KI] = 0.01;
    27ee:	8a e0       	ldi	r24, 0x0A	; 10
    27f0:	97 ed       	ldi	r25, 0xD7	; 215
    27f2:	a3 e2       	ldi	r26, 0x23	; 35
    27f4:	bc e3       	ldi	r27, 0x3C	; 60
    27f6:	80 93 26 22 	sts	0x2226, r24
    27fa:	90 93 27 22 	sts	0x2227, r25
    27fe:	a0 93 28 22 	sts	0x2228, r26
    2802:	b0 93 29 22 	sts	0x2229, r27
    Parameter[PARAMETER_TORQUE_KD] = 0.0;
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	90 e0       	ldi	r25, 0x00	; 0
    280a:	dc 01       	movw	r26, r24
    280c:	80 93 2a 22 	sts	0x222A, r24
    2810:	90 93 2b 22 	sts	0x222B, r25
    2814:	a0 93 2c 22 	sts	0x222C, r26
    2818:	b0 93 2d 22 	sts	0x222D, r27
    Parameter[PARAMETER_VELOCITY_KP] = 0.005;
    281c:	4a e0       	ldi	r20, 0x0A	; 10
    281e:	57 ed       	ldi	r21, 0xD7	; 215
    2820:	63 ea       	ldi	r22, 0xA3	; 163
    2822:	7b e3       	ldi	r23, 0x3B	; 59
    2824:	40 93 2e 22 	sts	0x222E, r20
    2828:	50 93 2f 22 	sts	0x222F, r21
    282c:	60 93 30 22 	sts	0x2230, r22
    2830:	70 93 31 22 	sts	0x2231, r23
    Parameter[PARAMETER_VELOCITY_KI] = 0.0025;
    2834:	4a e0       	ldi	r20, 0x0A	; 10
    2836:	57 ed       	ldi	r21, 0xD7	; 215
    2838:	63 e2       	ldi	r22, 0x23	; 35
    283a:	7b e3       	ldi	r23, 0x3B	; 59
    283c:	40 93 32 22 	sts	0x2232, r20
    2840:	50 93 33 22 	sts	0x2233, r21
    2844:	60 93 34 22 	sts	0x2234, r22
    2848:	70 93 35 22 	sts	0x2235, r23
    Parameter[PARAMETER_VELOCITY_KD] = 0.0;
    284c:	80 93 36 22 	sts	0x2236, r24
    2850:	90 93 37 22 	sts	0x2237, r25
    2854:	a0 93 38 22 	sts	0x2238, r26
    2858:	b0 93 39 22 	sts	0x2239, r27
    Parameter[PARAMETER_POWER_KP] = 1.0;
    285c:	40 e0       	ldi	r20, 0x00	; 0
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	60 e8       	ldi	r22, 0x80	; 128
    2862:	7f e3       	ldi	r23, 0x3F	; 63
    2864:	40 93 3a 22 	sts	0x223A, r20
    2868:	50 93 3b 22 	sts	0x223B, r21
    286c:	60 93 3c 22 	sts	0x223C, r22
    2870:	70 93 3d 22 	sts	0x223D, r23
    Parameter[PARAMETER_POWER_KI] = 0.3;
    2874:	4a e9       	ldi	r20, 0x9A	; 154
    2876:	59 e9       	ldi	r21, 0x99	; 153
    2878:	69 e9       	ldi	r22, 0x99	; 153
    287a:	7e e3       	ldi	r23, 0x3E	; 62
    287c:	40 93 3e 22 	sts	0x223E, r20
    2880:	50 93 3f 22 	sts	0x223F, r21
    2884:	60 93 40 22 	sts	0x2240, r22
    2888:	70 93 41 22 	sts	0x2241, r23
    Parameter[PARAMETER_POWER_KD] = 0.0;
    288c:	80 93 42 22 	sts	0x2242, r24
    2890:	90 93 43 22 	sts	0x2243, r25
    2894:	a0 93 44 22 	sts	0x2244, r26
    2898:	b0 93 45 22 	sts	0x2245, r27
    Parameter[PARAMETER_WINDING_R] = DEFAULT_WINDING_RESISTANCE; // winding resitance
    289c:	8d ec       	ldi	r24, 0xCD	; 205
    289e:	9c ec       	ldi	r25, 0xCC	; 204
    28a0:	a4 ee       	ldi	r26, 0xE4	; 228
    28a2:	b1 e4       	ldi	r27, 0x41	; 65
    28a4:	80 93 46 22 	sts	0x2246, r24
    28a8:	90 93 47 22 	sts	0x2247, r25
    28ac:	a0 93 48 22 	sts	0x2248, r26
    28b0:	b0 93 49 22 	sts	0x2249, r27
    Parameter[PARAMETER_THERMAL_R] = 2.66; // Thermal restance to case
    28b4:	81 e7       	ldi	r24, 0x71	; 113
    28b6:	9d e3       	ldi	r25, 0x3D	; 61
    28b8:	aa e2       	ldi	r26, 0x2A	; 42
    28ba:	b0 e4       	ldi	r27, 0x40	; 64
    28bc:	80 93 4a 22 	sts	0x224A, r24
    28c0:	90 93 4b 22 	sts	0x224B, r25
    28c4:	a0 93 4c 22 	sts	0x224C, r26
    28c8:	b0 93 4d 22 	sts	0x224D, r27
    Parameter[PARAMETER_T_PLUS] = 90.0;
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	a4 eb       	ldi	r26, 0xB4	; 180
    28d2:	b2 e4       	ldi	r27, 0x42	; 66
    28d4:	80 93 4e 22 	sts	0x224E, r24
    28d8:	90 93 4f 22 	sts	0x224F, r25
    28dc:	a0 93 50 22 	sts	0x2250, r26
    28e0:	b0 93 51 22 	sts	0x2251, r27
    Parameter[PARAMETER_T_MINUS] = 90.0;
    28e4:	80 93 52 22 	sts	0x2252, r24
    28e8:	90 93 53 22 	sts	0x2253, r25
    28ec:	a0 93 54 22 	sts	0x2254, r26
    28f0:	b0 93 55 22 	sts	0x2255, r27
    Parameter[PARAMETER_WINDING_TAU] = 1777.0;
    28f4:	40 e0       	ldi	r20, 0x00	; 0
    28f6:	50 e2       	ldi	r21, 0x20	; 32
    28f8:	6e ed       	ldi	r22, 0xDE	; 222
    28fa:	74 e4       	ldi	r23, 0x44	; 68
    28fc:	40 93 56 22 	sts	0x2256, r20
    2900:	50 93 57 22 	sts	0x2257, r21
    2904:	60 93 58 22 	sts	0x2258, r22
    2908:	70 93 59 22 	sts	0x2259, r23
    Parameter[PARAMETER_T_MAX] = 110.0;
    290c:	40 e0       	ldi	r20, 0x00	; 0
    290e:	50 e0       	ldi	r21, 0x00	; 0
    2910:	6c ed       	ldi	r22, 0xDC	; 220
    2912:	72 e4       	ldi	r23, 0x42	; 66
    2914:	40 93 5a 22 	sts	0x225A, r20
    2918:	50 93 5b 22 	sts	0x225B, r21
    291c:	60 93 5c 22 	sts	0x225C, r22
    2920:	70 93 5d 22 	sts	0x225D, r23
    Parameter[PARAMETER_CU_ALPHA] = 0.0039;
    2924:	44 e2       	ldi	r20, 0x24	; 36
    2926:	57 e9       	ldi	r21, 0x97	; 151
    2928:	6f e7       	ldi	r22, 0x7F	; 127
    292a:	7b e3       	ldi	r23, 0x3B	; 59
    292c:	40 93 5e 22 	sts	0x225E, r20
    2930:	50 93 5f 22 	sts	0x225F, r21
    2934:	60 93 60 22 	sts	0x2260, r22
    2938:	70 93 61 22 	sts	0x2261, r23
    Parameter[PARAMETER_OFF_TIME] = 5.0; // number of time constants until reset
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	60 ea       	ldi	r22, 0xA0	; 160
    2942:	70 e4       	ldi	r23, 0x40	; 64
    2944:	40 93 62 22 	sts	0x2262, r20
    2948:	50 93 63 22 	sts	0x2263, r21
    294c:	60 93 64 22 	sts	0x2264, r22
    2950:	70 93 65 22 	sts	0x2265, r23
    Parameter[PARAMETER_T_TARGET] = 90.0; 
    2954:	80 93 66 22 	sts	0x2266, r24
    2958:	90 93 67 22 	sts	0x2267, r25
    295c:	a0 93 68 22 	sts	0x2268, r26
    2960:	b0 93 69 22 	sts	0x2269, r27
    Parameter[PARAMETER_MAXIMUM_RPM] = 12000.0;
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e8       	ldi	r25, 0x80	; 128
    2968:	ab e3       	ldi	r26, 0x3B	; 59
    296a:	b6 e4       	ldi	r27, 0x46	; 70
    296c:	80 93 6a 22 	sts	0x226A, r24
    2970:	90 93 6b 22 	sts	0x226B, r25
    2974:	a0 93 6c 22 	sts	0x226C, r26
    2978:	b0 93 6d 22 	sts	0x226D, r27
    Parameter[PARAMETER_SPEED_CONSTANT] = 402.0;
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	a9 ec       	ldi	r26, 0xC9	; 201
    2982:	b3 e4       	ldi	r27, 0x43	; 67
    2984:	80 93 6e 22 	sts	0x226E, r24
    2988:	90 93 6f 22 	sts	0x226F, r25
    298c:	a0 93 70 22 	sts	0x2270, r26
    2990:	b0 93 71 22 	sts	0x2271, r27
    Parameter[PARAMETER_MAXIMUM_PWM] = 150.0;
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	a6 e1       	ldi	r26, 0x16	; 22
    299a:	b3 e4       	ldi	r27, 0x43	; 67
    299c:	80 93 72 22 	sts	0x2272, r24
    29a0:	90 93 73 22 	sts	0x2273, r25
    29a4:	a0 93 74 22 	sts	0x2274, r26
    29a8:	b0 93 75 22 	sts	0x2275, r27
    Parameter[PARAMETER_POSITION_KP] = 15.0;
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a0 e7       	ldi	r26, 0x70	; 112
    29b2:	b1 e4       	ldi	r27, 0x41	; 65
    29b4:	80 93 76 22 	sts	0x2276, r24
    29b8:	90 93 77 22 	sts	0x2277, r25
    29bc:	a0 93 78 22 	sts	0x2278, r26
    29c0:	b0 93 79 22 	sts	0x2279, r27
    Parameter[PARAMETER_POSITION_DEADBAND] = 25.0;
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	a8 ec       	ldi	r26, 0xC8	; 200
    29ca:	b1 e4       	ldi	r27, 0x41	; 65
    29cc:	80 93 7a 22 	sts	0x227A, r24
    29d0:	90 93 7b 22 	sts	0x227B, r25
    29d4:	a0 93 7c 22 	sts	0x227C, r26
    29d8:	b0 93 7d 22 	sts	0x227D, r27
    29dc:	c2 e2       	ldi	r28, 0x22	; 34
    29de:	d2 e2       	ldi	r29, 0x22	; 34
    //Parameter[PARAMETER_LED] = 1;

    // Write to EEPROM
    for(uint8_t i=0; i<INT_PARAMETER_START; i++) 
    29e0:	10 e0       	ldi	r17, 0x00	; 0
    {
        WriteFloatToEEPROM(i, Parameter[i]);
    29e2:	49 91       	ld	r20, Y+
    29e4:	59 91       	ld	r21, Y+
    29e6:	69 91       	ld	r22, Y+
    29e8:	79 91       	ld	r23, Y+
    29ea:	81 2f       	mov	r24, r17
    29ec:	0e 94 b5 13 	call	0x276a	; 0x276a <WriteFloatToEEPROM>
    Parameter[PARAMETER_POSITION_KP] = 15.0;
    Parameter[PARAMETER_POSITION_DEADBAND] = 25.0;
    //Parameter[PARAMETER_LED] = 1;

    // Write to EEPROM
    for(uint8_t i=0; i<INT_PARAMETER_START; i++) 
    29f0:	1f 5f       	subi	r17, 0xFF	; 255
    29f2:	19 31       	cpi	r17, 0x19	; 25
    29f4:	b1 f7       	brne	.-20     	; 0x29e2 <initializeEEPROM+0x212>
    {
        WriteFloatToEEPROM(i, Parameter[i]);
    }
    
    // set the magic number to indicate initialized EEPROM
    eeprom_write_byte((uint8_t *) (PARAM_EEPROM_INIT*4+0), 0);
    29f6:	80 e8       	ldi	r24, 0x80	; 128
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__eewr_byte_x32a4u>
    eeprom_write_byte((uint8_t *) (PARAM_EEPROM_INIT*4+1), PARAM_EEPROM_INIT);
    2a00:	81 e8       	ldi	r24, 0x81	; 129
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	60 e2       	ldi	r22, 0x20	; 32
    2a06:	0e 94 72 1d 	call	0x3ae4	; 0x3ae4 <__eewr_byte_x32a4u>
}
    2a0a:	df 91       	pop	r29
    2a0c:	cf 91       	pop	r28
    2a0e:	1f 91       	pop	r17
    2a10:	08 95       	ret

00002a12 <initializeParameters>:
 // check to see if EEPROM has bee initilailized
 // if yes, read the params from it
 // if not, set default values into EEPROM, then read them out
 ************************************/
void initializeParameters(void)
{
    2a12:	cf 92       	push	r12
    2a14:	df 92       	push	r13
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    // check to see if EEPROM is initialized
    if((0 != eeprom_read_byte((uint8_t *) (PARAM_EEPROM_INIT*4+0))) || 
    2a22:	80 e8       	ldi	r24, 0x80	; 128
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__eerd_byte_x32a4u>
    2a2a:	88 23       	and	r24, r24
    2a2c:	31 f4       	brne	.+12     	; 0x2a3a <initializeParameters+0x28>
       (PARAM_EEPROM_INIT != eeprom_read_byte((uint8_t *) (PARAM_EEPROM_INIT*4+1)))) 
    2a2e:	81 e8       	ldi	r24, 0x81	; 129
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__eerd_byte_x32a4u>
 // if not, set default values into EEPROM, then read them out
 ************************************/
void initializeParameters(void)
{
    // check to see if EEPROM is initialized
    if((0 != eeprom_read_byte((uint8_t *) (PARAM_EEPROM_INIT*4+0))) || 
    2a36:	80 32       	cpi	r24, 0x20	; 32
    2a38:	11 f0       	breq	.+4      	; 0x2a3e <initializeParameters+0x2c>
       (PARAM_EEPROM_INIT != eeprom_read_byte((uint8_t *) (PARAM_EEPROM_INIT*4+1)))) 
    {
        initializeEEPROM();
    2a3a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <initializeEEPROM>
 // check to see if EEPROM has bee initilailized
 // if yes, read the params from it
 // if not, set default values into EEPROM, then read them out
 ************************************/
void initializeParameters(void)
{
    2a3e:	c0 e0       	ldi	r28, 0x00	; 0
    2a40:	d0 e0       	ldi	r29, 0x00	; 0
    2a42:	00 e0       	ldi	r16, 0x00	; 0
    2a44:	10 e0       	ldi	r17, 0x00	; 0
    // read out the Parameters
    for(uint8_t i=0; i<INT_PARAMETER_START; i++)
    {
        uint32_t data;
        // little endian
        data = eeprom_read_byte((uint8_t *) (i*4+3));
    2a46:	ce 01       	movw	r24, r28
    2a48:	03 96       	adiw	r24, 0x03	; 3
    2a4a:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__eerd_byte_x32a4u>
    2a4e:	c8 2e       	mov	r12, r24
        data <<= 8;
        data |= eeprom_read_byte((uint8_t *) (i*4+2));
    2a50:	ce 01       	movw	r24, r28
    2a52:	02 96       	adiw	r24, 0x02	; 2
    2a54:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__eerd_byte_x32a4u>
    // read out the Parameters
    for(uint8_t i=0; i<INT_PARAMETER_START; i++)
    {
        uint32_t data;
        // little endian
        data = eeprom_read_byte((uint8_t *) (i*4+3));
    2a58:	dd 24       	eor	r13, r13
    2a5a:	ee 24       	eor	r14, r14
    2a5c:	ff 24       	eor	r15, r15
        data <<= 8;
    2a5e:	fe 2c       	mov	r15, r14
    2a60:	ed 2c       	mov	r14, r13
    2a62:	dc 2c       	mov	r13, r12
    2a64:	cc 24       	eor	r12, r12
        data |= eeprom_read_byte((uint8_t *) (i*4+2));
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	a0 e0       	ldi	r26, 0x00	; 0
    2a6a:	b0 e0       	ldi	r27, 0x00	; 0
    2a6c:	c8 2a       	or	r12, r24
    2a6e:	d9 2a       	or	r13, r25
    2a70:	ea 2a       	or	r14, r26
    2a72:	fb 2a       	or	r15, r27
        data <<= 8;
        data |= eeprom_read_byte((uint8_t *) (i*4+1));
    2a74:	ce 01       	movw	r24, r28
    2a76:	01 96       	adiw	r24, 0x01	; 1
    2a78:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__eerd_byte_x32a4u>
        uint32_t data;
        // little endian
        data = eeprom_read_byte((uint8_t *) (i*4+3));
        data <<= 8;
        data |= eeprom_read_byte((uint8_t *) (i*4+2));
        data <<= 8;
    2a7c:	fe 2c       	mov	r15, r14
    2a7e:	ed 2c       	mov	r14, r13
    2a80:	dc 2c       	mov	r13, r12
    2a82:	cc 24       	eor	r12, r12
        data |= eeprom_read_byte((uint8_t *) (i*4+1));
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	a0 e0       	ldi	r26, 0x00	; 0
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	c8 2a       	or	r12, r24
    2a8c:	d9 2a       	or	r13, r25
    2a8e:	ea 2a       	or	r14, r26
    2a90:	fb 2a       	or	r15, r27
        data <<= 8;
        data |= eeprom_read_byte((uint8_t *) (i*4+0));
    2a92:	ce 01       	movw	r24, r28
    2a94:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <__eerd_byte_x32a4u>
        memcpy(&Parameter[i], &data, 4);
    2a98:	f8 01       	movw	r30, r16
    2a9a:	ee 0f       	add	r30, r30
    2a9c:	ff 1f       	adc	r31, r31
    2a9e:	ee 0f       	add	r30, r30
    2aa0:	ff 1f       	adc	r31, r31
    2aa2:	ee 5d       	subi	r30, 0xDE	; 222
    2aa4:	fd 4d       	sbci	r31, 0xDD	; 221
        data = eeprom_read_byte((uint8_t *) (i*4+3));
        data <<= 8;
        data |= eeprom_read_byte((uint8_t *) (i*4+2));
        data <<= 8;
        data |= eeprom_read_byte((uint8_t *) (i*4+1));
        data <<= 8;
    2aa6:	fe 2c       	mov	r15, r14
    2aa8:	ed 2c       	mov	r14, r13
    2aaa:	dc 2c       	mov	r13, r12
    2aac:	cc 24       	eor	r12, r12
        data |= eeprom_read_byte((uint8_t *) (i*4+0));
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a0 e0       	ldi	r26, 0x00	; 0
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	c8 2a       	or	r12, r24
    2ab6:	d9 2a       	or	r13, r25
    2ab8:	ea 2a       	or	r14, r26
    2aba:	fb 2a       	or	r15, r27
        memcpy(&Parameter[i], &data, 4);
    2abc:	c0 82       	st	Z, r12
    2abe:	d1 82       	std	Z+1, r13	; 0x01
    2ac0:	e2 82       	std	Z+2, r14	; 0x02
    2ac2:	f3 82       	std	Z+3, r15	; 0x03
    2ac4:	0f 5f       	subi	r16, 0xFF	; 255
    2ac6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac8:	24 96       	adiw	r28, 0x04	; 4
    {
        initializeEEPROM();
    }
    
    // read out the Parameters
    for(uint8_t i=0; i<INT_PARAMETER_START; i++)
    2aca:	09 31       	cpi	r16, 0x19	; 25
    2acc:	11 05       	cpc	r17, r1
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <initializeParameters+0xc0>
    2ad0:	ba cf       	rjmp	.-140    	; 0x2a46 <initializeParameters+0x34>
        data |= eeprom_read_byte((uint8_t *) (i*4+1));
        data <<= 8;
        data |= eeprom_read_byte((uint8_t *) (i*4+0));
        memcpy(&Parameter[i], &data, 4);
    }
}
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	1f 91       	pop	r17
    2ad8:	0f 91       	pop	r16
    2ada:	ff 90       	pop	r15
    2adc:	ef 90       	pop	r14
    2ade:	df 90       	pop	r13
    2ae0:	cf 90       	pop	r12
    2ae2:	08 95       	ret

00002ae4 <BootRelay>:
    outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
    return 4;
}

void BootRelay(uint8_t *commandPacket)
{
    2ae4:	cf 93       	push	r28
    2ae6:	df 93       	push	r29
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
    2aec:	a0 97       	sbiw	r28, 0x20	; 32
    2aee:	cd bf       	out	0x3d, r28	; 61
    2af0:	de bf       	out	0x3e, r29	; 62
    // overview: 2)configure for 115200 baud passthrough
    // overview: 3)start a 20 second timer
    // overview: 4)do the serial passthrough, blink LED
    // overview: 5)wait for timer to finish, then reset/reboot

    cli(); // disable all interrupts, nothing else going on
    2af2:	f8 94       	cli
    DMA.CTRL = 0; // disable the DMA controller
    2af4:	10 92 00 01 	sts	0x0100, r1
  
    // repeat the command to the target
    DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
    2af8:	e0 eb       	ldi	r30, 0xB0	; 176
    2afa:	f9 e0       	ldi	r31, 0x09	; 9
    2afc:	13 82       	std	Z+3, r1	; 0x03
    DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm; //enable RX and TX
    2afe:	28 e1       	ldi	r18, 0x18	; 24
    2b00:	24 83       	std	Z+4, r18	; 0x04
    2b02:	fc 01       	movw	r30, r24
    for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    {
        while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm));
    2b08:	20 91 b1 09 	lds	r18, 0x09B1
    2b0c:	25 ff       	sbrs	r18, 5
    2b0e:	fc cf       	rjmp	.-8      	; 0x2b08 <BootRelay+0x24>
        DOWNSTREAM_USART.DATA = commandPacket[i];
    2b10:	21 91       	ld	r18, Z+
    2b12:	20 93 b0 09 	sts	0x09B0, r18
    DMA.CTRL = 0; // disable the DMA controller
  
    // repeat the command to the target
    DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
    DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm; //enable RX and TX
    for(int i=0;i<COMMAND_PACKET_SIZE;i++)
    2b16:	01 96       	adiw	r24, 0x01	; 1
    2b18:	87 30       	cpi	r24, 0x07	; 7
    2b1a:	91 05       	cpc	r25, r1
    2b1c:	a9 f7       	brne	.-22     	; 0x2b08 <BootRelay+0x24>
    {
        while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm));
        DOWNSTREAM_USART.DATA = commandPacket[i];
    }
    // dont bother waiting for a response verification
    while(!(DOWNSTREAM_USART.STATUS & USART_DREIF_bm)); // wait for the data to be read
    2b1e:	80 91 b1 09 	lds	r24, 0x09B1
    2b22:	85 ff       	sbrs	r24, 5
    2b24:	fc cf       	rjmp	.-8      	; 0x2b1e <BootRelay+0x3a>
    DOWNSTREAM_USART.STATUS = USART_TXCIF_bm; // clear the TX done flag
    2b26:	80 e4       	ldi	r24, 0x40	; 64
    2b28:	e0 eb       	ldi	r30, 0xB0	; 176
    2b2a:	f9 e0       	ldi	r31, 0x09	; 9
    2b2c:	81 83       	std	Z+1, r24	; 0x01
    while(!(DOWNSTREAM_USART.STATUS & USART_TXCIF_bm)); // wait for the TX to be done
    2b2e:	e0 eb       	ldi	r30, 0xB0	; 176
    2b30:	f9 e0       	ldi	r31, 0x09	; 9
    2b32:	80 91 b1 09 	lds	r24, 0x09B1
    2b36:	86 ff       	sbrs	r24, 6
    2b38:	fa cf       	rjmp	.-12     	; 0x2b2e <BootRelay+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b3a:	8f e3       	ldi	r24, 0x3F	; 63
    2b3c:	9f e1       	ldi	r25, 0x1F	; 31
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <BootRelay+0x5a>
    2b42:	00 c0       	rjmp	.+0      	; 0x2b44 <BootRelay+0x60>
    2b44:	00 00       	nop
    // Reconfigure the serial ports
    //int bsel = 1047;       // 115200 @ 32Mhz as calculated from ProtoTalk.net
    //uint8_t bscale = 10;      // 115200 @ 32Mhz as calculated from ProtoTalk.net
    int bsel = 3269;       // 38,400 @ 32Mhz as calculated from ProtoTalk.net
    uint8_t bscale = -6;      // 38,400 @ 32Mhz as calculated from ProtoTalk.net
    UPSTREAM_USART.CTRLA = 0x00; // disable interrupts
    2b46:	a0 ea       	ldi	r26, 0xA0	; 160
    2b48:	b9 e0       	ldi	r27, 0x09	; 9
    2b4a:	13 96       	adiw	r26, 0x03	; 3
    2b4c:	1c 92       	st	X, r1
    2b4e:	13 97       	sbiw	r26, 0x03	; 3
    UPSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
    2b50:	25 ec       	ldi	r18, 0xC5	; 197
    2b52:	16 96       	adiw	r26, 0x06	; 6
    2b54:	2c 93       	st	X, r18
    2b56:	16 97       	sbiw	r26, 0x06	; 6
    UPSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
    2b58:	9c ea       	ldi	r25, 0xAC	; 172
    2b5a:	17 96       	adiw	r26, 0x07	; 7
    2b5c:	9c 93       	st	X, r25
    2b5e:	17 97       	sbiw	r26, 0x07	; 7
    UPSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
    2b60:	88 e1       	ldi	r24, 0x18	; 24
    2b62:	14 96       	adiw	r26, 0x04	; 4
    2b64:	8c 93       	st	X, r24
    DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
    2b66:	13 82       	std	Z+3, r1	; 0x03
    DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
    2b68:	26 83       	std	Z+6, r18	; 0x06
    DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
    2b6a:	97 83       	std	Z+7, r25	; 0x07
    DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
    2b6c:	84 83       	std	Z+4, r24	; 0x04
    uint8_t up_fifo[16];
    uint8_t up_head = 0;
    uint8_t up_tail = 0;
    uint8_t down_fifo[16];
    uint8_t down_head = 0;
    uint8_t down_tail = 0;
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    uint32_t loop_cnt=0;
    uint8_t up_fifo[16];
    uint8_t up_head = 0;
    uint8_t up_tail = 0;
    uint8_t down_fifo[16];
    uint8_t down_head = 0;
    2b70:	20 e0       	ldi	r18, 0x00	; 0
  
    int sec_cnt=0;
    uint32_t loop_cnt=0;
    uint8_t up_fifo[16];
    uint8_t up_head = 0;
    uint8_t up_tail = 0;
    2b72:	40 e0       	ldi	r20, 0x00	; 0
    DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
    int sec_cnt=0;
    uint32_t loop_cnt=0;
    uint8_t up_fifo[16];
    uint8_t up_head = 0;
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
    DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
    DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
    int sec_cnt=0;
    uint32_t loop_cnt=0;
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	dc 01       	movw	r26, r24
    DOWNSTREAM_USART.CTRLA = 0x00; // disable interrupts
    DOWNSTREAM_USART.BAUDCTRLA = (uint8_t) bsel;
    DOWNSTREAM_USART.BAUDCTRLB = (bscale << 4) | (bsel >> 8);
    DOWNSTREAM_USART.CTRLB = USART_RXEN_bm | USART_TXEN_bm;    //enable RX and TX
  
    int sec_cnt=0;
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	70 e0       	ldi	r23, 0x00	; 0
{
    PORTC.OUTSET = 0x80;
}
void LEDoff()
{
    PORTC.OUTCLR = 0x80;
    2b80:	10 e4       	ldi	r17, 0x40	; 64
    2b82:	e1 2e       	mov	r14, r17
    2b84:	16 e0       	ldi	r17, 0x06	; 6
    2b86:	f1 2e       	mov	r15, r17
    2b88:	10 e8       	ldi	r17, 0x80	; 128
    uint8_t down_head = 0;
    uint8_t down_tail = 0;

    // relay chars while waiting for timeout
    while(sec_cnt < 200) {
        loop_cnt++;
    2b8a:	01 96       	adiw	r24, 0x01	; 1
    2b8c:	a1 1d       	adc	r26, r1
    2b8e:	b1 1d       	adc	r27, r1
        if(loop_cnt > 90000L) { // approximately 0.1sec experimentally
    2b90:	81 39       	cpi	r24, 0x91	; 145
    2b92:	ef e5       	ldi	r30, 0x5F	; 95
    2b94:	9e 07       	cpc	r25, r30
    2b96:	e1 e0       	ldi	r30, 0x01	; 1
    2b98:	ae 07       	cpc	r26, r30
    2b9a:	e0 e0       	ldi	r30, 0x00	; 0
    2b9c:	be 07       	cpc	r27, r30
    2b9e:	78 f0       	brcs	.+30     	; 0x2bbe <BootRelay+0xda>
            loop_cnt=0;
            sec_cnt++;
    2ba0:	6f 5f       	subi	r22, 0xFF	; 255
    2ba2:	7f 4f       	sbci	r23, 0xFF	; 255
            if((sec_cnt&0x03)==0x03)
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	83 70       	andi	r24, 0x03	; 3
    2ba8:	90 70       	andi	r25, 0x00	; 0
    }
}

void LEDon()
{
    PORTC.OUTSET = 0x80;
    2baa:	f7 01       	movw	r30, r14
    while(sec_cnt < 200) {
        loop_cnt++;
        if(loop_cnt > 90000L) { // approximately 0.1sec experimentally
            loop_cnt=0;
            sec_cnt++;
            if((sec_cnt&0x03)==0x03)
    2bac:	83 30       	cpi	r24, 0x03	; 3
    2bae:	91 05       	cpc	r25, r1
    2bb0:	11 f4       	brne	.+4      	; 0x2bb6 <BootRelay+0xd2>
    }
}

void LEDon()
{
    PORTC.OUTSET = 0x80;
    2bb2:	15 83       	std	Z+5, r17	; 0x05
    2bb4:	01 c0       	rjmp	.+2      	; 0x2bb8 <BootRelay+0xd4>
}
void LEDoff()
{
    PORTC.OUTCLR = 0x80;
    2bb6:	16 83       	std	Z+6, r17	; 0x06

    // relay chars while waiting for timeout
    while(sec_cnt < 200) {
        loop_cnt++;
        if(loop_cnt > 90000L) { // approximately 0.1sec experimentally
            loop_cnt=0;
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	dc 01       	movw	r26, r24
            if((sec_cnt&0x03)==0x03)
                LEDon();
            else
                LEDoff();
        }
        if (DOWNSTREAM_USART.STATUS & USART_RXCIF_bm) {
    2bbe:	e0 91 b1 09 	lds	r30, 0x09B1
    2bc2:	e7 ff       	sbrs	r30, 7
    2bc4:	0b c0       	rjmp	.+22     	; 0x2bdc <BootRelay+0xf8>
            up_fifo[up_head++] = DOWNSTREAM_USART.DATA;
    2bc6:	00 91 b0 09 	lds	r16, 0x09B0
    2bca:	e1 e1       	ldi	r30, 0x11	; 17
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	ec 0f       	add	r30, r28
    2bd0:	fd 1f       	adc	r31, r29
    2bd2:	e5 0f       	add	r30, r21
    2bd4:	f1 1d       	adc	r31, r1
    2bd6:	00 83       	st	Z, r16
    2bd8:	5f 5f       	subi	r21, 0xFF	; 255
            up_head %= sizeof(up_fifo);
    2bda:	5f 70       	andi	r21, 0x0F	; 15
        }
        if (UPSTREAM_USART.STATUS & USART_RXCIF_bm) {
    2bdc:	e0 91 a1 09 	lds	r30, 0x09A1
    2be0:	e7 ff       	sbrs	r30, 7
    2be2:	0b c0       	rjmp	.+22     	; 0x2bfa <BootRelay+0x116>
            down_fifo[down_head++] = UPSTREAM_USART.DATA;
    2be4:	00 91 a0 09 	lds	r16, 0x09A0
    2be8:	e1 e0       	ldi	r30, 0x01	; 1
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	ec 0f       	add	r30, r28
    2bee:	fd 1f       	adc	r31, r29
    2bf0:	e2 0f       	add	r30, r18
    2bf2:	f1 1d       	adc	r31, r1
    2bf4:	00 83       	st	Z, r16
    2bf6:	2f 5f       	subi	r18, 0xFF	; 255
            down_head %= sizeof(down_fifo);
    2bf8:	2f 70       	andi	r18, 0x0F	; 15
        }
        if (up_head != up_tail && (UPSTREAM_USART.STATUS & USART_DREIF_bm)) {
    2bfa:	54 17       	cp	r21, r20
    2bfc:	79 f0       	breq	.+30     	; 0x2c1c <BootRelay+0x138>
    2bfe:	e0 91 a1 09 	lds	r30, 0x09A1
    2c02:	e5 ff       	sbrs	r30, 5
    2c04:	0b c0       	rjmp	.+22     	; 0x2c1c <BootRelay+0x138>
            UPSTREAM_USART.DATA = up_fifo[up_tail++];
    2c06:	e1 e1       	ldi	r30, 0x11	; 17
    2c08:	f0 e0       	ldi	r31, 0x00	; 0
    2c0a:	ec 0f       	add	r30, r28
    2c0c:	fd 1f       	adc	r31, r29
    2c0e:	e4 0f       	add	r30, r20
    2c10:	f1 1d       	adc	r31, r1
    2c12:	e0 81       	ld	r30, Z
    2c14:	e0 93 a0 09 	sts	0x09A0, r30
    2c18:	4f 5f       	subi	r20, 0xFF	; 255
            up_tail %= sizeof(up_fifo);
    2c1a:	4f 70       	andi	r20, 0x0F	; 15
        }
        if (down_head != down_tail && (DOWNSTREAM_USART.STATUS & USART_DREIF_bm)) {
    2c1c:	23 17       	cp	r18, r19
    2c1e:	79 f0       	breq	.+30     	; 0x2c3e <BootRelay+0x15a>
    2c20:	e0 91 b1 09 	lds	r30, 0x09B1
    2c24:	e5 ff       	sbrs	r30, 5
    2c26:	0b c0       	rjmp	.+22     	; 0x2c3e <BootRelay+0x15a>
            DOWNSTREAM_USART.DATA = down_fifo[down_tail++];
    2c28:	e1 e0       	ldi	r30, 0x01	; 1
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	ec 0f       	add	r30, r28
    2c2e:	fd 1f       	adc	r31, r29
    2c30:	e3 0f       	add	r30, r19
    2c32:	f1 1d       	adc	r31, r1
    2c34:	e0 81       	ld	r30, Z
    2c36:	e0 93 b0 09 	sts	0x09B0, r30
    2c3a:	3f 5f       	subi	r19, 0xFF	; 255
            down_tail %= sizeof(down_fifo);
    2c3c:	3f 70       	andi	r19, 0x0F	; 15
    uint8_t down_fifo[16];
    uint8_t down_head = 0;
    uint8_t down_tail = 0;

    // relay chars while waiting for timeout
    while(sec_cnt < 200) {
    2c3e:	68 3c       	cpi	r22, 0xC8	; 200
    2c40:	71 05       	cpc	r23, r1
    2c42:	0c f4       	brge	.+2      	; 0x2c46 <BootRelay+0x162>
    2c44:	a2 cf       	rjmp	.-188    	; 0x2b8a <BootRelay+0xa6>
            down_tail %= sizeof(down_fifo);
        }
    }

    // 30sec timer finished, reset/reboot
    wdt_enable(WDT_PER_8CLK_gc);
    2c46:	93 e0       	ldi	r25, 0x03	; 3
    2c48:	88 ed       	ldi	r24, 0xD8	; 216
    2c4a:	08 b6       	in	r0, 0x38	; 56
    2c4c:	84 bf       	out	0x34, r24	; 52
    2c4e:	90 93 80 00 	sts	0x0080, r25
    2c52:	a8 95       	wdr
    2c54:	08 be       	out	0x38, r0	; 56
    2c56:	ff cf       	rjmp	.-2      	; 0x2c56 <BootRelay+0x172>

00002c58 <processCommand>:
 * Parity checking at the byte level has already been done in the RX
 * interrupt.  It has not been done in the case of DMA-driven reception
 * due to hardware limitations.
 ************************************************************************/
int processCommand(uint8_t *commandPacket,uint8_t *outputBuffer)
{
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	ec 01       	movw	r28, r24
    2c6a:	7b 01       	movw	r14, r22

    uint8_t opcode;

    opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    2c6c:	19 81       	ldd	r17, Y+1	; 0x01
    2c6e:	01 2f       	mov	r16, r17
    2c70:	00 7f       	andi	r16, 0xF0	; 240

    switch(opcode)
    2c72:	00 38       	cpi	r16, 0x80	; 128
    2c74:	d1 f0       	breq	.+52     	; 0x2caa <processCommand+0x52>
    2c76:	01 38       	cpi	r16, 0x81	; 129
    2c78:	40 f4       	brcc	.+16     	; 0x2c8a <processCommand+0x32>
    2c7a:	00 36       	cpi	r16, 0x60	; 96
    2c7c:	b1 f0       	breq	.+44     	; 0x2caa <processCommand+0x52>
    2c7e:	00 37       	cpi	r16, 0x70	; 112
    2c80:	a1 f0       	breq	.+40     	; 0x2caa <processCommand+0x52>
    2c82:	00 23       	and	r16, r16
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <processCommand+0x30>
    2c86:	70 c0       	rjmp	.+224    	; 0x2d68 <processCommand+0x110>
    2c88:	48 c2       	rjmp	.+1168   	; 0x311a <__stack+0x11b>
    2c8a:	00 3a       	cpi	r16, 0xA0	; 160
    2c8c:	09 f4       	brne	.+2      	; 0x2c90 <processCommand+0x38>
    2c8e:	1b c1       	rjmp	.+566    	; 0x2ec6 <processCommand+0x26e>
    2c90:	01 3a       	cpi	r16, 0xA1	; 161
    2c92:	20 f4       	brcc	.+8      	; 0x2c9c <processCommand+0x44>
    2c94:	00 39       	cpi	r16, 0x90	; 144
    2c96:	09 f0       	breq	.+2      	; 0x2c9a <processCommand+0x42>
    2c98:	40 c2       	rjmp	.+1152   	; 0x311a <__stack+0x11b>
    2c9a:	07 c0       	rjmp	.+14     	; 0x2caa <processCommand+0x52>
    2c9c:	00 3b       	cpi	r16, 0xB0	; 176
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <processCommand+0x4a>
    2ca0:	24 c2       	rjmp	.+1096   	; 0x30ea <__stack+0xeb>
    2ca2:	00 3c       	cpi	r16, 0xC0	; 192
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <processCommand+0x50>
    2ca6:	39 c2       	rjmp	.+1138   	; 0x311a <__stack+0x11b>
    2ca8:	06 c2       	rjmp	.+1036   	; 0x30b6 <__stack+0xb7>
 * handles the Parameter Commands
 ************************************************************************/
static int handleParameterCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint8_t opcode = commandPacket[COMMAND_OFFSET] & OPCODE_BITMASK;
    uint8_t selectedParameter = commandPacket[COMMAND_OFFSET] & PARAMETER_ADDRESS_BITMASK;
    2caa:	1f 71       	andi	r17, 0x1F	; 31
    
    if(selectedParameter < INT_PARAMETER_START) // float parameter
    2cac:	19 31       	cpi	r17, 0x19	; 25
    2cae:	28 f5       	brcc	.+74     	; 0x2cfa <processCommand+0xa2>
    {
        float* parameterPointer = &Parameter[selectedParameter];
    2cb0:	e1 2f       	mov	r30, r17
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	ee 0f       	add	r30, r30
    2cb6:	ff 1f       	adc	r31, r31
    2cb8:	ee 0f       	add	r30, r30
    2cba:	ff 1f       	adc	r31, r31
        
        //Finally check for READ/WRITE direction
        if((opcode == MOTOR_PARAMETER_RE_H_OPCODE) || (opcode == MOTOR_PARAMETER_RE_L_OPCODE)) //read
    2cbc:	00 37       	cpi	r16, 0x70	; 112
    2cbe:	11 f0       	breq	.+4      	; 0x2cc4 <processCommand+0x6c>
    2cc0:	00 36       	cpi	r16, 0x60	; 96
    2cc2:	69 f4       	brne	.+26     	; 0x2cde <processCommand+0x86>
        {
            convertFloatToArray(*parameterPointer, &outputBuffer[RESPONSE_PAYLOAD_OFFSET]);
    2cc4:	ee 5d       	subi	r30, 0xDE	; 222
    2cc6:	fd 4d       	sbci	r31, 0xDD	; 221
    2cc8:	80 81       	ld	r24, Z
    2cca:	91 81       	ldd	r25, Z+1	; 0x01
    2ccc:	a2 81       	ldd	r26, Z+2	; 0x02
    2cce:	b3 81       	ldd	r27, Z+3	; 0x03
 * This is broken out as a function in case more complex manipulation is
 * required for potential other host architectures.
 ************************************************************************/
static void convertFloatToArray(float inputFloat, uint8_t *outputArray)
{
    memcpy(outputArray,&inputFloat,4);
    2cd0:	f7 01       	movw	r30, r14
    2cd2:	83 83       	std	Z+3, r24	; 0x03
    2cd4:	94 83       	std	Z+4, r25	; 0x04
    2cd6:	a5 83       	std	Z+5, r26	; 0x05
    2cd8:	b6 83       	std	Z+6, r27	; 0x06
        
        //Finally check for READ/WRITE direction
        if((opcode == MOTOR_PARAMETER_RE_H_OPCODE) || (opcode == MOTOR_PARAMETER_RE_L_OPCODE)) //read
        {
            convertFloatToArray(*parameterPointer, &outputBuffer[RESPONSE_PAYLOAD_OFFSET]);
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 7;
    2cda:	87 e0       	ldi	r24, 0x07	; 7
    2cdc:	1a c0       	rjmp	.+52     	; 0x2d12 <processCommand+0xba>
 * Currently only used in USART communication with a host PC or other
 * micro.
 ************************************************************************/
static float convertArrayToFloat(uint8_t *packedInteger)
{
    return *(float *)packedInteger;
    2cde:	4a 81       	ldd	r20, Y+2	; 0x02
    2ce0:	5b 81       	ldd	r21, Y+3	; 0x03
    2ce2:	6c 81       	ldd	r22, Y+4	; 0x04
    2ce4:	7d 81       	ldd	r23, Y+5	; 0x05
            return 8;
        }
        else //write
        {
            float convertedData = convertArrayToFloat(&commandPacket[PAYLOAD_OFFSET]);
            *parameterPointer = convertedData;
    2ce6:	ee 5d       	subi	r30, 0xDE	; 222
    2ce8:	fd 4d       	sbci	r31, 0xDD	; 221
    2cea:	40 83       	st	Z, r20
    2cec:	51 83       	std	Z+1, r21	; 0x01
    2cee:	62 83       	std	Z+2, r22	; 0x02
    2cf0:	73 83       	std	Z+3, r23	; 0x03
            WriteFloatToEEPROM(selectedParameter, convertedData);
    2cf2:	81 2f       	mov	r24, r17
    2cf4:	0e 94 b5 13 	call	0x276a	; 0x276a <WriteFloatToEEPROM>
    2cf8:	32 c0       	rjmp	.+100    	; 0x2d5e <processCommand+0x106>
        }
    }
    else // int parameter
    {
        //Finally check for READ/WRITE direction
        if((opcode == MOTOR_PARAMETER_RE_H_OPCODE) || (opcode == MOTOR_PARAMETER_RE_L_OPCODE)) //read
    2cfa:	00 37       	cpi	r16, 0x70	; 112
    2cfc:	11 f0       	breq	.+4      	; 0x2d02 <processCommand+0xaa>
    2cfe:	00 36       	cpi	r16, 0x60	; 96
    2d00:	a9 f4       	brne	.+42     	; 0x2d2c <processCommand+0xd4>
        {
            ReadIntFromEEPROM(selectedParameter, &outputBuffer[RESPONSE_PAYLOAD_OFFSET]);
    2d02:	b7 01       	movw	r22, r14
    2d04:	6d 5f       	subi	r22, 0xFD	; 253
    2d06:	7f 4f       	sbci	r23, 0xFF	; 255
    2d08:	81 2f       	mov	r24, r17
    2d0a:	0e 94 57 13 	call	0x26ae	; 0x26ae <ReadIntFromEEPROM>
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 7;
    2d0e:	87 e0       	ldi	r24, 0x07	; 7
    2d10:	f7 01       	movw	r30, r14
    2d12:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = opcode;
    2d14:	01 83       	std	Z+1, r16	; 0x01
            outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    2d16:	12 82       	std	Z+2, r1	; 0x02
            outputBuffer[7] = computeChecksum(outputBuffer, 7); //this is the checksum
    2d18:	c7 01       	movw	r24, r14
    2d1a:	67 e0       	ldi	r22, 0x07	; 7
    2d1c:	70 e0       	ldi	r23, 0x00	; 0
    2d1e:	0e 94 ed 04 	call	0x9da	; 0x9da <computeChecksum>
    2d22:	f7 01       	movw	r30, r14
    2d24:	87 83       	std	Z+7, r24	; 0x07
            return 8;
    2d26:	88 e0       	ldi	r24, 0x08	; 8
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	06 c2       	rjmp	.+1036   	; 0x3138 <__stack+0x139>
        }
        else //write
        {
            WriteIntToEEPROM(selectedParameter, &commandPacket[PAYLOAD_OFFSET]);
    2d2c:	be 01       	movw	r22, r28
    2d2e:	6e 5f       	subi	r22, 0xFE	; 254
    2d30:	7f 4f       	sbci	r23, 0xFF	; 255
    2d32:	81 2f       	mov	r24, r17
    2d34:	0e 94 7e 13 	call	0x26fc	; 0x26fc <WriteIntToEEPROM>
            
            if(selectedParameter == EEPROM_ADDRESS_LED) 
    2d38:	1f 31       	cpi	r17, 0x1F	; 31
    2d3a:	89 f4       	brne	.+34     	; 0x2d5e <processCommand+0x106>
            {
                if(commandPacket[PAYLOAD_OFFSET+0] |
    2d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	89 2b       	or	r24, r25
    2d42:	9c 81       	ldd	r25, Y+4	; 0x04
    2d44:	89 2b       	or	r24, r25
    2d46:	9d 81       	ldd	r25, Y+5	; 0x05
    2d48:	89 2b       	or	r24, r25
    2d4a:	29 f0       	breq	.+10     	; 0x2d56 <processCommand+0xfe>
    }
}

void LEDon()
{
    PORTC.OUTSET = 0x80;
    2d4c:	80 e8       	ldi	r24, 0x80	; 128
    2d4e:	e0 e4       	ldi	r30, 0x40	; 64
    2d50:	f6 e0       	ldi	r31, 0x06	; 6
    2d52:	85 83       	std	Z+5, r24	; 0x05
    2d54:	04 c0       	rjmp	.+8      	; 0x2d5e <processCommand+0x106>
}
void LEDoff()
{
    PORTC.OUTCLR = 0x80;
    2d56:	80 e8       	ldi	r24, 0x80	; 128
    2d58:	e0 e4       	ldi	r30, 0x40	; 64
    2d5a:	f6 e0       	ldi	r31, 0x06	; 6
    2d5c:	86 83       	std	Z+6, r24	; 0x06
                    LEDon();
                else
                    LEDoff();
            }

            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    2d5e:	83 e0       	ldi	r24, 0x03	; 3
    2d60:	f7 01       	movw	r30, r14
    2d62:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = opcode;
    2d64:	01 83       	std	Z+1, r16	; 0x01
    2d66:	bf c1       	rjmp	.+894    	; 0x30e6 <__stack+0xe7>
    uint8_t responseSize = 0;
    uint16_t collectionBitfield;
    uint16_t controlSignal;

    //collectionBitfield = (uint16_t) (commandPacket[PAYLOAD_OFFSET]);
    memcpy(&collectionBitfield,&commandPacket[PAYLOAD_OFFSET],2);
    2d68:	0a 81       	ldd	r16, Y+2	; 0x02
    2d6a:	1b 81       	ldd	r17, Y+3	; 0x03

    if(collectionBitfield & DATA_COLLECTION_TENSION_BITMASK)
    2d6c:	15 ff       	sbrs	r17, 5
    2d6e:	0f c0       	rjmp	.+30     	; 0x2d8e <processCommand+0x136>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&tension,4);
    2d70:	80 91 3a 20 	lds	r24, 0x203A
    2d74:	90 91 3b 20 	lds	r25, 0x203B
    2d78:	a0 91 3c 20 	lds	r26, 0x203C
    2d7c:	b0 91 3d 20 	lds	r27, 0x203D
    2d80:	fb 01       	movw	r30, r22
    2d82:	83 83       	std	Z+3, r24	; 0x03
    2d84:	94 83       	std	Z+4, r25	; 0x04
    2d86:	a5 83       	std	Z+5, r26	; 0x05
    2d88:	b6 83       	std	Z+6, r27	; 0x06
        responseSize += 4;
    2d8a:	c4 e0       	ldi	r28, 0x04	; 4
    2d8c:	01 c0       	rjmp	.+2      	; 0x2d90 <processCommand+0x138>
    }
}

static int handleCollectionCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint8_t responseSize = 0;
    2d8e:	c0 e0       	ldi	r28, 0x00	; 0
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&tension,4);
        responseSize += 4;
    }

    if(collectionBitfield & DATA_COLLECTION_MOTORCURRENT_BITMASK)
    2d90:	10 ff       	sbrs	r17, 0
    2d92:	18 c0       	rjmp	.+48     	; 0x2dc4 <processCommand+0x16c>
    {
        controlSignal = round(motorCurrent * 1000.0); //convert to mA
    2d94:	60 91 40 20 	lds	r22, 0x2040
    2d98:	70 91 41 20 	lds	r23, 0x2041
    2d9c:	80 91 42 20 	lds	r24, 0x2042
    2da0:	90 91 43 20 	lds	r25, 0x2043
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	4a e7       	ldi	r20, 0x7A	; 122
    2daa:	54 e4       	ldi	r21, 0x44	; 68
    2dac:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    2db0:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <round>
    2db4:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fixunssfsi>
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize] = controlSignal & 0x00FF;
    2db8:	f7 01       	movw	r30, r14
    2dba:	ec 0f       	add	r30, r28
    2dbc:	f1 1d       	adc	r31, r1
    2dbe:	63 83       	std	Z+3, r22	; 0x03
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize+1] = (controlSignal & 0xFF00) >> 8;
    2dc0:	74 83       	std	Z+4, r23	; 0x04
        responseSize += 2;
    2dc2:	ce 5f       	subi	r28, 0xFE	; 254
    }

    if(collectionBitfield & DATA_COLLECTION_MOTORSTATORTEMP_BITMASK)
    2dc4:	07 ff       	sbrs	r16, 7
    2dc6:	18 c0       	rjmp	.+48     	; 0x2df8 <processCommand+0x1a0>
    {
        controlSignal = round(statorTemperature * 100.0); //convert to hundredths of a degree
    2dc8:	60 91 00 20 	lds	r22, 0x2000
    2dcc:	70 91 01 20 	lds	r23, 0x2001
    2dd0:	80 91 02 20 	lds	r24, 0x2002
    2dd4:	90 91 03 20 	lds	r25, 0x2003
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	48 ec       	ldi	r20, 0xC8	; 200
    2dde:	52 e4       	ldi	r21, 0x42	; 66
    2de0:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    2de4:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <round>
    2de8:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fixunssfsi>
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize] = controlSignal & 0x00FF;
    2dec:	f7 01       	movw	r30, r14
    2dee:	ec 0f       	add	r30, r28
    2df0:	f1 1d       	adc	r31, r1
    2df2:	63 83       	std	Z+3, r22	; 0x03
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize+1] = (controlSignal & 0xFF00) >> 8;
    2df4:	74 83       	std	Z+4, r23	; 0x04
        responseSize += 2;
    2df6:	ce 5f       	subi	r28, 0xFE	; 254
    }

    if(collectionBitfield & DATA_COLLECTION_MOTORVELOCITY_BITMASK)
    2df8:	06 ff       	sbrs	r16, 6
    2dfa:	0a c0       	rjmp	.+20     	; 0x2e10 <processCommand+0x1b8>
    {
        controlSignal = averageRPM;
    2dfc:	90 91 02 22 	lds	r25, 0x2202
    2e00:	80 91 03 22 	lds	r24, 0x2203
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize] = controlSignal & 0x00FF;
    2e04:	f7 01       	movw	r30, r14
    2e06:	ec 0f       	add	r30, r28
    2e08:	f1 1d       	adc	r31, r1
    2e0a:	93 83       	std	Z+3, r25	; 0x03
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize+1] = (controlSignal & 0xFF00) >> 8;
    2e0c:	84 83       	std	Z+4, r24	; 0x04
        responseSize += 2;
    2e0e:	ce 5f       	subi	r28, 0xFE	; 254
    }

    if(collectionBitfield & DATA_COLLECTION_MOTORWINDINGTEMP_BITMASK)
    2e10:	03 ff       	sbrs	r16, 3
    2e12:	22 c0       	rjmp	.+68     	; 0x2e58 <processCommand+0x200>
    {
        controlSignal = round((oldDeltaT + statorTemperature) * 100.0); //convert to hundredths of a degree
    2e14:	60 91 fa 21 	lds	r22, 0x21FA
    2e18:	70 91 fb 21 	lds	r23, 0x21FB
    2e1c:	80 91 fc 21 	lds	r24, 0x21FC
    2e20:	90 91 fd 21 	lds	r25, 0x21FD
    2e24:	20 91 00 20 	lds	r18, 0x2000
    2e28:	30 91 01 20 	lds	r19, 0x2001
    2e2c:	40 91 02 20 	lds	r20, 0x2002
    2e30:	50 91 03 20 	lds	r21, 0x2003
    2e34:	0e 94 74 19 	call	0x32e8	; 0x32e8 <__addsf3>
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	48 ec       	ldi	r20, 0xC8	; 200
    2e3e:	52 e4       	ldi	r21, 0x42	; 66
    2e40:	0e 94 89 1c 	call	0x3912	; 0x3912 <__mulsf3>
    2e44:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <round>
    2e48:	0e 94 8d 1a 	call	0x351a	; 0x351a <__fixunssfsi>
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize] = controlSignal & 0x00FF;
    2e4c:	f7 01       	movw	r30, r14
    2e4e:	ec 0f       	add	r30, r28
    2e50:	f1 1d       	adc	r31, r1
    2e52:	63 83       	std	Z+3, r22	; 0x03
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize+1] = (controlSignal & 0xFF00) >> 8;
    2e54:	74 83       	std	Z+4, r23	; 0x04
        responseSize += 2;
    2e56:	ce 5f       	subi	r28, 0xFE	; 254
    }

    if(collectionBitfield & DATA_COLLECTION_MOTORHALL_BITMASK)
    2e58:	02 ff       	sbrs	r16, 2
    2e5a:	0e c0       	rjmp	.+28     	; 0x2e78 <processCommand+0x220>
    {
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize] = encoder & 0x00FF;
    2e5c:	80 91 f2 21 	lds	r24, 0x21F2
    2e60:	90 91 f3 21 	lds	r25, 0x21F3
    2e64:	f7 01       	movw	r30, r14
    2e66:	ec 0f       	add	r30, r28
    2e68:	f1 1d       	adc	r31, r1
    2e6a:	83 83       	std	Z+3, r24	; 0x03
        outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize+1] = (encoder & 0xFF00) >> 8;
    2e6c:	80 91 f2 21 	lds	r24, 0x21F2
    2e70:	90 91 f3 21 	lds	r25, 0x21F3
    2e74:	94 83       	std	Z+4, r25	; 0x04
        responseSize += 2;
    2e76:	ce 5f       	subi	r28, 0xFE	; 254
    }

    if(collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
    2e78:	01 ff       	sbrs	r16, 1
    2e7a:	10 c0       	rjmp	.+32     	; 0x2e9c <processCommand+0x244>
    {
        memcpy(&outputBuffer[RESPONSE_PAYLOAD_OFFSET+responseSize],&RxCheckSumErrCnt,4);
    2e7c:	f7 01       	movw	r30, r14
    2e7e:	ec 0f       	add	r30, r28
    2e80:	f1 1d       	adc	r31, r1
    2e82:	80 91 13 22 	lds	r24, 0x2213
    2e86:	90 91 14 22 	lds	r25, 0x2214
    2e8a:	a0 91 15 22 	lds	r26, 0x2215
    2e8e:	b0 91 16 22 	lds	r27, 0x2216
    2e92:	83 83       	std	Z+3, r24	; 0x03
    2e94:	94 83       	std	Z+4, r25	; 0x04
    2e96:	a5 83       	std	Z+5, r26	; 0x05
    2e98:	b6 83       	std	Z+6, r27	; 0x06
        responseSize += 4;
    2e9a:	cc 5f       	subi	r28, 0xFC	; 252
    }

    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3+responseSize;
    2e9c:	8c 2f       	mov	r24, r28
    2e9e:	8d 5f       	subi	r24, 0xFD	; 253
    2ea0:	f7 01       	movw	r30, r14
    2ea2:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = DATA_COLLECTION_OPCODE;
    2ea4:	11 82       	std	Z+1, r1	; 0x01
    outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    2ea6:	12 82       	std	Z+2, r1	; 0x02
    outputBuffer[3+responseSize] = computeChecksum(outputBuffer,3+responseSize); //this is the checksum
    2ea8:	d0 e0       	ldi	r29, 0x00	; 0
    2eaa:	be 01       	movw	r22, r28
    2eac:	6d 5f       	subi	r22, 0xFD	; 253
    2eae:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb0:	87 01       	movw	r16, r14
    2eb2:	06 0f       	add	r16, r22
    2eb4:	17 1f       	adc	r17, r23
    2eb6:	c7 01       	movw	r24, r14
    2eb8:	0e 94 ed 04 	call	0x9da	; 0x9da <computeChecksum>
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	80 83       	st	Z, r24
    return 4+responseSize;
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	04 96       	adiw	r24, 0x04	; 4
        case MOTOR_PARAMETER_WR_L_OPCODE: //Fallthrough intentional
        case MOTOR_PARAMETER_WR_H_OPCODE:
            return handleParameterCommand(commandPacket,outputBuffer);

        case DATA_COLLECTION_OPCODE:
            return handleCollectionCommand(commandPacket,outputBuffer);
    2ec4:	39 c1       	rjmp	.+626    	; 0x3138 <__stack+0x139>
    uint16_t setpoint;
    int applySetpoint = THERMAL_DISCARD;
    int rejectSetpoint;

    motorDirection = commandPacket[COMMAND_OFFSET] & MOTOR_COMMAND_DIRECTION_BITMASK;
    controlScheme = commandPacket[COMMAND_OFFSET] & MOTOR_COMMAND_SCHEME_BITMASK;
    2ec6:	e1 2f       	mov	r30, r17
    2ec8:	e3 70       	andi	r30, 0x03	; 3
        case MOTOR_PARAMETER_WR_L_OPCODE: //Fallthrough intentional
        case MOTOR_PARAMETER_WR_H_OPCODE:
            return handleParameterCommand(commandPacket,outputBuffer);

        case DATA_COLLECTION_OPCODE:
            return handleCollectionCommand(commandPacket,outputBuffer);
    2eca:	f0 e0       	ldi	r31, 0x00	; 0
    2ecc:	ea 5c       	subi	r30, 0xCA	; 202
    2ece:	ff 4d       	sbci	r31, 0xDF	; 223
    2ed0:	d0 80       	ld	r13, Z

    uint16_t setpoint;
    int applySetpoint = THERMAL_DISCARD;
    int rejectSetpoint;

    motorDirection = commandPacket[COMMAND_OFFSET] & MOTOR_COMMAND_DIRECTION_BITMASK;
    2ed2:	1c 70       	andi	r17, 0x0C	; 12
            newScheme = CONTROL_SCHEME_VOLTAGE;
            break;
    }


    switch(motorDirection)
    2ed4:	14 30       	cpi	r17, 0x04	; 4
    2ed6:	31 f0       	breq	.+12     	; 0x2ee4 <processCommand+0x28c>
    2ed8:	18 30       	cpi	r17, 0x08	; 8
    2eda:	09 f0       	breq	.+2      	; 0x2ede <processCommand+0x286>
    2edc:	36 c1       	rjmp	.+620    	; 0x314a <__stack+0x14b>
    {
        case MOTOR_COMMAND_FORWARD:
            newDirection = DIRECTION_FORWARD;
    2ede:	cc 24       	eor	r12, r12
    2ee0:	c3 94       	inc	r12
    2ee2:	02 c0       	rjmp	.+4      	; 0x2ee8 <processCommand+0x290>
            break;
        case MOTOR_COMMAND_REVERSE:
            newDirection = DIRECTION_REVERSE;
    2ee4:	02 e0       	ldi	r16, 0x02	; 2
    2ee6:	c0 2e       	mov	r12, r16
    {
        updateMotorDirection(newDirection);
        //resetVelocityCounter(); //moved inside updateMotorDirection()
        //updateMotorVoltage(0x00);// inside updateMotorDirection()
    }
    else if (getMotorDirection() == DIRECTION_STOP)
    2ee8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    2eec:	88 23       	and	r24, r24
    2eee:	29 f4       	brne	.+10     	; 0x2efa <processCommand+0x2a2>
    {
        //Start from a clean motor voltage if just starting up
        //Later logic also resets if a control scheme has changed.
        resetPIDController();
    2ef0:	0e 94 03 09 	call	0x1206	; 0x1206 <resetPIDController>
        updateMotorVoltage(0x00);
    2ef4:	80 e0       	ldi	r24, 0x00	; 0
    2ef6:	0e 94 05 07 	call	0xe0a	; 0xe0a <updateMotorVoltage>
    }
    
    //Cast the 16 bit setpoint to a uint16.  Incoming data should be little endian to match
    //this processor's compiler convention
    //This will allow conversion to fixed point more easily if necessary
    setpoint = *(uint16_t *)&commandPacket[PAYLOAD_OFFSET];
    2efa:	0a 80       	ldd	r0, Y+2	; 0x02
    2efc:	db 81       	ldd	r29, Y+3	; 0x03
    2efe:	c0 2d       	mov	r28, r0
    rejectSetpoint = 0;

    switch(newScheme)
    2f00:	f1 e0       	ldi	r31, 0x01	; 1
    2f02:	df 16       	cp	r13, r31
    2f04:	61 f1       	breq	.+88     	; 0x2f5e <processCommand+0x306>
    2f06:	df 16       	cp	r13, r31
    2f08:	48 f0       	brcs	.+18     	; 0x2f1c <processCommand+0x2c4>
    2f0a:	22 e0       	ldi	r18, 0x02	; 2
    2f0c:	d2 16       	cp	r13, r18
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <processCommand+0x2ba>
    2f10:	5b c0       	rjmp	.+182    	; 0x2fc8 <processCommand+0x370>
    2f12:	84 e0       	ldi	r24, 0x04	; 4
    2f14:	d8 16       	cp	r13, r24
    2f16:	09 f0       	breq	.+2      	; 0x2f1a <processCommand+0x2c2>
    2f18:	a2 c0       	rjmp	.+324    	; 0x305e <__stack+0x5f>
    2f1a:	81 c0       	rjmp	.+258    	; 0x301e <__stack+0x1f>
    {
        case CONTROL_SCHEME_VOLTAGE:
            cli();
    2f1c:	f8 94       	cli
            if((setpoint > MAXIMUM_VOLTAGE_COMMAND) || (setpoint < MINIMUM_VOLTAGE_COMMAND))
    2f1e:	ed ef       	ldi	r30, 0xFD	; 253
    2f20:	c1 30       	cpi	r28, 0x01	; 1
    2f22:	de 07       	cpc	r29, r30
    2f24:	08 f0       	brcs	.+2      	; 0x2f28 <processCommand+0x2d0>
    2f26:	a3 c0       	rjmp	.+326    	; 0x306e <__stack+0x6f>
            {
                rejectSetpoint = 1;
                break;
            }
            applySetpoint = thermalCheckSetpoint(CONTROL_SCHEME_VOLTAGE, setpoint);
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	be 01       	movw	r22, r28
    2f2c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <thermalCheckSetpoint>
    2f30:	8c 01       	movw	r16, r24
            if((applySetpoint == THERMAL_DELAY) || (applySetpoint == THERMAL_OK))
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	82 30       	cpi	r24, 0x02	; 2
    2f36:	91 05       	cpc	r25, r1
    2f38:	08 f0       	brcs	.+2      	; 0x2f3c <processCommand+0x2e4>
    2f3a:	9e c0       	rjmp	.+316    	; 0x3078 <__stack+0x79>
            {
                PID_state.controlScheme = CONTROL_SCHEME_VOLTAGE;
    2f3c:	10 92 1f 22 	sts	0x221F, r1
                PID_state.setpoint = setpoint;
    2f40:	c0 93 20 22 	sts	0x2220, r28
    2f44:	d0 93 21 22 	sts	0x2221, r29
                updateMotorDirection(newDirection);
    2f48:	8c 2d       	mov	r24, r12
    2f4a:	0e 94 3c 07 	call	0xe78	; 0xe78 <updateMotorDirection>
                // {
                //     updateMotorDirection(newDirection);
                //     //resetVelocityCounter(); //moved inside updateMotorDirection()
                // }
            }
            if(applySetpoint == THERMAL_OK)
    2f4e:	02 30       	cpi	r16, 0x02	; 2
    2f50:	11 05       	cpc	r17, r1
    2f52:	09 f0       	breq	.+2      	; 0x2f56 <processCommand+0x2fe>
    2f54:	87 c0       	rjmp	.+270    	; 0x3064 <__stack+0x65>
            {
                //Setpoint must be scaled down because the actual control signal is only 8 bits, not 16.
                updateMotorVoltage(setpoint / 256);
    2f56:	8d 2f       	mov	r24, r29
    2f58:	0e 94 05 07 	call	0xe0a	; 0xe0a <updateMotorVoltage>
    2f5c:	8d c0       	rjmp	.+282    	; 0x3078 <__stack+0x79>
            }

            break;

        case CONTROL_SCHEME_VELOCITY:
            cli();
    2f5e:	f8 94       	cli
            if((setpoint > Parameter[PARAMETER_MAXIMUM_RPM]) || (setpoint < MINIMUM_VELOCITY_COMMAND))
    2f60:	be 01       	movw	r22, r28
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__floatunsisf>
    2f6a:	20 91 6a 22 	lds	r18, 0x226A
    2f6e:	30 91 6b 22 	lds	r19, 0x226B
    2f72:	40 91 6c 22 	lds	r20, 0x226C
    2f76:	50 91 6d 22 	lds	r21, 0x226D
    2f7a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <__gesf2>
    2f7e:	18 16       	cp	r1, r24
    2f80:	0c f4       	brge	.+2      	; 0x2f84 <processCommand+0x32c>
    2f82:	75 c0       	rjmp	.+234    	; 0x306e <__stack+0x6f>
    2f84:	c8 3c       	cpi	r28, 0xC8	; 200
    2f86:	d1 05       	cpc	r29, r1
    2f88:	08 f4       	brcc	.+2      	; 0x2f8c <processCommand+0x334>
    2f8a:	71 c0       	rjmp	.+226    	; 0x306e <__stack+0x6f>
            {
                rejectSetpoint = 1;
                break;
            }
            applySetpoint = thermalCheckSetpoint(CONTROL_SCHEME_VELOCITY, setpoint);
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	be 01       	movw	r22, r28
    2f90:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <thermalCheckSetpoint>
    2f94:	8c 01       	movw	r16, r24

            if((applySetpoint == THERMAL_DELAY) || (applySetpoint == THERMAL_OK))
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	82 30       	cpi	r24, 0x02	; 2
    2f9a:	91 05       	cpc	r25, r1
    2f9c:	08 f0       	brcs	.+2      	; 0x2fa0 <processCommand+0x348>
    2f9e:	6c c0       	rjmp	.+216    	; 0x3078 <__stack+0x79>
            {
                //Configure the setpoint before presetting so that it will know how to preset.
                //Configure the control scheme afterwards so the following if check knows if the control
                //scheme has changed.
                PID_state.setpoint = setpoint;
    2fa0:	c0 93 20 22 	sts	0x2220, r28
    2fa4:	d0 93 21 22 	sts	0x2221, r29
                if((applySetpoint == THERMAL_OK) && (PID_state.controlScheme != CONTROL_SCHEME_VELOCITY) && (getMotorDirection() != DIRECTION_STOP))
    2fa8:	02 30       	cpi	r16, 0x02	; 2
    2faa:	11 05       	cpc	r17, r1
    2fac:	59 f4       	brne	.+22     	; 0x2fc4 <processCommand+0x36c>
    2fae:	80 91 1f 22 	lds	r24, 0x221F
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	39 f0       	breq	.+14     	; 0x2fc4 <processCommand+0x36c>
    2fb6:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    2fba:	88 23       	and	r24, r24
    2fbc:	19 f0       	breq	.+6      	; 0x2fc4 <processCommand+0x36c>
                {
                    //Only preset the motor if the motor control mode is being switched mid-rotation
                    PIDPreset(CONTROL_SCHEME_VELOCITY);
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <PIDPreset>
                }
                PID_state.controlScheme = CONTROL_SCHEME_VELOCITY;
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	25 c0       	rjmp	.+74     	; 0x3012 <__stack+0x13>
                // }
            }
            break;

        case CONTROL_SCHEME_CURRENT:
            cli();
    2fc8:	f8 94       	cli
            if((setpoint > MAXIMUM_CURRENT_COMMAND) || (setpoint < MINIMUM_CURRENT_COMMAND))
    2fca:	ce 01       	movw	r24, r28
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	f5 e0       	ldi	r31, 0x05	; 5
    2fd0:	8c 3d       	cpi	r24, 0xDC	; 220
    2fd2:	9f 07       	cpc	r25, r31
    2fd4:	08 f0       	brcs	.+2      	; 0x2fd8 <processCommand+0x380>
    2fd6:	4b c0       	rjmp	.+150    	; 0x306e <__stack+0x6f>
            {
                rejectSetpoint = 1;
                break;
            }
            applySetpoint = thermalCheckSetpoint(CONTROL_SCHEME_CURRENT, setpoint);
    2fd8:	82 e0       	ldi	r24, 0x02	; 2
    2fda:	be 01       	movw	r22, r28
    2fdc:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <thermalCheckSetpoint>
    2fe0:	8c 01       	movw	r16, r24
            if((applySetpoint == THERMAL_DELAY) || (applySetpoint == THERMAL_OK))
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	82 30       	cpi	r24, 0x02	; 2
    2fe6:	91 05       	cpc	r25, r1
    2fe8:	08 f0       	brcs	.+2      	; 0x2fec <processCommand+0x394>
    2fea:	46 c0       	rjmp	.+140    	; 0x3078 <__stack+0x79>
            {
                //Configure the setpoint before presetting so that it will know how to preset.
                //Configure the control scheme afterwards so the following if check knows if the control
                //scheme has changed.
                PID_state.setpoint = setpoint;
    2fec:	c0 93 20 22 	sts	0x2220, r28
    2ff0:	d0 93 21 22 	sts	0x2221, r29
                if((applySetpoint == THERMAL_OK) && (PID_state.controlScheme != CONTROL_SCHEME_CURRENT) && (getMotorDirection() != DIRECTION_STOP))
    2ff4:	02 30       	cpi	r16, 0x02	; 2
    2ff6:	11 05       	cpc	r17, r1
    2ff8:	59 f4       	brne	.+22     	; 0x3010 <__stack+0x11>
    2ffa:	80 91 1f 22 	lds	r24, 0x221F
    2ffe:	82 30       	cpi	r24, 0x02	; 2
    3000:	39 f0       	breq	.+14     	; 0x3010 <__stack+0x11>
    3002:	0e 94 ff 06 	call	0xdfe	; 0xdfe <getMotorDirection>
    3006:	88 23       	and	r24, r24
    3008:	19 f0       	breq	.+6      	; 0x3010 <__stack+0x11>
                {
                    //Only preset the motor if the motor control mode is being switched mid-rotation
                    PIDPreset(CONTROL_SCHEME_CURRENT);
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <PIDPreset>
                }
                PID_state.controlScheme = CONTROL_SCHEME_CURRENT;
    3010:	82 e0       	ldi	r24, 0x02	; 2
    3012:	80 93 1f 22 	sts	0x221F, r24
                updateMotorDirection(newDirection);
    3016:	8c 2d       	mov	r24, r12
    3018:	0e 94 3c 07 	call	0xe78	; 0xe78 <updateMotorDirection>
    301c:	2d c0       	rjmp	.+90     	; 0x3078 <__stack+0x79>
                // }
            }
            break;

        case CONTROL_SCHEME_POSITION:
            cli();
    301e:	f8 94       	cli
            positionSetPoint = (int16_t)setpoint;
    3020:	c0 93 f8 21 	sts	0x21F8, r28
    3024:	d0 93 f9 21 	sts	0x21F9, r29
            if((positionSetPoint > MAXIMUM_POSITION_COMMAND) || (positionSetPoint < MINIMUM_POSITION_COMMAND))
    3028:	ce 01       	movw	r24, r28
    302a:	80 5e       	subi	r24, 0xE0	; 224
    302c:	93 4e       	sbci	r25, 0xE3	; 227
    302e:	e8 e3       	ldi	r30, 0x38	; 56
    3030:	81 34       	cpi	r24, 0x41	; 65
    3032:	9e 07       	cpc	r25, r30
    3034:	e0 f4       	brcc	.+56     	; 0x306e <__stack+0x6f>
            {
                rejectSetpoint = 1;
                break;
            }

            setpoint = positionControl(positionSetPoint);
    3036:	ce 01       	movw	r24, r28
    3038:	0e 94 17 09 	call	0x122e	; 0x122e <positionControl>
    303c:	ec 01       	movw	r28, r24
            
            applySetpoint = thermalCheckSetpoint(CONTROL_SCHEME_VELOCITY, setpoint);
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	be 01       	movw	r22, r28
    3042:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <thermalCheckSetpoint>
    3046:	8c 01       	movw	r16, r24

            if((applySetpoint == THERMAL_DELAY) || (applySetpoint == THERMAL_OK))
    3048:	01 97       	sbiw	r24, 0x01	; 1
    304a:	82 30       	cpi	r24, 0x02	; 2
    304c:	91 05       	cpc	r25, r1
    304e:	a0 f4       	brcc	.+40     	; 0x3078 <__stack+0x79>
            {
                //Configure the setpoint before presetting so that it will know how to preset.
                //Configure the control scheme afterwards so the following if check knows if the control
                //scheme has changed.
                PID_state.setpoint = setpoint;
    3050:	c0 93 20 22 	sts	0x2220, r28
    3054:	d0 93 21 22 	sts	0x2221, r29
                //if((applySetpoint == THERMAL_OK) && (PID_state.controlScheme != CONTROL_SCHEME_POSITION) && (getMotorDirection() != DIRECTION_STOP))
                //{
                //    //Only preset the motor if the motor control mode is being switched mid-rotation
                //    PIDPreset(CONTROL_SCHEME_POSITION);
                //}
                PID_state.controlScheme = CONTROL_SCHEME_POSITION;
    3058:	d0 92 1f 22 	sts	0x221F, r13
    305c:	0d c0       	rjmp	.+26     	; 0x3078 <__stack+0x79>
    
    //Cast the 16 bit setpoint to a uint16.  Incoming data should be little endian to match
    //this processor's compiler convention
    //This will allow conversion to fixed point more easily if necessary
    setpoint = *(uint16_t *)&commandPacket[PAYLOAD_OFFSET];
    rejectSetpoint = 0;
    305e:	c0 e0       	ldi	r28, 0x00	; 0
    3060:	d0 e0       	ldi	r29, 0x00	; 0
    3062:	07 c0       	rjmp	.+14     	; 0x3072 <__stack+0x73>
    3064:	c0 e0       	ldi	r28, 0x00	; 0
    3066:	d0 e0       	ldi	r29, 0x00	; 0
                // {
                //     updateMotorDirection(newDirection);
                //     //resetVelocityCounter(); //moved inside updateMotorDirection()
                // }
            }
            if(applySetpoint == THERMAL_OK)
    3068:	01 e0       	ldi	r16, 0x01	; 1
    306a:	10 e0       	ldi	r17, 0x00	; 0
    306c:	07 c0       	rjmp	.+14     	; 0x307c <__stack+0x7d>
        case CONTROL_SCHEME_POSITION:
            cli();
            positionSetPoint = (int16_t)setpoint;
            if((positionSetPoint > MAXIMUM_POSITION_COMMAND) || (positionSetPoint < MINIMUM_POSITION_COMMAND))
            {
                rejectSetpoint = 1;
    306e:	c1 e0       	ldi	r28, 0x01	; 1
    3070:	d0 e0       	ldi	r29, 0x00	; 0

    DIRECTION_MODE_t newDirection;
    PID_SCHEME_t newScheme;

    uint16_t setpoint;
    int applySetpoint = THERMAL_DISCARD;
    3072:	00 e0       	ldi	r16, 0x00	; 0
    3074:	10 e0       	ldi	r17, 0x00	; 0
    3076:	02 c0       	rjmp	.+4      	; 0x307c <__stack+0x7d>
    
    //Cast the 16 bit setpoint to a uint16.  Incoming data should be little endian to match
    //this processor's compiler convention
    //This will allow conversion to fixed point more easily if necessary
    setpoint = *(uint16_t *)&commandPacket[PAYLOAD_OFFSET];
    rejectSetpoint = 0;
    3078:	c0 e0       	ldi	r28, 0x00	; 0
    307a:	d0 e0       	ldi	r29, 0x00	; 0
            break;

        default:
            break;
    }
    sei();
    307c:	78 94       	sei
    
    updateMotor(); //forceMotorUpdate();
    307e:	0e 94 9c 07 	call	0xf38	; 0xf38 <updateMotor>
    
    if(newDirection == DIRECTION_STOP)
    3082:	cc 20       	and	r12, r12
    3084:	51 f0       	breq	.+20     	; 0x309a <__stack+0x9b>
    {
        outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    } 
    else if(rejectSetpoint) 
    3086:	20 97       	sbiw	r28, 0x00	; 0
    3088:	11 f0       	breq	.+4      	; 0x308e <__stack+0x8f>
    {
        outputBuffer[RESPONSE_STATUSCODE_OFFSET] = OUT_OF_RANGE;
    308a:	82 e8       	ldi	r24, 0x82	; 130
    308c:	0c c0       	rjmp	.+24     	; 0x30a6 <__stack+0xa7>
    } 
    else
    {
        switch(applySetpoint)
    308e:	01 30       	cpi	r16, 0x01	; 1
    3090:	11 05       	cpc	r17, r1
    3092:	31 f0       	breq	.+12     	; 0x30a0 <__stack+0xa1>
    3094:	02 30       	cpi	r16, 0x02	; 2
    3096:	11 05       	cpc	r17, r1
    3098:	29 f4       	brne	.+10     	; 0x30a4 <__stack+0xa5>
        {
            case THERMAL_OK:
                outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    309a:	f7 01       	movw	r30, r14
    309c:	12 82       	std	Z+2, r1	; 0x02
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <__stack+0xab>
                break;
            case THERMAL_DELAY:
                outputBuffer[RESPONSE_STATUSCODE_OFFSET] = DELAYED_ERROR;
    30a0:	80 e8       	ldi	r24, 0x80	; 128
    30a2:	01 c0       	rjmp	.+2      	; 0x30a6 <__stack+0xa7>
                break;
            case THERMAL_DISCARD:
                outputBuffer[RESPONSE_STATUSCODE_OFFSET] = MANDATORY_COOLDOWN;
                break;
            default:
                outputBuffer[RESPONSE_STATUSCODE_OFFSET] = MANDATORY_COOLDOWN;
    30a4:	81 e8       	ldi	r24, 0x81	; 129
    30a6:	f7 01       	movw	r30, r14
    30a8:	82 83       	std	Z+2, r24	; 0x02
                break;
        }
    }

    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    30aa:	83 e0       	ldi	r24, 0x03	; 3
    30ac:	f7 01       	movw	r30, r14
    30ae:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = MOTOR_COMMAND_OPCODE;
    30b0:	80 ea       	ldi	r24, 0xA0	; 160
    30b2:	81 83       	std	Z+1, r24	; 0x01
    30b4:	38 c0       	rjmp	.+112    	; 0x3126 <__stack+0x127>

static int handleCalibrationCommand(uint8_t *commandPacket, uint8_t *outputBuffer)
{
    uint16_t collectionBitfield;

    memcpy(&collectionBitfield,&commandPacket[PAYLOAD_OFFSET],2);
    30b6:	8a 81       	ldd	r24, Y+2	; 0x02

    if (collectionBitfield & DATA_COLLECTION_DEBUG_BITMASK)
    30b8:	81 ff       	sbrs	r24, 1
    30ba:	08 c0       	rjmp	.+16     	; 0x30cc <__stack+0xcd>
    {
        RxCheckSumErrCnt[0] = 0;
    30bc:	10 92 13 22 	sts	0x2213, r1
    30c0:	10 92 14 22 	sts	0x2214, r1
        RxCheckSumErrCnt[1] = 0;
    30c4:	10 92 15 22 	sts	0x2215, r1
    30c8:	10 92 16 22 	sts	0x2216, r1
    }

    if (collectionBitfield & DATA_COLLECTION_MOTORHALL_BITMASK)
    30cc:	82 ff       	sbrs	r24, 2
    30ce:	06 c0       	rjmp	.+12     	; 0x30dc <__stack+0xdd>
    {
        cli();
    30d0:	f8 94       	cli
        encoder = 0;
    30d2:	10 92 f2 21 	sts	0x21F2, r1
    30d6:	10 92 f3 21 	sts	0x21F3, r1
        sei();
    30da:	78 94       	sei
    }
    
    outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    30dc:	83 e0       	ldi	r24, 0x03	; 3
    30de:	f7 01       	movw	r30, r14
    30e0:	80 83       	st	Z, r24
    outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = CALIBRATION_OPCODE;
    30e2:	80 ec       	ldi	r24, 0xC0	; 192
    30e4:	81 83       	std	Z+1, r24	; 0x01
    outputBuffer[RESPONSE_STATUSCODE_OFFSET] = STATUS_OK;
    30e6:	12 82       	std	Z+2, r1	; 0x02
    30e8:	1e c0       	rjmp	.+60     	; 0x3126 <__stack+0x127>
    while(1);  // use watchdog timer to trigger a reset
}

static int handleBootloaderCommand(uint8_t *commandPacket)
{
    if(0x0f & commandPacket[PAYLOAD_OFFSET]){
    30ea:	8a 81       	ldd	r24, Y+2	; 0x02
    30ec:	98 2f       	mov	r25, r24
    30ee:	9f 70       	andi	r25, 0x0F	; 15
    30f0:	59 f0       	breq	.+22     	; 0x3108 <__stack+0x109>
        commandPacket[PAYLOAD_OFFSET] = (0xf0 & commandPacket[PAYLOAD_OFFSET]); // mask off chain index
    30f2:	80 7f       	andi	r24, 0xF0	; 240
    30f4:	8a 83       	std	Y+2, r24	; 0x02
        commandPacket[CHECKSUM_OFFSET]=computeChecksum((uint8_t *)commandPacket,COMMAND_PACKET_SIZE-1);
    30f6:	ce 01       	movw	r24, r28
    30f8:	66 e0       	ldi	r22, 0x06	; 6
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	0e 94 ed 04 	call	0x9da	; 0x9da <computeChecksum>
    3100:	8e 83       	std	Y+6, r24	; 0x06
        BootRelay(commandPacket);
    3102:	ce 01       	movw	r24, r28
    3104:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <BootRelay>
    }
    else {
        // self bootload
        wdt_enable(WDT_PER_8CLK_gc);
    3108:	93 e0       	ldi	r25, 0x03	; 3
    310a:	88 ed       	ldi	r24, 0xD8	; 216
    310c:	08 b6       	in	r0, 0x38	; 56
    310e:	84 bf       	out	0x34, r24	; 52
    3110:	90 93 80 00 	sts	0x0080, r25
    3114:	a8 95       	wdr
    3116:	08 be       	out	0x38, r0	; 56
    3118:	ff cf       	rjmp	.-2      	; 0x3118 <__stack+0x119>

        case BOOTLOADER_OPCODE:
            return handleBootloaderCommand(commandPacket);

        default:
            outputBuffer[RESPONSE_PACKETSIZE_OFFSET] = 3;
    311a:	83 e0       	ldi	r24, 0x03	; 3
    311c:	f7 01       	movw	r30, r14
    311e:	80 83       	st	Z, r24
            outputBuffer[RESPONSE_REFLECTEDOPCODE_OFFSET] = opcode;
    3120:	01 83       	std	Z+1, r16	; 0x01
            outputBuffer[RESPONSE_STATUSCODE_OFFSET] = UNKNOWN_COMMAND;
    3122:	82 e0       	ldi	r24, 0x02	; 2
    3124:	82 83       	std	Z+2, r24	; 0x02
            outputBuffer[3] = computeChecksum(outputBuffer,3); //this is the checksum
    3126:	c7 01       	movw	r24, r14
    3128:	63 e0       	ldi	r22, 0x03	; 3
    312a:	70 e0       	ldi	r23, 0x00	; 0
    312c:	0e 94 ed 04 	call	0x9da	; 0x9da <computeChecksum>
    3130:	f7 01       	movw	r30, r14
    3132:	83 83       	std	Z+3, r24	; 0x03
            return 4;
    3134:	84 e0       	ldi	r24, 0x04	; 4
    3136:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    3138:	df 91       	pop	r29
    313a:	cf 91       	pop	r28
    313c:	1f 91       	pop	r17
    313e:	0f 91       	pop	r16
    3140:	ff 90       	pop	r15
    3142:	ef 90       	pop	r14
    3144:	df 90       	pop	r13
    3146:	cf 90       	pop	r12
    3148:	08 95       	ret
    }

    //Always apply direction commands independent of anything else if it is a stop command.
    if(newDirection == DIRECTION_STOP)
    {
        updateMotorDirection(newDirection);
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	0e 94 3c 07 	call	0xe78	; 0xe78 <updateMotorDirection>
        case MOTOR_COMMAND_REVERSE:
            newDirection = DIRECTION_REVERSE;
            break;
        case MOTOR_COMMAND_STOP:
            newDirection = DIRECTION_STOP;
            newScheme = CONTROL_SCHEME_VOLTAGE;
    3150:	dd 24       	eor	r13, r13
            break;
        case MOTOR_COMMAND_REVERSE:
            newDirection = DIRECTION_REVERSE;
            break;
        case MOTOR_COMMAND_STOP:
            newDirection = DIRECTION_STOP;
    3152:	cc 24       	eor	r12, r12
    3154:	d2 ce       	rjmp	.-604    	; 0x2efa <processCommand+0x2a2>

00003156 <LEDon>:
    }
}

void LEDon()
{
    PORTC.OUTSET = 0x80;
    3156:	80 e8       	ldi	r24, 0x80	; 128
    3158:	e0 e4       	ldi	r30, 0x40	; 64
    315a:	f6 e0       	ldi	r31, 0x06	; 6
    315c:	85 83       	std	Z+5, r24	; 0x05
}
    315e:	08 95       	ret

00003160 <LEDoff>:
void LEDoff()
{
    PORTC.OUTCLR = 0x80;
    3160:	80 e8       	ldi	r24, 0x80	; 128
    3162:	e0 e4       	ldi	r30, 0x40	; 64
    3164:	f6 e0       	ldi	r31, 0x06	; 6
    3166:	86 83       	std	Z+6, r24	; 0x06
}
    3168:	08 95       	ret

0000316a <LEDtoggle>:
void LEDtoggle()
{
    PORTC.OUTTGL = 0x80;
    316a:	80 e8       	ldi	r24, 0x80	; 128
    316c:	e0 e4       	ldi	r30, 0x40	; 64
    316e:	f6 e0       	ldi	r31, 0x06	; 6
    3170:	87 83       	std	Z+7, r24	; 0x07
}
    3172:	08 95       	ret

00003174 <main>:
 *
 * This intitializes the other port modules and polls a few volatile status
 * bits set in ISRs.
 ************************************************************************/
int main(void)
{
    3174:	cf 93       	push	r28
    3176:	df 93       	push	r29
    3178:	00 d0       	rcall	.+0      	; 0x317a <main+0x6>
    317a:	00 d0       	rcall	.+0      	; 0x317c <main+0x8>
    317c:	cd b7       	in	r28, 0x3d	; 61
    317e:	de b7       	in	r29, 0x3e	; 62
    uint8_t controlSignal;
    cli();                                    //disable all interrupts for clock reset
    3180:	f8 94       	cli
    3182:	8f e3       	ldi	r24, 0x3F	; 63
    3184:	9f e1       	ldi	r25, 0x1F	; 31
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <main+0x12>
    318a:	00 c0       	rjmp	.+0      	; 0x318c <main+0x18>
    318c:	00 00       	nop
 * is running.  This will feed a 1.024 kHz clock to the RTC.
 * The system clock will use the onboard 32MHz oscillator
 ************************************************************************/
static void configureClocks(void)
{
    OSC.CTRL = OSC_RC32MEN_bm | OSC_RC32KEN_bm;            //enable the 32MHz ring oscillator and the 32kHz RTC oscillator
    318e:	86 e0       	ldi	r24, 0x06	; 6
    3190:	80 93 50 00 	sts	0x0050, r24
    while(!(OSC.STATUS & OSC_RC32MRDY_bm));                //wait for 32MHz to stabilize
    3194:	80 91 51 00 	lds	r24, 0x0051
    3198:	81 ff       	sbrs	r24, 1
    319a:	fc cf       	rjmp	.-8      	; 0x3194 <main+0x20>
    while(!(OSC.STATUS & OSC_RC32KRDY_bm));                //wait for 32kHz to stabilize
    319c:	80 91 51 00 	lds	r24, 0x0051
    31a0:	82 ff       	sbrs	r24, 2
    31a2:	fc cf       	rjmp	.-8      	; 0x319c <main+0x28>

    DFLLRC32M.CTRL = DFLL_ENABLE_bm;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	80 93 60 00 	sts	0x0060, r24
    DFLLRC2M.CTRL = DFLL_ENABLE_bm;
    31aa:	80 93 68 00 	sts	0x0068, r24

    CCP = CCP_IOREG_gc;                                    //clock is protected by Configuration Change Protection - must be properly disabled to change clock source
    31ae:	98 ed       	ldi	r25, 0xD8	; 216
    31b0:	94 bf       	out	0x34, r25	; 52
    CLK.CTRL = CLK_SCLKSEL_RC32M_gc;                    //switch to 32MHz oscillator
    31b2:	80 93 40 00 	sts	0x0040, r24
    CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;    //Select 1.024 kHz from internal oscillator for RTC clock source
    31b6:	85 e0       	ldi	r24, 0x05	; 5
    31b8:	e0 e4       	ldi	r30, 0x40	; 64
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	83 83       	std	Z+3, r24	; 0x03
    31be:	ef e3       	ldi	r30, 0x3F	; 63
    31c0:	ff e1       	ldi	r31, 0x1F	; 31
    31c2:	31 97       	sbiw	r30, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <main+0x4e>
    31c6:	00 c0       	rjmp	.+0      	; 0x31c8 <main+0x54>
    31c8:	00 00       	nop
    cli();                                    //disable all interrupts for clock reset
    //detectFingerThumb();
    _delay_ms(1); // for stability of supplies
    configureClocks();
    _delay_ms(1); // for stability of clocks
    configurePortIO();
    31ca:	0e 94 4f 07 	call	0xe9e	; 0xe9e <configurePortIO>
    initializeParameters();
    31ce:	0e 94 09 15 	call	0x2a12	; 0x2a12 <initializeParameters>
    return;
}

static void initStateFromEEPROM(void)
{
    uint32_t zero_check = 0;
    31d2:	19 82       	std	Y+1, r1	; 0x01
    31d4:	1a 82       	std	Y+2, r1	; 0x02
    31d6:	1b 82       	std	Y+3, r1	; 0x03
    31d8:	1c 82       	std	Y+4, r1	; 0x04
    ReadIntFromEEPROM(EEPROM_ADDRESS_LED, (uint8_t*)&zero_check);
    31da:	8f e1       	ldi	r24, 0x1F	; 31
    31dc:	be 01       	movw	r22, r28
    31de:	6f 5f       	subi	r22, 0xFF	; 255
    31e0:	7f 4f       	sbci	r23, 0xFF	; 255
    31e2:	0e 94 57 13 	call	0x26ae	; 0x26ae <ReadIntFromEEPROM>
    
    if(zero_check)
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ea:	ab 81       	ldd	r26, Y+3	; 0x03
    31ec:	bc 81       	ldd	r27, Y+4	; 0x04
    31ee:	00 97       	sbiw	r24, 0x00	; 0
    31f0:	a1 05       	cpc	r26, r1
    31f2:	b1 05       	cpc	r27, r1
    31f4:	29 f0       	breq	.+10     	; 0x3200 <main+0x8c>
    }
}

void LEDon()
{
    PORTC.OUTSET = 0x80;
    31f6:	80 e8       	ldi	r24, 0x80	; 128
    31f8:	e0 e4       	ldi	r30, 0x40	; 64
    31fa:	f6 e0       	ldi	r31, 0x06	; 6
    31fc:	85 83       	std	Z+5, r24	; 0x05
    31fe:	04 c0       	rjmp	.+8      	; 0x3208 <main+0x94>
}
void LEDoff()
{
    PORTC.OUTCLR = 0x80;
    3200:	80 e8       	ldi	r24, 0x80	; 128
    3202:	e0 e4       	ldi	r30, 0x40	; 64
    3204:	f6 e0       	ldi	r31, 0x06	; 6
    3206:	86 83       	std	Z+6, r24	; 0x06
        *(destination+i) = eeprom_read_byte((uint8_t *) (address*4+i));
}

static void verifyVersion()
{
    uint32_t readversion = 0;
    3208:	19 82       	std	Y+1, r1	; 0x01
    320a:	1a 82       	std	Y+2, r1	; 0x02
    320c:	1b 82       	std	Y+3, r1	; 0x03
    320e:	1c 82       	std	Y+4, r1	; 0x04
    ReadIntFromEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    3210:	8d e1       	ldi	r24, 0x1D	; 29
    3212:	be 01       	movw	r22, r28
    3214:	6f 5f       	subi	r22, 0xFF	; 255
    3216:	7f 4f       	sbci	r23, 0xFF	; 255
    3218:	0e 94 57 13 	call	0x26ae	; 0x26ae <ReadIntFromEEPROM>
    if (readversion != FIRMWARE_VERSION)
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	9a 81       	ldd	r25, Y+2	; 0x02
    3220:	ab 81       	ldd	r26, Y+3	; 0x03
    3222:	bc 81       	ldd	r27, Y+4	; 0x04
    3224:	8c 32       	cpi	r24, 0x2C	; 44
    3226:	f1 e0       	ldi	r31, 0x01	; 1
    3228:	9f 07       	cpc	r25, r31
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	af 07       	cpc	r26, r31
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	bf 07       	cpc	r27, r31
    3232:	71 f0       	breq	.+28     	; 0x3250 <main+0xdc>
    {
        readversion = FIRMWARE_VERSION;
    3234:	8c e2       	ldi	r24, 0x2C	; 44
    3236:	91 e0       	ldi	r25, 0x01	; 1
    3238:	a0 e0       	ldi	r26, 0x00	; 0
    323a:	b0 e0       	ldi	r27, 0x00	; 0
    323c:	89 83       	std	Y+1, r24	; 0x01
    323e:	9a 83       	std	Y+2, r25	; 0x02
    3240:	ab 83       	std	Y+3, r26	; 0x03
    3242:	bc 83       	std	Y+4, r27	; 0x04
        WriteIntToEEPROM(EEPROM_ADDRESS_FIRMWARE_VERSION, (uint8_t*)&readversion);
    3244:	8d e1       	ldi	r24, 0x1D	; 29
    3246:	be 01       	movw	r22, r28
    3248:	6f 5f       	subi	r22, 0xFF	; 255
    324a:	7f 4f       	sbci	r23, 0xFF	; 255
    324c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <WriteIntToEEPROM>
    //LEDon();
    //_delay_ms(500);
    initStateFromEEPROM();
    verifyVersion();

    configureMotorPWMs();
    3250:	0e 94 84 07 	call	0xf08	; 0xf08 <configureMotorPWMs>
    configureMotorCounters();
    3254:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <configureMotorCounters>
    configureDaisyUSART();
    3258:	0e 94 78 05 	call	0xaf0	; 0xaf0 <configureDaisyUSART>

    configureADC();
    325c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <configureADC>
    configurePinInterrupts();
    3260:	0e 94 71 07 	call	0xee2	; 0xee2 <configurePinInterrupts>
    configurePIDController();
    3264:	0e 94 43 0b 	call	0x1686	; 0x1686 <configurePIDController>

    PMIC.CTRL |= PMIC_LOLVLEN_bm;            //tell event system to pay attention to low-priority interrupts
    3268:	80 91 a2 00 	lds	r24, 0x00A2
    326c:	81 60       	ori	r24, 0x01	; 1
    326e:	e0 ea       	ldi	r30, 0xA0	; 160
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	82 83       	std	Z+2, r24	; 0x02
    sei();
    3274:	78 94       	sei

    updateMotor(); //forceMotorUpdate();
    3276:	0e 94 9c 07 	call	0xf38	; 0xf38 <updateMotor>
        {
            //Run the PID control loop
            //Interrupts are disabled while the velocity signals are read
            //This is to prevent the interrupt handler from changing them underneath while they are being
            //averaged
            ASSERT_DEBUG_LINE();
    327a:	90 e2       	ldi	r25, 0x20	; 32
    327c:	e9 2e       	mov	r14, r25
    327e:	96 e0       	ldi	r25, 0x06	; 6
    3280:	f9 2e       	mov	r15, r25
    3282:	14 e0       	ldi	r17, 0x04	; 4

    updateMotor(); //forceMotorUpdate();

    while(1)
    {
        if(notifyDaisy)
    3284:	80 91 47 20 	lds	r24, 0x2047
    3288:	88 23       	and	r24, r24
    328a:	11 f0       	breq	.+4      	; 0x3290 <main+0x11c>
        {
            doDaisyTask();
    328c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <doDaisyTask>
        }
        handleTC();
    3290:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <handleTC>

        if(PID_runPID == 1)
    3294:	80 91 f7 21 	lds	r24, 0x21F7
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	a1 f7       	brne	.-24     	; 0x3284 <main+0x110>
        {
            //Run the PID control loop
            //Interrupts are disabled while the velocity signals are read
            //This is to prevent the interrupt handler from changing them underneath while they are being
            //averaged
            ASSERT_DEBUG_LINE();
    329c:	f7 01       	movw	r30, r14
    329e:	15 83       	std	Z+5, r17	; 0x05
            cli();
    32a0:	f8 94       	cli
            PID_runPID = 0;
    32a2:	10 92 f7 21 	sts	0x21F7, r1
            readVelocitySignal();
    32a6:	0e 94 10 12 	call	0x2420	; 0x2420 <readVelocitySignal>
            sei();
    32aa:	78 94       	sei

            //Current signals do not need reading in an interrupt-free context because the ADC is free-running
            //Store the most recent acquisition on all channels
            readCurrentSignals();
    32ac:	0e 94 cc 01 	call	0x398	; 0x398 <readCurrentSignals>
            //LEDtoggle();
            updateThermalModel(statorTemperature, motorCurrent);
    32b0:	60 91 00 20 	lds	r22, 0x2000
    32b4:	70 91 01 20 	lds	r23, 0x2001
    32b8:	80 91 02 20 	lds	r24, 0x2002
    32bc:	90 91 03 20 	lds	r25, 0x2003
    32c0:	20 91 40 20 	lds	r18, 0x2040
    32c4:	30 91 41 20 	lds	r19, 0x2041
    32c8:	40 91 42 20 	lds	r20, 0x2042
    32cc:	50 91 43 20 	lds	r21, 0x2043
    32d0:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <updateThermalModel>
            controlSignal = runPIDController();
    32d4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <runPIDController>
//                 updateMotorVoltage(controlSignal/4);
//             } else {
//                 updateMotorVoltage(controlSignal);
//             }
// #else
            updateMotorVoltage(controlSignal);
    32d8:	0e 94 05 07 	call	0xe0a	; 0xe0a <updateMotorVoltage>
// #endif
            updateMotor(); //forceMotorUpdate();
    32dc:	0e 94 9c 07 	call	0xf38	; 0xf38 <updateMotor>
            DEASSERT_DEBUG_LINE();
    32e0:	f7 01       	movw	r30, r14
    32e2:	16 83       	std	Z+6, r17	; 0x06
    32e4:	cf cf       	rjmp	.-98     	; 0x3284 <main+0x110>

000032e6 <__subsf3>:
    32e6:	50 58       	subi	r21, 0x80	; 128

000032e8 <__addsf3>:
    32e8:	bb 27       	eor	r27, r27
    32ea:	aa 27       	eor	r26, r26
    32ec:	0e d0       	rcall	.+28     	; 0x330a <__addsf3x>
    32ee:	07 c2       	rjmp	.+1038   	; 0x36fe <__fp_round>
    32f0:	f8 d1       	rcall	.+1008   	; 0x36e2 <__fp_pscA>
    32f2:	30 f0       	brcs	.+12     	; 0x3300 <__addsf3+0x18>
    32f4:	fd d1       	rcall	.+1018   	; 0x36f0 <__fp_pscB>
    32f6:	20 f0       	brcs	.+8      	; 0x3300 <__addsf3+0x18>
    32f8:	31 f4       	brne	.+12     	; 0x3306 <__addsf3+0x1e>
    32fa:	9f 3f       	cpi	r25, 0xFF	; 255
    32fc:	11 f4       	brne	.+4      	; 0x3302 <__addsf3+0x1a>
    32fe:	1e f4       	brtc	.+6      	; 0x3306 <__addsf3+0x1e>
    3300:	c8 c1       	rjmp	.+912    	; 0x3692 <__fp_nan>
    3302:	0e f4       	brtc	.+2      	; 0x3306 <__addsf3+0x1e>
    3304:	e0 95       	com	r30
    3306:	e7 fb       	bst	r30, 7
    3308:	95 c1       	rjmp	.+810    	; 0x3634 <__fp_inf>

0000330a <__addsf3x>:
    330a:	e9 2f       	mov	r30, r25
    330c:	09 d2       	rcall	.+1042   	; 0x3720 <__fp_split3>
    330e:	80 f3       	brcs	.-32     	; 0x32f0 <__addsf3+0x8>
    3310:	ba 17       	cp	r27, r26
    3312:	62 07       	cpc	r22, r18
    3314:	73 07       	cpc	r23, r19
    3316:	84 07       	cpc	r24, r20
    3318:	95 07       	cpc	r25, r21
    331a:	18 f0       	brcs	.+6      	; 0x3322 <__addsf3x+0x18>
    331c:	71 f4       	brne	.+28     	; 0x333a <__addsf3x+0x30>
    331e:	9e f5       	brtc	.+102    	; 0x3386 <__addsf3x+0x7c>
    3320:	38 c2       	rjmp	.+1136   	; 0x3792 <__fp_zero>
    3322:	0e f4       	brtc	.+2      	; 0x3326 <__addsf3x+0x1c>
    3324:	e0 95       	com	r30
    3326:	0b 2e       	mov	r0, r27
    3328:	ba 2f       	mov	r27, r26
    332a:	a0 2d       	mov	r26, r0
    332c:	0b 01       	movw	r0, r22
    332e:	b9 01       	movw	r22, r18
    3330:	90 01       	movw	r18, r0
    3332:	0c 01       	movw	r0, r24
    3334:	ca 01       	movw	r24, r20
    3336:	a0 01       	movw	r20, r0
    3338:	11 24       	eor	r1, r1
    333a:	ff 27       	eor	r31, r31
    333c:	59 1b       	sub	r21, r25
    333e:	99 f0       	breq	.+38     	; 0x3366 <__addsf3x+0x5c>
    3340:	59 3f       	cpi	r21, 0xF9	; 249
    3342:	50 f4       	brcc	.+20     	; 0x3358 <__addsf3x+0x4e>
    3344:	50 3e       	cpi	r21, 0xE0	; 224
    3346:	68 f1       	brcs	.+90     	; 0x33a2 <__addsf3x+0x98>
    3348:	1a 16       	cp	r1, r26
    334a:	f0 40       	sbci	r31, 0x00	; 0
    334c:	a2 2f       	mov	r26, r18
    334e:	23 2f       	mov	r18, r19
    3350:	34 2f       	mov	r19, r20
    3352:	44 27       	eor	r20, r20
    3354:	58 5f       	subi	r21, 0xF8	; 248
    3356:	f3 cf       	rjmp	.-26     	; 0x333e <__addsf3x+0x34>
    3358:	46 95       	lsr	r20
    335a:	37 95       	ror	r19
    335c:	27 95       	ror	r18
    335e:	a7 95       	ror	r26
    3360:	f0 40       	sbci	r31, 0x00	; 0
    3362:	53 95       	inc	r21
    3364:	c9 f7       	brne	.-14     	; 0x3358 <__addsf3x+0x4e>
    3366:	7e f4       	brtc	.+30     	; 0x3386 <__addsf3x+0x7c>
    3368:	1f 16       	cp	r1, r31
    336a:	ba 0b       	sbc	r27, r26
    336c:	62 0b       	sbc	r22, r18
    336e:	73 0b       	sbc	r23, r19
    3370:	84 0b       	sbc	r24, r20
    3372:	ba f0       	brmi	.+46     	; 0x33a2 <__addsf3x+0x98>
    3374:	91 50       	subi	r25, 0x01	; 1
    3376:	a1 f0       	breq	.+40     	; 0x33a0 <__addsf3x+0x96>
    3378:	ff 0f       	add	r31, r31
    337a:	bb 1f       	adc	r27, r27
    337c:	66 1f       	adc	r22, r22
    337e:	77 1f       	adc	r23, r23
    3380:	88 1f       	adc	r24, r24
    3382:	c2 f7       	brpl	.-16     	; 0x3374 <__addsf3x+0x6a>
    3384:	0e c0       	rjmp	.+28     	; 0x33a2 <__addsf3x+0x98>
    3386:	ba 0f       	add	r27, r26
    3388:	62 1f       	adc	r22, r18
    338a:	73 1f       	adc	r23, r19
    338c:	84 1f       	adc	r24, r20
    338e:	48 f4       	brcc	.+18     	; 0x33a2 <__addsf3x+0x98>
    3390:	87 95       	ror	r24
    3392:	77 95       	ror	r23
    3394:	67 95       	ror	r22
    3396:	b7 95       	ror	r27
    3398:	f7 95       	ror	r31
    339a:	9e 3f       	cpi	r25, 0xFE	; 254
    339c:	08 f0       	brcs	.+2      	; 0x33a0 <__addsf3x+0x96>
    339e:	b3 cf       	rjmp	.-154    	; 0x3306 <__addsf3+0x1e>
    33a0:	93 95       	inc	r25
    33a2:	88 0f       	add	r24, r24
    33a4:	08 f0       	brcs	.+2      	; 0x33a8 <__addsf3x+0x9e>
    33a6:	99 27       	eor	r25, r25
    33a8:	ee 0f       	add	r30, r30
    33aa:	97 95       	ror	r25
    33ac:	87 95       	ror	r24
    33ae:	08 95       	ret

000033b0 <ceil>:
    33b0:	d9 d1       	rcall	.+946    	; 0x3764 <__fp_trunc>
    33b2:	80 f0       	brcs	.+32     	; 0x33d4 <ceil+0x24>
    33b4:	9f 37       	cpi	r25, 0x7F	; 127
    33b6:	40 f4       	brcc	.+16     	; 0x33c8 <ceil+0x18>
    33b8:	91 11       	cpse	r25, r1
    33ba:	0e f4       	brtc	.+2      	; 0x33be <ceil+0xe>
    33bc:	eb c1       	rjmp	.+982    	; 0x3794 <__fp_szero>
    33be:	60 e0       	ldi	r22, 0x00	; 0
    33c0:	70 e0       	ldi	r23, 0x00	; 0
    33c2:	80 e8       	ldi	r24, 0x80	; 128
    33c4:	9f e3       	ldi	r25, 0x3F	; 63
    33c6:	08 95       	ret
    33c8:	26 f0       	brts	.+8      	; 0x33d2 <ceil+0x22>
    33ca:	1b 16       	cp	r1, r27
    33cc:	61 1d       	adc	r22, r1
    33ce:	71 1d       	adc	r23, r1
    33d0:	81 1d       	adc	r24, r1
    33d2:	36 c1       	rjmp	.+620    	; 0x3640 <__fp_mintl>
    33d4:	50 c1       	rjmp	.+672    	; 0x3676 <__fp_mpack>

000033d6 <__cmpsf2>:
    33d6:	0a d1       	rcall	.+532    	; 0x35ec <__fp_cmp>
    33d8:	08 f4       	brcc	.+2      	; 0x33dc <__cmpsf2+0x6>
    33da:	81 e0       	ldi	r24, 0x01	; 1
    33dc:	08 95       	ret

000033de <__divsf3>:
    33de:	0c d0       	rcall	.+24     	; 0x33f8 <__divsf3x>
    33e0:	8e c1       	rjmp	.+796    	; 0x36fe <__fp_round>
    33e2:	86 d1       	rcall	.+780    	; 0x36f0 <__fp_pscB>
    33e4:	40 f0       	brcs	.+16     	; 0x33f6 <__divsf3+0x18>
    33e6:	7d d1       	rcall	.+762    	; 0x36e2 <__fp_pscA>
    33e8:	30 f0       	brcs	.+12     	; 0x33f6 <__divsf3+0x18>
    33ea:	21 f4       	brne	.+8      	; 0x33f4 <__divsf3+0x16>
    33ec:	5f 3f       	cpi	r21, 0xFF	; 255
    33ee:	19 f0       	breq	.+6      	; 0x33f6 <__divsf3+0x18>
    33f0:	21 c1       	rjmp	.+578    	; 0x3634 <__fp_inf>
    33f2:	51 11       	cpse	r21, r1
    33f4:	cf c1       	rjmp	.+926    	; 0x3794 <__fp_szero>
    33f6:	4d c1       	rjmp	.+666    	; 0x3692 <__fp_nan>

000033f8 <__divsf3x>:
    33f8:	93 d1       	rcall	.+806    	; 0x3720 <__fp_split3>
    33fa:	98 f3       	brcs	.-26     	; 0x33e2 <__divsf3+0x4>

000033fc <__divsf3_pse>:
    33fc:	99 23       	and	r25, r25
    33fe:	c9 f3       	breq	.-14     	; 0x33f2 <__divsf3+0x14>
    3400:	55 23       	and	r21, r21
    3402:	b1 f3       	breq	.-20     	; 0x33f0 <__divsf3+0x12>
    3404:	95 1b       	sub	r25, r21
    3406:	55 0b       	sbc	r21, r21
    3408:	bb 27       	eor	r27, r27
    340a:	aa 27       	eor	r26, r26
    340c:	62 17       	cp	r22, r18
    340e:	73 07       	cpc	r23, r19
    3410:	84 07       	cpc	r24, r20
    3412:	38 f0       	brcs	.+14     	; 0x3422 <__divsf3_pse+0x26>
    3414:	9f 5f       	subi	r25, 0xFF	; 255
    3416:	5f 4f       	sbci	r21, 0xFF	; 255
    3418:	22 0f       	add	r18, r18
    341a:	33 1f       	adc	r19, r19
    341c:	44 1f       	adc	r20, r20
    341e:	aa 1f       	adc	r26, r26
    3420:	a9 f3       	breq	.-22     	; 0x340c <__divsf3_pse+0x10>
    3422:	33 d0       	rcall	.+102    	; 0x348a <__divsf3_pse+0x8e>
    3424:	0e 2e       	mov	r0, r30
    3426:	3a f0       	brmi	.+14     	; 0x3436 <__divsf3_pse+0x3a>
    3428:	e0 e8       	ldi	r30, 0x80	; 128
    342a:	30 d0       	rcall	.+96     	; 0x348c <__divsf3_pse+0x90>
    342c:	91 50       	subi	r25, 0x01	; 1
    342e:	50 40       	sbci	r21, 0x00	; 0
    3430:	e6 95       	lsr	r30
    3432:	00 1c       	adc	r0, r0
    3434:	ca f7       	brpl	.-14     	; 0x3428 <__divsf3_pse+0x2c>
    3436:	29 d0       	rcall	.+82     	; 0x348a <__divsf3_pse+0x8e>
    3438:	fe 2f       	mov	r31, r30
    343a:	27 d0       	rcall	.+78     	; 0x348a <__divsf3_pse+0x8e>
    343c:	66 0f       	add	r22, r22
    343e:	77 1f       	adc	r23, r23
    3440:	88 1f       	adc	r24, r24
    3442:	bb 1f       	adc	r27, r27
    3444:	26 17       	cp	r18, r22
    3446:	37 07       	cpc	r19, r23
    3448:	48 07       	cpc	r20, r24
    344a:	ab 07       	cpc	r26, r27
    344c:	b0 e8       	ldi	r27, 0x80	; 128
    344e:	09 f0       	breq	.+2      	; 0x3452 <__divsf3_pse+0x56>
    3450:	bb 0b       	sbc	r27, r27
    3452:	80 2d       	mov	r24, r0
    3454:	bf 01       	movw	r22, r30
    3456:	ff 27       	eor	r31, r31
    3458:	93 58       	subi	r25, 0x83	; 131
    345a:	5f 4f       	sbci	r21, 0xFF	; 255
    345c:	2a f0       	brmi	.+10     	; 0x3468 <__divsf3_pse+0x6c>
    345e:	9e 3f       	cpi	r25, 0xFE	; 254
    3460:	51 05       	cpc	r21, r1
    3462:	68 f0       	brcs	.+26     	; 0x347e <__divsf3_pse+0x82>
    3464:	e7 c0       	rjmp	.+462    	; 0x3634 <__fp_inf>
    3466:	96 c1       	rjmp	.+812    	; 0x3794 <__fp_szero>
    3468:	5f 3f       	cpi	r21, 0xFF	; 255
    346a:	ec f3       	brlt	.-6      	; 0x3466 <__divsf3_pse+0x6a>
    346c:	98 3e       	cpi	r25, 0xE8	; 232
    346e:	dc f3       	brlt	.-10     	; 0x3466 <__divsf3_pse+0x6a>
    3470:	86 95       	lsr	r24
    3472:	77 95       	ror	r23
    3474:	67 95       	ror	r22
    3476:	b7 95       	ror	r27
    3478:	f7 95       	ror	r31
    347a:	9f 5f       	subi	r25, 0xFF	; 255
    347c:	c9 f7       	brne	.-14     	; 0x3470 <__divsf3_pse+0x74>
    347e:	88 0f       	add	r24, r24
    3480:	91 1d       	adc	r25, r1
    3482:	96 95       	lsr	r25
    3484:	87 95       	ror	r24
    3486:	97 f9       	bld	r25, 7
    3488:	08 95       	ret
    348a:	e1 e0       	ldi	r30, 0x01	; 1
    348c:	66 0f       	add	r22, r22
    348e:	77 1f       	adc	r23, r23
    3490:	88 1f       	adc	r24, r24
    3492:	bb 1f       	adc	r27, r27
    3494:	62 17       	cp	r22, r18
    3496:	73 07       	cpc	r23, r19
    3498:	84 07       	cpc	r24, r20
    349a:	ba 07       	cpc	r27, r26
    349c:	20 f0       	brcs	.+8      	; 0x34a6 <__divsf3_pse+0xaa>
    349e:	62 1b       	sub	r22, r18
    34a0:	73 0b       	sbc	r23, r19
    34a2:	84 0b       	sbc	r24, r20
    34a4:	ba 0b       	sbc	r27, r26
    34a6:	ee 1f       	adc	r30, r30
    34a8:	88 f7       	brcc	.-30     	; 0x348c <__divsf3_pse+0x90>
    34aa:	e0 95       	com	r30
    34ac:	08 95       	ret
    34ae:	19 f4       	brne	.+6      	; 0x34b6 <__divsf3_pse+0xba>
    34b0:	0e f0       	brts	.+2      	; 0x34b4 <__divsf3_pse+0xb8>
    34b2:	c0 c0       	rjmp	.+384    	; 0x3634 <__fp_inf>
    34b4:	6e c1       	rjmp	.+732    	; 0x3792 <__fp_zero>
    34b6:	ed c0       	rjmp	.+474    	; 0x3692 <__fp_nan>

000034b8 <exp>:
    34b8:	3b d1       	rcall	.+630    	; 0x3730 <__fp_splitA>
    34ba:	c8 f3       	brcs	.-14     	; 0x34ae <__divsf3_pse+0xb2>
    34bc:	96 38       	cpi	r25, 0x86	; 134
    34be:	c0 f7       	brcc	.-16     	; 0x34b0 <__divsf3_pse+0xb4>
    34c0:	07 f8       	bld	r0, 7
    34c2:	0f 92       	push	r0
    34c4:	e8 94       	clt
    34c6:	2b e3       	ldi	r18, 0x3B	; 59
    34c8:	3a ea       	ldi	r19, 0xAA	; 170
    34ca:	48 eb       	ldi	r20, 0xB8	; 184
    34cc:	5f e7       	ldi	r21, 0x7F	; 127
    34ce:	2f d2       	rcall	.+1118   	; 0x392e <__mulsf3_pse>
    34d0:	0f 92       	push	r0
    34d2:	0f 92       	push	r0
    34d4:	0f 92       	push	r0
    34d6:	4d b7       	in	r20, 0x3d	; 61
    34d8:	5e b7       	in	r21, 0x3e	; 62
    34da:	0f 92       	push	r0
    34dc:	e7 d1       	rcall	.+974    	; 0x38ac <modf>
    34de:	ec ef       	ldi	r30, 0xFC	; 252
    34e0:	f1 e0       	ldi	r31, 0x01	; 1
    34e2:	da d0       	rcall	.+436    	; 0x3698 <__fp_powser>
    34e4:	4f 91       	pop	r20
    34e6:	5f 91       	pop	r21
    34e8:	ef 91       	pop	r30
    34ea:	ff 91       	pop	r31
    34ec:	e5 95       	asr	r30
    34ee:	ee 1f       	adc	r30, r30
    34f0:	ff 1f       	adc	r31, r31
    34f2:	49 f0       	breq	.+18     	; 0x3506 <exp+0x4e>
    34f4:	fe 57       	subi	r31, 0x7E	; 126
    34f6:	e0 68       	ori	r30, 0x80	; 128
    34f8:	44 27       	eor	r20, r20
    34fa:	ee 0f       	add	r30, r30
    34fc:	44 1f       	adc	r20, r20
    34fe:	fa 95       	dec	r31
    3500:	e1 f7       	brne	.-8      	; 0x34fa <exp+0x42>
    3502:	41 95       	neg	r20
    3504:	55 0b       	sbc	r21, r21
    3506:	59 d1       	rcall	.+690    	; 0x37ba <ldexp>
    3508:	0f 90       	pop	r0
    350a:	07 fe       	sbrs	r0, 7
    350c:	4d c1       	rjmp	.+666    	; 0x37a8 <inverse>
    350e:	08 95       	ret

00003510 <__fixsfsi>:
    3510:	04 d0       	rcall	.+8      	; 0x351a <__fixunssfsi>
    3512:	68 94       	set
    3514:	b1 11       	cpse	r27, r1
    3516:	3e c1       	rjmp	.+636    	; 0x3794 <__fp_szero>
    3518:	08 95       	ret

0000351a <__fixunssfsi>:
    351a:	0a d1       	rcall	.+532    	; 0x3730 <__fp_splitA>
    351c:	88 f0       	brcs	.+34     	; 0x3540 <__fixunssfsi+0x26>
    351e:	9f 57       	subi	r25, 0x7F	; 127
    3520:	90 f0       	brcs	.+36     	; 0x3546 <__fixunssfsi+0x2c>
    3522:	b9 2f       	mov	r27, r25
    3524:	99 27       	eor	r25, r25
    3526:	b7 51       	subi	r27, 0x17	; 23
    3528:	a0 f0       	brcs	.+40     	; 0x3552 <__fixunssfsi+0x38>
    352a:	d1 f0       	breq	.+52     	; 0x3560 <__fixunssfsi+0x46>
    352c:	66 0f       	add	r22, r22
    352e:	77 1f       	adc	r23, r23
    3530:	88 1f       	adc	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	1a f0       	brmi	.+6      	; 0x353c <__fixunssfsi+0x22>
    3536:	ba 95       	dec	r27
    3538:	c9 f7       	brne	.-14     	; 0x352c <__fixunssfsi+0x12>
    353a:	12 c0       	rjmp	.+36     	; 0x3560 <__fixunssfsi+0x46>
    353c:	b1 30       	cpi	r27, 0x01	; 1
    353e:	81 f0       	breq	.+32     	; 0x3560 <__fixunssfsi+0x46>
    3540:	28 d1       	rcall	.+592    	; 0x3792 <__fp_zero>
    3542:	b1 e0       	ldi	r27, 0x01	; 1
    3544:	08 95       	ret
    3546:	25 c1       	rjmp	.+586    	; 0x3792 <__fp_zero>
    3548:	67 2f       	mov	r22, r23
    354a:	78 2f       	mov	r23, r24
    354c:	88 27       	eor	r24, r24
    354e:	b8 5f       	subi	r27, 0xF8	; 248
    3550:	39 f0       	breq	.+14     	; 0x3560 <__fixunssfsi+0x46>
    3552:	b9 3f       	cpi	r27, 0xF9	; 249
    3554:	cc f3       	brlt	.-14     	; 0x3548 <__fixunssfsi+0x2e>
    3556:	86 95       	lsr	r24
    3558:	77 95       	ror	r23
    355a:	67 95       	ror	r22
    355c:	b3 95       	inc	r27
    355e:	d9 f7       	brne	.-10     	; 0x3556 <__fixunssfsi+0x3c>
    3560:	3e f4       	brtc	.+14     	; 0x3570 <__fixunssfsi+0x56>
    3562:	90 95       	com	r25
    3564:	80 95       	com	r24
    3566:	70 95       	com	r23
    3568:	61 95       	neg	r22
    356a:	7f 4f       	sbci	r23, 0xFF	; 255
    356c:	8f 4f       	sbci	r24, 0xFF	; 255
    356e:	9f 4f       	sbci	r25, 0xFF	; 255
    3570:	08 95       	ret

00003572 <__floatunsisf>:
    3572:	e8 94       	clt
    3574:	09 c0       	rjmp	.+18     	; 0x3588 <__floatsisf+0x12>

00003576 <__floatsisf>:
    3576:	97 fb       	bst	r25, 7
    3578:	3e f4       	brtc	.+14     	; 0x3588 <__floatsisf+0x12>
    357a:	90 95       	com	r25
    357c:	80 95       	com	r24
    357e:	70 95       	com	r23
    3580:	61 95       	neg	r22
    3582:	7f 4f       	sbci	r23, 0xFF	; 255
    3584:	8f 4f       	sbci	r24, 0xFF	; 255
    3586:	9f 4f       	sbci	r25, 0xFF	; 255
    3588:	99 23       	and	r25, r25
    358a:	a9 f0       	breq	.+42     	; 0x35b6 <__floatsisf+0x40>
    358c:	f9 2f       	mov	r31, r25
    358e:	96 e9       	ldi	r25, 0x96	; 150
    3590:	bb 27       	eor	r27, r27
    3592:	93 95       	inc	r25
    3594:	f6 95       	lsr	r31
    3596:	87 95       	ror	r24
    3598:	77 95       	ror	r23
    359a:	67 95       	ror	r22
    359c:	b7 95       	ror	r27
    359e:	f1 11       	cpse	r31, r1
    35a0:	f8 cf       	rjmp	.-16     	; 0x3592 <__floatsisf+0x1c>
    35a2:	fa f4       	brpl	.+62     	; 0x35e2 <__floatsisf+0x6c>
    35a4:	bb 0f       	add	r27, r27
    35a6:	11 f4       	brne	.+4      	; 0x35ac <__floatsisf+0x36>
    35a8:	60 ff       	sbrs	r22, 0
    35aa:	1b c0       	rjmp	.+54     	; 0x35e2 <__floatsisf+0x6c>
    35ac:	6f 5f       	subi	r22, 0xFF	; 255
    35ae:	7f 4f       	sbci	r23, 0xFF	; 255
    35b0:	8f 4f       	sbci	r24, 0xFF	; 255
    35b2:	9f 4f       	sbci	r25, 0xFF	; 255
    35b4:	16 c0       	rjmp	.+44     	; 0x35e2 <__floatsisf+0x6c>
    35b6:	88 23       	and	r24, r24
    35b8:	11 f0       	breq	.+4      	; 0x35be <__floatsisf+0x48>
    35ba:	96 e9       	ldi	r25, 0x96	; 150
    35bc:	11 c0       	rjmp	.+34     	; 0x35e0 <__floatsisf+0x6a>
    35be:	77 23       	and	r23, r23
    35c0:	21 f0       	breq	.+8      	; 0x35ca <__floatsisf+0x54>
    35c2:	9e e8       	ldi	r25, 0x8E	; 142
    35c4:	87 2f       	mov	r24, r23
    35c6:	76 2f       	mov	r23, r22
    35c8:	05 c0       	rjmp	.+10     	; 0x35d4 <__floatsisf+0x5e>
    35ca:	66 23       	and	r22, r22
    35cc:	71 f0       	breq	.+28     	; 0x35ea <__floatsisf+0x74>
    35ce:	96 e8       	ldi	r25, 0x86	; 134
    35d0:	86 2f       	mov	r24, r22
    35d2:	70 e0       	ldi	r23, 0x00	; 0
    35d4:	60 e0       	ldi	r22, 0x00	; 0
    35d6:	2a f0       	brmi	.+10     	; 0x35e2 <__floatsisf+0x6c>
    35d8:	9a 95       	dec	r25
    35da:	66 0f       	add	r22, r22
    35dc:	77 1f       	adc	r23, r23
    35de:	88 1f       	adc	r24, r24
    35e0:	da f7       	brpl	.-10     	; 0x35d8 <__floatsisf+0x62>
    35e2:	88 0f       	add	r24, r24
    35e4:	96 95       	lsr	r25
    35e6:	87 95       	ror	r24
    35e8:	97 f9       	bld	r25, 7
    35ea:	08 95       	ret

000035ec <__fp_cmp>:
    35ec:	99 0f       	add	r25, r25
    35ee:	00 08       	sbc	r0, r0
    35f0:	55 0f       	add	r21, r21
    35f2:	aa 0b       	sbc	r26, r26
    35f4:	e0 e8       	ldi	r30, 0x80	; 128
    35f6:	fe ef       	ldi	r31, 0xFE	; 254
    35f8:	16 16       	cp	r1, r22
    35fa:	17 06       	cpc	r1, r23
    35fc:	e8 07       	cpc	r30, r24
    35fe:	f9 07       	cpc	r31, r25
    3600:	c0 f0       	brcs	.+48     	; 0x3632 <__fp_cmp+0x46>
    3602:	12 16       	cp	r1, r18
    3604:	13 06       	cpc	r1, r19
    3606:	e4 07       	cpc	r30, r20
    3608:	f5 07       	cpc	r31, r21
    360a:	98 f0       	brcs	.+38     	; 0x3632 <__fp_cmp+0x46>
    360c:	62 1b       	sub	r22, r18
    360e:	73 0b       	sbc	r23, r19
    3610:	84 0b       	sbc	r24, r20
    3612:	95 0b       	sbc	r25, r21
    3614:	39 f4       	brne	.+14     	; 0x3624 <__fp_cmp+0x38>
    3616:	0a 26       	eor	r0, r26
    3618:	61 f0       	breq	.+24     	; 0x3632 <__fp_cmp+0x46>
    361a:	23 2b       	or	r18, r19
    361c:	24 2b       	or	r18, r20
    361e:	25 2b       	or	r18, r21
    3620:	21 f4       	brne	.+8      	; 0x362a <__fp_cmp+0x3e>
    3622:	08 95       	ret
    3624:	0a 26       	eor	r0, r26
    3626:	09 f4       	brne	.+2      	; 0x362a <__fp_cmp+0x3e>
    3628:	a1 40       	sbci	r26, 0x01	; 1
    362a:	a6 95       	lsr	r26
    362c:	8f ef       	ldi	r24, 0xFF	; 255
    362e:	81 1d       	adc	r24, r1
    3630:	81 1d       	adc	r24, r1
    3632:	08 95       	ret

00003634 <__fp_inf>:
    3634:	97 f9       	bld	r25, 7
    3636:	9f 67       	ori	r25, 0x7F	; 127
    3638:	80 e8       	ldi	r24, 0x80	; 128
    363a:	70 e0       	ldi	r23, 0x00	; 0
    363c:	60 e0       	ldi	r22, 0x00	; 0
    363e:	08 95       	ret

00003640 <__fp_mintl>:
    3640:	88 23       	and	r24, r24
    3642:	71 f4       	brne	.+28     	; 0x3660 <__fp_mintl+0x20>
    3644:	77 23       	and	r23, r23
    3646:	21 f0       	breq	.+8      	; 0x3650 <__fp_mintl+0x10>
    3648:	98 50       	subi	r25, 0x08	; 8
    364a:	87 2b       	or	r24, r23
    364c:	76 2f       	mov	r23, r22
    364e:	07 c0       	rjmp	.+14     	; 0x365e <__fp_mintl+0x1e>
    3650:	66 23       	and	r22, r22
    3652:	11 f4       	brne	.+4      	; 0x3658 <__fp_mintl+0x18>
    3654:	99 27       	eor	r25, r25
    3656:	0d c0       	rjmp	.+26     	; 0x3672 <__fp_mintl+0x32>
    3658:	90 51       	subi	r25, 0x10	; 16
    365a:	86 2b       	or	r24, r22
    365c:	70 e0       	ldi	r23, 0x00	; 0
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	2a f0       	brmi	.+10     	; 0x366c <__fp_mintl+0x2c>
    3662:	9a 95       	dec	r25
    3664:	66 0f       	add	r22, r22
    3666:	77 1f       	adc	r23, r23
    3668:	88 1f       	adc	r24, r24
    366a:	da f7       	brpl	.-10     	; 0x3662 <__fp_mintl+0x22>
    366c:	88 0f       	add	r24, r24
    366e:	96 95       	lsr	r25
    3670:	87 95       	ror	r24
    3672:	97 f9       	bld	r25, 7
    3674:	08 95       	ret

00003676 <__fp_mpack>:
    3676:	9f 3f       	cpi	r25, 0xFF	; 255
    3678:	31 f0       	breq	.+12     	; 0x3686 <__fp_mpack_finite+0xc>

0000367a <__fp_mpack_finite>:
    367a:	91 50       	subi	r25, 0x01	; 1
    367c:	20 f4       	brcc	.+8      	; 0x3686 <__fp_mpack_finite+0xc>
    367e:	87 95       	ror	r24
    3680:	77 95       	ror	r23
    3682:	67 95       	ror	r22
    3684:	b7 95       	ror	r27
    3686:	88 0f       	add	r24, r24
    3688:	91 1d       	adc	r25, r1
    368a:	96 95       	lsr	r25
    368c:	87 95       	ror	r24
    368e:	97 f9       	bld	r25, 7
    3690:	08 95       	ret

00003692 <__fp_nan>:
    3692:	9f ef       	ldi	r25, 0xFF	; 255
    3694:	80 ec       	ldi	r24, 0xC0	; 192
    3696:	08 95       	ret

00003698 <__fp_powser>:
    3698:	df 93       	push	r29
    369a:	cf 93       	push	r28
    369c:	1f 93       	push	r17
    369e:	0f 93       	push	r16
    36a0:	ff 92       	push	r15
    36a2:	ef 92       	push	r14
    36a4:	df 92       	push	r13
    36a6:	7b 01       	movw	r14, r22
    36a8:	8c 01       	movw	r16, r24
    36aa:	68 94       	set
    36ac:	05 c0       	rjmp	.+10     	; 0x36b8 <__fp_powser+0x20>
    36ae:	da 2e       	mov	r13, r26
    36b0:	ef 01       	movw	r28, r30
    36b2:	3b d1       	rcall	.+630    	; 0x392a <__mulsf3x>
    36b4:	fe 01       	movw	r30, r28
    36b6:	e8 94       	clt
    36b8:	a5 91       	lpm	r26, Z+
    36ba:	25 91       	lpm	r18, Z+
    36bc:	35 91       	lpm	r19, Z+
    36be:	45 91       	lpm	r20, Z+
    36c0:	55 91       	lpm	r21, Z+
    36c2:	ae f3       	brts	.-22     	; 0x36ae <__fp_powser+0x16>
    36c4:	ef 01       	movw	r28, r30
    36c6:	21 de       	rcall	.-958    	; 0x330a <__addsf3x>
    36c8:	fe 01       	movw	r30, r28
    36ca:	97 01       	movw	r18, r14
    36cc:	a8 01       	movw	r20, r16
    36ce:	da 94       	dec	r13
    36d0:	79 f7       	brne	.-34     	; 0x36b0 <__fp_powser+0x18>
    36d2:	df 90       	pop	r13
    36d4:	ef 90       	pop	r14
    36d6:	ff 90       	pop	r15
    36d8:	0f 91       	pop	r16
    36da:	1f 91       	pop	r17
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	08 95       	ret

000036e2 <__fp_pscA>:
    36e2:	00 24       	eor	r0, r0
    36e4:	0a 94       	dec	r0
    36e6:	16 16       	cp	r1, r22
    36e8:	17 06       	cpc	r1, r23
    36ea:	18 06       	cpc	r1, r24
    36ec:	09 06       	cpc	r0, r25
    36ee:	08 95       	ret

000036f0 <__fp_pscB>:
    36f0:	00 24       	eor	r0, r0
    36f2:	0a 94       	dec	r0
    36f4:	12 16       	cp	r1, r18
    36f6:	13 06       	cpc	r1, r19
    36f8:	14 06       	cpc	r1, r20
    36fa:	05 06       	cpc	r0, r21
    36fc:	08 95       	ret

000036fe <__fp_round>:
    36fe:	09 2e       	mov	r0, r25
    3700:	03 94       	inc	r0
    3702:	00 0c       	add	r0, r0
    3704:	11 f4       	brne	.+4      	; 0x370a <__fp_round+0xc>
    3706:	88 23       	and	r24, r24
    3708:	52 f0       	brmi	.+20     	; 0x371e <__fp_round+0x20>
    370a:	bb 0f       	add	r27, r27
    370c:	40 f4       	brcc	.+16     	; 0x371e <__fp_round+0x20>
    370e:	bf 2b       	or	r27, r31
    3710:	11 f4       	brne	.+4      	; 0x3716 <__fp_round+0x18>
    3712:	60 ff       	sbrs	r22, 0
    3714:	04 c0       	rjmp	.+8      	; 0x371e <__fp_round+0x20>
    3716:	6f 5f       	subi	r22, 0xFF	; 255
    3718:	7f 4f       	sbci	r23, 0xFF	; 255
    371a:	8f 4f       	sbci	r24, 0xFF	; 255
    371c:	9f 4f       	sbci	r25, 0xFF	; 255
    371e:	08 95       	ret

00003720 <__fp_split3>:
    3720:	57 fd       	sbrc	r21, 7
    3722:	90 58       	subi	r25, 0x80	; 128
    3724:	44 0f       	add	r20, r20
    3726:	55 1f       	adc	r21, r21
    3728:	59 f0       	breq	.+22     	; 0x3740 <__fp_splitA+0x10>
    372a:	5f 3f       	cpi	r21, 0xFF	; 255
    372c:	71 f0       	breq	.+28     	; 0x374a <__fp_splitA+0x1a>
    372e:	47 95       	ror	r20

00003730 <__fp_splitA>:
    3730:	88 0f       	add	r24, r24
    3732:	97 fb       	bst	r25, 7
    3734:	99 1f       	adc	r25, r25
    3736:	61 f0       	breq	.+24     	; 0x3750 <__fp_splitA+0x20>
    3738:	9f 3f       	cpi	r25, 0xFF	; 255
    373a:	79 f0       	breq	.+30     	; 0x375a <__fp_splitA+0x2a>
    373c:	87 95       	ror	r24
    373e:	08 95       	ret
    3740:	12 16       	cp	r1, r18
    3742:	13 06       	cpc	r1, r19
    3744:	14 06       	cpc	r1, r20
    3746:	55 1f       	adc	r21, r21
    3748:	f2 cf       	rjmp	.-28     	; 0x372e <__fp_split3+0xe>
    374a:	46 95       	lsr	r20
    374c:	f1 df       	rcall	.-30     	; 0x3730 <__fp_splitA>
    374e:	08 c0       	rjmp	.+16     	; 0x3760 <__fp_splitA+0x30>
    3750:	16 16       	cp	r1, r22
    3752:	17 06       	cpc	r1, r23
    3754:	18 06       	cpc	r1, r24
    3756:	99 1f       	adc	r25, r25
    3758:	f1 cf       	rjmp	.-30     	; 0x373c <__fp_splitA+0xc>
    375a:	86 95       	lsr	r24
    375c:	71 05       	cpc	r23, r1
    375e:	61 05       	cpc	r22, r1
    3760:	08 94       	sec
    3762:	08 95       	ret

00003764 <__fp_trunc>:
    3764:	e5 df       	rcall	.-54     	; 0x3730 <__fp_splitA>
    3766:	a0 f0       	brcs	.+40     	; 0x3790 <__fp_trunc+0x2c>
    3768:	be e7       	ldi	r27, 0x7E	; 126
    376a:	b9 17       	cp	r27, r25
    376c:	88 f4       	brcc	.+34     	; 0x3790 <__fp_trunc+0x2c>
    376e:	bb 27       	eor	r27, r27
    3770:	9f 38       	cpi	r25, 0x8F	; 143
    3772:	60 f4       	brcc	.+24     	; 0x378c <__fp_trunc+0x28>
    3774:	16 16       	cp	r1, r22
    3776:	b1 1d       	adc	r27, r1
    3778:	67 2f       	mov	r22, r23
    377a:	78 2f       	mov	r23, r24
    377c:	88 27       	eor	r24, r24
    377e:	98 5f       	subi	r25, 0xF8	; 248
    3780:	f7 cf       	rjmp	.-18     	; 0x3770 <__fp_trunc+0xc>
    3782:	86 95       	lsr	r24
    3784:	77 95       	ror	r23
    3786:	67 95       	ror	r22
    3788:	b1 1d       	adc	r27, r1
    378a:	93 95       	inc	r25
    378c:	96 39       	cpi	r25, 0x96	; 150
    378e:	c8 f3       	brcs	.-14     	; 0x3782 <__fp_trunc+0x1e>
    3790:	08 95       	ret

00003792 <__fp_zero>:
    3792:	e8 94       	clt

00003794 <__fp_szero>:
    3794:	bb 27       	eor	r27, r27
    3796:	66 27       	eor	r22, r22
    3798:	77 27       	eor	r23, r23
    379a:	cb 01       	movw	r24, r22
    379c:	97 f9       	bld	r25, 7
    379e:	08 95       	ret

000037a0 <__gesf2>:
    37a0:	25 df       	rcall	.-438    	; 0x35ec <__fp_cmp>
    37a2:	08 f4       	brcc	.+2      	; 0x37a6 <__gesf2+0x6>
    37a4:	8f ef       	ldi	r24, 0xFF	; 255
    37a6:	08 95       	ret

000037a8 <inverse>:
    37a8:	9b 01       	movw	r18, r22
    37aa:	ac 01       	movw	r20, r24
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	70 e0       	ldi	r23, 0x00	; 0
    37b0:	80 e8       	ldi	r24, 0x80	; 128
    37b2:	9f e3       	ldi	r25, 0x3F	; 63
    37b4:	14 ce       	rjmp	.-984    	; 0x33de <__divsf3>
    37b6:	3e cf       	rjmp	.-388    	; 0x3634 <__fp_inf>
    37b8:	5e cf       	rjmp	.-324    	; 0x3676 <__fp_mpack>

000037ba <ldexp>:
    37ba:	ba df       	rcall	.-140    	; 0x3730 <__fp_splitA>
    37bc:	e8 f3       	brcs	.-6      	; 0x37b8 <inverse+0x10>
    37be:	99 23       	and	r25, r25
    37c0:	d9 f3       	breq	.-10     	; 0x37b8 <inverse+0x10>
    37c2:	94 0f       	add	r25, r20
    37c4:	51 1d       	adc	r21, r1
    37c6:	bb f3       	brvs	.-18     	; 0x37b6 <inverse+0xe>
    37c8:	91 50       	subi	r25, 0x01	; 1
    37ca:	50 40       	sbci	r21, 0x00	; 0
    37cc:	94 f0       	brlt	.+36     	; 0x37f2 <ldexp+0x38>
    37ce:	59 f0       	breq	.+22     	; 0x37e6 <ldexp+0x2c>
    37d0:	88 23       	and	r24, r24
    37d2:	32 f0       	brmi	.+12     	; 0x37e0 <ldexp+0x26>
    37d4:	66 0f       	add	r22, r22
    37d6:	77 1f       	adc	r23, r23
    37d8:	88 1f       	adc	r24, r24
    37da:	91 50       	subi	r25, 0x01	; 1
    37dc:	50 40       	sbci	r21, 0x00	; 0
    37de:	c1 f7       	brne	.-16     	; 0x37d0 <ldexp+0x16>
    37e0:	9e 3f       	cpi	r25, 0xFE	; 254
    37e2:	51 05       	cpc	r21, r1
    37e4:	44 f7       	brge	.-48     	; 0x37b6 <inverse+0xe>
    37e6:	88 0f       	add	r24, r24
    37e8:	91 1d       	adc	r25, r1
    37ea:	96 95       	lsr	r25
    37ec:	87 95       	ror	r24
    37ee:	97 f9       	bld	r25, 7
    37f0:	08 95       	ret
    37f2:	5f 3f       	cpi	r21, 0xFF	; 255
    37f4:	ac f0       	brlt	.+42     	; 0x3820 <ldexp+0x66>
    37f6:	98 3e       	cpi	r25, 0xE8	; 232
    37f8:	9c f0       	brlt	.+38     	; 0x3820 <ldexp+0x66>
    37fa:	bb 27       	eor	r27, r27
    37fc:	86 95       	lsr	r24
    37fe:	77 95       	ror	r23
    3800:	67 95       	ror	r22
    3802:	b7 95       	ror	r27
    3804:	08 f4       	brcc	.+2      	; 0x3808 <ldexp+0x4e>
    3806:	b1 60       	ori	r27, 0x01	; 1
    3808:	93 95       	inc	r25
    380a:	c1 f7       	brne	.-16     	; 0x37fc <ldexp+0x42>
    380c:	bb 0f       	add	r27, r27
    380e:	58 f7       	brcc	.-42     	; 0x37e6 <ldexp+0x2c>
    3810:	11 f4       	brne	.+4      	; 0x3816 <ldexp+0x5c>
    3812:	60 ff       	sbrs	r22, 0
    3814:	e8 cf       	rjmp	.-48     	; 0x37e6 <ldexp+0x2c>
    3816:	6f 5f       	subi	r22, 0xFF	; 255
    3818:	7f 4f       	sbci	r23, 0xFF	; 255
    381a:	8f 4f       	sbci	r24, 0xFF	; 255
    381c:	9f 4f       	sbci	r25, 0xFF	; 255
    381e:	e3 cf       	rjmp	.-58     	; 0x37e6 <ldexp+0x2c>
    3820:	b9 cf       	rjmp	.-142    	; 0x3794 <__fp_szero>
    3822:	0e f0       	brts	.+2      	; 0x3826 <ldexp+0x6c>
    3824:	28 cf       	rjmp	.-432    	; 0x3676 <__fp_mpack>
    3826:	35 cf       	rjmp	.-406    	; 0x3692 <__fp_nan>
    3828:	68 94       	set
    382a:	04 cf       	rjmp	.-504    	; 0x3634 <__fp_inf>

0000382c <log>:
    382c:	81 df       	rcall	.-254    	; 0x3730 <__fp_splitA>
    382e:	c8 f3       	brcs	.-14     	; 0x3822 <ldexp+0x68>
    3830:	99 23       	and	r25, r25
    3832:	d1 f3       	breq	.-12     	; 0x3828 <ldexp+0x6e>
    3834:	c6 f3       	brts	.-16     	; 0x3826 <ldexp+0x6c>
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	1f 93       	push	r17
    383c:	0f 93       	push	r16
    383e:	ff 92       	push	r15
    3840:	c9 2f       	mov	r28, r25
    3842:	dd 27       	eor	r29, r29
    3844:	88 23       	and	r24, r24
    3846:	2a f0       	brmi	.+10     	; 0x3852 <log+0x26>
    3848:	21 97       	sbiw	r28, 0x01	; 1
    384a:	66 0f       	add	r22, r22
    384c:	77 1f       	adc	r23, r23
    384e:	88 1f       	adc	r24, r24
    3850:	da f7       	brpl	.-10     	; 0x3848 <log+0x1c>
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e8       	ldi	r20, 0x80	; 128
    3858:	5f eb       	ldi	r21, 0xBF	; 191
    385a:	9f e3       	ldi	r25, 0x3F	; 63
    385c:	88 39       	cpi	r24, 0x98	; 152
    385e:	20 f0       	brcs	.+8      	; 0x3868 <log+0x3c>
    3860:	80 3e       	cpi	r24, 0xE0	; 224
    3862:	30 f0       	brcs	.+12     	; 0x3870 <log+0x44>
    3864:	21 96       	adiw	r28, 0x01	; 1
    3866:	8f 77       	andi	r24, 0x7F	; 127
    3868:	3f dd       	rcall	.-1410   	; 0x32e8 <__addsf3>
    386a:	e4 e2       	ldi	r30, 0x24	; 36
    386c:	f2 e0       	ldi	r31, 0x02	; 2
    386e:	03 c0       	rjmp	.+6      	; 0x3876 <log+0x4a>
    3870:	3b dd       	rcall	.-1418   	; 0x32e8 <__addsf3>
    3872:	e1 e5       	ldi	r30, 0x51	; 81
    3874:	f2 e0       	ldi	r31, 0x02	; 2
    3876:	10 df       	rcall	.-480    	; 0x3698 <__fp_powser>
    3878:	8b 01       	movw	r16, r22
    387a:	be 01       	movw	r22, r28
    387c:	ec 01       	movw	r28, r24
    387e:	fb 2e       	mov	r15, r27
    3880:	6f 57       	subi	r22, 0x7F	; 127
    3882:	71 09       	sbc	r23, r1
    3884:	75 95       	asr	r23
    3886:	77 1f       	adc	r23, r23
    3888:	88 0b       	sbc	r24, r24
    388a:	99 0b       	sbc	r25, r25
    388c:	74 de       	rcall	.-792    	; 0x3576 <__floatsisf>
    388e:	28 e1       	ldi	r18, 0x18	; 24
    3890:	32 e7       	ldi	r19, 0x72	; 114
    3892:	41 e3       	ldi	r20, 0x31	; 49
    3894:	5f e3       	ldi	r21, 0x3F	; 63
    3896:	49 d0       	rcall	.+146    	; 0x392a <__mulsf3x>
    3898:	af 2d       	mov	r26, r15
    389a:	98 01       	movw	r18, r16
    389c:	ae 01       	movw	r20, r28
    389e:	ff 90       	pop	r15
    38a0:	0f 91       	pop	r16
    38a2:	1f 91       	pop	r17
    38a4:	cf 91       	pop	r28
    38a6:	df 91       	pop	r29
    38a8:	30 dd       	rcall	.-1440   	; 0x330a <__addsf3x>
    38aa:	29 cf       	rjmp	.-430    	; 0x36fe <__fp_round>

000038ac <modf>:
    38ac:	fa 01       	movw	r30, r20
    38ae:	dc 01       	movw	r26, r24
    38b0:	aa 0f       	add	r26, r26
    38b2:	bb 1f       	adc	r27, r27
    38b4:	9b 01       	movw	r18, r22
    38b6:	ac 01       	movw	r20, r24
    38b8:	bf 57       	subi	r27, 0x7F	; 127
    38ba:	28 f4       	brcc	.+10     	; 0x38c6 <modf+0x1a>
    38bc:	22 27       	eor	r18, r18
    38be:	33 27       	eor	r19, r19
    38c0:	44 27       	eor	r20, r20
    38c2:	50 78       	andi	r21, 0x80	; 128
    38c4:	1f c0       	rjmp	.+62     	; 0x3904 <modf+0x58>
    38c6:	b7 51       	subi	r27, 0x17	; 23
    38c8:	88 f4       	brcc	.+34     	; 0x38ec <modf+0x40>
    38ca:	ab 2f       	mov	r26, r27
    38cc:	00 24       	eor	r0, r0
    38ce:	46 95       	lsr	r20
    38d0:	37 95       	ror	r19
    38d2:	27 95       	ror	r18
    38d4:	01 1c       	adc	r0, r1
    38d6:	a3 95       	inc	r26
    38d8:	d2 f3       	brmi	.-12     	; 0x38ce <modf+0x22>
    38da:	00 20       	and	r0, r0
    38dc:	69 f0       	breq	.+26     	; 0x38f8 <modf+0x4c>
    38de:	22 0f       	add	r18, r18
    38e0:	33 1f       	adc	r19, r19
    38e2:	44 1f       	adc	r20, r20
    38e4:	b3 95       	inc	r27
    38e6:	da f3       	brmi	.-10     	; 0x38de <modf+0x32>
    38e8:	0d d0       	rcall	.+26     	; 0x3904 <modf+0x58>
    38ea:	fd cc       	rjmp	.-1542   	; 0x32e6 <__subsf3>
    38ec:	61 30       	cpi	r22, 0x01	; 1
    38ee:	71 05       	cpc	r23, r1
    38f0:	a0 e8       	ldi	r26, 0x80	; 128
    38f2:	8a 07       	cpc	r24, r26
    38f4:	b9 46       	sbci	r27, 0x69	; 105
    38f6:	30 f4       	brcc	.+12     	; 0x3904 <modf+0x58>
    38f8:	9b 01       	movw	r18, r22
    38fa:	ac 01       	movw	r20, r24
    38fc:	66 27       	eor	r22, r22
    38fe:	77 27       	eor	r23, r23
    3900:	88 27       	eor	r24, r24
    3902:	90 78       	andi	r25, 0x80	; 128
    3904:	30 96       	adiw	r30, 0x00	; 0
    3906:	21 f0       	breq	.+8      	; 0x3910 <modf+0x64>
    3908:	20 83       	st	Z, r18
    390a:	31 83       	std	Z+1, r19	; 0x01
    390c:	42 83       	std	Z+2, r20	; 0x02
    390e:	53 83       	std	Z+3, r21	; 0x03
    3910:	08 95       	ret

00003912 <__mulsf3>:
    3912:	0b d0       	rcall	.+22     	; 0x392a <__mulsf3x>
    3914:	f4 ce       	rjmp	.-536    	; 0x36fe <__fp_round>
    3916:	e5 de       	rcall	.-566    	; 0x36e2 <__fp_pscA>
    3918:	28 f0       	brcs	.+10     	; 0x3924 <__mulsf3+0x12>
    391a:	ea de       	rcall	.-556    	; 0x36f0 <__fp_pscB>
    391c:	18 f0       	brcs	.+6      	; 0x3924 <__mulsf3+0x12>
    391e:	95 23       	and	r25, r21
    3920:	09 f0       	breq	.+2      	; 0x3924 <__mulsf3+0x12>
    3922:	88 ce       	rjmp	.-752    	; 0x3634 <__fp_inf>
    3924:	b6 ce       	rjmp	.-660    	; 0x3692 <__fp_nan>
    3926:	11 24       	eor	r1, r1
    3928:	35 cf       	rjmp	.-406    	; 0x3794 <__fp_szero>

0000392a <__mulsf3x>:
    392a:	fa de       	rcall	.-524    	; 0x3720 <__fp_split3>
    392c:	a0 f3       	brcs	.-24     	; 0x3916 <__mulsf3+0x4>

0000392e <__mulsf3_pse>:
    392e:	95 9f       	mul	r25, r21
    3930:	d1 f3       	breq	.-12     	; 0x3926 <__mulsf3+0x14>
    3932:	95 0f       	add	r25, r21
    3934:	50 e0       	ldi	r21, 0x00	; 0
    3936:	55 1f       	adc	r21, r21
    3938:	62 9f       	mul	r22, r18
    393a:	f0 01       	movw	r30, r0
    393c:	72 9f       	mul	r23, r18
    393e:	bb 27       	eor	r27, r27
    3940:	f0 0d       	add	r31, r0
    3942:	b1 1d       	adc	r27, r1
    3944:	63 9f       	mul	r22, r19
    3946:	aa 27       	eor	r26, r26
    3948:	f0 0d       	add	r31, r0
    394a:	b1 1d       	adc	r27, r1
    394c:	aa 1f       	adc	r26, r26
    394e:	64 9f       	mul	r22, r20
    3950:	66 27       	eor	r22, r22
    3952:	b0 0d       	add	r27, r0
    3954:	a1 1d       	adc	r26, r1
    3956:	66 1f       	adc	r22, r22
    3958:	82 9f       	mul	r24, r18
    395a:	22 27       	eor	r18, r18
    395c:	b0 0d       	add	r27, r0
    395e:	a1 1d       	adc	r26, r1
    3960:	62 1f       	adc	r22, r18
    3962:	73 9f       	mul	r23, r19
    3964:	b0 0d       	add	r27, r0
    3966:	a1 1d       	adc	r26, r1
    3968:	62 1f       	adc	r22, r18
    396a:	83 9f       	mul	r24, r19
    396c:	a0 0d       	add	r26, r0
    396e:	61 1d       	adc	r22, r1
    3970:	22 1f       	adc	r18, r18
    3972:	74 9f       	mul	r23, r20
    3974:	33 27       	eor	r19, r19
    3976:	a0 0d       	add	r26, r0
    3978:	61 1d       	adc	r22, r1
    397a:	23 1f       	adc	r18, r19
    397c:	84 9f       	mul	r24, r20
    397e:	60 0d       	add	r22, r0
    3980:	21 1d       	adc	r18, r1
    3982:	82 2f       	mov	r24, r18
    3984:	76 2f       	mov	r23, r22
    3986:	6a 2f       	mov	r22, r26
    3988:	11 24       	eor	r1, r1
    398a:	9f 57       	subi	r25, 0x7F	; 127
    398c:	50 40       	sbci	r21, 0x00	; 0
    398e:	8a f0       	brmi	.+34     	; 0x39b2 <__mulsf3_pse+0x84>
    3990:	e1 f0       	breq	.+56     	; 0x39ca <__mulsf3_pse+0x9c>
    3992:	88 23       	and	r24, r24
    3994:	4a f0       	brmi	.+18     	; 0x39a8 <__mulsf3_pse+0x7a>
    3996:	ee 0f       	add	r30, r30
    3998:	ff 1f       	adc	r31, r31
    399a:	bb 1f       	adc	r27, r27
    399c:	66 1f       	adc	r22, r22
    399e:	77 1f       	adc	r23, r23
    39a0:	88 1f       	adc	r24, r24
    39a2:	91 50       	subi	r25, 0x01	; 1
    39a4:	50 40       	sbci	r21, 0x00	; 0
    39a6:	a9 f7       	brne	.-22     	; 0x3992 <__mulsf3_pse+0x64>
    39a8:	9e 3f       	cpi	r25, 0xFE	; 254
    39aa:	51 05       	cpc	r21, r1
    39ac:	70 f0       	brcs	.+28     	; 0x39ca <__mulsf3_pse+0x9c>
    39ae:	42 ce       	rjmp	.-892    	; 0x3634 <__fp_inf>
    39b0:	f1 ce       	rjmp	.-542    	; 0x3794 <__fp_szero>
    39b2:	5f 3f       	cpi	r21, 0xFF	; 255
    39b4:	ec f3       	brlt	.-6      	; 0x39b0 <__mulsf3_pse+0x82>
    39b6:	98 3e       	cpi	r25, 0xE8	; 232
    39b8:	dc f3       	brlt	.-10     	; 0x39b0 <__mulsf3_pse+0x82>
    39ba:	86 95       	lsr	r24
    39bc:	77 95       	ror	r23
    39be:	67 95       	ror	r22
    39c0:	b7 95       	ror	r27
    39c2:	f7 95       	ror	r31
    39c4:	e7 95       	ror	r30
    39c6:	9f 5f       	subi	r25, 0xFF	; 255
    39c8:	c1 f7       	brne	.-16     	; 0x39ba <__mulsf3_pse+0x8c>
    39ca:	fe 2b       	or	r31, r30
    39cc:	88 0f       	add	r24, r24
    39ce:	91 1d       	adc	r25, r1
    39d0:	96 95       	lsr	r25
    39d2:	87 95       	ror	r24
    39d4:	97 f9       	bld	r25, 7
    39d6:	08 95       	ret

000039d8 <round>:
    39d8:	ab de       	rcall	.-682    	; 0x3730 <__fp_splitA>
    39da:	e0 f0       	brcs	.+56     	; 0x3a14 <round+0x3c>
    39dc:	9e 37       	cpi	r25, 0x7E	; 126
    39de:	d8 f0       	brcs	.+54     	; 0x3a16 <round+0x3e>
    39e0:	96 39       	cpi	r25, 0x96	; 150
    39e2:	b8 f4       	brcc	.+46     	; 0x3a12 <round+0x3a>
    39e4:	9e 38       	cpi	r25, 0x8E	; 142
    39e6:	48 f4       	brcc	.+18     	; 0x39fa <round+0x22>
    39e8:	67 2f       	mov	r22, r23
    39ea:	78 2f       	mov	r23, r24
    39ec:	88 27       	eor	r24, r24
    39ee:	98 5f       	subi	r25, 0xF8	; 248
    39f0:	f9 cf       	rjmp	.-14     	; 0x39e4 <round+0xc>
    39f2:	86 95       	lsr	r24
    39f4:	77 95       	ror	r23
    39f6:	67 95       	ror	r22
    39f8:	93 95       	inc	r25
    39fa:	95 39       	cpi	r25, 0x95	; 149
    39fc:	d0 f3       	brcs	.-12     	; 0x39f2 <round+0x1a>
    39fe:	b6 2f       	mov	r27, r22
    3a00:	b1 70       	andi	r27, 0x01	; 1
    3a02:	6b 0f       	add	r22, r27
    3a04:	71 1d       	adc	r23, r1
    3a06:	81 1d       	adc	r24, r1
    3a08:	20 f4       	brcc	.+8      	; 0x3a12 <round+0x3a>
    3a0a:	87 95       	ror	r24
    3a0c:	77 95       	ror	r23
    3a0e:	67 95       	ror	r22
    3a10:	93 95       	inc	r25
    3a12:	16 ce       	rjmp	.-980    	; 0x3640 <__fp_mintl>
    3a14:	30 ce       	rjmp	.-928    	; 0x3676 <__fp_mpack>
    3a16:	be ce       	rjmp	.-644    	; 0x3794 <__fp_szero>
    3a18:	11 f4       	brne	.+4      	; 0x3a1e <round+0x46>
    3a1a:	0e f4       	brtc	.+2      	; 0x3a1e <round+0x46>
    3a1c:	3a ce       	rjmp	.-908    	; 0x3692 <__fp_nan>
    3a1e:	2b ce       	rjmp	.-938    	; 0x3676 <__fp_mpack>

00003a20 <sqrt>:
    3a20:	87 de       	rcall	.-754    	; 0x3730 <__fp_splitA>
    3a22:	d0 f3       	brcs	.-12     	; 0x3a18 <round+0x40>
    3a24:	99 23       	and	r25, r25
    3a26:	d9 f3       	breq	.-10     	; 0x3a1e <round+0x46>
    3a28:	ce f3       	brts	.-14     	; 0x3a1c <round+0x44>
    3a2a:	9f 57       	subi	r25, 0x7F	; 127
    3a2c:	55 0b       	sbc	r21, r21
    3a2e:	87 ff       	sbrs	r24, 7
    3a30:	39 d0       	rcall	.+114    	; 0x3aa4 <__fp_norm2>
    3a32:	00 24       	eor	r0, r0
    3a34:	a0 e6       	ldi	r26, 0x60	; 96
    3a36:	40 ea       	ldi	r20, 0xA0	; 160
    3a38:	90 01       	movw	r18, r0
    3a3a:	80 58       	subi	r24, 0x80	; 128
    3a3c:	56 95       	lsr	r21
    3a3e:	97 95       	ror	r25
    3a40:	28 f4       	brcc	.+10     	; 0x3a4c <sqrt+0x2c>
    3a42:	80 5c       	subi	r24, 0xC0	; 192
    3a44:	66 0f       	add	r22, r22
    3a46:	77 1f       	adc	r23, r23
    3a48:	88 1f       	adc	r24, r24
    3a4a:	20 f0       	brcs	.+8      	; 0x3a54 <sqrt+0x34>
    3a4c:	26 17       	cp	r18, r22
    3a4e:	37 07       	cpc	r19, r23
    3a50:	48 07       	cpc	r20, r24
    3a52:	30 f4       	brcc	.+12     	; 0x3a60 <sqrt+0x40>
    3a54:	62 1b       	sub	r22, r18
    3a56:	73 0b       	sbc	r23, r19
    3a58:	84 0b       	sbc	r24, r20
    3a5a:	20 29       	or	r18, r0
    3a5c:	31 29       	or	r19, r1
    3a5e:	4a 2b       	or	r20, r26
    3a60:	a6 95       	lsr	r26
    3a62:	17 94       	ror	r1
    3a64:	07 94       	ror	r0
    3a66:	20 25       	eor	r18, r0
    3a68:	31 25       	eor	r19, r1
    3a6a:	4a 27       	eor	r20, r26
    3a6c:	58 f7       	brcc	.-42     	; 0x3a44 <sqrt+0x24>
    3a6e:	66 0f       	add	r22, r22
    3a70:	77 1f       	adc	r23, r23
    3a72:	88 1f       	adc	r24, r24
    3a74:	20 f0       	brcs	.+8      	; 0x3a7e <sqrt+0x5e>
    3a76:	26 17       	cp	r18, r22
    3a78:	37 07       	cpc	r19, r23
    3a7a:	48 07       	cpc	r20, r24
    3a7c:	30 f4       	brcc	.+12     	; 0x3a8a <sqrt+0x6a>
    3a7e:	62 0b       	sbc	r22, r18
    3a80:	73 0b       	sbc	r23, r19
    3a82:	84 0b       	sbc	r24, r20
    3a84:	20 0d       	add	r18, r0
    3a86:	31 1d       	adc	r19, r1
    3a88:	41 1d       	adc	r20, r1
    3a8a:	a0 95       	com	r26
    3a8c:	81 f7       	brne	.-32     	; 0x3a6e <sqrt+0x4e>
    3a8e:	b9 01       	movw	r22, r18
    3a90:	84 2f       	mov	r24, r20
    3a92:	91 58       	subi	r25, 0x81	; 129
    3a94:	88 0f       	add	r24, r24
    3a96:	96 95       	lsr	r25
    3a98:	87 95       	ror	r24
    3a9a:	08 95       	ret

00003a9c <__unordsf2>:
    3a9c:	a7 dd       	rcall	.-1202   	; 0x35ec <__fp_cmp>
    3a9e:	88 0b       	sbc	r24, r24
    3aa0:	99 0b       	sbc	r25, r25
    3aa2:	08 95       	ret

00003aa4 <__fp_norm2>:
    3aa4:	91 50       	subi	r25, 0x01	; 1
    3aa6:	50 40       	sbci	r21, 0x00	; 0
    3aa8:	66 0f       	add	r22, r22
    3aaa:	77 1f       	adc	r23, r23
    3aac:	88 1f       	adc	r24, r24
    3aae:	d2 f7       	brpl	.-12     	; 0x3aa4 <__fp_norm2>
    3ab0:	08 95       	ret

00003ab2 <memcpy>:
    3ab2:	fb 01       	movw	r30, r22
    3ab4:	dc 01       	movw	r26, r24
    3ab6:	02 c0       	rjmp	.+4      	; 0x3abc <memcpy+0xa>
    3ab8:	01 90       	ld	r0, Z+
    3aba:	0d 92       	st	X+, r0
    3abc:	41 50       	subi	r20, 0x01	; 1
    3abe:	50 40       	sbci	r21, 0x00	; 0
    3ac0:	d8 f7       	brcc	.-10     	; 0x3ab8 <memcpy+0x6>
    3ac2:	08 95       	ret

00003ac4 <__eerd_byte_x32a4u>:
    3ac4:	03 d0       	rcall	.+6      	; 0x3acc <eeprom_mapen>
    3ac6:	80 81       	ld	r24, Z
    3ac8:	99 27       	eor	r25, r25
    3aca:	08 95       	ret

00003acc <eeprom_mapen>:
    3acc:	e0 ec       	ldi	r30, 0xC0	; 192
    3ace:	f1 e0       	ldi	r31, 0x01	; 1
    3ad0:	37 85       	ldd	r19, Z+15	; 0x0f
    3ad2:	37 fd       	sbrc	r19, 7
    3ad4:	fd cf       	rjmp	.-6      	; 0x3ad0 <eeprom_mapen+0x4>
    3ad6:	34 85       	ldd	r19, Z+12	; 0x0c
    3ad8:	38 60       	ori	r19, 0x08	; 8
    3ada:	34 87       	std	Z+12, r19	; 0x0c
    3adc:	fc 01       	movw	r30, r24
    3ade:	e0 50       	subi	r30, 0x00	; 0
    3ae0:	f0 4f       	sbci	r31, 0xF0	; 240
    3ae2:	08 95       	ret

00003ae4 <__eewr_byte_x32a4u>:
    3ae4:	26 2f       	mov	r18, r22

00003ae6 <__eewr_r18_x32a4u>:
    3ae6:	e0 ec       	ldi	r30, 0xC0	; 192
    3ae8:	f1 e0       	ldi	r31, 0x01	; 1
    3aea:	37 85       	ldd	r19, Z+15	; 0x0f
    3aec:	37 fd       	sbrc	r19, 7
    3aee:	fd cf       	rjmp	.-6      	; 0x3aea <__eewr_r18_x32a4u+0x4>
    3af0:	34 85       	ldd	r19, Z+12	; 0x0c
    3af2:	37 7f       	andi	r19, 0xF7	; 247
    3af4:	34 87       	std	Z+12, r19	; 0x0c
    3af6:	37 85       	ldd	r19, Z+15	; 0x0f
    3af8:	31 ff       	sbrs	r19, 1
    3afa:	09 c0       	rjmp	.+18     	; 0x3b0e <__eewr_r18_x32a4u+0x28>
    3afc:	36 e3       	ldi	r19, 0x36	; 54
    3afe:	32 87       	std	Z+10, r19	; 0x0a
    3b00:	38 ed       	ldi	r19, 0xD8	; 216
    3b02:	34 bf       	out	0x34, r19	; 52
    3b04:	31 e0       	ldi	r19, 0x01	; 1
    3b06:	33 87       	std	Z+11, r19	; 0x0b
    3b08:	37 85       	ldd	r19, Z+15	; 0x0f
    3b0a:	37 fd       	sbrc	r19, 7
    3b0c:	fd cf       	rjmp	.-6      	; 0x3b08 <__eewr_r18_x32a4u+0x22>
    3b0e:	33 e3       	ldi	r19, 0x33	; 51
    3b10:	32 87       	std	Z+10, r19	; 0x0a
    3b12:	80 83       	st	Z, r24
    3b14:	91 83       	std	Z+1, r25	; 0x01
    3b16:	12 82       	std	Z+2, r1	; 0x02
    3b18:	24 83       	std	Z+4, r18	; 0x04
    3b1a:	25 e3       	ldi	r18, 0x35	; 53
    3b1c:	22 87       	std	Z+10, r18	; 0x0a
    3b1e:	28 ed       	ldi	r18, 0xD8	; 216
    3b20:	31 e0       	ldi	r19, 0x01	; 1
    3b22:	24 bf       	out	0x34, r18	; 52
    3b24:	33 87       	std	Z+11, r19	; 0x0b
    3b26:	01 96       	adiw	r24, 0x01	; 1
    3b28:	08 95       	ret

00003b2a <_exit>:
    3b2a:	f8 94       	cli

00003b2c <__stop_program>:
    3b2c:	ff cf       	rjmp	.-2      	; 0x3b2c <__stop_program>
