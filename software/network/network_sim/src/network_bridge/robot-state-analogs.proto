import "goby/acomms/protobuf/dccl_option_extensions.proto";

package drc;

message MinimalRobotState
{
  option (dccl.msg).max_bytes = 1500;
  option (dccl.msg).id = 0xD4C0004;

  required double utime = 1 [(dccl.field) = { min: 0 max: 3600e6 precision: -3 }];
  required Position3D origin_position = 2;
  repeated float joint_position = 3 [(dccl.field) = { min: -3.142 max: 3.142 precision: 3 max_repeat: 53 codec: "presence_bit" } ];
  // jp: precision was 2 -> 90bytes | 3 -> 110bytes
}


message Position3D
{
  required TranslationVector translation = 1;
  optional RotationQuaternion rotation = 2;

  // for footstep plan only
  optional RotationRPY rpy_rotation = 3;
}


message TranslationVector
{
  required double x = 1 [(dccl.field) = { min: -1000 max: 1000 precision: 3}];
  required double y = 2 [(dccl.field) = { min: -1000 max: 1000 precision: 3}];
  optional double z = 3 [(dccl.field) = { min: -10 max: 10 precision: 3 codec: "presence_bit"}];
}

message RotationQuaternion
{
  optional double x = 1 [(dccl.field) = {min: -1 max: 1 precision: 6 codec: "presence_bit" }];
  optional double y = 2 [(dccl.field) = {min: -1 max: 1 precision: 6 codec: "presence_bit" }];
  optional double z = 3 [(dccl.field) = {min: -1 max: 1 precision: 6 codec: "presence_bit" }];
  optional double w = 4 [(dccl.field) = {min: -1 max: 1 precision: 6 codec: "presence_bit" }];
}


message RotationRPY
{
  // 80 degrees, +/- one degree 
  optional double roll = 1 [(dccl.field) = {min: -1.397 max: 1.397 precision: 2 codec: "presence_bit" }];
  optional double pitch = 2 [(dccl.field) = {min: -1.397 max: 1.397 precision: 2 codec: "presence_bit" }];

  // 360 degrees, +/- one degree
  optional double yaw = 3 [(dccl.field) = {min: -3.142 max: 3.142 precision: 2 codec: "presence_bit" }];
}


message MinimalRobotStateDiff
{
  repeated double utime_diff = 1 [(dccl.field) = { min: 0 max: 600e6 precision: -3 max_repeat: 100 codec: "presence_bit" }];
  required Position3DDiff pos_diff = 2;

  repeated JointPositionDiff joint_pos_diff = 3 [(dccl.field) = { max_repeat: 100 }];

  message JointPositionDiff
  {
    repeated float jp_diff_val= 3 [(dccl.field) = { min: -3.142 max: 3.142 precision: 3 max_repeat: 53 codec: "presence_bit" } ];
  }
  
}

message Position3DDiff
{
  required TranslationVectorDiff translation_diff = 1;
  optional RotationQuaternionDiff rotation_diff = 2;

  // for footstep plan only
  optional RotationRPYDiff rpy_rotation_diff = 3;
}

message TranslationVectorDiff
{
  repeated double dx = 1 [(dccl.field) = { min: -1.6 max: 1.6 precision: 3 max_repeat: 100 codec: "presence_bit"}];
  repeated double dy = 2 [(dccl.field) = { min: -1.6 max: 1.6 precision: 3 max_repeat: 100 codec: "presence_bit"}];
  repeated double dz = 3 [(dccl.field) = { min: -1.6 max: 1.6 precision: 3 max_repeat: 100 codec: "presence_bit"}];
}

message RotationQuaternionDiff
{
  repeated double dx = 1 [(dccl.field) = {min: -2 max: 2 precision: 6 max_repeat: 100 codec: "presence_bit"}];
  repeated double dy = 2 [(dccl.field) = {min: -2 max: 2 precision: 6 max_repeat: 100 codec: "presence_bit"}];
  repeated double dz = 3 [(dccl.field) = {min: -2 max: 2 precision: 6 max_repeat: 100 codec: "presence_bit"}];
  repeated double dw = 4 [(dccl.field) = {min: -2 max: 2 precision: 6 max_repeat: 100 codec: "presence_bit"}];
}

message RotationRPYDiff
{
  repeated double droll = 1 [(dccl.field) = {min: -2.794 max: 2.794 precision: 2 max_repeat: 100 codec: "presence_bit" }];
  repeated double dpitch = 2 [(dccl.field) = {min: -2.794 max: 2.794 precision: 2 max_repeat: 100 codec: "presence_bit" }];
  repeated double dyaw = 3 [(dccl.field) = {min: -6.283 max: 6.283 precision: 2 max_repeat: 100 codec: "presence_bit" }];
}
