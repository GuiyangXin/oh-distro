/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class frequency_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public byte real_time_percent;
    public byte num;
    public short frequency[];
    public byte channel[];
 
    public frequency_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4befadf9abb47333L;
 
    public static final byte UNKNOWN = (byte) 0;
    public static final byte EST_ROBOT_STATE = (byte) 1;
    public static final byte ATLAS_COMMAND = (byte) 2;
    public static final byte CAMERA = (byte) 3;
    public static final byte CAMERA_LHAND = (byte) 4;
    public static final byte CAMERA_RHAND = (byte) 5;
    public static final byte SCAN = (byte) 6;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.frequency_t.class))
            return 0L;
 
        classes.add(drc.frequency_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.real_time_percent); 
 
        outs.writeByte(this.num); 
 
        for (int a = 0; a < this.num; a++) {
            outs.writeShort(this.frequency[a]); 
        }
 
        if (this.num > 0)
            outs.write(this.channel, 0, num);
 
    }
 
    public frequency_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public frequency_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.frequency_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.frequency_t o = new drc.frequency_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.real_time_percent = ins.readByte();
 
        this.num = ins.readByte();
 
        this.frequency = new short[(int) num];
        for (int a = 0; a < this.num; a++) {
            this.frequency[a] = ins.readShort();
        }
 
        this.channel = new byte[(int) num];
        ins.readFully(this.channel, 0, num); 
    }
 
    public drc.frequency_t copy()
    {
        drc.frequency_t outobj = new drc.frequency_t();
        outobj.utime = this.utime;
 
        outobj.real_time_percent = this.real_time_percent;
 
        outobj.num = this.num;
 
        outobj.frequency = new short[(int) num];
        if (this.num > 0)
            System.arraycopy(this.frequency, 0, outobj.frequency, 0, this.num); 
        outobj.channel = new byte[(int) num];
        if (this.num > 0)
            System.arraycopy(this.channel, 0, outobj.channel, 0, this.num); 
        return outobj;
    }
 
}

