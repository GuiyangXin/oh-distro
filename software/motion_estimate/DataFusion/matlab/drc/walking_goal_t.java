/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class walking_goal_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public drc.position_3d_t goal_pos;
    public int max_num_steps;
    public int min_num_steps;
    public long timeout;
    public float step_speed;
    public float nom_step_width;
    public float nom_forward_step;
    public float max_forward_step;
    public float step_height;
    public boolean follow_spline;
    public boolean ignore_terrain;
    public byte behavior;
    public byte goal_type;
    public float mu;
    public boolean allow_optimization;
    public boolean is_new_goal;
    public boolean right_foot_lead;
 
    public walking_goal_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x399ac1aabc6de3feL;
 
    public static final byte BEHAVIOR_WALKING = (byte) 0;
    public static final byte BEHAVIOR_CRAWLING = (byte) 1;
    public static final byte BEHAVIOR_BDI_WALKING = (byte) 2;
    public static final byte BEHAVIOR_BDI_STEPPING = (byte) 3;
    public static final byte GOAL_TYPE_CENTER = (byte) 0;
    public static final byte GOAL_TYPE_RIGHT_FOOT = (byte) 1;
    public static final byte GOAL_TYPE_LEFT_FOOT = (byte) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.walking_goal_t.class))
            return 0L;
 
        classes.add(drc.walking_goal_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.position_3d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        this.goal_pos._encodeRecursive(outs); 
 
        outs.writeInt(this.max_num_steps); 
 
        outs.writeInt(this.min_num_steps); 
 
        outs.writeLong(this.timeout); 
 
        outs.writeFloat(this.step_speed); 
 
        outs.writeFloat(this.nom_step_width); 
 
        outs.writeFloat(this.nom_forward_step); 
 
        outs.writeFloat(this.max_forward_step); 
 
        outs.writeFloat(this.step_height); 
 
        outs.writeByte( this.follow_spline ? 1 : 0); 
 
        outs.writeByte( this.ignore_terrain ? 1 : 0); 
 
        outs.writeByte(this.behavior); 
 
        outs.writeByte(this.goal_type); 
 
        outs.writeFloat(this.mu); 
 
        outs.writeByte( this.allow_optimization ? 1 : 0); 
 
        outs.writeByte( this.is_new_goal ? 1 : 0); 
 
        outs.writeByte( this.right_foot_lead ? 1 : 0); 
 
    }
 
    public walking_goal_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public walking_goal_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.walking_goal_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.walking_goal_t o = new drc.walking_goal_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.goal_pos = drc.position_3d_t._decodeRecursiveFactory(ins);
 
        this.max_num_steps = ins.readInt();
 
        this.min_num_steps = ins.readInt();
 
        this.timeout = ins.readLong();
 
        this.step_speed = ins.readFloat();
 
        this.nom_step_width = ins.readFloat();
 
        this.nom_forward_step = ins.readFloat();
 
        this.max_forward_step = ins.readFloat();
 
        this.step_height = ins.readFloat();
 
        this.follow_spline = ins.readByte()!=0;
 
        this.ignore_terrain = ins.readByte()!=0;
 
        this.behavior = ins.readByte();
 
        this.goal_type = ins.readByte();
 
        this.mu = ins.readFloat();
 
        this.allow_optimization = ins.readByte()!=0;
 
        this.is_new_goal = ins.readByte()!=0;
 
        this.right_foot_lead = ins.readByte()!=0;
 
    }
 
    public drc.walking_goal_t copy()
    {
        drc.walking_goal_t outobj = new drc.walking_goal_t();
        outobj.utime = this.utime;
 
        outobj.goal_pos = this.goal_pos.copy();
 
        outobj.max_num_steps = this.max_num_steps;
 
        outobj.min_num_steps = this.min_num_steps;
 
        outobj.timeout = this.timeout;
 
        outobj.step_speed = this.step_speed;
 
        outobj.nom_step_width = this.nom_step_width;
 
        outobj.nom_forward_step = this.nom_forward_step;
 
        outobj.max_forward_step = this.max_forward_step;
 
        outobj.step_height = this.step_height;
 
        outobj.follow_spline = this.follow_spline;
 
        outobj.ignore_terrain = this.ignore_terrain;
 
        outobj.behavior = this.behavior;
 
        outobj.goal_type = this.goal_type;
 
        outobj.mu = this.mu;
 
        outobj.allow_optimization = this.allow_optimization;
 
        outobj.is_new_goal = this.is_new_goal;
 
        outobj.right_foot_lead = this.right_foot_lead;
 
        return outobj;
    }
 
}

