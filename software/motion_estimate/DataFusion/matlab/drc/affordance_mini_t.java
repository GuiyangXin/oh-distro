/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class affordance_mini_t implements lcm.lcm.LCMEncodable
{
    public byte type;
    public int uid;
    public float origin_xyz[];
    public float origin_rpy[];
    public byte nparams;
    public float params[];
    public byte param_names[];
    public byte modelfile;
 
    public affordance_mini_t()
    {
        origin_xyz = new float[3];
        origin_rpy = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xea6580881033bf79L;
 
    public static final byte UNKNOWN_AFF = (byte) 0;
    public static final byte CAR = (byte) 1;
    public static final byte CYLINDER = (byte) 2;
    public static final byte UNKNOWN_PARAM = (byte) 0;
    public static final byte LENGTH = (byte) 1;
    public static final byte RADIUS = (byte) 2;
    public static final byte UNKNOWN_FILE = (byte) 0;
    public static final byte CAR_PCD = (byte) 1;
    public static final byte CABIN_2CM_PCD = (byte) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.affordance_mini_t.class))
            return 0L;
 
        classes.add(drc.affordance_mini_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeByte(this.type); 
 
        outs.writeInt(this.uid); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.origin_xyz[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.origin_rpy[a]); 
        }
 
        outs.writeByte(this.nparams); 
 
        for (int a = 0; a < this.nparams; a++) {
            outs.writeFloat(this.params[a]); 
        }
 
        if (this.nparams > 0)
            outs.write(this.param_names, 0, nparams);
 
        outs.writeByte(this.modelfile); 
 
    }
 
    public affordance_mini_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public affordance_mini_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.affordance_mini_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.affordance_mini_t o = new drc.affordance_mini_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.type = ins.readByte();
 
        this.uid = ins.readInt();
 
        this.origin_xyz = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.origin_xyz[a] = ins.readFloat();
        }
 
        this.origin_rpy = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.origin_rpy[a] = ins.readFloat();
        }
 
        this.nparams = ins.readByte();
 
        this.params = new float[(int) nparams];
        for (int a = 0; a < this.nparams; a++) {
            this.params[a] = ins.readFloat();
        }
 
        this.param_names = new byte[(int) nparams];
        ins.readFully(this.param_names, 0, nparams); 
        this.modelfile = ins.readByte();
 
    }
 
    public drc.affordance_mini_t copy()
    {
        drc.affordance_mini_t outobj = new drc.affordance_mini_t();
        outobj.type = this.type;
 
        outobj.uid = this.uid;
 
        outobj.origin_xyz = new float[(int) 3];
        System.arraycopy(this.origin_xyz, 0, outobj.origin_xyz, 0, 3); 
        outobj.origin_rpy = new float[(int) 3];
        System.arraycopy(this.origin_rpy, 0, outobj.origin_rpy, 0, 3); 
        outobj.nparams = this.nparams;
 
        outobj.params = new float[(int) nparams];
        if (this.nparams > 0)
            System.arraycopy(this.params, 0, outobj.params, 0, this.nparams); 
        outobj.param_names = new byte[(int) nparams];
        if (this.nparams > 0)
            System.arraycopy(this.param_names, 0, outobj.param_names, 0, this.nparams); 
        outobj.modelfile = this.modelfile;
 
        return outobj;
    }
 
}

