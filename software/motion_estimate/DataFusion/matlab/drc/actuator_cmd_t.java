/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class actuator_cmd_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String robot_name;
    public int num_actuators;
    public String actuator_name[];
    public double actuator_effort[];
    public double effort_duration[];
 
    public actuator_cmd_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb688f4055ac63acbL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.actuator_cmd_t.class))
            return 0L;
 
        classes.add(drc.actuator_cmd_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.robot_name.length()]; this.robot_name.getChars(0, this.robot_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.num_actuators); 
 
        for (int a = 0; a < this.num_actuators; a++) {
            __strbuf = new char[this.actuator_name[a].length()]; this.actuator_name[a].getChars(0, this.actuator_name[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.num_actuators; a++) {
            outs.writeDouble(this.actuator_effort[a]); 
        }
 
        for (int a = 0; a < this.num_actuators; a++) {
            outs.writeDouble(this.effort_duration[a]); 
        }
 
    }
 
    public actuator_cmd_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public actuator_cmd_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.actuator_cmd_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.actuator_cmd_t o = new drc.actuator_cmd_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.robot_name = new String(__strbuf);
 
        this.num_actuators = ins.readInt();
 
        this.actuator_name = new String[(int) num_actuators];
        for (int a = 0; a < this.num_actuators; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.actuator_name[a] = new String(__strbuf);
        }
 
        this.actuator_effort = new double[(int) num_actuators];
        for (int a = 0; a < this.num_actuators; a++) {
            this.actuator_effort[a] = ins.readDouble();
        }
 
        this.effort_duration = new double[(int) num_actuators];
        for (int a = 0; a < this.num_actuators; a++) {
            this.effort_duration[a] = ins.readDouble();
        }
 
    }
 
    public drc.actuator_cmd_t copy()
    {
        drc.actuator_cmd_t outobj = new drc.actuator_cmd_t();
        outobj.utime = this.utime;
 
        outobj.robot_name = this.robot_name;
 
        outobj.num_actuators = this.num_actuators;
 
        outobj.actuator_name = new String[(int) num_actuators];
        if (this.num_actuators > 0)
            System.arraycopy(this.actuator_name, 0, outobj.actuator_name, 0, this.num_actuators); 
        outobj.actuator_effort = new double[(int) num_actuators];
        if (this.num_actuators > 0)
            System.arraycopy(this.actuator_effort, 0, outobj.actuator_effort, 0, this.num_actuators); 
        outobj.effort_duration = new double[(int) num_actuators];
        if (this.num_actuators > 0)
            System.arraycopy(this.effort_duration, 0, outobj.effort_duration, 0, this.num_actuators); 
        return outobj;
    }
 
}

