/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class heightmap_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int nx;
    public int ny;
    public int npix;
    public float scale_x;
    public float scale_y;
    public double transform_to_local[][];
    public float heights[];
 
    public heightmap_t()
    {
        transform_to_local = new double[4][4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe01afcf3dc675d25L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.heightmap_t.class))
            return 0L;
 
        classes.add(drc.heightmap_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.nx); 
 
        outs.writeInt(this.ny); 
 
        outs.writeInt(this.npix); 
 
        outs.writeFloat(this.scale_x); 
 
        outs.writeFloat(this.scale_y); 
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeDouble(this.transform_to_local[a][b]); 
            }
        }
 
        for (int a = 0; a < this.npix; a++) {
            outs.writeFloat(this.heights[a]); 
        }
 
    }
 
    public heightmap_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public heightmap_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.heightmap_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.heightmap_t o = new drc.heightmap_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.nx = ins.readInt();
 
        this.ny = ins.readInt();
 
        this.npix = ins.readInt();
 
        this.scale_x = ins.readFloat();
 
        this.scale_y = ins.readFloat();
 
        this.transform_to_local = new double[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                this.transform_to_local[a][b] = ins.readDouble();
            }
        }
 
        this.heights = new float[(int) npix];
        for (int a = 0; a < this.npix; a++) {
            this.heights[a] = ins.readFloat();
        }
 
    }
 
    public drc.heightmap_t copy()
    {
        drc.heightmap_t outobj = new drc.heightmap_t();
        outobj.utime = this.utime;
 
        outobj.nx = this.nx;
 
        outobj.ny = this.ny;
 
        outobj.npix = this.npix;
 
        outobj.scale_x = this.scale_x;
 
        outobj.scale_y = this.scale_y;
 
        outobj.transform_to_local = new double[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.transform_to_local[a], 0, outobj.transform_to_local[a], 0, 4);        }
 
        outobj.heights = new float[(int) npix];
        if (this.npix > 0)
            System.arraycopy(this.heights, 0, outobj.heights, 0, this.npix); 
        return outobj;
    }
 
}

