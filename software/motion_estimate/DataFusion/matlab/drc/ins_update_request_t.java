/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ins_update_request_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public drc.position_3d_t pose;
    public drc.twist_t twist;
    public drc.vector_3d_t local_linear_acceleration;
    public drc.vector_3d_t referencePos_local;
    public drc.vector_3d_t referenceVel_local;
    public drc.vector_3d_t referenceVel_body;
    public drc.vector_3d_t referenceQ_local;
    public byte updateType;
 
    public ins_update_request_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0ae0da8032a43ddaL;
 
    public static final byte POSITION_LOCAL = (byte) 0;
    public static final byte VELOCITY_BODY = (byte) 1;
    public static final byte VELOCITY_LOCAL = (byte) 2;
    public static final byte QUATERNION_LOCAL = (byte) 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.ins_update_request_t.class))
            return 0L;
 
        classes.add(drc.ins_update_request_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.position_3d_t._hashRecursive(classes)
             + drc.twist_t._hashRecursive(classes)
             + drc.vector_3d_t._hashRecursive(classes)
             + drc.vector_3d_t._hashRecursive(classes)
             + drc.vector_3d_t._hashRecursive(classes)
             + drc.vector_3d_t._hashRecursive(classes)
             + drc.vector_3d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        this.pose._encodeRecursive(outs); 
 
        this.twist._encodeRecursive(outs); 
 
        this.local_linear_acceleration._encodeRecursive(outs); 
 
        this.referencePos_local._encodeRecursive(outs); 
 
        this.referenceVel_local._encodeRecursive(outs); 
 
        this.referenceVel_body._encodeRecursive(outs); 
 
        this.referenceQ_local._encodeRecursive(outs); 
 
        outs.writeByte(this.updateType); 
 
    }
 
    public ins_update_request_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ins_update_request_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.ins_update_request_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.ins_update_request_t o = new drc.ins_update_request_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.pose = drc.position_3d_t._decodeRecursiveFactory(ins);
 
        this.twist = drc.twist_t._decodeRecursiveFactory(ins);
 
        this.local_linear_acceleration = drc.vector_3d_t._decodeRecursiveFactory(ins);
 
        this.referencePos_local = drc.vector_3d_t._decodeRecursiveFactory(ins);
 
        this.referenceVel_local = drc.vector_3d_t._decodeRecursiveFactory(ins);
 
        this.referenceVel_body = drc.vector_3d_t._decodeRecursiveFactory(ins);
 
        this.referenceQ_local = drc.vector_3d_t._decodeRecursiveFactory(ins);
 
        this.updateType = ins.readByte();
 
    }
 
    public drc.ins_update_request_t copy()
    {
        drc.ins_update_request_t outobj = new drc.ins_update_request_t();
        outobj.utime = this.utime;
 
        outobj.pose = this.pose.copy();
 
        outobj.twist = this.twist.copy();
 
        outobj.local_linear_acceleration = this.local_linear_acceleration.copy();
 
        outobj.referencePos_local = this.referencePos_local.copy();
 
        outobj.referenceVel_local = this.referenceVel_local.copy();
 
        outobj.referenceVel_body = this.referenceVel_body.copy();
 
        outobj.referenceQ_local = this.referenceQ_local.copy();
 
        outobj.updateType = this.updateType;
 
        return outobj;
    }
 
}

