/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class action_authoring_server_status_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public byte server_status;
    public float last_ik_time_solved;
    public float total_ik_time_to_solve;
    public boolean solving_highres;
    public boolean plan_is_good;
    public boolean plan_is_warn;
 
    public action_authoring_server_status_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4b6225320db0afa0L;
 
    public static final byte SERVER_READY = (byte) 0;
    public static final byte SERVER_PLANNING = (byte) 1;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.action_authoring_server_status_t.class))
            return 0L;
 
        classes.add(drc.action_authoring_server_status_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.server_status); 
 
        outs.writeFloat(this.last_ik_time_solved); 
 
        outs.writeFloat(this.total_ik_time_to_solve); 
 
        outs.writeByte( this.solving_highres ? 1 : 0); 
 
        outs.writeByte( this.plan_is_good ? 1 : 0); 
 
        outs.writeByte( this.plan_is_warn ? 1 : 0); 
 
    }
 
    public action_authoring_server_status_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public action_authoring_server_status_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.action_authoring_server_status_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.action_authoring_server_status_t o = new drc.action_authoring_server_status_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.server_status = ins.readByte();
 
        this.last_ik_time_solved = ins.readFloat();
 
        this.total_ik_time_to_solve = ins.readFloat();
 
        this.solving_highres = ins.readByte()!=0;
 
        this.plan_is_good = ins.readByte()!=0;
 
        this.plan_is_warn = ins.readByte()!=0;
 
    }
 
    public drc.action_authoring_server_status_t copy()
    {
        drc.action_authoring_server_status_t outobj = new drc.action_authoring_server_status_t();
        outobj.utime = this.utime;
 
        outobj.server_status = this.server_status;
 
        outobj.last_ik_time_solved = this.last_ik_time_solved;
 
        outobj.total_ik_time_to_solve = this.total_ik_time_to_solve;
 
        outobj.solving_highres = this.solving_highres;
 
        outobj.plan_is_good = this.plan_is_good;
 
        outobj.plan_is_warn = this.plan_is_warn;
 
        return outobj;
    }
 
}

