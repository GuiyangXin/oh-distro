/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class ee_teleop_transform_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public byte ee_type;
    public drc.position_3d_t hand2aff_offset;
    public drc.vector_3d_t mate_axis;
 
    public ee_teleop_transform_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x428a5cf795a01237L;
 
    public static final byte LEFT_HAND = (byte) 0;
    public static final byte RIGHT_HAND = (byte) 1;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.ee_teleop_transform_t.class))
            return 0L;
 
        classes.add(drc.ee_teleop_transform_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.position_3d_t._hashRecursive(classes)
             + drc.vector_3d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeByte(this.ee_type); 
 
        this.hand2aff_offset._encodeRecursive(outs); 
 
        this.mate_axis._encodeRecursive(outs); 
 
    }
 
    public ee_teleop_transform_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public ee_teleop_transform_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.ee_teleop_transform_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.ee_teleop_transform_t o = new drc.ee_teleop_transform_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.ee_type = ins.readByte();
 
        this.hand2aff_offset = drc.position_3d_t._decodeRecursiveFactory(ins);
 
        this.mate_axis = drc.vector_3d_t._decodeRecursiveFactory(ins);
 
    }
 
    public drc.ee_teleop_transform_t copy()
    {
        drc.ee_teleop_transform_t outobj = new drc.ee_teleop_transform_t();
        outobj.utime = this.utime;
 
        outobj.ee_type = this.ee_type;
 
        outobj.hand2aff_offset = this.hand2aff_offset.copy();
 
        outobj.mate_axis = this.mate_axis.copy();
 
        return outobj;
    }
 
}

