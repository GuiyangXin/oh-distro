/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class covariance_t implements lcm.lcm.LCMEncodable
{
    public double position_cov[][];
    public double twist_cov[][];
 
    public covariance_t()
    {
        position_cov = new double[6][6];
        twist_cov = new double[6][6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe6bb3dea20eda069L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.covariance_t.class))
            return 0L;
 
        classes.add(drc.covariance_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 6; a++) {
            for (int b = 0; b < 6; b++) {
                outs.writeDouble(this.position_cov[a][b]); 
            }
        }
 
        for (int a = 0; a < 6; a++) {
            for (int b = 0; b < 6; b++) {
                outs.writeDouble(this.twist_cov[a][b]); 
            }
        }
 
    }
 
    public covariance_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public covariance_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.covariance_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.covariance_t o = new drc.covariance_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.position_cov = new double[(int) 6][(int) 6];
        for (int a = 0; a < 6; a++) {
            for (int b = 0; b < 6; b++) {
                this.position_cov[a][b] = ins.readDouble();
            }
        }
 
        this.twist_cov = new double[(int) 6][(int) 6];
        for (int a = 0; a < 6; a++) {
            for (int b = 0; b < 6; b++) {
                this.twist_cov[a][b] = ins.readDouble();
            }
        }
 
    }
 
    public drc.covariance_t copy()
    {
        drc.covariance_t outobj = new drc.covariance_t();
        outobj.position_cov = new double[(int) 6][(int) 6];
        for (int a = 0; a < 6; a++) {
            System.arraycopy(this.position_cov[a], 0, outobj.position_cov[a], 0, 6);        }
 
        outobj.twist_cov = new double[(int) 6][(int) 6];
        for (int a = 0; a < 6; a++) {
            System.arraycopy(this.twist_cov[a], 0, outobj.twist_cov[a], 0, 6);        }
 
        return outobj;
    }
 
}

