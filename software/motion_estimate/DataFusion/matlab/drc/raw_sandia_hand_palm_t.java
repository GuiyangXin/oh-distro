/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class raw_sandia_hand_palm_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long palm_time;
    public short palm_accel[];
    public short palm_gyro[];
    public short palm_mag[];
    public int palm_temps[];
    public int palm_tactile[];
 
    public raw_sandia_hand_palm_t()
    {
        palm_accel = new short[3];
        palm_gyro = new short[3];
        palm_mag = new short[3];
        palm_temps = new int[7];
        palm_tactile = new int[32];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8e4dbb597c767fc9L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.raw_sandia_hand_palm_t.class))
            return 0L;
 
        classes.add(drc.raw_sandia_hand_palm_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.palm_time); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.palm_accel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.palm_gyro[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.palm_mag[a]); 
        }
 
        for (int a = 0; a < 7; a++) {
            outs.writeInt(this.palm_temps[a]); 
        }
 
        for (int a = 0; a < 32; a++) {
            outs.writeInt(this.palm_tactile[a]); 
        }
 
    }
 
    public raw_sandia_hand_palm_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public raw_sandia_hand_palm_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.raw_sandia_hand_palm_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.raw_sandia_hand_palm_t o = new drc.raw_sandia_hand_palm_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.palm_time = ins.readLong();
 
        this.palm_accel = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.palm_accel[a] = ins.readShort();
        }
 
        this.palm_gyro = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.palm_gyro[a] = ins.readShort();
        }
 
        this.palm_mag = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.palm_mag[a] = ins.readShort();
        }
 
        this.palm_temps = new int[(int) 7];
        for (int a = 0; a < 7; a++) {
            this.palm_temps[a] = ins.readInt();
        }
 
        this.palm_tactile = new int[(int) 32];
        for (int a = 0; a < 32; a++) {
            this.palm_tactile[a] = ins.readInt();
        }
 
    }
 
    public drc.raw_sandia_hand_palm_t copy()
    {
        drc.raw_sandia_hand_palm_t outobj = new drc.raw_sandia_hand_palm_t();
        outobj.utime = this.utime;
 
        outobj.palm_time = this.palm_time;
 
        outobj.palm_accel = new short[(int) 3];
        System.arraycopy(this.palm_accel, 0, outobj.palm_accel, 0, 3); 
        outobj.palm_gyro = new short[(int) 3];
        System.arraycopy(this.palm_gyro, 0, outobj.palm_gyro, 0, 3); 
        outobj.palm_mag = new short[(int) 3];
        System.arraycopy(this.palm_mag, 0, outobj.palm_mag, 0, 3); 
        outobj.palm_temps = new int[(int) 7];
        System.arraycopy(this.palm_temps, 0, outobj.palm_temps, 0, 7); 
        outobj.palm_tactile = new int[(int) 32];
        System.arraycopy(this.palm_tactile, 0, outobj.palm_tactile, 0, 32); 
        return outobj;
    }
 
}

