/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class driving_status_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double hand_wheel;
    public double hand_brake;
    public double gas_pedal;
    public double brake_pedal;
    public short direction;
    public short key;
 
    public driving_status_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xab33e5251bdc78d3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.driving_status_t.class))
            return 0L;
 
        classes.add(drc.driving_status_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeDouble(this.hand_wheel); 
 
        outs.writeDouble(this.hand_brake); 
 
        outs.writeDouble(this.gas_pedal); 
 
        outs.writeDouble(this.brake_pedal); 
 
        outs.writeShort(this.direction); 
 
        outs.writeShort(this.key); 
 
    }
 
    public driving_status_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public driving_status_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.driving_status_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.driving_status_t o = new drc.driving_status_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.hand_wheel = ins.readDouble();
 
        this.hand_brake = ins.readDouble();
 
        this.gas_pedal = ins.readDouble();
 
        this.brake_pedal = ins.readDouble();
 
        this.direction = ins.readShort();
 
        this.key = ins.readShort();
 
    }
 
    public drc.driving_status_t copy()
    {
        drc.driving_status_t outobj = new drc.driving_status_t();
        outobj.utime = this.utime;
 
        outobj.hand_wheel = this.hand_wheel;
 
        outobj.hand_brake = this.hand_brake;
 
        outobj.gas_pedal = this.gas_pedal;
 
        outobj.brake_pedal = this.brake_pedal;
 
        outobj.direction = this.direction;
 
        outobj.key = this.key;
 
        return outobj;
    }
 
}

