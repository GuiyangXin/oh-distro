/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class map_params_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long map_id;
    public float resolution;
    public float bound_min[];
    public float bound_max[];
    public int buffer_size;
 
    public map_params_t()
    {
        bound_min = new float[3];
        bound_max = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xe2e16598d7ad9675L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.map_params_t.class))
            return 0L;
 
        classes.add(drc.map_params_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.map_id); 
 
        outs.writeFloat(this.resolution); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.bound_min[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.bound_max[a]); 
        }
 
        outs.writeInt(this.buffer_size); 
 
    }
 
    public map_params_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public map_params_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.map_params_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.map_params_t o = new drc.map_params_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.map_id = ins.readLong();
 
        this.resolution = ins.readFloat();
 
        this.bound_min = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.bound_min[a] = ins.readFloat();
        }
 
        this.bound_max = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.bound_max[a] = ins.readFloat();
        }
 
        this.buffer_size = ins.readInt();
 
    }
 
    public drc.map_params_t copy()
    {
        drc.map_params_t outobj = new drc.map_params_t();
        outobj.utime = this.utime;
 
        outobj.map_id = this.map_id;
 
        outobj.resolution = this.resolution;
 
        outobj.bound_min = new float[(int) 3];
        System.arraycopy(this.bound_min, 0, outobj.bound_min, 0, 3); 
        outobj.bound_max = new float[(int) 3];
        System.arraycopy(this.bound_max, 0, outobj.bound_max, 0, 3); 
        outobj.buffer_size = this.buffer_size;
 
        return outobj;
    }
 
}

