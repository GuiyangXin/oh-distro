/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class affordance_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String otdf_type;
    public String friendly_name;
    public int uid;
    public int map_id;
    public short aff_store_control;
    public double origin_xyz[];
    public double origin_rpy[];
    public int nparams;
    public double params[];
    public String param_names[];
    public int nstates;
    public double states[];
    public String state_names[];
    public double bounding_xyz[];
    public double bounding_rpy[];
    public double bounding_lwh[];
    public String modelfile;
 
    public affordance_t()
    {
        origin_xyz = new double[3];
        origin_rpy = new double[3];
        bounding_xyz = new double[3];
        bounding_rpy = new double[3];
        bounding_lwh = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xb8fd336735c84c2bL;
 
    public static final short NEW = (short) 0;
    public static final short UPDATE = (short) 1;
    public static final short DELETE = (short) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.affordance_t.class))
            return 0L;
 
        classes.add(drc.affordance_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.otdf_type.length()]; this.otdf_type.getChars(0, this.otdf_type.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.friendly_name.length()]; this.friendly_name.getChars(0, this.friendly_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.uid); 
 
        outs.writeInt(this.map_id); 
 
        outs.writeShort(this.aff_store_control); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.origin_xyz[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.origin_rpy[a]); 
        }
 
        outs.writeInt(this.nparams); 
 
        for (int a = 0; a < this.nparams; a++) {
            outs.writeDouble(this.params[a]); 
        }
 
        for (int a = 0; a < this.nparams; a++) {
            __strbuf = new char[this.param_names[a].length()]; this.param_names[a].getChars(0, this.param_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        outs.writeInt(this.nstates); 
 
        for (int a = 0; a < this.nstates; a++) {
            outs.writeDouble(this.states[a]); 
        }
 
        for (int a = 0; a < this.nstates; a++) {
            __strbuf = new char[this.state_names[a].length()]; this.state_names[a].getChars(0, this.state_names[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.bounding_xyz[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.bounding_rpy[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.bounding_lwh[a]); 
        }
 
        __strbuf = new char[this.modelfile.length()]; this.modelfile.getChars(0, this.modelfile.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public affordance_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public affordance_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.affordance_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.affordance_t o = new drc.affordance_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.otdf_type = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.friendly_name = new String(__strbuf);
 
        this.uid = ins.readInt();
 
        this.map_id = ins.readInt();
 
        this.aff_store_control = ins.readShort();
 
        this.origin_xyz = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.origin_xyz[a] = ins.readDouble();
        }
 
        this.origin_rpy = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.origin_rpy[a] = ins.readDouble();
        }
 
        this.nparams = ins.readInt();
 
        this.params = new double[(int) nparams];
        for (int a = 0; a < this.nparams; a++) {
            this.params[a] = ins.readDouble();
        }
 
        this.param_names = new String[(int) nparams];
        for (int a = 0; a < this.nparams; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.param_names[a] = new String(__strbuf);
        }
 
        this.nstates = ins.readInt();
 
        this.states = new double[(int) nstates];
        for (int a = 0; a < this.nstates; a++) {
            this.states[a] = ins.readDouble();
        }
 
        this.state_names = new String[(int) nstates];
        for (int a = 0; a < this.nstates; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.state_names[a] = new String(__strbuf);
        }
 
        this.bounding_xyz = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.bounding_xyz[a] = ins.readDouble();
        }
 
        this.bounding_rpy = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.bounding_rpy[a] = ins.readDouble();
        }
 
        this.bounding_lwh = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.bounding_lwh[a] = ins.readDouble();
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.modelfile = new String(__strbuf);
 
    }
 
    public drc.affordance_t copy()
    {
        drc.affordance_t outobj = new drc.affordance_t();
        outobj.utime = this.utime;
 
        outobj.otdf_type = this.otdf_type;
 
        outobj.friendly_name = this.friendly_name;
 
        outobj.uid = this.uid;
 
        outobj.map_id = this.map_id;
 
        outobj.aff_store_control = this.aff_store_control;
 
        outobj.origin_xyz = new double[(int) 3];
        System.arraycopy(this.origin_xyz, 0, outobj.origin_xyz, 0, 3); 
        outobj.origin_rpy = new double[(int) 3];
        System.arraycopy(this.origin_rpy, 0, outobj.origin_rpy, 0, 3); 
        outobj.nparams = this.nparams;
 
        outobj.params = new double[(int) nparams];
        if (this.nparams > 0)
            System.arraycopy(this.params, 0, outobj.params, 0, this.nparams); 
        outobj.param_names = new String[(int) nparams];
        if (this.nparams > 0)
            System.arraycopy(this.param_names, 0, outobj.param_names, 0, this.nparams); 
        outobj.nstates = this.nstates;
 
        outobj.states = new double[(int) nstates];
        if (this.nstates > 0)
            System.arraycopy(this.states, 0, outobj.states, 0, this.nstates); 
        outobj.state_names = new String[(int) nstates];
        if (this.nstates > 0)
            System.arraycopy(this.state_names, 0, outobj.state_names, 0, this.nstates); 
        outobj.bounding_xyz = new double[(int) 3];
        System.arraycopy(this.bounding_xyz, 0, outobj.bounding_xyz, 0, 3); 
        outobj.bounding_rpy = new double[(int) 3];
        System.arraycopy(this.bounding_rpy, 0, outobj.bounding_rpy, 0, 3); 
        outobj.bounding_lwh = new double[(int) 3];
        System.arraycopy(this.bounding_lwh, 0, outobj.bounding_lwh, 0, 3); 
        outobj.modelfile = this.modelfile;
 
        return outobj;
    }
 
}

