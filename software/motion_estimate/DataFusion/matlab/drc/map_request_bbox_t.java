/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class map_request_bbox_t implements lcm.lcm.LCMEncodable
{
    public short center[];
    public byte size[];
    public short rpy[];
    public byte time_window;
    public byte params;
 
    public map_request_bbox_t()
    {
        center = new short[3];
        size = new byte[3];
        rpy = new short[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xc5028c3750798662L;
 
    public static final byte LASER = (byte) 0x00;
    public static final byte STEREO_HEAD = (byte) 0x01;
    public static final byte STEREO_LHAND = (byte) 0x02;
    public static final byte STEREO_RHAND = (byte) 0x03;
    public static final byte SOURCE_MASK = (byte) 0x03;
    public static final byte RAW_MASK = (byte) 0x04;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.map_request_bbox_t.class))
            return 0L;
 
        classes.add(drc.map_request_bbox_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.center[a]); 
        }
 
        outs.write(this.size, 0, 3);
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.rpy[a]); 
        }
 
        outs.writeByte(this.time_window); 
 
        outs.writeByte(this.params); 
 
    }
 
    public map_request_bbox_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public map_request_bbox_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.map_request_bbox_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.map_request_bbox_t o = new drc.map_request_bbox_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.center = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.center[a] = ins.readShort();
        }
 
        this.size = new byte[(int) 3];
        ins.readFully(this.size, 0, 3); 
        this.rpy = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.rpy[a] = ins.readShort();
        }
 
        this.time_window = ins.readByte();
 
        this.params = ins.readByte();
 
    }
 
    public drc.map_request_bbox_t copy()
    {
        drc.map_request_bbox_t outobj = new drc.map_request_bbox_t();
        outobj.center = new short[(int) 3];
        System.arraycopy(this.center, 0, outobj.center, 0, 3); 
        outobj.size = new byte[(int) 3];
        System.arraycopy(this.size, 0, outobj.size, 0, 3); 
        outobj.rpy = new short[(int) 3];
        System.arraycopy(this.rpy, 0, outobj.rpy, 0, 3); 
        outobj.time_window = this.time_window;
 
        outobj.params = this.params;
 
        return outobj;
    }
 
}

