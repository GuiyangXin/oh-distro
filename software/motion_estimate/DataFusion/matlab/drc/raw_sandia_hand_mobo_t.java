/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class raw_sandia_hand_mobo_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long mobo_time;
    public float finger_currents[];
    public float logic_currents[];
    public int mobo_temp[];
    public short mobo_max_effort;
 
    public raw_sandia_hand_mobo_t()
    {
        finger_currents = new float[4];
        logic_currents = new float[3];
        mobo_temp = new int[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x277d1cf6a4992f8bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.raw_sandia_hand_mobo_t.class))
            return 0L;
 
        classes.add(drc.raw_sandia_hand_mobo_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.mobo_time); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeFloat(this.finger_currents[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.logic_currents[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.mobo_temp[a]); 
        }
 
        outs.writeShort(this.mobo_max_effort); 
 
    }
 
    public raw_sandia_hand_mobo_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public raw_sandia_hand_mobo_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.raw_sandia_hand_mobo_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.raw_sandia_hand_mobo_t o = new drc.raw_sandia_hand_mobo_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.mobo_time = ins.readLong();
 
        this.finger_currents = new float[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.finger_currents[a] = ins.readFloat();
        }
 
        this.logic_currents = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.logic_currents[a] = ins.readFloat();
        }
 
        this.mobo_temp = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.mobo_temp[a] = ins.readInt();
        }
 
        this.mobo_max_effort = ins.readShort();
 
    }
 
    public drc.raw_sandia_hand_mobo_t copy()
    {
        drc.raw_sandia_hand_mobo_t outobj = new drc.raw_sandia_hand_mobo_t();
        outobj.utime = this.utime;
 
        outobj.mobo_time = this.mobo_time;
 
        outobj.finger_currents = new float[(int) 4];
        System.arraycopy(this.finger_currents, 0, outobj.finger_currents, 0, 4); 
        outobj.logic_currents = new float[(int) 3];
        System.arraycopy(this.logic_currents, 0, outobj.logic_currents, 0, 3); 
        outobj.mobo_temp = new int[(int) 3];
        System.arraycopy(this.mobo_temp, 0, outobj.mobo_temp, 0, 3); 
        outobj.mobo_max_effort = this.mobo_max_effort;
 
        return outobj;
    }
 
}

