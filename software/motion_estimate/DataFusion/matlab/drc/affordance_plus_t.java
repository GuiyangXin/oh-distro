/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class affordance_plus_t implements lcm.lcm.LCMEncodable
{
    public drc.affordance_t aff;
    public int npoints;
    public float points[][];
    public int ntriangles;
    public int triangles[][];
 
    public affordance_plus_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x76875db76a8e04c2L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.affordance_plus_t.class))
            return 0L;
 
        classes.add(drc.affordance_plus_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.affordance_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.aff._encodeRecursive(outs); 
 
        outs.writeInt(this.npoints); 
 
        for (int a = 0; a < this.npoints; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeFloat(this.points[a][b]); 
            }
        }
 
        outs.writeInt(this.ntriangles); 
 
        for (int a = 0; a < this.ntriangles; a++) {
            for (int b = 0; b < 3; b++) {
                outs.writeInt(this.triangles[a][b]); 
            }
        }
 
    }
 
    public affordance_plus_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public affordance_plus_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.affordance_plus_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.affordance_plus_t o = new drc.affordance_plus_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.aff = drc.affordance_t._decodeRecursiveFactory(ins);
 
        this.npoints = ins.readInt();
 
        this.points = new float[(int) npoints][(int) 3];
        for (int a = 0; a < this.npoints; a++) {
            for (int b = 0; b < 3; b++) {
                this.points[a][b] = ins.readFloat();
            }
        }
 
        this.ntriangles = ins.readInt();
 
        this.triangles = new int[(int) ntriangles][(int) 3];
        for (int a = 0; a < this.ntriangles; a++) {
            for (int b = 0; b < 3; b++) {
                this.triangles[a][b] = ins.readInt();
            }
        }
 
    }
 
    public drc.affordance_plus_t copy()
    {
        drc.affordance_plus_t outobj = new drc.affordance_plus_t();
        outobj.aff = this.aff.copy();
 
        outobj.npoints = this.npoints;
 
        outobj.points = new float[(int) npoints][(int) 3];
        for (int a = 0; a < this.npoints; a++) {
            System.arraycopy(this.points[a], 0, outobj.points[a], 0, 3);        }
 
        outobj.ntriangles = this.ntriangles;
 
        outobj.triangles = new int[(int) ntriangles][(int) 3];
        for (int a = 0; a < this.ntriangles; a++) {
            System.arraycopy(this.triangles[a], 0, outobj.triangles[a], 0, 3);        }
 
        return outobj;
    }
 
}

