/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class walking_plan_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String robot_name;
    public int n_qtraj_bytes;
    public byte qtraj[];
    public int n_support_times;
    public float support_times[];
    public int n_supports_bytes;
    public byte supports[];
    public int n_S_bytes;
    public byte S[];
    public int n_s1_bytes;
    public byte s1[];
    public int n_s2_bytes;
    public byte s2[];
    public int n_s1dot_bytes;
    public byte s1dot[];
    public int n_s2dot_bytes;
    public byte s2dot[];
    public int n_comtraj_bytes;
    public byte comtraj[];
    public int n_zmptraj_bytes;
    public byte zmptraj[];
    public int n_link_constraints_bytes;
    public byte link_constraints[];
    public float mu;
    public float t_offset;
    public boolean ignore_terrain;
 
    public walking_plan_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xd58dd081a467bf24L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.walking_plan_t.class))
            return 0L;
 
        classes.add(drc.walking_plan_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.robot_name.length()]; this.robot_name.getChars(0, this.robot_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.n_qtraj_bytes); 
 
        if (this.n_qtraj_bytes > 0)
            outs.write(this.qtraj, 0, n_qtraj_bytes);
 
        outs.writeInt(this.n_support_times); 
 
        for (int a = 0; a < this.n_support_times; a++) {
            outs.writeFloat(this.support_times[a]); 
        }
 
        outs.writeInt(this.n_supports_bytes); 
 
        if (this.n_supports_bytes > 0)
            outs.write(this.supports, 0, n_supports_bytes);
 
        outs.writeInt(this.n_S_bytes); 
 
        if (this.n_S_bytes > 0)
            outs.write(this.S, 0, n_S_bytes);
 
        outs.writeInt(this.n_s1_bytes); 
 
        if (this.n_s1_bytes > 0)
            outs.write(this.s1, 0, n_s1_bytes);
 
        outs.writeInt(this.n_s2_bytes); 
 
        if (this.n_s2_bytes > 0)
            outs.write(this.s2, 0, n_s2_bytes);
 
        outs.writeInt(this.n_s1dot_bytes); 
 
        if (this.n_s1dot_bytes > 0)
            outs.write(this.s1dot, 0, n_s1dot_bytes);
 
        outs.writeInt(this.n_s2dot_bytes); 
 
        if (this.n_s2dot_bytes > 0)
            outs.write(this.s2dot, 0, n_s2dot_bytes);
 
        outs.writeInt(this.n_comtraj_bytes); 
 
        if (this.n_comtraj_bytes > 0)
            outs.write(this.comtraj, 0, n_comtraj_bytes);
 
        outs.writeInt(this.n_zmptraj_bytes); 
 
        if (this.n_zmptraj_bytes > 0)
            outs.write(this.zmptraj, 0, n_zmptraj_bytes);
 
        outs.writeInt(this.n_link_constraints_bytes); 
 
        if (this.n_link_constraints_bytes > 0)
            outs.write(this.link_constraints, 0, n_link_constraints_bytes);
 
        outs.writeFloat(this.mu); 
 
        outs.writeFloat(this.t_offset); 
 
        outs.writeByte( this.ignore_terrain ? 1 : 0); 
 
    }
 
    public walking_plan_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public walking_plan_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.walking_plan_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.walking_plan_t o = new drc.walking_plan_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.robot_name = new String(__strbuf);
 
        this.n_qtraj_bytes = ins.readInt();
 
        this.qtraj = new byte[(int) n_qtraj_bytes];
        ins.readFully(this.qtraj, 0, n_qtraj_bytes); 
        this.n_support_times = ins.readInt();
 
        this.support_times = new float[(int) n_support_times];
        for (int a = 0; a < this.n_support_times; a++) {
            this.support_times[a] = ins.readFloat();
        }
 
        this.n_supports_bytes = ins.readInt();
 
        this.supports = new byte[(int) n_supports_bytes];
        ins.readFully(this.supports, 0, n_supports_bytes); 
        this.n_S_bytes = ins.readInt();
 
        this.S = new byte[(int) n_S_bytes];
        ins.readFully(this.S, 0, n_S_bytes); 
        this.n_s1_bytes = ins.readInt();
 
        this.s1 = new byte[(int) n_s1_bytes];
        ins.readFully(this.s1, 0, n_s1_bytes); 
        this.n_s2_bytes = ins.readInt();
 
        this.s2 = new byte[(int) n_s2_bytes];
        ins.readFully(this.s2, 0, n_s2_bytes); 
        this.n_s1dot_bytes = ins.readInt();
 
        this.s1dot = new byte[(int) n_s1dot_bytes];
        ins.readFully(this.s1dot, 0, n_s1dot_bytes); 
        this.n_s2dot_bytes = ins.readInt();
 
        this.s2dot = new byte[(int) n_s2dot_bytes];
        ins.readFully(this.s2dot, 0, n_s2dot_bytes); 
        this.n_comtraj_bytes = ins.readInt();
 
        this.comtraj = new byte[(int) n_comtraj_bytes];
        ins.readFully(this.comtraj, 0, n_comtraj_bytes); 
        this.n_zmptraj_bytes = ins.readInt();
 
        this.zmptraj = new byte[(int) n_zmptraj_bytes];
        ins.readFully(this.zmptraj, 0, n_zmptraj_bytes); 
        this.n_link_constraints_bytes = ins.readInt();
 
        this.link_constraints = new byte[(int) n_link_constraints_bytes];
        ins.readFully(this.link_constraints, 0, n_link_constraints_bytes); 
        this.mu = ins.readFloat();
 
        this.t_offset = ins.readFloat();
 
        this.ignore_terrain = ins.readByte()!=0;
 
    }
 
    public drc.walking_plan_t copy()
    {
        drc.walking_plan_t outobj = new drc.walking_plan_t();
        outobj.utime = this.utime;
 
        outobj.robot_name = this.robot_name;
 
        outobj.n_qtraj_bytes = this.n_qtraj_bytes;
 
        outobj.qtraj = new byte[(int) n_qtraj_bytes];
        if (this.n_qtraj_bytes > 0)
            System.arraycopy(this.qtraj, 0, outobj.qtraj, 0, this.n_qtraj_bytes); 
        outobj.n_support_times = this.n_support_times;
 
        outobj.support_times = new float[(int) n_support_times];
        if (this.n_support_times > 0)
            System.arraycopy(this.support_times, 0, outobj.support_times, 0, this.n_support_times); 
        outobj.n_supports_bytes = this.n_supports_bytes;
 
        outobj.supports = new byte[(int) n_supports_bytes];
        if (this.n_supports_bytes > 0)
            System.arraycopy(this.supports, 0, outobj.supports, 0, this.n_supports_bytes); 
        outobj.n_S_bytes = this.n_S_bytes;
 
        outobj.S = new byte[(int) n_S_bytes];
        if (this.n_S_bytes > 0)
            System.arraycopy(this.S, 0, outobj.S, 0, this.n_S_bytes); 
        outobj.n_s1_bytes = this.n_s1_bytes;
 
        outobj.s1 = new byte[(int) n_s1_bytes];
        if (this.n_s1_bytes > 0)
            System.arraycopy(this.s1, 0, outobj.s1, 0, this.n_s1_bytes); 
        outobj.n_s2_bytes = this.n_s2_bytes;
 
        outobj.s2 = new byte[(int) n_s2_bytes];
        if (this.n_s2_bytes > 0)
            System.arraycopy(this.s2, 0, outobj.s2, 0, this.n_s2_bytes); 
        outobj.n_s1dot_bytes = this.n_s1dot_bytes;
 
        outobj.s1dot = new byte[(int) n_s1dot_bytes];
        if (this.n_s1dot_bytes > 0)
            System.arraycopy(this.s1dot, 0, outobj.s1dot, 0, this.n_s1dot_bytes); 
        outobj.n_s2dot_bytes = this.n_s2dot_bytes;
 
        outobj.s2dot = new byte[(int) n_s2dot_bytes];
        if (this.n_s2dot_bytes > 0)
            System.arraycopy(this.s2dot, 0, outobj.s2dot, 0, this.n_s2dot_bytes); 
        outobj.n_comtraj_bytes = this.n_comtraj_bytes;
 
        outobj.comtraj = new byte[(int) n_comtraj_bytes];
        if (this.n_comtraj_bytes > 0)
            System.arraycopy(this.comtraj, 0, outobj.comtraj, 0, this.n_comtraj_bytes); 
        outobj.n_zmptraj_bytes = this.n_zmptraj_bytes;
 
        outobj.zmptraj = new byte[(int) n_zmptraj_bytes];
        if (this.n_zmptraj_bytes > 0)
            System.arraycopy(this.zmptraj, 0, outobj.zmptraj, 0, this.n_zmptraj_bytes); 
        outobj.n_link_constraints_bytes = this.n_link_constraints_bytes;
 
        outobj.link_constraints = new byte[(int) n_link_constraints_bytes];
        if (this.n_link_constraints_bytes > 0)
            System.arraycopy(this.link_constraints, 0, outobj.link_constraints, 0, this.n_link_constraints_bytes); 
        outobj.mu = this.mu;
 
        outobj.t_offset = this.t_offset;
 
        outobj.ignore_terrain = this.ignore_terrain;
 
        return outobj;
    }
 
}

