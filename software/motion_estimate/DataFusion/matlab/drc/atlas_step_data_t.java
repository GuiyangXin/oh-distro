/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class atlas_step_data_t implements lcm.lcm.LCMEncodable
{
    public int step_index;
    public int foot_index;
    public float duration;
    public float position[];
    public float yaw;
    public float normal[];
    public float swing_height;
 
    public atlas_step_data_t()
    {
        position = new float[3];
        normal = new float[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x026bcf179ec0716dL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.atlas_step_data_t.class))
            return 0L;
 
        classes.add(drc.atlas_step_data_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeInt(this.step_index); 
 
        outs.writeInt(this.foot_index); 
 
        outs.writeFloat(this.duration); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.position[a]); 
        }
 
        outs.writeFloat(this.yaw); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeFloat(this.normal[a]); 
        }
 
        outs.writeFloat(this.swing_height); 
 
    }
 
    public atlas_step_data_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public atlas_step_data_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.atlas_step_data_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.atlas_step_data_t o = new drc.atlas_step_data_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.step_index = ins.readInt();
 
        this.foot_index = ins.readInt();
 
        this.duration = ins.readFloat();
 
        this.position = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.position[a] = ins.readFloat();
        }
 
        this.yaw = ins.readFloat();
 
        this.normal = new float[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.normal[a] = ins.readFloat();
        }
 
        this.swing_height = ins.readFloat();
 
    }
 
    public drc.atlas_step_data_t copy()
    {
        drc.atlas_step_data_t outobj = new drc.atlas_step_data_t();
        outobj.step_index = this.step_index;
 
        outobj.foot_index = this.foot_index;
 
        outobj.duration = this.duration;
 
        outobj.position = new float[(int) 3];
        System.arraycopy(this.position, 0, outobj.position, 0, 3); 
        outobj.yaw = this.yaw;
 
        outobj.normal = new float[(int) 3];
        System.arraycopy(this.normal, 0, outobj.normal, 0, 3); 
        outobj.swing_height = this.swing_height;
 
        return outobj;
    }
 
}

