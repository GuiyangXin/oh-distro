/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class desired_grasp_state_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String robot_name;
    public String object_name;
    public String geometry_name;
    public int unique_id;
    public short grasp_type;
    public boolean power_grasp;
    public drc.position_3d_t l_hand_pose;
    public drc.position_3d_t r_hand_pose;
    public int num_l_joints;
    public String l_joint_name[];
    public double l_joint_position[];
    public int num_r_joints;
    public String r_joint_name[];
    public double r_joint_position[];
    public short optimization_status;
 
    public desired_grasp_state_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2804ce14cf458a9eL;
 
    public static final short SANDIA_LEFT = (short) 0;
    public static final short SANDIA_RIGHT = (short) 1;
    public static final short SANDIA_BOTH = (short) 2;
    public static final short IROBOT_LEFT = (short) 3;
    public static final short IROBOT_RIGHT = (short) 4;
    public static final short IROBOT_BOTH = (short) 5;
    public static final short RUNNING = (short) 0;
    public static final short SUCCESS = (short) 1;
    public static final short FAILURE = (short) 2;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.desired_grasp_state_t.class))
            return 0L;
 
        classes.add(drc.desired_grasp_state_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.position_3d_t._hashRecursive(classes)
             + drc.position_3d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.robot_name.length()]; this.robot_name.getChars(0, this.robot_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.object_name.length()]; this.object_name.getChars(0, this.object_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.geometry_name.length()]; this.geometry_name.getChars(0, this.geometry_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.unique_id); 
 
        outs.writeShort(this.grasp_type); 
 
        outs.writeByte( this.power_grasp ? 1 : 0); 
 
        this.l_hand_pose._encodeRecursive(outs); 
 
        this.r_hand_pose._encodeRecursive(outs); 
 
        outs.writeInt(this.num_l_joints); 
 
        for (int a = 0; a < this.num_l_joints; a++) {
            __strbuf = new char[this.l_joint_name[a].length()]; this.l_joint_name[a].getChars(0, this.l_joint_name[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.num_l_joints; a++) {
            outs.writeDouble(this.l_joint_position[a]); 
        }
 
        outs.writeInt(this.num_r_joints); 
 
        for (int a = 0; a < this.num_r_joints; a++) {
            __strbuf = new char[this.r_joint_name[a].length()]; this.r_joint_name[a].getChars(0, this.r_joint_name[a].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
        }
 
        for (int a = 0; a < this.num_r_joints; a++) {
            outs.writeDouble(this.r_joint_position[a]); 
        }
 
        outs.writeShort(this.optimization_status); 
 
    }
 
    public desired_grasp_state_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public desired_grasp_state_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.desired_grasp_state_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.desired_grasp_state_t o = new drc.desired_grasp_state_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.robot_name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.object_name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.geometry_name = new String(__strbuf);
 
        this.unique_id = ins.readInt();
 
        this.grasp_type = ins.readShort();
 
        this.power_grasp = ins.readByte()!=0;
 
        this.l_hand_pose = drc.position_3d_t._decodeRecursiveFactory(ins);
 
        this.r_hand_pose = drc.position_3d_t._decodeRecursiveFactory(ins);
 
        this.num_l_joints = ins.readInt();
 
        this.l_joint_name = new String[(int) num_l_joints];
        for (int a = 0; a < this.num_l_joints; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.l_joint_name[a] = new String(__strbuf);
        }
 
        this.l_joint_position = new double[(int) num_l_joints];
        for (int a = 0; a < this.num_l_joints; a++) {
            this.l_joint_position[a] = ins.readDouble();
        }
 
        this.num_r_joints = ins.readInt();
 
        this.r_joint_name = new String[(int) num_r_joints];
        for (int a = 0; a < this.num_r_joints; a++) {
            __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.r_joint_name[a] = new String(__strbuf);
        }
 
        this.r_joint_position = new double[(int) num_r_joints];
        for (int a = 0; a < this.num_r_joints; a++) {
            this.r_joint_position[a] = ins.readDouble();
        }
 
        this.optimization_status = ins.readShort();
 
    }
 
    public drc.desired_grasp_state_t copy()
    {
        drc.desired_grasp_state_t outobj = new drc.desired_grasp_state_t();
        outobj.utime = this.utime;
 
        outobj.robot_name = this.robot_name;
 
        outobj.object_name = this.object_name;
 
        outobj.geometry_name = this.geometry_name;
 
        outobj.unique_id = this.unique_id;
 
        outobj.grasp_type = this.grasp_type;
 
        outobj.power_grasp = this.power_grasp;
 
        outobj.l_hand_pose = this.l_hand_pose.copy();
 
        outobj.r_hand_pose = this.r_hand_pose.copy();
 
        outobj.num_l_joints = this.num_l_joints;
 
        outobj.l_joint_name = new String[(int) num_l_joints];
        if (this.num_l_joints > 0)
            System.arraycopy(this.l_joint_name, 0, outobj.l_joint_name, 0, this.num_l_joints); 
        outobj.l_joint_position = new double[(int) num_l_joints];
        if (this.num_l_joints > 0)
            System.arraycopy(this.l_joint_position, 0, outobj.l_joint_position, 0, this.num_l_joints); 
        outobj.num_r_joints = this.num_r_joints;
 
        outobj.r_joint_name = new String[(int) num_r_joints];
        if (this.num_r_joints > 0)
            System.arraycopy(this.r_joint_name, 0, outobj.r_joint_name, 0, this.num_r_joints); 
        outobj.r_joint_position = new double[(int) num_r_joints];
        if (this.num_r_joints > 0)
            System.arraycopy(this.r_joint_position, 0, outobj.r_joint_position, 0, this.num_r_joints); 
        outobj.optimization_status = this.optimization_status;
 
        return outobj;
    }
 
}

