/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class atlas_status_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long seq_id;
    public long processed_to_robot_packet_seq_id;
    public long control_data_version_mismatch;
    public int run_state;
    public long robot_status_flags;
    public float pump_inlet_pressure;
    public float pump_supply_pressure;
    public float pump_return_pressure;
    public float air_sump_pressure;
    public float pump_time_meter;
    public float current_pump_rpm;
    public int behavior;
    public drc.atlas_behavior_feedback_t behavior_feedback;
    public drc.atlas_stand_feedback_t stand_feedback;
    public drc.atlas_step_feedback_t step_feedback;
    public drc.atlas_walk_feedback_t walk_feedback;
    public drc.atlas_manipulate_feedback_t manipulate_feedback;
    public long sensor_head_pps_timestamp;
 
    public atlas_status_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x3ad07092bf7b8733L;
 
    public static final int RUN_STATE_IDLE = 0;
    public static final int RUN_STATE_START = 1;
    public static final int RUN_STATE_CONTROL = 3;
    public static final int RUN_STATE_STOP = 5;
    public static final int BEHAVIOR_NONE = 0;
    public static final int BEHAVIOR_FREEZE = 1;
    public static final int BEHAVIOR_STAND_PREP = 2;
    public static final int BEHAVIOR_STAND = 3;
    public static final int BEHAVIOR_WALK = 4;
    public static final int BEHAVIOR_STEP = 5;
    public static final int BEHAVIOR_MANIPULATE = 6;
    public static final int BEHAVIOR_USER = 7;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.atlas_status_t.class))
            return 0L;
 
        classes.add(drc.atlas_status_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.atlas_behavior_feedback_t._hashRecursive(classes)
             + drc.atlas_stand_feedback_t._hashRecursive(classes)
             + drc.atlas_step_feedback_t._hashRecursive(classes)
             + drc.atlas_walk_feedback_t._hashRecursive(classes)
             + drc.atlas_manipulate_feedback_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.seq_id); 
 
        outs.writeLong(this.processed_to_robot_packet_seq_id); 
 
        outs.writeLong(this.control_data_version_mismatch); 
 
        outs.writeInt(this.run_state); 
 
        outs.writeLong(this.robot_status_flags); 
 
        outs.writeFloat(this.pump_inlet_pressure); 
 
        outs.writeFloat(this.pump_supply_pressure); 
 
        outs.writeFloat(this.pump_return_pressure); 
 
        outs.writeFloat(this.air_sump_pressure); 
 
        outs.writeFloat(this.pump_time_meter); 
 
        outs.writeFloat(this.current_pump_rpm); 
 
        outs.writeInt(this.behavior); 
 
        this.behavior_feedback._encodeRecursive(outs); 
 
        this.stand_feedback._encodeRecursive(outs); 
 
        this.step_feedback._encodeRecursive(outs); 
 
        this.walk_feedback._encodeRecursive(outs); 
 
        this.manipulate_feedback._encodeRecursive(outs); 
 
        outs.writeLong(this.sensor_head_pps_timestamp); 
 
    }
 
    public atlas_status_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public atlas_status_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.atlas_status_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.atlas_status_t o = new drc.atlas_status_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.seq_id = ins.readLong();
 
        this.processed_to_robot_packet_seq_id = ins.readLong();
 
        this.control_data_version_mismatch = ins.readLong();
 
        this.run_state = ins.readInt();
 
        this.robot_status_flags = ins.readLong();
 
        this.pump_inlet_pressure = ins.readFloat();
 
        this.pump_supply_pressure = ins.readFloat();
 
        this.pump_return_pressure = ins.readFloat();
 
        this.air_sump_pressure = ins.readFloat();
 
        this.pump_time_meter = ins.readFloat();
 
        this.current_pump_rpm = ins.readFloat();
 
        this.behavior = ins.readInt();
 
        this.behavior_feedback = drc.atlas_behavior_feedback_t._decodeRecursiveFactory(ins);
 
        this.stand_feedback = drc.atlas_stand_feedback_t._decodeRecursiveFactory(ins);
 
        this.step_feedback = drc.atlas_step_feedback_t._decodeRecursiveFactory(ins);
 
        this.walk_feedback = drc.atlas_walk_feedback_t._decodeRecursiveFactory(ins);
 
        this.manipulate_feedback = drc.atlas_manipulate_feedback_t._decodeRecursiveFactory(ins);
 
        this.sensor_head_pps_timestamp = ins.readLong();
 
    }
 
    public drc.atlas_status_t copy()
    {
        drc.atlas_status_t outobj = new drc.atlas_status_t();
        outobj.utime = this.utime;
 
        outobj.seq_id = this.seq_id;
 
        outobj.processed_to_robot_packet_seq_id = this.processed_to_robot_packet_seq_id;
 
        outobj.control_data_version_mismatch = this.control_data_version_mismatch;
 
        outobj.run_state = this.run_state;
 
        outobj.robot_status_flags = this.robot_status_flags;
 
        outobj.pump_inlet_pressure = this.pump_inlet_pressure;
 
        outobj.pump_supply_pressure = this.pump_supply_pressure;
 
        outobj.pump_return_pressure = this.pump_return_pressure;
 
        outobj.air_sump_pressure = this.air_sump_pressure;
 
        outobj.pump_time_meter = this.pump_time_meter;
 
        outobj.current_pump_rpm = this.current_pump_rpm;
 
        outobj.behavior = this.behavior;
 
        outobj.behavior_feedback = this.behavior_feedback.copy();
 
        outobj.stand_feedback = this.stand_feedback.copy();
 
        outobj.step_feedback = this.step_feedback.copy();
 
        outobj.walk_feedback = this.walk_feedback.copy();
 
        outobj.manipulate_feedback = this.manipulate_feedback.copy();
 
        outobj.sensor_head_pps_timestamp = this.sensor_head_pps_timestamp;
 
        return outobj;
    }
 
}

