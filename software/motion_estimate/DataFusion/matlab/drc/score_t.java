/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class score_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long wall_time;
    public long sim_time;
    public long wall_time_elapsed;
    public long sim_time_elapsed;
    public int completion_score;
    public int falls;
    public int task_type;
    public long bytes_downlink_remaining;
    public long bytes_uplink_remaining;
 
    public score_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0121c278b03103daL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.score_t.class))
            return 0L;
 
        classes.add(drc.score_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.wall_time); 
 
        outs.writeLong(this.sim_time); 
 
        outs.writeLong(this.wall_time_elapsed); 
 
        outs.writeLong(this.sim_time_elapsed); 
 
        outs.writeInt(this.completion_score); 
 
        outs.writeInt(this.falls); 
 
        outs.writeInt(this.task_type); 
 
        outs.writeLong(this.bytes_downlink_remaining); 
 
        outs.writeLong(this.bytes_uplink_remaining); 
 
    }
 
    public score_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public score_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.score_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.score_t o = new drc.score_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.wall_time = ins.readLong();
 
        this.sim_time = ins.readLong();
 
        this.wall_time_elapsed = ins.readLong();
 
        this.sim_time_elapsed = ins.readLong();
 
        this.completion_score = ins.readInt();
 
        this.falls = ins.readInt();
 
        this.task_type = ins.readInt();
 
        this.bytes_downlink_remaining = ins.readLong();
 
        this.bytes_uplink_remaining = ins.readLong();
 
    }
 
    public drc.score_t copy()
    {
        drc.score_t outobj = new drc.score_t();
        outobj.utime = this.utime;
 
        outobj.wall_time = this.wall_time;
 
        outobj.sim_time = this.sim_time;
 
        outobj.wall_time_elapsed = this.wall_time_elapsed;
 
        outobj.sim_time_elapsed = this.sim_time_elapsed;
 
        outobj.completion_score = this.completion_score;
 
        outobj.falls = this.falls;
 
        outobj.task_type = this.task_type;
 
        outobj.bytes_downlink_remaining = this.bytes_downlink_remaining;
 
        outobj.bytes_uplink_remaining = this.bytes_uplink_remaining;
 
        return outobj;
    }
 
}

