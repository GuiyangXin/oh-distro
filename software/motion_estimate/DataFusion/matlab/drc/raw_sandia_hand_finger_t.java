/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class raw_sandia_hand_finger_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long fmcb_time;
    public long pp_time;
    public long dp_time;
    public int pp_tactile[];
    public int dp_tactile[];
    public long pp_strain;
    public short mm_accel[];
    public short pp_accel[];
    public short dp_accel[];
    public int mm_mag[];
    public int pp_mag[];
    public int dp_mag[];
    public int pp_temp[];
    public int dp_temp[];
    public int fmcb_temp[];
    public int fmcb_voltage;
    public int fmcb_pb_current;
    public int hall_tgt[];
    public int hall_pos[];
    public short fmcb_effort[];
 
    public raw_sandia_hand_finger_t()
    {
        pp_tactile = new int[6];
        dp_tactile = new int[12];
        mm_accel = new short[3];
        pp_accel = new short[3];
        dp_accel = new short[3];
        mm_mag = new int[3];
        pp_mag = new int[3];
        dp_mag = new int[3];
        pp_temp = new int[4];
        dp_temp = new int[4];
        fmcb_temp = new int[3];
        hall_tgt = new int[3];
        hall_pos = new int[3];
        fmcb_effort = new short[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9a1b4810a2fa1df8L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.raw_sandia_hand_finger_t.class))
            return 0L;
 
        classes.add(drc.raw_sandia_hand_finger_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.fmcb_time); 
 
        outs.writeLong(this.pp_time); 
 
        outs.writeLong(this.dp_time); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeInt(this.pp_tactile[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeInt(this.dp_tactile[a]); 
        }
 
        outs.writeLong(this.pp_strain); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.mm_accel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.pp_accel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.dp_accel[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.mm_mag[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.pp_mag[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.dp_mag[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.pp_temp[a]); 
        }
 
        for (int a = 0; a < 4; a++) {
            outs.writeInt(this.dp_temp[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.fmcb_temp[a]); 
        }
 
        outs.writeInt(this.fmcb_voltage); 
 
        outs.writeInt(this.fmcb_pb_current); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.hall_tgt[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeInt(this.hall_pos[a]); 
        }
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.fmcb_effort[a]); 
        }
 
    }
 
    public raw_sandia_hand_finger_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public raw_sandia_hand_finger_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.raw_sandia_hand_finger_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.raw_sandia_hand_finger_t o = new drc.raw_sandia_hand_finger_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.fmcb_time = ins.readLong();
 
        this.pp_time = ins.readLong();
 
        this.dp_time = ins.readLong();
 
        this.pp_tactile = new int[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.pp_tactile[a] = ins.readInt();
        }
 
        this.dp_tactile = new int[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.dp_tactile[a] = ins.readInt();
        }
 
        this.pp_strain = ins.readLong();
 
        this.mm_accel = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.mm_accel[a] = ins.readShort();
        }
 
        this.pp_accel = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pp_accel[a] = ins.readShort();
        }
 
        this.dp_accel = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.dp_accel[a] = ins.readShort();
        }
 
        this.mm_mag = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.mm_mag[a] = ins.readInt();
        }
 
        this.pp_mag = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.pp_mag[a] = ins.readInt();
        }
 
        this.dp_mag = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.dp_mag[a] = ins.readInt();
        }
 
        this.pp_temp = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.pp_temp[a] = ins.readInt();
        }
 
        this.dp_temp = new int[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.dp_temp[a] = ins.readInt();
        }
 
        this.fmcb_temp = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.fmcb_temp[a] = ins.readInt();
        }
 
        this.fmcb_voltage = ins.readInt();
 
        this.fmcb_pb_current = ins.readInt();
 
        this.hall_tgt = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.hall_tgt[a] = ins.readInt();
        }
 
        this.hall_pos = new int[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.hall_pos[a] = ins.readInt();
        }
 
        this.fmcb_effort = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.fmcb_effort[a] = ins.readShort();
        }
 
    }
 
    public drc.raw_sandia_hand_finger_t copy()
    {
        drc.raw_sandia_hand_finger_t outobj = new drc.raw_sandia_hand_finger_t();
        outobj.utime = this.utime;
 
        outobj.fmcb_time = this.fmcb_time;
 
        outobj.pp_time = this.pp_time;
 
        outobj.dp_time = this.dp_time;
 
        outobj.pp_tactile = new int[(int) 6];
        System.arraycopy(this.pp_tactile, 0, outobj.pp_tactile, 0, 6); 
        outobj.dp_tactile = new int[(int) 12];
        System.arraycopy(this.dp_tactile, 0, outobj.dp_tactile, 0, 12); 
        outobj.pp_strain = this.pp_strain;
 
        outobj.mm_accel = new short[(int) 3];
        System.arraycopy(this.mm_accel, 0, outobj.mm_accel, 0, 3); 
        outobj.pp_accel = new short[(int) 3];
        System.arraycopy(this.pp_accel, 0, outobj.pp_accel, 0, 3); 
        outobj.dp_accel = new short[(int) 3];
        System.arraycopy(this.dp_accel, 0, outobj.dp_accel, 0, 3); 
        outobj.mm_mag = new int[(int) 3];
        System.arraycopy(this.mm_mag, 0, outobj.mm_mag, 0, 3); 
        outobj.pp_mag = new int[(int) 3];
        System.arraycopy(this.pp_mag, 0, outobj.pp_mag, 0, 3); 
        outobj.dp_mag = new int[(int) 3];
        System.arraycopy(this.dp_mag, 0, outobj.dp_mag, 0, 3); 
        outobj.pp_temp = new int[(int) 4];
        System.arraycopy(this.pp_temp, 0, outobj.pp_temp, 0, 4); 
        outobj.dp_temp = new int[(int) 4];
        System.arraycopy(this.dp_temp, 0, outobj.dp_temp, 0, 4); 
        outobj.fmcb_temp = new int[(int) 3];
        System.arraycopy(this.fmcb_temp, 0, outobj.fmcb_temp, 0, 3); 
        outobj.fmcb_voltage = this.fmcb_voltage;
 
        outobj.fmcb_pb_current = this.fmcb_pb_current;
 
        outobj.hall_tgt = new int[(int) 3];
        System.arraycopy(this.hall_tgt, 0, outobj.hall_tgt, 0, 3); 
        outobj.hall_pos = new int[(int) 3];
        System.arraycopy(this.hall_pos, 0, outobj.hall_pos, 0, 3); 
        outobj.fmcb_effort = new short[(int) 3];
        System.arraycopy(this.fmcb_effort, 0, outobj.fmcb_effort, 0, 3); 
        return outobj;
    }
 
}

