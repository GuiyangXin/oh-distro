/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class robot_state_constraint_checked_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public drc.robot_state_t robot_state;
    public int num_constraints;
    public byte constraints_satisfied[];
 
    public robot_state_constraint_checked_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7031100ab2781cb0L;
 
    public static final byte NOT_OK = (byte) 0;
    public static final byte OK = (byte) 1;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.robot_state_constraint_checked_t.class))
            return 0L;
 
        classes.add(drc.robot_state_constraint_checked_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.robot_state_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        this.robot_state._encodeRecursive(outs); 
 
        outs.writeInt(this.num_constraints); 
 
        if (this.num_constraints > 0)
            outs.write(this.constraints_satisfied, 0, num_constraints);
 
    }
 
    public robot_state_constraint_checked_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public robot_state_constraint_checked_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.robot_state_constraint_checked_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.robot_state_constraint_checked_t o = new drc.robot_state_constraint_checked_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.robot_state = drc.robot_state_t._decodeRecursiveFactory(ins);
 
        this.num_constraints = ins.readInt();
 
        this.constraints_satisfied = new byte[(int) num_constraints];
        ins.readFully(this.constraints_satisfied, 0, num_constraints); 
    }
 
    public drc.robot_state_constraint_checked_t copy()
    {
        drc.robot_state_constraint_checked_t outobj = new drc.robot_state_constraint_checked_t();
        outobj.utime = this.utime;
 
        outobj.robot_state = this.robot_state.copy();
 
        outobj.num_constraints = this.num_constraints;
 
        outobj.constraints_satisfied = new byte[(int) num_constraints];
        if (this.num_constraints > 0)
            System.arraycopy(this.constraints_satisfied, 0, outobj.constraints_satisfied, 0, this.num_constraints); 
        return outobj;
    }
 
}

