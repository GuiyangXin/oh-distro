/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class driving_cmd_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public short drive_duration;
    public byte throttle_ratio;
    public short throttle_duration;
    public float kp_steer;
    public short lookahead_dist;
    public byte steering_angle_degrees;
    public byte type;
 
    public driving_cmd_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x0f7069e5040f26f3L;
 
    public static final byte TYPE_USE_ROAD_LOOKAHEAD_CARROT_NB = (byte) 0;
    public static final byte TYPE_USE_ROAD_LOOKAHEAD_ARC_NB = (byte) 1;
    public static final byte TYPE_USE_TLD_LOOKAHEAD_WITH_ROAD_NB = (byte) 2;
    public static final byte TYPE_USE_TLD_LOOKAHEAD_IGNORE_ROAD_NB = (byte) 3;
    public static final byte TYPE_USE_USER_HEADING_NB = (byte) 4;
    public static final byte TYPE_USE_ROAD_LOOKAHEAD_CARROT_B = (byte) 5;
    public static final byte TYPE_USE_ROAD_LOOKAHEAD_ARC_B = (byte) 6;
    public static final byte TYPE_USE_TLD_LOOKAHEAD_WITH_ROAD_B = (byte) 7;
    public static final byte TYPE_USE_TLD_LOOKAHEAD_IGNORE_ROAD_B = (byte) 8;
    public static final byte TYPE_USE_USER_HEADING_B = (byte) 9;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.driving_cmd_t.class))
            return 0L;
 
        classes.add(drc.driving_cmd_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeShort(this.drive_duration); 
 
        outs.writeByte(this.throttle_ratio); 
 
        outs.writeShort(this.throttle_duration); 
 
        outs.writeFloat(this.kp_steer); 
 
        outs.writeShort(this.lookahead_dist); 
 
        outs.writeByte(this.steering_angle_degrees); 
 
        outs.writeByte(this.type); 
 
    }
 
    public driving_cmd_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public driving_cmd_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.driving_cmd_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.driving_cmd_t o = new drc.driving_cmd_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.drive_duration = ins.readShort();
 
        this.throttle_ratio = ins.readByte();
 
        this.throttle_duration = ins.readShort();
 
        this.kp_steer = ins.readFloat();
 
        this.lookahead_dist = ins.readShort();
 
        this.steering_angle_degrees = ins.readByte();
 
        this.type = ins.readByte();
 
    }
 
    public drc.driving_cmd_t copy()
    {
        drc.driving_cmd_t outobj = new drc.driving_cmd_t();
        outobj.utime = this.utime;
 
        outobj.drive_duration = this.drive_duration;
 
        outobj.throttle_ratio = this.throttle_ratio;
 
        outobj.throttle_duration = this.throttle_duration;
 
        outobj.kp_steer = this.kp_steer;
 
        outobj.lookahead_dist = this.lookahead_dist;
 
        outobj.steering_angle_degrees = this.steering_angle_degrees;
 
        outobj.type = this.type;
 
        return outobj;
    }
 
}

