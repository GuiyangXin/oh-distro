/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class raw_tactile_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public short n_f0;
    public float f0[];
    public short n_f1;
    public float f1[];
    public short n_f2;
    public float f2[];
    public short n_f3;
    public float f3[];
    public short n_palm;
    public float palm[];
 
    public raw_tactile_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x303b3f920e86f595L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.raw_tactile_t.class))
            return 0L;
 
        classes.add(drc.raw_tactile_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeShort(this.n_f0); 
 
        for (int a = 0; a < this.n_f0; a++) {
            outs.writeFloat(this.f0[a]); 
        }
 
        outs.writeShort(this.n_f1); 
 
        for (int a = 0; a < this.n_f1; a++) {
            outs.writeFloat(this.f1[a]); 
        }
 
        outs.writeShort(this.n_f2); 
 
        for (int a = 0; a < this.n_f2; a++) {
            outs.writeFloat(this.f2[a]); 
        }
 
        outs.writeShort(this.n_f3); 
 
        for (int a = 0; a < this.n_f3; a++) {
            outs.writeFloat(this.f3[a]); 
        }
 
        outs.writeShort(this.n_palm); 
 
        for (int a = 0; a < this.n_palm; a++) {
            outs.writeFloat(this.palm[a]); 
        }
 
    }
 
    public raw_tactile_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public raw_tactile_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.raw_tactile_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.raw_tactile_t o = new drc.raw_tactile_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.n_f0 = ins.readShort();
 
        this.f0 = new float[(int) n_f0];
        for (int a = 0; a < this.n_f0; a++) {
            this.f0[a] = ins.readFloat();
        }
 
        this.n_f1 = ins.readShort();
 
        this.f1 = new float[(int) n_f1];
        for (int a = 0; a < this.n_f1; a++) {
            this.f1[a] = ins.readFloat();
        }
 
        this.n_f2 = ins.readShort();
 
        this.f2 = new float[(int) n_f2];
        for (int a = 0; a < this.n_f2; a++) {
            this.f2[a] = ins.readFloat();
        }
 
        this.n_f3 = ins.readShort();
 
        this.f3 = new float[(int) n_f3];
        for (int a = 0; a < this.n_f3; a++) {
            this.f3[a] = ins.readFloat();
        }
 
        this.n_palm = ins.readShort();
 
        this.palm = new float[(int) n_palm];
        for (int a = 0; a < this.n_palm; a++) {
            this.palm[a] = ins.readFloat();
        }
 
    }
 
    public drc.raw_tactile_t copy()
    {
        drc.raw_tactile_t outobj = new drc.raw_tactile_t();
        outobj.utime = this.utime;
 
        outobj.n_f0 = this.n_f0;
 
        outobj.f0 = new float[(int) n_f0];
        if (this.n_f0 > 0)
            System.arraycopy(this.f0, 0, outobj.f0, 0, this.n_f0); 
        outobj.n_f1 = this.n_f1;
 
        outobj.f1 = new float[(int) n_f1];
        if (this.n_f1 > 0)
            System.arraycopy(this.f1, 0, outobj.f1, 0, this.n_f1); 
        outobj.n_f2 = this.n_f2;
 
        outobj.f2 = new float[(int) n_f2];
        if (this.n_f2 > 0)
            System.arraycopy(this.f2, 0, outobj.f2, 0, this.n_f2); 
        outobj.n_f3 = this.n_f3;
 
        outobj.f3 = new float[(int) n_f3];
        if (this.n_f3 > 0)
            System.arraycopy(this.f3, 0, outobj.f3, 0, this.n_f3); 
        outobj.n_palm = this.n_palm;
 
        outobj.palm = new float[(int) n_palm];
        if (this.n_palm > 0)
            System.arraycopy(this.palm, 0, outobj.palm, 0, this.n_palm); 
        return outobj;
    }
 
}

