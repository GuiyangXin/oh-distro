/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class grasp_opt_control_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public String robot_name;
    public String object_name;
    public String geometry_name;
    public int unique_id;
    public short drake_control;
    public short grasp_type;
    public short contact_mask;
    public short geometry_type;
    public int num_dims;
    public double dims[];
    public drc.position_3d_t l_hand_init_pose;
    public drc.position_3d_t r_hand_init_pose;
 
    public grasp_opt_control_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xff437e3013c39342L;
 
    public static final short NEW = (short) 0;
    public static final short RESET = (short) 1;
    public static final short HALT = (short) 2;
    public static final short SANDIA_LEFT = (short) 0;
    public static final short SANDIA_RIGHT = (short) 1;
    public static final short SANDIA_BOTH = (short) 2;
    public static final short IROBOT_LEFT = (short) 3;
    public static final short IROBOT_RIGHT = (short) 4;
    public static final short IROBOT_BOTH = (short) 5;
    public static final short ALL = (short) 0;
    public static final short FINGERS_ONLY = (short) 1;
    public static final short SPHERE = (short) 0;
    public static final short CYLINDER = (short) 1;
    public static final short BOX = (short) 2;
    public static final short TORUS = (short) 4;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.grasp_opt_control_t.class))
            return 0L;
 
        classes.add(drc.grasp_opt_control_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.position_3d_t._hashRecursive(classes)
             + drc.position_3d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        __strbuf = new char[this.robot_name.length()]; this.robot_name.getChars(0, this.robot_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.object_name.length()]; this.object_name.getChars(0, this.object_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.geometry_name.length()]; this.geometry_name.getChars(0, this.geometry_name.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeInt(this.unique_id); 
 
        outs.writeShort(this.drake_control); 
 
        outs.writeShort(this.grasp_type); 
 
        outs.writeShort(this.contact_mask); 
 
        outs.writeShort(this.geometry_type); 
 
        outs.writeInt(this.num_dims); 
 
        for (int a = 0; a < this.num_dims; a++) {
            outs.writeDouble(this.dims[a]); 
        }
 
        this.l_hand_init_pose._encodeRecursive(outs); 
 
        this.r_hand_init_pose._encodeRecursive(outs); 
 
    }
 
    public grasp_opt_control_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public grasp_opt_control_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.grasp_opt_control_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.grasp_opt_control_t o = new drc.grasp_opt_control_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.robot_name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.object_name = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.geometry_name = new String(__strbuf);
 
        this.unique_id = ins.readInt();
 
        this.drake_control = ins.readShort();
 
        this.grasp_type = ins.readShort();
 
        this.contact_mask = ins.readShort();
 
        this.geometry_type = ins.readShort();
 
        this.num_dims = ins.readInt();
 
        this.dims = new double[(int) num_dims];
        for (int a = 0; a < this.num_dims; a++) {
            this.dims[a] = ins.readDouble();
        }
 
        this.l_hand_init_pose = drc.position_3d_t._decodeRecursiveFactory(ins);
 
        this.r_hand_init_pose = drc.position_3d_t._decodeRecursiveFactory(ins);
 
    }
 
    public drc.grasp_opt_control_t copy()
    {
        drc.grasp_opt_control_t outobj = new drc.grasp_opt_control_t();
        outobj.utime = this.utime;
 
        outobj.robot_name = this.robot_name;
 
        outobj.object_name = this.object_name;
 
        outobj.geometry_name = this.geometry_name;
 
        outobj.unique_id = this.unique_id;
 
        outobj.drake_control = this.drake_control;
 
        outobj.grasp_type = this.grasp_type;
 
        outobj.contact_mask = this.contact_mask;
 
        outobj.geometry_type = this.geometry_type;
 
        outobj.num_dims = this.num_dims;
 
        outobj.dims = new double[(int) num_dims];
        if (this.num_dims > 0)
            System.arraycopy(this.dims, 0, outobj.dims, 0, this.num_dims); 
        outobj.l_hand_init_pose = this.l_hand_init_pose.copy();
 
        outobj.r_hand_init_pose = this.r_hand_init_pose.copy();
 
        return outobj;
    }
 
}

