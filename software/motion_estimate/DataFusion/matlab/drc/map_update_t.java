/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class map_update_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long message_id;
    public int map_id;
    public int n_added;
    public drc.vector_3d_t added[];
    public int n_removed;
    public drc.vector_3d_t removed[];
 
    public map_update_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2e9a788a0231579aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.map_update_t.class))
            return 0L;
 
        classes.add(drc.map_update_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + drc.vector_3d_t._hashRecursive(classes)
             + drc.vector_3d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.message_id); 
 
        outs.writeInt(this.map_id); 
 
        outs.writeInt(this.n_added); 
 
        for (int a = 0; a < this.n_added; a++) {
            this.added[a]._encodeRecursive(outs); 
        }
 
        outs.writeInt(this.n_removed); 
 
        for (int a = 0; a < this.n_removed; a++) {
            this.removed[a]._encodeRecursive(outs); 
        }
 
    }
 
    public map_update_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public map_update_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.map_update_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.map_update_t o = new drc.map_update_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.message_id = ins.readLong();
 
        this.map_id = ins.readInt();
 
        this.n_added = ins.readInt();
 
        this.added = new drc.vector_3d_t[(int) n_added];
        for (int a = 0; a < this.n_added; a++) {
            this.added[a] = drc.vector_3d_t._decodeRecursiveFactory(ins);
        }
 
        this.n_removed = ins.readInt();
 
        this.removed = new drc.vector_3d_t[(int) n_removed];
        for (int a = 0; a < this.n_removed; a++) {
            this.removed[a] = drc.vector_3d_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public drc.map_update_t copy()
    {
        drc.map_update_t outobj = new drc.map_update_t();
        outobj.utime = this.utime;
 
        outobj.message_id = this.message_id;
 
        outobj.map_id = this.map_id;
 
        outobj.n_added = this.n_added;
 
        outobj.added = new drc.vector_3d_t[(int) n_added];
        for (int a = 0; a < this.n_added; a++) {
            outobj.added[a] = this.added[a].copy();
        }
 
        outobj.n_removed = this.n_removed;
 
        outobj.removed = new drc.vector_3d_t[(int) n_removed];
        for (int a = 0; a < this.n_removed; a++) {
            outobj.removed[a] = this.removed[a].copy();
        }
 
        return outobj;
    }
 
}

