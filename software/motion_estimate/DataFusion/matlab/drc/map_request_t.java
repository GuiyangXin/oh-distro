/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package drc;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class map_request_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long map_id;
    public long view_id;
    public boolean active;
    public boolean relative_time;
    public boolean relative_location;
    public byte type;
    public float resolution;
    public float frequency;
    public float quantization_max;
    public String channel;
    public long time_min;
    public long time_max;
    public byte num_clip_planes;
    public float clip_planes[][];
    public float transform[][];
    public short width;
    public short height;
 
    public map_request_t()
    {
        transform = new float[4][4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xf6b093e7b4b690a2L;
 
    public static final byte NONE = (byte) 0;
    public static final byte POINT_CLOUD = (byte) 1;
    public static final byte OCTREE = (byte) 2;
    public static final byte DEPTH_IMAGE = (byte) 3;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(drc.map_request_t.class))
            return 0L;
 
        classes.add(drc.map_request_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.map_id); 
 
        outs.writeLong(this.view_id); 
 
        outs.writeByte( this.active ? 1 : 0); 
 
        outs.writeByte( this.relative_time ? 1 : 0); 
 
        outs.writeByte( this.relative_location ? 1 : 0); 
 
        outs.writeByte(this.type); 
 
        outs.writeFloat(this.resolution); 
 
        outs.writeFloat(this.frequency); 
 
        outs.writeFloat(this.quantization_max); 
 
        __strbuf = new char[this.channel.length()]; this.channel.getChars(0, this.channel.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        outs.writeLong(this.time_min); 
 
        outs.writeLong(this.time_max); 
 
        outs.writeByte(this.num_clip_planes); 
 
        for (int a = 0; a < this.num_clip_planes; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeFloat(this.clip_planes[a][b]); 
            }
        }
 
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                outs.writeFloat(this.transform[a][b]); 
            }
        }
 
        outs.writeShort(this.width); 
 
        outs.writeShort(this.height); 
 
    }
 
    public map_request_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public map_request_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static drc.map_request_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        drc.map_request_t o = new drc.map_request_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.map_id = ins.readLong();
 
        this.view_id = ins.readLong();
 
        this.active = ins.readByte()!=0;
 
        this.relative_time = ins.readByte()!=0;
 
        this.relative_location = ins.readByte()!=0;
 
        this.type = ins.readByte();
 
        this.resolution = ins.readFloat();
 
        this.frequency = ins.readFloat();
 
        this.quantization_max = ins.readFloat();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.channel = new String(__strbuf);
 
        this.time_min = ins.readLong();
 
        this.time_max = ins.readLong();
 
        this.num_clip_planes = ins.readByte();
 
        this.clip_planes = new float[(int) num_clip_planes][(int) 4];
        for (int a = 0; a < this.num_clip_planes; a++) {
            for (int b = 0; b < 4; b++) {
                this.clip_planes[a][b] = ins.readFloat();
            }
        }
 
        this.transform = new float[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            for (int b = 0; b < 4; b++) {
                this.transform[a][b] = ins.readFloat();
            }
        }
 
        this.width = ins.readShort();
 
        this.height = ins.readShort();
 
    }
 
    public drc.map_request_t copy()
    {
        drc.map_request_t outobj = new drc.map_request_t();
        outobj.utime = this.utime;
 
        outobj.map_id = this.map_id;
 
        outobj.view_id = this.view_id;
 
        outobj.active = this.active;
 
        outobj.relative_time = this.relative_time;
 
        outobj.relative_location = this.relative_location;
 
        outobj.type = this.type;
 
        outobj.resolution = this.resolution;
 
        outobj.frequency = this.frequency;
 
        outobj.quantization_max = this.quantization_max;
 
        outobj.channel = this.channel;
 
        outobj.time_min = this.time_min;
 
        outobj.time_max = this.time_max;
 
        outobj.num_clip_planes = this.num_clip_planes;
 
        outobj.clip_planes = new float[(int) num_clip_planes][(int) 4];
        for (int a = 0; a < this.num_clip_planes; a++) {
            System.arraycopy(this.clip_planes[a], 0, outobj.clip_planes[a], 0, 4);        }
 
        outobj.transform = new float[(int) 4][(int) 4];
        for (int a = 0; a < 4; a++) {
            System.arraycopy(this.transform[a], 0, outobj.transform[a], 0, 4);        }
 
        outobj.width = this.width;
 
        outobj.height = this.height;
 
        return outobj;
    }
 
}

