/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package sm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class rigid_transform_2d_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long utime_prev;
    public double pos[];
    public double theta;
    public double cov[];
 
    public rigid_transform_2d_t()
    {
        pos = new double[2];
        cov = new double[9];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x09f1872c4f10ca88L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(sm.rigid_transform_2d_t.class))
            return 0L;
 
        classes.add(sm.rigid_transform_2d_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.utime_prev); 
 
        for (int a = 0; a < 2; a++) {
            outs.writeDouble(this.pos[a]); 
        }
 
        outs.writeDouble(this.theta); 
 
        for (int a = 0; a < 9; a++) {
            outs.writeDouble(this.cov[a]); 
        }
 
    }
 
    public rigid_transform_2d_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public rigid_transform_2d_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static sm.rigid_transform_2d_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        sm.rigid_transform_2d_t o = new sm.rigid_transform_2d_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.utime_prev = ins.readLong();
 
        this.pos = new double[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.pos[a] = ins.readDouble();
        }
 
        this.theta = ins.readDouble();
 
        this.cov = new double[(int) 9];
        for (int a = 0; a < 9; a++) {
            this.cov[a] = ins.readDouble();
        }
 
    }
 
    public sm.rigid_transform_2d_t copy()
    {
        sm.rigid_transform_2d_t outobj = new sm.rigid_transform_2d_t();
        outobj.utime = this.utime;
 
        outobj.utime_prev = this.utime_prev;
 
        outobj.pos = new double[(int) 2];
        System.arraycopy(this.pos, 0, outobj.pos, 0, 2); 
        outobj.theta = this.theta;
 
        outobj.cov = new double[(int) 9];
        System.arraycopy(this.cov, 0, outobj.cov, 0, 9); 
        return outobj;
    }
 
}

