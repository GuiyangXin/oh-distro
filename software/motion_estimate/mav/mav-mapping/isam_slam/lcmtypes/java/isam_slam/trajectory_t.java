/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package isam_slam;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class trajectory_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int num_poses;
    public isam_slam.position_t poses[];
 
    public trajectory_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x2ebb13a9f601a29eL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(isam_slam.trajectory_t.class))
            return 0L;
 
        classes.add(isam_slam.trajectory_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + isam_slam.position_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.num_poses); 
 
        for (int a = 0; a < this.num_poses; a++) {
            this.poses[a]._encodeRecursive(outs); 
        }
 
    }
 
    public trajectory_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public trajectory_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static isam_slam.trajectory_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        isam_slam.trajectory_t o = new isam_slam.trajectory_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.num_poses = ins.readInt();
 
        this.poses = new isam_slam.position_t[(int) num_poses];
        for (int a = 0; a < this.num_poses; a++) {
            this.poses[a] = isam_slam.position_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public isam_slam.trajectory_t copy()
    {
        isam_slam.trajectory_t outobj = new isam_slam.trajectory_t();
        outobj.utime = this.utime;
 
        outobj.num_poses = this.num_poses;
 
        outobj.poses = new isam_slam.position_t[(int) num_poses];
        for (int a = 0; a < this.num_poses; a++) {
            outobj.poses[a] = this.poses[a].copy();
        }
 
        return outobj;
    }
 
}

