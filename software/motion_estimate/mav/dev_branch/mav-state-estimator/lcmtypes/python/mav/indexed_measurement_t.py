"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class indexed_measurement_t(object):
    __slots__ = ["utime", "state_utime", "measured_dim", "z_effective", "z_indices", "measured_cov_dim", "R_effective"]

    def __init__(self):
        self.utime = 0
        self.state_utime = 0
        self.measured_dim = 0
        self.z_effective = []
        self.z_indices = []
        self.measured_cov_dim = 0
        self.R_effective = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(indexed_measurement_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqi", self.utime, self.state_utime, self.measured_dim))
        buf.write(struct.pack('>%dd' % self.measured_dim, *self.z_effective[:self.measured_dim]))
        buf.write(struct.pack('>%di' % self.measured_dim, *self.z_indices[:self.measured_dim]))
        buf.write(struct.pack(">i", self.measured_cov_dim))
        buf.write(struct.pack('>%dd' % self.measured_cov_dim, *self.R_effective[:self.measured_cov_dim]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != indexed_measurement_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return indexed_measurement_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = indexed_measurement_t()
        self.utime, self.state_utime, self.measured_dim = struct.unpack(">qqi", buf.read(20))
        self.z_effective = struct.unpack('>%dd' % self.measured_dim, buf.read(self.measured_dim * 8))
        self.z_indices = struct.unpack('>%di' % self.measured_dim, buf.read(self.measured_dim * 4))
        self.measured_cov_dim = struct.unpack(">i", buf.read(4))[0]
        self.R_effective = struct.unpack('>%dd' % self.measured_cov_dim, buf.read(self.measured_cov_dim * 8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if indexed_measurement_t in parents: return 0
        tmphash = (0x6d490312f42dd78a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if indexed_measurement_t._packed_fingerprint is None:
            indexed_measurement_t._packed_fingerprint = struct.pack(">Q", indexed_measurement_t._get_hash_recursive([]))
        return indexed_measurement_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

