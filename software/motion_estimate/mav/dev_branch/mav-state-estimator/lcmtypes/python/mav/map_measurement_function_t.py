"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import occ_map.pixel_map_t

class map_measurement_function_t(object):
    __slots__ = ["utime", "z_height", "theta", "phi_psi_xy_cov_map", "phi_psi_xy_information_map", "xy_max_information", "xy_min_information", "num_xy_maps", "xy_information_maps", "xy_cov_maps"]

    def __init__(self):
        self.utime = 0
        self.z_height = 0.0
        self.theta = 0.0
        self.phi_psi_xy_cov_map = None
        self.phi_psi_xy_information_map = None
        self.xy_max_information = None
        self.xy_min_information = None
        self.num_xy_maps = 0
        self.xy_information_maps = []
        self.xy_cov_maps = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(map_measurement_function_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdd", self.utime, self.z_height, self.theta))
        self.phi_psi_xy_cov_map._encode_one(buf)
        self.phi_psi_xy_information_map._encode_one(buf)
        self.xy_max_information._encode_one(buf)
        self.xy_min_information._encode_one(buf)
        buf.write(struct.pack(">i", self.num_xy_maps))
        for i0 in range(self.num_xy_maps):
            self.xy_information_maps[i0]._encode_one(buf)
        for i0 in range(self.num_xy_maps):
            self.xy_cov_maps[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != map_measurement_function_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return map_measurement_function_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = map_measurement_function_t()
        self.utime, self.z_height, self.theta = struct.unpack(">qdd", buf.read(24))
        self.phi_psi_xy_cov_map = occ_map.pixel_map_t._decode_one(buf)
        self.phi_psi_xy_information_map = occ_map.pixel_map_t._decode_one(buf)
        self.xy_max_information = occ_map.pixel_map_t._decode_one(buf)
        self.xy_min_information = occ_map.pixel_map_t._decode_one(buf)
        self.num_xy_maps = struct.unpack(">i", buf.read(4))[0]
        self.xy_information_maps = []
        for i0 in range(self.num_xy_maps):
            self.xy_information_maps.append(occ_map.pixel_map_t._decode_one(buf))
        self.xy_cov_maps = []
        for i0 in range(self.num_xy_maps):
            self.xy_cov_maps.append(occ_map.pixel_map_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if map_measurement_function_t in parents: return 0
        newparents = parents + [map_measurement_function_t]
        tmphash = (0x33fba992c58d7ed0+ occ_map.pixel_map_t._get_hash_recursive(newparents)+ occ_map.pixel_map_t._get_hash_recursive(newparents)+ occ_map.pixel_map_t._get_hash_recursive(newparents)+ occ_map.pixel_map_t._get_hash_recursive(newparents)+ occ_map.pixel_map_t._get_hash_recursive(newparents)+ occ_map.pixel_map_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if map_measurement_function_t._packed_fingerprint is None:
            map_measurement_function_t._packed_fingerprint = struct.pack(">Q", map_measurement_function_t._get_hash_recursive([]))
        return map_measurement_function_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

