"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class optical_flow_t(object):
    __slots__ = ["utime", "dt", "ux", "uy", "scale", "theta", "alpha1", "alpha2", "gamma", "conf_rs", "conf_xy"]

    def __init__(self):
        self.utime = 0
        self.dt = 0.0
        self.ux = 0.0
        self.uy = 0.0
        self.scale = 0.0
        self.theta = 0.0
        self.alpha1 = 0.0
        self.alpha2 = 0.0
        self.gamma = 0.0
        self.conf_rs = 0.0
        self.conf_xy = 0.0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(optical_flow_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qdddddddddd", self.utime, self.dt, self.ux, self.uy, self.scale, self.theta, self.alpha1, self.alpha2, self.gamma, self.conf_rs, self.conf_xy))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != optical_flow_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return optical_flow_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = optical_flow_t()
        self.utime, self.dt, self.ux, self.uy, self.scale, self.theta, self.alpha1, self.alpha2, self.gamma, self.conf_rs, self.conf_xy = struct.unpack(">qdddddddddd", buf.read(88))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if optical_flow_t in parents: return 0
        tmphash = (0xada6d44b71332596) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if optical_flow_t._packed_fingerprint is None:
            optical_flow_t._packed_fingerprint = struct.pack(">Q", optical_flow_t._get_hash_recursive([]))
        return optical_flow_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

