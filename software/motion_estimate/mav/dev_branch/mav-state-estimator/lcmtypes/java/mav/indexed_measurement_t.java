/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package mav;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class indexed_measurement_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public long state_utime;
    public int measured_dim;
    public double z_effective[];
    public int z_indices[];
    public int measured_cov_dim;
    public double R_effective[];
 
    public indexed_measurement_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x6d490312f42dd78aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(mav.indexed_measurement_t.class))
            return 0L;
 
        classes.add(mav.indexed_measurement_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeLong(this.state_utime); 
 
        outs.writeInt(this.measured_dim); 
 
        for (int a = 0; a < this.measured_dim; a++) {
            outs.writeDouble(this.z_effective[a]); 
        }
 
        for (int a = 0; a < this.measured_dim; a++) {
            outs.writeInt(this.z_indices[a]); 
        }
 
        outs.writeInt(this.measured_cov_dim); 
 
        for (int a = 0; a < this.measured_cov_dim; a++) {
            outs.writeDouble(this.R_effective[a]); 
        }
 
    }
 
    public indexed_measurement_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public indexed_measurement_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static mav.indexed_measurement_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        mav.indexed_measurement_t o = new mav.indexed_measurement_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.state_utime = ins.readLong();
 
        this.measured_dim = ins.readInt();
 
        this.z_effective = new double[(int) measured_dim];
        for (int a = 0; a < this.measured_dim; a++) {
            this.z_effective[a] = ins.readDouble();
        }
 
        this.z_indices = new int[(int) measured_dim];
        for (int a = 0; a < this.measured_dim; a++) {
            this.z_indices[a] = ins.readInt();
        }
 
        this.measured_cov_dim = ins.readInt();
 
        this.R_effective = new double[(int) measured_cov_dim];
        for (int a = 0; a < this.measured_cov_dim; a++) {
            this.R_effective[a] = ins.readDouble();
        }
 
    }
 
    public mav.indexed_measurement_t copy()
    {
        mav.indexed_measurement_t outobj = new mav.indexed_measurement_t();
        outobj.utime = this.utime;
 
        outobj.state_utime = this.state_utime;
 
        outobj.measured_dim = this.measured_dim;
 
        outobj.z_effective = new double[(int) measured_dim];
        if (this.measured_dim > 0)
            System.arraycopy(this.z_effective, 0, outobj.z_effective, 0, this.measured_dim); 
        outobj.z_indices = new int[(int) measured_dim];
        if (this.measured_dim > 0)
            System.arraycopy(this.z_indices, 0, outobj.z_indices, 0, this.measured_dim); 
        outobj.measured_cov_dim = this.measured_cov_dim;
 
        outobj.R_effective = new double[(int) measured_cov_dim];
        if (this.measured_cov_dim > 0)
            System.arraycopy(this.R_effective, 0, outobj.R_effective, 0, this.measured_cov_dim); 
        return outobj;
    }
 
}

