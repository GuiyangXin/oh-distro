/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package mav;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class optical_flow_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double dt;
    public double ux;
    public double uy;
    public double scale;
    public double theta;
    public double alpha1;
    public double alpha2;
    public double gamma;
    public double conf_rs;
    public double conf_xy;
 
    public optical_flow_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0xada6d44b71332596L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(mav.optical_flow_t.class))
            return 0L;
 
        classes.add(mav.optical_flow_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeDouble(this.dt); 
 
        outs.writeDouble(this.ux); 
 
        outs.writeDouble(this.uy); 
 
        outs.writeDouble(this.scale); 
 
        outs.writeDouble(this.theta); 
 
        outs.writeDouble(this.alpha1); 
 
        outs.writeDouble(this.alpha2); 
 
        outs.writeDouble(this.gamma); 
 
        outs.writeDouble(this.conf_rs); 
 
        outs.writeDouble(this.conf_xy); 
 
    }
 
    public optical_flow_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public optical_flow_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static mav.optical_flow_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        mav.optical_flow_t o = new mav.optical_flow_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.dt = ins.readDouble();
 
        this.ux = ins.readDouble();
 
        this.uy = ins.readDouble();
 
        this.scale = ins.readDouble();
 
        this.theta = ins.readDouble();
 
        this.alpha1 = ins.readDouble();
 
        this.alpha2 = ins.readDouble();
 
        this.gamma = ins.readDouble();
 
        this.conf_rs = ins.readDouble();
 
        this.conf_xy = ins.readDouble();
 
    }
 
    public mav.optical_flow_t copy()
    {
        mav.optical_flow_t outobj = new mav.optical_flow_t();
        outobj.utime = this.utime;
 
        outobj.dt = this.dt;
 
        outobj.ux = this.ux;
 
        outobj.uy = this.uy;
 
        outobj.scale = this.scale;
 
        outobj.theta = this.theta;
 
        outobj.alpha1 = this.alpha1;
 
        outobj.alpha2 = this.alpha2;
 
        outobj.gamma = this.gamma;
 
        outobj.conf_rs = this.conf_rs;
 
        outobj.conf_xy = this.conf_xy;
 
        return outobj;
    }
 
}

