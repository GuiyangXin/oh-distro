/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package mav;
 
import java.io.*;
import java.nio.*;
import java.util.*;
import lcm.lcm.*;
 
public final class map_measurement_function_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public double z_height;
    public double theta;
    public occ_map.pixel_map_t phi_psi_xy_cov_map;
    public occ_map.pixel_map_t phi_psi_xy_information_map;
    public occ_map.pixel_map_t xy_max_information;
    public occ_map.pixel_map_t xy_min_information;
    public int num_xy_maps;
    public occ_map.pixel_map_t xy_information_maps[];
    public occ_map.pixel_map_t xy_cov_maps[];
 
    public map_measurement_function_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x33fba992c58d7ed0L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class>());
    }
 
    public static long _hashRecursive(ArrayList<Class> classes)
    {
        if (classes.contains(mav.map_measurement_function_t.class))
            return 0L;
 
        classes.add(mav.map_measurement_function_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + occ_map.pixel_map_t._hashRecursive(classes)
             + occ_map.pixel_map_t._hashRecursive(classes)
             + occ_map.pixel_map_t._hashRecursive(classes)
             + occ_map.pixel_map_t._hashRecursive(classes)
             + occ_map.pixel_map_t._hashRecursive(classes)
             + occ_map.pixel_map_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.utime); 
 
        outs.writeDouble(this.z_height); 
 
        outs.writeDouble(this.theta); 
 
        this.phi_psi_xy_cov_map._encodeRecursive(outs); 
 
        this.phi_psi_xy_information_map._encodeRecursive(outs); 
 
        this.xy_max_information._encodeRecursive(outs); 
 
        this.xy_min_information._encodeRecursive(outs); 
 
        outs.writeInt(this.num_xy_maps); 
 
        for (int a = 0; a < this.num_xy_maps; a++) {
            this.xy_information_maps[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < this.num_xy_maps; a++) {
            this.xy_cov_maps[a]._encodeRecursive(outs); 
        }
 
    }
 
    public map_measurement_function_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public map_measurement_function_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static mav.map_measurement_function_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        mav.map_measurement_function_t o = new mav.map_measurement_function_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.utime = ins.readLong();
 
        this.z_height = ins.readDouble();
 
        this.theta = ins.readDouble();
 
        this.phi_psi_xy_cov_map = occ_map.pixel_map_t._decodeRecursiveFactory(ins);
 
        this.phi_psi_xy_information_map = occ_map.pixel_map_t._decodeRecursiveFactory(ins);
 
        this.xy_max_information = occ_map.pixel_map_t._decodeRecursiveFactory(ins);
 
        this.xy_min_information = occ_map.pixel_map_t._decodeRecursiveFactory(ins);
 
        this.num_xy_maps = ins.readInt();
 
        this.xy_information_maps = new occ_map.pixel_map_t[(int) num_xy_maps];
        for (int a = 0; a < this.num_xy_maps; a++) {
            this.xy_information_maps[a] = occ_map.pixel_map_t._decodeRecursiveFactory(ins);
        }
 
        this.xy_cov_maps = new occ_map.pixel_map_t[(int) num_xy_maps];
        for (int a = 0; a < this.num_xy_maps; a++) {
            this.xy_cov_maps[a] = occ_map.pixel_map_t._decodeRecursiveFactory(ins);
        }
 
    }
 
    public mav.map_measurement_function_t copy()
    {
        mav.map_measurement_function_t outobj = new mav.map_measurement_function_t();
        outobj.utime = this.utime;
 
        outobj.z_height = this.z_height;
 
        outobj.theta = this.theta;
 
        outobj.phi_psi_xy_cov_map = this.phi_psi_xy_cov_map.copy();
 
        outobj.phi_psi_xy_information_map = this.phi_psi_xy_information_map.copy();
 
        outobj.xy_max_information = this.xy_max_information.copy();
 
        outobj.xy_min_information = this.xy_min_information.copy();
 
        outobj.num_xy_maps = this.num_xy_maps;
 
        outobj.xy_information_maps = new occ_map.pixel_map_t[(int) num_xy_maps];
        for (int a = 0; a < this.num_xy_maps; a++) {
            outobj.xy_information_maps[a] = this.xy_information_maps[a].copy();
        }
 
        outobj.xy_cov_maps = new occ_map.pixel_map_t[(int) num_xy_maps];
        for (int a = 0; a < this.num_xy_maps; a++) {
            outobj.xy_cov_maps[a] = this.xy_cov_maps[a].copy();
        }
 
        return outobj;
    }
 
}

