
#include "IMUCompensation.h"


namespace InertialOdometry {


  void IMUCompensation::UpdateGyroBiases(double biases[3])
  {
    for (int i=0;i<3;i++)
      gyro_biases(i) = biases[i];
    //std::cout << "The gyro biases were updated" << std::endl;
  }
                                                                         
  void IMUCompensation::UpdateAccelBiases(double biases[3])
  {
    for (int i=0;i<3;i++)
      accel_biases(i) = biases[i];
  }             

  void IMUCompensation::UpdateGyroScaleFactor(double sf[3])
  {
    for (int i=0;i<3;i++)
      gyro_errors(i,i) = sf[i];

  }
           
  void IMUCompensation::UpdateAccelScaleFactor(double sf[3])
  {
    for (int i=0;i<3;i++)
      accel_errors(i,i) = sf[i];
  }
             
  void IMUCompensation::SetGyroMisalignments(double MA[3])
  {
      gyro_errors(0,1) = MA[0];
      gyro_errors(1,0) = MA[0];

      gyro_errors(0,2) = MA[1];
      gyro_errors(2,0) = MA[1];

      gyro_errors(1,2) = MA[2];
      gyro_errors(2,1) = MA[2];
  }
             
  void IMUCompensation::SetAccelMisalignments(double MA[3])
  {
      accel_errors(0,1) = MA[0];
      accel_errors(1,0) = MA[0];

      accel_errors(0,2) = MA[1];
      accel_errors(2,0) = MA[1];

      accel_errors(1,2) = MA[2];
      accel_errors(2,1) = MA[2];
    
  }

  //Compensation subtracts biases FIRST, then scales according to the scale factors given
  void IMUCompensation::Gyro_Compensation(IMU_dataframe &imu_pre)
  {    
    imu_pre.gyro_ = gyro_errors * (imu_pre.gyro_ - gyro_biases); 
    imu_pre.compensated_flag = true;
    return;
  }

  //Compensation subtracts biases FIRST, then scales according to the scale factors given
  void IMUCompensation::Accel_Compensation(IMU_dataframe &imu_pre)
  {
    imu_pre.accel_ = accel_errors * (imu_pre.accel_ - accel_biases); 
    imu_pre.compensated_flag = true;
    return;
  }

  /*void IMUCompensation::testref(IMU_dataframe &imu)
  {
    imu.gyro_(2) = 1.0;

    }*/

  //Compensation subtracts biases FIRST, then scales according to the scale factors given
   void IMUCompensation::Full_Compensation(IMU_dataframe &imu_pre)
  {
    //std::cout << "IMUCompensation::Full_Compensation occured" << std::endl;

    Gyro_Compensation(imu_pre);
    Accel_Compensation(imu_pre);

    return;
  }


  IMUCompensation::IMUCompensation()
  {

    std::cout << "An InertialOdometry::IMUCompensation Object was created." << std::endl;
    
    double initvector[3];

    for (int i = 0;i<3;i++)
      initvector[i] = 0.0;

    UpdateGyroBiases(initvector);
    UpdateAccelBiases(initvector);
    SetGyroMisalignments(initvector);
    SetAccelMisalignments(initvector);

    for (int i = 0;i<3;i++)
      initvector[i] = 1.0;

    UpdateGyroScaleFactor(initvector);
    UpdateAccelScaleFactor(initvector);
  }

  void IMUCompensation::cout_current_values()
  {
	  std::cout << std::endl << "====================================================" << std::endl;
	  std::cout << "IMUCompensation object" << std::endl;
	  std::cout << "gyro_biases: " << std::endl << gyro_biases << std::endl;

	  std::cout << "accel_biases: " << std::endl << accel_biases << std::endl;

	  std::cout << "gyro_scale_errors: " << std::endl << gyro_errors << std::endl;

	  std::cout << "accel_scale_errors: " << std::endl << accel_errors << std::endl;
	  std::cout << "====================================================" << std::endl;
  }

}
