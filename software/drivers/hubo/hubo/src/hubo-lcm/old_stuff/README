This code created by Hunter McClelland, Autumn 2010. ;)

GENERAL OVERVIEW:
This code intended to be running 2 "translator" processes:
One which simply publishes all messages received from REMUS via RECON
to appropriate LCM database.
The other, therefore, monitors the LCM database for messages to the REMUS,
which are translated to RECON and sent to the vehicle.

This code is intended to grow/evolve, hence only basic RECON messages are
supported.  Feel free to expand its capability at any time.

Both "translator" threads are launched in the "main()" portion of the
executable code and rely on the ReconTranslator class methods to perform
the work of translation.

At the time of creation, the file fbn_remus/notes/translation.txt describes
exactly which messages are and are not supported, and their translation to
lcmtypes.  Hopefully this file will be kept up-to-date by anyone who modifies
this code.



HOW-TO USE/TEST:
I wrote some tools to verify/debug my code.  To use these tools, follow this set
of steps:

0) Get code and dependencies.  You should already have ALL of this if you're
reading this file, but I'm mentioning it just-in-case.  Code is
ReconTranslator.cpp and ReconTranslator.h but relies on PracticalSocket code
(included, but also available online) to handle socket communication, and also
comes with 3 manual testing tools (manualLCM.c, manualRecon.cpp,
listenSocket.cpp) Code also relies on NOT-INCLUDED lcm types which you should
get from marine SVN automatically

Code also relies on LCM, if you have not setup LCM, get help to do that and/or
visit the googlecode LCM page (google for it) and follow the directions

I do not know what packages I have which came with my OS, so if something
doesn't work, it's possible I have an unknown dependancy.  If you find that I
do, please feel free to add it to this README, and/or create a "DEPENDENCIES"
text file.

1) Remove your libfbntypes.a library by running "make clean" in
fbn_remus/apps/lcmtypes if you are building for the first time.  This is not
necessary after the first build on your system. (and may not be necessary the
first time... but better safe than sorry)

2) Edit the ReconTranslator.cpp code in any text editor and set the values of
reconHost, reconPort, localHost, and localPort appropriately.

reconHost is the value which contains the IP address of the processor sending
RECON-formatted socket messages.  For the real REMUS, this is the vehicle
processor IP.  For manual testing, set this to "localhost" (since your computer
will pretend to be the vehicle)  At the time of writing, the vehicle IP is
192.168.1.71

reconPort is the port to which your code needs to send RECON-formatted socket
messages.  For the real REMUS, this is port 23456 per the RECON protocol.

localHost is the string which contains the IP address of this code.  It should
be set to your computer's actual IP on the REMUS network.  You MUST set this
address in the REMUS.INI config file, in the RECON section, so the vehicle knows
where to send it's messages.  Of course don't forget to configure YOUR IP to be
this too (on Ubuntu Linux, use "sudo ifconfig eth# 192.168.1.XXX" where # and
XXX are specific to your setup.  My wired ethernet is eth2 and I choose XXX=68)

localPort is any port which you designate as your receiving port.  I
(arbitrarily) picked port 2010... you could also use 23456 on your end with no
problems.  You MUST set this port in the REMUS.INI configuration file, in the
RECON section.

In summary, for actual operation, I use {reconHost = "192.168.1.71", reconPort =
23456, localHost = "192.168.1.68" (MY CHOSEN IP!), localPort = 2010 (MY CHOSEN
PORT!)}  and for manual testing, I use {reconHost = "localhost", reconPort =
23456, localHost = "localHost", localPort = 2010}

2) Make this code (which will know to remake your libfbntypes.a) by typing
"make" in the fbn_remus/apps/ReconTranslator directory.  If successful, the
executable file will be placed in fbn_remus/apps/bin directory.  If errors
occur, try to fix or contact whoever maintains the code.  (You may contact me,
Hunter McClelland, at hunter.mcclelland@gmail.com)

3) Run the code by going to fbn_remus/apps/bin directory and typing
"./mr-recontranslator"  Note that you'll need LCM setup and working on your
machine.  You won't see any output for a "normal" message, unless you have
lcm-spy running (and see it arrive successfully there) or you put a cout
statement in the source and remake.




TO PERFORM MANUAL TESTS:
4) Run lcm-spy or mr-spy to verify the LCM-side of things are working.

5a) To test RECON-to-LCM side, make sure values in "manualRecon.cpp" are set
correctly (IP addresses and ports correspond with ReconTranslator.cpp) and then
in fbn_remus/apps/ReconTranslator/manualTestingFiles type "make manualRecon"

6a) now, run the code with "./manualRecon" and you will see status messages
telling you exactly what the code sent via UDP to what address/port.  If your
translator is running correctly, you'll see that same info appear in your spy.

7a) If you don't believe the manualRecon is working correctly, you can use
listenSocket to verify.  Simply "make listenSocket" and then ./listenSocket 2010
(or whatever port you're using) to listen to that port on your machine. (make
sure ReconTranslator is NOT running, as it binds the port itself)



5b) To test the LCM-to-RECON side, use "make manualLCM" and then "./manualLCM"
You should see the messages appear in your spy

6b) To verify the translator is working, use listenSocket on your RECON port
(probably 23456) to "catch" what it broadcasts to the vehicle.  See 7a for
how-to-use-listenSocket.
