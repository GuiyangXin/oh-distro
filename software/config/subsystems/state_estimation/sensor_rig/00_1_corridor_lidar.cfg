coordinate_frames {
  #root frame is what everything is drawn in, hence ENU 
  root_frame = "local";                 

  #body pose as defined by the state estimator
  body {
    relative_to = "local";
    history = 1000;                    
    pose_update_channel = "STATE_ESTIMATOR_POSE";
    initial_transform{
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }
  
  body_vicon {
    relative_to = "local";
    history = 1000;                    
    update_channel = "VICON_sensortray";
    initial_transform{
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }
  
  body_desired {
    relative_to = "local";
    history = 1000;                    
    pose_update_channel = "CONTROLLER_DESIRED_POSE";
    initial_transform{
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }
  

  #mfallon mod for drc rig:
  microstrain {
  	relative_to = "body";
  	history = 1000;
  	initial_transform {
  	    translation = [0, 0, 0];
		rpy = [0,180,0];

	}
  }



  # One Hokuyo UTM-30LX LIDAR
  #mfallon: to the left of the IMU:
  # realtive to IMU: back left up
  # TODO: better measure height/up distance
  laser {
    relative_to = "body";
    history = 0;                       
    initial_transform{
      translation = [ -0.019, 0.07, 0.02 ]; 
      rpy = [ 0, 0, 0 ];
    }
  }

  #relative to IMU: ??, right, ?? 
  # (height and depth not measured)
  rgbd {
    relative_to = "body";
    history = 1000;
    update_channel = "BODY_TO_RGBD";
    initial_transform{
      translation = [ 0.0, -0.062, 0.0];
      rpy = [ 0, 0, 0];
    }
  }
  
}

boxy_renderer {
  tail {
    frame = "body";
    visualization = "cube";
    scale  = [1, .05, .05];
    translation = [-.5, 0, 0];
    rpy = [0,0,0];
    color = [0, 0, 0, 1];
  }

  front_fuse {
    frame = "body";
    visualization = "cube";
    scale  = [.5, .2, .2];
    translation=[.25, 0, -.05];
    rpy = [0,0,0];
    color = [0, 0, 0, 1];
  }

  left_wing {
    frame = "left_ail";
    visualization = "cube";
    scale  = [.4, 1, .05];
    translation = [0, 0, 0];
    rpy = [0,0,0];
    color = [0, 1, 0, 1];
  }

  right_wing {
    frame = "right_ail";
    visualization = "cube";
    scale  = [.4, 1, .05];
    translation = [0, 0, 0];
    rpy = [0,0,0];
    color = [0, 1, 0, 1];
  }

  horizontal_tail {
    frame = "elevator";
    visualization = "cube";
    scale  = [.2, .8, .01];
    translation = [0, 0, 0];
    rpy = [0,0,0];
    color = [0, 1, 0, 1];
  }

  vertical_tail {
    frame = "rudder";
    visualization = "cube";
    scale  = [.2, .01, .3];
    translation = [0, 0, 0];
    rpy = [0,0,0];
    color = [0, 1, 0, 1];
  }
  
}

model_renderer {
  main_body {
    frame = "body";
    visualization = "fixie_draw_model.obj";
    scale  = [.001, .001, .001];
    translation=[0,0,.1];
    rpy = [90, 0, 180];
    color = [0, 1, 0, 1];
  }
}



controller {

    auxilary_auto = false;
    auxilary_auto_channel = 7; #channel to check for autonomous mode [1,8]
    auxilary_auto_threashold = 1750; #less than this value in PWM ms is autonomous
	
	#using scalar values in identity matrices
	k_p = 10;
	k_v = 9;
	k_a = 4.5;
	
	v_nominal = 10.0;
	
	#throttle closeing the loop
	K_v_throttle = 0.035;   # was 	K_v_throttle = 0.05;
	#roll_forward_dt = 0; #roll forward time in seconds (should be set to the control loop delay)
	roll_forward_dt = .05;
	
	# control mappings for roll, yaw, and normal acceleration - these values should be fit with fit_control_params matlab function
	
	flat_output_control_map {
		C_p_ail = 1.57;
		C_r_ail = .53;
		
		C_p_rud = -.58;
		C_r_rud = .58;
		
		C_av2_ele = -.65;
		C_q_ele = 1.65;
		C_0_ele = 0.003;
		C_da_ele = -.001;
		
		C_0_throt = .188;  # was .27
		C_gamma_throt = 0;
		C_v_throt = .027; # was .02
		C_a_throt = 0;
		C_abs_p_throt = 0;
		
			
		#control_saturations 	
		C_Lmax = 1.5;
		C_Lmin = 0;
		p_roll_max = 150; #max permissable roll rate used in planning (deg/sec) (note different units from the Class)
		max_Gs = 4; #max g factor
		mass = 1.7; #vehicle mass used to calculating CL
		area_char = 2; #vehicle surface area used in calculating CL
	}
	
	steer_settings {
		R = 10; #turning radius for dubins
		N = 10; #order of polynomial
		D = 4; #order of derivative enforcement at junctions +1 (D=4, means 3rd order continuity (i.e. roll rate))
		
		N_der_cost = 5; #number of derivative costs specified below (the rest will be 0)
		der_costs = [.3,1,0,50,500];
		constraint_check_res = .1;
	}
	
	landing_settings {
		K_roll_ail_land = 1; #radians to radians
  		K_pitch_ele_land = 1; #radians to radians
  		landing_pitch_desired = 0; #degrees, positive nose down!
	}
	
	holding_pattern_radius = 10;
	holding_pattern_ccw = 1; #compared to -1 for cw
	
}

state_estimator {

	pose_channel = "STATE_ESTIMATOR_POSE";
	filter_state_channel = "STATE_ESTIMATOR_STATE";
        pose_render_frame = "body";

	publish_filter_state = true; #publish alongside pose
	publish_pose = true;
	republish_sensors = false; # if using a log
	init_sensors = ["ins"];
        #"laser_gpf","ins","rgbd_gpf"
	#active_sensors = ["ins"];
	#active_sensors = ["ins","rgbd_gpf"];
	#active_sensors = ["ins","fovis","rgbd_gpf"];
	#active_sensors = ["ins","fovis"];
	#active_sensors = ["ins","laser_gpf","rgbd_gpf","fovis"];
        active_sensors = ["ins","laser_gpf"];

	utime_history_span =1000000;

	#initial state estimate (relavent states overridden by init sensors)
	sigma0 {
		vb = 0.15; #m/s
		chi_xy = 3.0; #degrees
		chi_z = 3.0; #degrees
		Delta_xy = .5; #m
		Delta_z = 1;	#m
		
		gyro_bias = 0; #deg/seg
		accel_bias = 0; #m/s^2
	}
	
        #vicon area:
	#x0 {
	#  velocity = [0,0,0];
	#  angular_velocity = [0,0,0];
        #  position = [0, 0, 0];
        #  rpy = [0, 0, 0];
	#}
	
        # original stairwell map:
	#x0 {
	#  velocity = [0,0,0];
	#  angular_velocity = [0,0,0];
        #  position = [3.4, 0, 0.02];
        #  rpy = [0, 0, 0];
	#}

        # icra2013 stairwell map:
	x0 {
	  velocity = [0,0,0];
	  angular_velocity = [0,0,0];
          position = [21.0, -1.15, 0.02];
          rpy = [0, 0, 1.57];
	}
	
	init_message {
	  channel = "MAV_STATE_EST_INITIALIZER";
	}
	
	viewer {
	  channel = "MAV_STATE_EST_VIEWER_MEASUREMENT";
	  utime_offset = 0; #units 1e-6 seconds
	  downsample_factor = 1; # process 1 out of every this many
	  roll_forward_on_receive = true;
	  publish_head_on_message = true;
	}
	
	ins {
	  channel = "MICROSTRAIN_INS";
	  utime_offset = 0; #units 1e-6 seconds
	  downsample_factor = 1; # process 1 out of every this many
	  roll_forward_on_receive = true;
	  publish_head_on_message = true;
	
	  q_gyro = 0.5; #deg/sec
	  q_accel = 0.2; #m/s^2       
	  q_gyro_bias = 0; #deg/seg^2
	  q_accel_bias = 0; #m/sec^2/sec
	  frame = "microstrain";
	  
	  timestep_dt = 0.01; # REMEMBER TO CHANGE THIS IF YOU CHANGE THE IMU FREQUENCY or downsample factor
	  
	  num_to_init = 100;
	}
	
	gps{
	  channel = "UBLOX_GPS_DATA";
	  #utime_offset = 273200; #.27 second delay optimized for on 11-05-03-outdoors.01
	  utime_offset = 145000; #.145 second delay from fixie-gps-2012-05-12.02
	  #utime_offset = 0;
	  downsample_factor = 1; # process 1 out of every this many
	  roll_forward_on_receive = true;
	  publish_head_on_message = false;
	
	  r_xy = 2.0; #m
	  r_z = 2.0; #m
	}
	
	vicon{
	  channel = "VICON_fixie";
	  utime_offset = 0; #units 1e-6 seconds
	  downsample_factor = 10; # process 1 out of every this many
	  roll_forward_on_receive = true;
	  publish_head_on_message = false;
	
	  r_xyz = .01; #m
	  r_chi = 3.0; #degrees
	  

	}
	
	laser_gpf_out_of_process { 
	  utime_offset = 0; 
	  downsample_factor = 1; 
	  channel = "GPF_MEASUREMENT";
	  roll_forward_on_receive = true;
	  publish_head_on_message = false;
	}
	
	laser_gpf {
	  utime_offset = 0; 
	  downsample_factor = 3; 
	  channel = "HOKUYO_LIDAR";#LASER";
	  roll_forward_on_receive = true;
	  publish_head_on_message = false;

          # sept 2012 era
	  #map_name = "/media/bay_drive/data/other/sensor_rig/octomaps/stairarea/stata_lights_3/octomap.bt_blurred_0.5";	  
	  # icra 2013 paper:
	  map_name = "/media/bay_drive/data/other/sensor_rig/octomaps/stairarea/icra_octomap/icra_octomap.bt_blurred_0.5";	  
          # made by charlie on 03-10-2012
	  #map_name = "/media/bay_drive/data/other/sensor_rig/2012-10-03-rig-vicon-fixie/occmap/octomap.bt_blurred_0.5";	  
	  # adam used map_name = "octomap.25.bt_blurred_0.5";
	  #map_name = "octomap.1.bt_blurred_0.5";
	  gpf_vis = true;

          # 300 is bare min
	  gpf_num_samples = 500;
	  
          # according to abe:
          # pos_only - less accurate
          # pos_yaw  - sufficient/typical for fixie
          # pos_chi  - more accurate, use this initially for kmcl
	  gpf_substate = "pos_yaw";
	  
	  #laser projection settings
	  beam_skip = 16;
	  spatial_decimation_min = 0;
	  spatial_decimation_max = .5;
	  
	  #-----------gpf probability settings-----------
	  
	  #log-likelihood of an unknown cell in the map
	  unknown_loglike = -12.0; #original value used for johnson/parking garage 2012-5-13
	  
	  #gpf cov is scaled by sigma_scaling^2 via division of summed log probabilities
	  sigma_scaling = 8.16; #should be identical to "adams magic scaling factor used for johnson/parking garage 2012-5-13
	}


	rgbd_gpf { 
	  utime_offset = 0; #units 1e-6 seconds	  
	  #if running in a separate process the downsampling is applied before processing, and as many as can be processed will be (it will hog cpu)
          # laser 40Hz df: 3 | rgbd 10Hz df: 1
	  downsample_factor = 1; # process 1 out of every this many laser readings (come at 40hz)

	  #channel = "RGBD_GPF_MEASUREMENT";
	  channel = "KINECT_FRAME";
	  roll_forward_on_receive = true;
	  publish_head_on_message = false;
	  
	  
          # sept 2012 era
	  #map_name = "/media/passport1/data/other/sensor_rig/octomaps/stairarea/stata_lights_3/octomap.bt_blurred_0.5";	  
	  # icra 2013 paper:
	  map_name = "/media/passport1/data/other/sensor_rig/octomaps/stairarea/icra_octomap/icra_octomap.bt_blurred_0.5";	  
          # made by charlie on 03-10-2012
	  #map_name = "/media/passport1/data/other/sensor_rig/2012-10-03-rig-vicon-fixie/occmap/octomap.bt_blurred_0.5";	  
	  # adam used map_name = "octomap.25.bt_blurred_0.5";
	  #map_name = "octomap.1.bt_blurred_0.5";
	  gpf_vis = true;

          # 300 is bare min
	  gpf_num_samples = 500; 
	  
          # according to abe:
          # pos_only - less accurate
          # pos_yaw  - sufficient/typical for fixie
          # pos_chi  - more accurate, use this initially for kmcl
	  gpf_substate = "pos_yaw";
	  
	  #laser projection settings
	  beam_skip = 16;
	  spatial_decimation_min = 0;
	  spatial_decimation_max = .5;
	  
	  #-----------gpf probability settings-----------
	  
	  #log-likelihood of an unknown cell in the map
	  unknown_loglike = -12.0; #original value used for johnson/parking garage 2012-5-13
	  
	  #gpf cov is scaled by sigma_scaling^2 via division of summed log probabilities
	  sigma_scaling = 8.16; #should be identical to "adams magic scaling factor used for johnson/parking garage 2012-5-13
	}


  fovis {

    channel = "KINECT_REL_ODOMETRY";
    mode = "lin_rate"; # linear and rotation rates i.e. velocities
    
    # velocity variances:
    # 0.50 looks good for very difficult logs
    r_vxyz = 5.0;  # m/s
    # scan matchered used 1.0
    r_vang  = 0.50;  # degrees?

    utime_offset = 0;
    downsample_factor = 1;
    roll_forward_on_receive = true;
    publish_head_on_message = false;
  }

}


planar_lidars {
  laser {
    viewer_color = [ 0.0, 0.0, 1.0 ]; # blue
    max_range = 30;
    min_range = 1.25;
    angle_range = [135, -135];
   down_region = [-1, -1]; # mfallon changed was 1068,1078
#    down_region = [5, 25];
    up_region = [-1,-1];
    surround_region = [100, 1000];  # mfallon changed was 180,900
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "laser";
    lcm_channel = "LASER";
  }
  

  # This a fake until the rgbd projector is seperated
  rgbd {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # blue
    max_range = 30;
    min_range = 1.25;
    angle_range = [135, -135];
   down_region = [-1, -1]; # mfallon changed was 1068,1078
#    down_region = [5, 25];
    up_region = [-1,-1];
    surround_region = [100, 1000];  # mfallon changed was 180,900
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "rgbd";
    lcm_channel = "NOTHINGHERE";
  }
}


#rc configuration - settings typically found in a computer radio for setting up servos for a particular plane
rc{
# pulse_width=scale*command+sub_trim, bounded by h_limit and l_limit

#channel assignments on control board

  channel{
    r_ail=0;
    ele=1;
    r_throt=2;
    rud=3;
    l_throt=4;
    l_ail=5;
  }

#channel input for whether or not we're in autonomous mode (assumes that channels <4 are the same and that there are no input channels >4
  mplex_in=7;
  mplex_cutoff=1750.0;


  sub_trim{
    r_ail=1493.0;
    ele=1513.0;
    r_throt=1100.0;
    rud=1475.0;
    l_throt=1100.0;
    l_ail=1518.0;
    def=1500.0;
  }

  h_lim{
    r_ail=2086.0;
    ele=2024.0;
    r_throt=1900.0;
    rud=1896.0;
    l_throt=1900.0;
    l_ail=1960.0;
    def=2000.0;
  }

  l_lim{
    r_ail=1091.0;
    ele=952.0;
    r_throt=1125.0;
    rud=1096.0;
    l_throt=1125.0;
    l_ail=965.0;
    def=1000.0;
  }

#in ms/rad for radians on control surface, use sign to reverse servo
#conversion to radians is in the right ballpark for 1000ms/rad so we use it for everything for simplicity
  scale{
    r_ail=1000.0;
    ele=1000.0;
    r_throt=842.0;
    rud=1000.0;
    l_throt=842.0;
    l_ail=1000.0;
    def=1000.0;
  }

#behavior if the servos are following computer commands, and the computer stops sending
#also what the computer output is initialized to
  failsafe{
    r_ail=1534.0;
    ele=1515.0;
    r_throt=1100.0;
    rud=1474.0;
    l_throt=1100.0;
    l_ail=1534.0;
    def=1500.0;
  }

  Command_timeout_ms=1500;

#aileron differential
#down aileron deflection is multiplied by value, 1=no differential
  ail_diff=.78;

  output_frame_rate=50.0;

#multiply device numbers by this scale to get microseconds
  ardu_mega_us_scale=0.5;
}

#ardupilot configuration outside of regular r/c settings
ardu{

	analog{
		amps_per_volt = 27.3224044;
		volts_per_volt = 15.701; # 1/63.69 mv from attopilot spec sheet
		current_input_ind = 0; # 1/36.60 mv from attopilot spec sheet
		voltage_input_ind = 1;
	}

	motors{
		right_motor_ind = 0;
		left_motor_ind = 1;
		rpm_per_tick = 64.0; #according to email from Jan Stumpf, Ascending Technologies
	}
}
		
	
gps_origin{
  #latlon = [42.357351,-71.099301]; #2nd base of baseball field next to track on Briggs
  #elevation = 0;
  
  latlon=[ 42.35588476, -71.10487220, -24]; #lr3 origin for train tracks planning
  elevation = -24;
}


pctx_rc{
# pulse_width=scale*command+sub_trim, bounded by h_limit and l_limit

  num_channels = 4;
  
  #channel assignments [ail, ele, throt, rudder]
  channels = [0,1,2,3];

  sub_trim = [ 500.0, 500.0,   0.0, 500.0];
  h_lim =    [1000.0,1000.0,1000.0,1000.0];
  l_lim =    [   0.0,   0.0,   0.0,   0.0];
  scale =    [1000.0,1000.0,1000.0,1000.0];
  init =     [ 500.0, 500.0, 500.0, 500.0]; #output initialization

  #output_frame_rate=50.0;
}



simulator {
        #flags for which sensors to publish to
        publish_pose = true;
        publish_ins = true;
        publish_gps = true;
        
	ground_height = 0;
		
        init_state{
		  #position = [21.67,-0.95,3.28];
		  #velocity = [8.11,-0.79,-.69];
		  #acceleration = [-0.01,1.58,10.594];
                  #rpy = [0,0,90]; #in degrees
                 # quat = [-.740428, -.23507702, 0.26118020, 0.5729647787];
                 
          position = [21,0,1.2];
		  velocity = [9,0,0];
		  acceleration = [0,0,9.8];
          rpy = [0,0,0]; #in degrees
	}
		
        #State estimate standard deviations 
        sigma {
                vb = .1; #m/s
                chi_xy = 0.50; #degrees
                chi_z = 0.50; #degrees
                Delta_xy = 1; #m
                Delta_z = 2;   #m
                gyro = 0.2; #deg/sec
                accel = 0.04; #m/s^2
        }
                
        
        utime_offsets { #units 1e-6 seconds
                gps = 230000; # (must be less than 4hz freq) .27 second delay was what matlab optimized for un ublox previously
                laser = 0;
                vicon = 0;              
                ins = 0;
        }
        
        control_delay_num_messages = 9; # Control loop delay specified by number of control messages to queue up
        
}





cameras {
    # Asus used for 03oct2012 experiments - TODO: get serial number
    rgbd {
      lcm_channel = "KINECT_FRAME";
      coord_frame = "camera";
      type = "openni";

        rgb {
            width = 640;
            height = 480;

            fx = 537.874;
            fy = 537.953;
            cx = 317.019;
            cy = 242.859;
        }

        # HJ: I have to double check and see what intrinsic
        #     fovis uses when using openni data.
        depth {
            width = 640;
            height = 480;

            fx = 572.156;
            fy = 572.362;
            cx = 320.705;
            cy = 245.120;
        }

        shift_offset = 1090;
        projector_depth_baseline = 7.50000030e-02;

        # Using OpenNI both should be in the same reference frome
        rotation = [1.0, 0.0, 0.0, 
                    0.0, 1.0, 0.0,
                    0.0, 0.0, 1.0];
        translation = [0.0, 0.0, 0.0];
    }

    rgbd_rgb {
      lcm_channel = "KINECT_RGB";
      coord_frame = "camera";
    }

    rgbd_depth {
      lcm_channel = "KINECT_DEPTH";
      coord_frame = "camera";
    }
}


