INCLUDE=[
	"params/quadsim.cfg",
	"params/ff_controller.cfg",
	"params/lidars.cfg",
	"params/cameras.cfg",
	"params/opticalflow.cfg",
	];

viewer {
	render_octomap=true;
	render_lcmgl=true;
	
	render_cameras=false;
	render_kinect=false;
	render_laser=true;
	render_optical_flow=false;
	
	render_state_estimator=true;
	
	render_models=true;
	model_names = ["Quad","Desired"];
	Quad {
		frame = "body";
		
		color_1 = [0,0,1];
		color_2 = [1,0,0];
	}
	Desired {
		frame = "body_vicon";
		
		color_1 = [0,1,1];
		color_2 = [1,0,0];
	}
		
	render_quad_waypoint=false;
	render_quad_ff_controller_param_tuner=true;
	render_quad_ff_waypoint=true;
}

coordinate_frames {
  # Root frame is what everything is drawn in, hence ENU.
  root_frame = "local";                 

  # Body pose as defined by the state estimator.
  body {
    relative_to = "local";
    history = 1000;                    
    pose_update_channel = "STATE_ESTIMATOR_POSE";
    initial_transform {
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }
  
  body_vicon {
    relative_to = "local";
    history = 1000;                    
    pose_update_channel = "VICON_rrg_pelican";
    initial_transform {
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }
  
  body_desired {
    relative_to = "local";
    history = 1000;                    
    pose_update_channel = "CONTROLLER_DESIRED_POSE";
    initial_transform {
      translation = [0, 0, 0];
      rpy = [0, 0, 0];
    }
  }

  microstrain {
    relative_to = "body";
    history = 0;
    initial_transform {

      # Just use the microstrain...don't mess around with the asctec imu

      # MICROSTRAIN
      #translation = [-.01, -.01, .01];
      #rpy = [180, 0, 0]; # THIS RPY FOR MICROSTRAIN MOUNTED FACE UP WITH CORD FACING FORWARD

      # ASCTEC
      translation = [0, 0, 0];
      rpy = [0, 0, 0]; # THIS RPY FOR ASCTEC IMU
    }
  }

  laser {
    relative_to = "body";
    history = 0;                       
    initial_transform{
      translation = [ 0, 0, .1 ];
      rpy = [ 0, 0, 0 ];
    }
  }
}

state_estimator {
	#flags for which sensors to subscribe to
	use_ins = true;
	use_laser_gpf = false;
	use_laser_gpf_separate_process = false;
	use_gps = false;
	use_vicon = false;
	use_scan_matcher = false;
	use_optical_flow = false;
	
	pose_channel = "STATE_ESTIMATOR_POSE";
	filter_state_channel = "STATE_ESTIMATOR_STATE";
	
	publish_filter_state = true;
	
	history_span = 1.0;

	#initial state estimate standard deviations 
	sigma0 {
		vb = 0.15; #m/s
		chi_xy = 3.0; #degrees
		chi_z = 3.0; #degrees
		Delta_xy = .5; #m
		Delta_z = 1;	#m
		
		# Initial covariance (on some unknown bias). if this number is nonzero and q_gyro_bias etc is zero, then this will converge to some unknown number...dangerous
		gyro_bias = 0.001; #deg/seg 
		accel_bias = 0; #m/s^2
	}
	
	ins {
	  q_gyro = .5; #0.5; #deg/sec "Pretty right for the gyros even with vibration, fixie and quad"
	  q_accel = .2; #0.6; #m/s^2 "This was on the low end of what we flew with using GPF, got as low as .4"

	  # Rate at which bias is allowed to move
  	  q_gyro_bias = 0.001; # 0.001; #deg/seg^2
	  q_accel_bias = 0; # 0.001; #m/sec^2/sec
	  
	  channel = "MICROSTRAIN_INS";
	  # channel = "ASCTEC_INS";
	  utime_offset = 0; #units 1e-6 seconds
	  downsample_factor = 1; # process 1 out of every this many
	  timestep_dt = 0.01; # REMEMBER TO CHANGE THIS IF YOU CHANGE THE IMU FREQUENCY
      num_ins_to_init = 100;
	  
	}
	
	gps{
	  r_xy = 2.0; #m
	  r_z = 2.0; #m
	  
	  channel = "UBLOX_GPS_DATA";
	  utime_offset = 273200; #.27 second delay =as what matlab optimized for un ublox previously
	  #utime_offset = 0;
	  downsample_factor = 1; # process 1 out of every this many
	}
	
	vicon{
	  mode = "position";  # position or position_orient mode
	
	  r_xyz = .01; # m
	  r_chi = 3.0; # degrees

	  channel = "VICON_rrg_pelican";
	  utime_offset = 12000; # units 1e-6 seconds
	  downsample_factor = 10; # process 1 out of every this many
	}
	
	laser_gpf { 
	  utime_offset = 0; #units 1e-6 seconds
	  
	  channel = "GPF_MEASUREMENT";
	  laser_channel = "LASER";
	  
	  #if running in a separate process the downsampling is applied before processing, and as many as can be processed will be (it will hog cpu)
	  downsample_factor = 3; # process 1 out of every this many laser readings (come at 40hz)           
	  map_name = "octomap.bt_blurred_0.5";
	  gpf_vis = false;
	  gpf_num_samples = 400;
	  
	  gpf_substate = "pos_yaw";
	  
	  #laser projection settings
	  beam_skip = 16;
	  spatial_decimation_min = 0;
	  spatial_decimation_max = .5;
	  unknown_loglike = -12.0;
	  sigma_scaling = 8.16;
	  
	}
}

hidden_map {
	start = [2,2];
	
	goal {
		size = [4,4];
		center = [18,28];
	}

	analytical {
		dim = 2;
		center = [10,15];
		size = [20,30];
	}
}

