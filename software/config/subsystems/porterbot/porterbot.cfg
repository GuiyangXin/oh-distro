coordinate_frames {
  root_frame = "base_link";


# todo: delet head and body frame!

  head {
    # this cannot change - its rigid
    # forward facing scan at the same axis as the rotating scan - but fixed
    relative_to = "base_link";
    history = 1000;                       
    pose_update_channel= "POSE_HEAD";
    initial_transform{
      # same rpy, similar translation:
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }    
  
  body {
    relative_to = "head";
    history = 1000;
    update_channel = "HEAD_TO_BODY";      #bot_core_pose_t messages will be listened for this channel
    initial_transform{
      translation = [ 0, 0, 0 ];
      quat = [ 1, 0, 0, 0 ];
    }
  }


  R_LIDAR_FRAME {
    relative_to = "base_link";
    history = 1000;                       
    update_channel = "BODY_TO_R_HOKUYO";
    initial_transform{
      translation=[  -0.0015 , 0.0 , 0.68 ];		#not important,just starting position. updates immediatelly to the channel.
      rpy = [90.0 , 0.0 , 0.0 ];			#not important,just starting position. updates immediatelly to the channel.
    }
  }



  L_LIDAR_FRAME {
    relative_to = "base_link";
    history = 1000;                       
    update_channel = "BODY_TO_L_HOKUYO";
    initial_transform{
      translation=[  -0.0015 , 0.0 , 0.68 ];		#not important,just starting position. updates immediatelly to the channel.
      rpy = [90.0 , 0.0 , 0.0 ];			#not important,just starting position. updates immediatelly to the channel.
    }
  }



}



planar_lidars {
  R_LIDAR {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 40.0;
    min_range = 0.08;
    #angle_range = [135, -135];
    #down_region = [1068, 1078];
    up_region = [-1,-1];
    #surround_region = [0, 640];        
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "R_LIDAR_FRAME";
    lcm_channel = "SCAN_RIGHT";
  }  

  R_LIDAR_REAL {
    viewer_color = [ 0.0, 1.0, 0.0 ]; # red
    max_range = 40.0;
    min_range = 0.08;
    #angle_range = [135, -135];
    #down_region = [1068, 1078];
    up_region = [-1,-1];
    #surround_region = [0, 640];        
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "R_LIDAR_FRAME";
    device = "192.168.0.10";
    lcm_channel = "SCAN_RIGHT";
  }  

  L_LIDAR {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 40.0;
    min_range = 0.08;
    #angle_range = [135, -135];
    #down_region = [1068, 1078];
    up_region = [-1,-1];
    #surround_region = [0, 640];        
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "L_LIDAR_FRAME";
    lcm_channel = "SCAN_LEFT";
  } 

  L_LIDAR_REAL {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 40.0;
    min_range = 0.08;
    #angle_range = [135, -135];
    #down_region = [1068, 1078];
    up_region = [-1,-1];
    #surround_region = [0, 640];        
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "L_LIDAR_FRAME";
    device = "192.168.0.11";
    lcm_channel = "SCAN_LEFT";
  } 

}





cameras {
    # Stereo Pair: [same as PR2 in simulation]
    CAMERA {
      lcm_channel = "CAMERA";
      coord_frame = "CAMERA";
      type = "stereo";

      left {
          width = 640;
          height = 480;
          distortion_model = "plumb";
          fx = 320.0;
          fy = 320.0;
          cx = 320.0;
          cy = 240.5;
          k1 = 0.0;
          k2 = 0.0;
          k3 = 0.0;
          p1 = 0.0;
          p2 = 0.0;
      }

      right {
          width = 640;
          height = 480;
          distortion_model = "plumb";
          fx = 320.0;
          fy = 320.0;
          cx = 320.0;
          cy = 240.5;
          k1 = 0.0;
          k2 = 0.0;
          k3 = 0.0;
          p1 = 0.0;
          p2 = 0.0;
      }
      rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
      translation = [-0.09, 0.0, 0.0];
    }


    CAMERALEFT {
      lcm_channel = "CAMERALEFT";
      coord_frame = "CAMERA";
      #type = "mono";
      #rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
      #translation = [-0.09, 0.0, 0.0];

      intrinsic_cal{

        width = 320;
        height = 240;
        distortion_model = "plumb-bob";
        distortion_k = [0,0,0];
        distortion_p = [ 0,0];
        # fx fy skew cx cy 
        # gazebo_ros_camera_utils.cpp, where hfov was 1.5708 (90d) as of 6dec 2012
        # fx = fy = w / (2 * tan( hfov/2))
        # cx = (w+1)/2  |  cy = (h+1)/2
        pinhole = [ 159.9994,  159.9994, 0, 160.5, 120.5];
      }
    }


    CAMERARIGHT {
      lcm_channel = "CAMERARIGHT";
      coord_frame = "CAMERARIGHT";
      #type = "mono";
      #rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
      #translation = [-0.09, 0.0, 0.0];

      intrinsic_cal{
        width = 320;
        height = 240;
        distortion_model = "plumb-bob";
        distortion_k = [0,0,0];
        distortion_p = [ 0,0];
        pinhole = [ 159.9994,  159.9994, 0, 160.5, 120.5];
      }

    }

    CAMERALEFT_COMPRESSED {
      lcm_channel = "CAMERALEFT_COMPRESSED";
      coord_frame = "CAMERALEFT";
      #type = "mono";
      #rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
      #translation = [-0.09, 0.0, 0.0];

      intrinsic_cal{
        width = 752;
        height = 480;
        distortion_model = "plumb-bob";
        distortion_k = [-0.364037662947256646095440, 0.143870514274934857557042, 0];
        distortion_p = [ 0.000321713314758248925679, -0.000285285940190054692917 ];
        pinhole = [486.0464, 483.718, 0, 358.773, 225.220];
      }

    }

    CAMERARIGHT_COMPRESSED {
      lcm_channel = "CAMERARIGHT_COMPRESSED";
      coord_frame = "CAMERARIGHT";
      #type = "mono";
      #rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
      #translation = [-0.09, 0.0, 0.0];

      intrinsic_cal{
        width = 752;
        height = 480;
        distortion_model = "plumb-bob";
        distortion_k = [-0.364037662947256646095440, 0.143870514274934857557042, 0];
        distortion_p = [ 0.000321713314758248925679, -0.000285285940190054692917 ];
        pinhole = [486.0464, 483.718, 0, 358.773, 225.220];
      }

    }

}

