coordinate_frames {
  root_frame = "local";

  head {
    relative_to = "local";
    history = 1000;                       
    max_frequency = 100;
    pose_update_channel= "POSE_HEAD";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }    
  
  # this is the pelvis link, its a legacy that its referred to as body
  body {
    relative_to = "head";
    history = 1000;
    max_frequency = 100;
    update_channel = "HEAD_TO_BODY";  
    initial_transform{
      translation = [ 0, 0, 0 ];
      quat = [ 1, 0, 0, 0 ];
    }
  }

  # this is a floating body frame disconnted from the rest of the tree
  # it only exists as a convenience
  body_floating {
    # this cannot change - its rigid
    relative_to = "local";
    history = 1000;
    max_frequency = 100;
    pose_update_channel= "POSE_BODY";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  } 
  
  # this is the body to imu transform - as provided by BDI in 
  # supplementary information in Sept 2013. NB
  imu {
    relative_to = "body";
    history = 1000;
    update_channel = "BODY_TO_IMU";  
    initial_transform{
      translation = [ -0.0905, -0.000004, -0.012 ];
      quat = [ 0.923879532511287, 0, 0, 0.382683432365090 ];
    }
  }

  utorso {
    relative_to = "body";
    history = 1000;
    max_frequency = 5;    
    update_channel = "BODY_TO_UTORSO";  
    initial_transform{
      translation = [ 0, 0, 0 ];
      quat = [ 1, 0, 0, 0 ];
    }
  }


  # Show what the ground height infered from the feet height is
  ground {
    relative_to = "local";
    history = 1000;
    max_frequency = 5;
    pose_update_channel= "POSE_GROUND";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  left_foot {
    relative_to = "local";
    history = 1000;
    max_frequency = 5;    
    pose_update_channel= "POSE_LEFT_FOOT";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  right_foot {
    relative_to = "local";
    history = 1000;
    max_frequency = 5;    
    pose_update_channel= "POSE_RIGHT_FOOT";
    initial_transform{
      translation=[  0 , 0.0 , 0.0 ];
      rpy = [0.0 , 0.0 , 0.0 ];
    }
  }

  CAMERACHEST_LEFT {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 1000;
    update_channel = "UTORSO_TO_CAMERACHEST_LEFT_OPTICAL_FRAME";  
    initial_transform{
      # mapped over from the URDF (oct 2013)
      translation = [ 0.216409, 0.121799, 0.406759 ];
      rpy = [ -90.0, 0.0, -15.0];
      # Original Manually done:
      #translation = [ 0.175, 0.09, 0.4 ];
      #rpy = [ -90.0, 0.0, -15.0];      
    }
  }

  CAMERACHEST_LEFT_WARP {
    relative_to = "CAMERACHEST_LEFT";
    history = 1000;
    update_channel = "DUMMY_LEFT";
    initial_transform{
      translation = [ 0, 0, 0 ];
      rpy = [ 0, 30, 0 ];
    }
  }

  CAMERACHEST_RIGHT {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 1000;
    update_channel = "UTORSO_TO_CAMERACHEST_RIGHT_OPTICAL_FRAME";  
    initial_transform{
      # mapped over from the URDF (oct 2013)
      translation = [ 0.216409, -0.121799, 0.406759 ];
      rpy = [ -90.0, 0.0, -165.0];
      # Original Manually done:    
      #translation = [ 0.175, -0.09, 0.4 ];
      #rpy = [ -90.0, 0.0, -165.0];      
    }
  }

  CAMERACHEST_RIGHT_WARP {
    relative_to = "CAMERACHEST_RIGHT";
    history = 1000;
    update_channel = "DUMMY_RIGHT";
    initial_transform{
      translation = [ 0, 0, 0 ];
      rpy = [ 0, -30, 0 ];
    }
  }

  CAMERAREAR {
    # position estimated by eye, not accurate
    relative_to = "utorso";
    history = 1000;
    update_channel = "UTORSO_TO_CAMERAREAR_RIGHT_OPTICAL_FRAME";  
    initial_transform{
      translation = [ -0.05, -0.0, 0.6 ];
      rpy = [ -90.0, 0.0, 90.0];      
    }
  }

  CAMERALHAND_LEFT {
    relative_to = "body";
    history = 1000;
    max_frequency = 5;    
    update_channel = "BODY_TO_CAMERALHAND_LEFT";
    initial_transform{  # initial transform is useless as it always changes
      translation = [ 0.0, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0]; 
    }
  }  

  CAMERARHAND_LEFT {
    relative_to = "body";
    history = 1000;
    max_frequency = 5;    
    update_channel = "BODY_TO_CAMERARHAND_LEFT";
    initial_transform{  # initial transform is useless as it always changes
      translation = [ 0.0, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0]; 
    }
  }
  
  # a point on the skin on the palm of the hand - not an actual urdf link  
  IROBOTLPALM {
    relative_to = "body";
    history = 1000;
    max_frequency = 5;    
    update_channel = "BODY_TO_LPALM";
    initial_transform{  # initial transform is useless as it always changes
      translation = [ 0.0, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0]; 
    }
  }  
  
  # a point on the skin on the palm of the hand - not an actual urdf link
  IROBOTRPALM {
    relative_to = "body";
    history = 1000;
    max_frequency = 5;    
    update_channel = "BODY_TO_RPALM";
    initial_transform{  # initial transform is useless as it always changes
      translation = [ 0.0, 0.0, 0.0];
      rpy = [ 0.0, 0.0, 0.0]; 
    }
  }  
  
  corrected_local {
    relative_to = "local";
    history = 1000;
    update_channel = "MAP_LOCAL_CORRECTION";
    initial_transform {
      translation = [ 0.0, 0.0, 0.0 ];
      rpy = [ 0.0, 0.0, 0.0 ];
    }
  }
}




cameras {
  WEBCAM {
    # Logtech webcam, coord_frame chosen for convenience
    lcm_channel = "WEBCAM";
    coord_frame = "CAMERA_LEFT";
    intrinsic_cal{
      width = 640;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [ 0,0];
      pinhole = [  257.5196,   257.5196, 0, 320.5, 240.5];
    }      
  }

  CAMERACHEST_LEFT {
    # SA Camera, fish eye calibrated by Matt A. on 2013-08-22
    lcm_channel = "CAMERACHEST_LEFT";
    coord_frame = "CAMERACHEST_LEFT";
    intrinsic_cal{
      width = 1024;
      height= 1280;
      distortion_model = "angular-poly";
      distortion_coeffs = [ 0.421109280490297, -0.0882674344589703, 0.286049760181108 ];
      pinhole = [ 299.011497312, 299.011497312, 0, 512.28080444, 653.237957407 ];
    }      
  }

  # sample "virtual" image that can be created using drc-image-warp
  CAMERACHEST_LEFT_WARP {
    lcm_channel = "CAMERACHEST_LEFT_WARP";
    coord_frame = "CAMERACHEST_LEFT_WARP";
    intrinsic_cal {
      width = 640;
      height= 480;
      distortion_model = "null";
      pinhole = [ 200, 200, 0, 320, 240 ];
    }      
  }

  CAMERACHEST_RIGHT {
    # SA Camera, fish eye calibrated by Matt A. on 2013-08-22
    lcm_channel = "CAMERACHEST_RIGHT";
    coord_frame = "CAMERACHEST_RIGHT";
    intrinsic_cal{
      width = 1024;
      height= 1280;
      distortion_model = "angular-poly";
      distortion_coeffs = [ 0.388557885592878, -0.0264407879209483, 0.251453140803951];
      pinhole = [ 295.90626545, 295.90626545, 0, 485.159101445, 641.05982734344];
    }      
  }

  # sample "virtual" image that can be created using drc-image-warp
  CAMERACHEST_RIGHT_WARP {
    lcm_channel = "CAMERACHEST_RIGHT_WARP";
    coord_frame = "CAMERACHEST_RIGHT_WARP";
    intrinsic_cal {
      width = 640;
      height= 480;
      distortion_model = "null";
      pinhole = [ 200, 200, 0, 320, 240 ];
    }      
  }

  CAMERAREAR {
    # Rear facing DLink Webcam, not calibrated
    lcm_channel = "CAMERAREAR";
    coord_frame = "CAMERAREAR";
    intrinsic_cal{
      width = 640;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [ 0,0];
      pinhole = [  257.5196,   257.5196, 0, 320.5, 240.5];
    }      
  } 
   
  CAMERALHAND_LEFT {
    lcm_channel = "CAMERALHAND_LEFT";
    coord_frame = "CAMERALHAND_LEFT";
    intrinsic_cal{
      width = 752;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [ 0,0];
      pinhole = [  517.5196,   517.5196, 0, 376.5, 240.5];
    }
  }
    
  CAMERARHAND_LEFT {
    lcm_channel = "CAMERARHAND_LEFT";
    coord_frame = "CAMERARHAND_LEFT";
    intrinsic_cal{
      width = 752;
      height= 480;
      distortion_model = "plumb-bob";
      distortion_k = [0,0,0];
      distortion_p = [ 0,0];
      pinhole = [  517.5196,   517.5196, 0, 376.5, 240.5];
    }      
  }
}



