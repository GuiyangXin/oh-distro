#include <pcl/ModelCoefficients.h>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/extract_indices.h>
#include <pcl/filters/passthrough.h>
#include <pcl/features/normal_3d.h>
#include <pcl/sample_consensus/method_types.h>
#include <pcl/sample_consensus/model_types.h>
#include <pcl/segmentation/sac_segmentation.h>

typedef pcl::PointXYZ PointT;






void find_and_remove_plane(pcl::PointCloud<PointT>::Ptr cloud_filtered,
                           pcl::PointCloud<pcl::Normal>::Ptr cloud_normals,
			   pcl::PointCloud<PointT>::Ptr cloud_filtered2,
                           pcl::PointCloud<pcl::Normal>::Ptr cloud_normals2, string label){

  stringstream ss1,ss2;
  ss1 << label << "_plane.pcd";
  ss2 << label << "_reminder.pcd";


  pcl::PCDWriter writer;
  pcl::ModelCoefficients::Ptr coeff (new pcl::ModelCoefficients);
  pcl::ExtractIndices<PointT> extract;
  pcl::ExtractIndices<pcl::Normal> extract_normals;


  std::cout << cloud_filtered->points.size() << " points in total\n";
  std::cout << cloud_normals->points.size() << " normals in total\n";

  pcl::SACSegmentationFromNormals<PointT, pcl::Normal> seg; 
  pcl::PointIndices::Ptr inliers_plane (new pcl::PointIndices);

  // Create the segmentation object for the planar model and set all the parameters
  seg.setOptimizeCoefficients (true);
  seg.setModelType (pcl::SACMODEL_NORMAL_PLANE);
  seg.setNormalDistanceWeight (0.1);
  seg.setMethodType (pcl::SAC_RANSAC);
  seg.setMaxIterations (100);
  seg.setDistanceThreshold (0.03);
  seg.setInputCloud (cloud_filtered);
  seg.setInputNormals (cloud_normals);
  // Obtain the plane inliers and coefficients
  seg.segment (*inliers_plane, *coeff);
  std::cerr << "Plane coefficients: " << *coeff << std::endl;

  // Extract the planar inliers from the input cloud
  extract.setInputCloud (cloud_filtered);
  extract.setIndices (inliers_plane);
  extract.setNegative (false);

  // Write the planar inliers to disk
  pcl::PointCloud<PointT>::Ptr cloud_plane (new pcl::PointCloud<PointT> ());
  extract.filter (*cloud_plane);
  std::cerr << "PointCloud representing the planar component: " << cloud_plane->points.size () << " data points." << std::endl;
  writer.write (ss1.str(), *cloud_plane, false);

  // Remove the planar inliers, extract the rest
  extract.setNegative (true);
  extract.filter (*cloud_filtered2);
  extract_normals.setNegative (true);
  extract_normals.setInputCloud (cloud_normals);
  extract_normals.setIndices (inliers_plane);
  extract_normals.filter (*cloud_normals2);

  writer.write (ss2.str(), *cloud_filtered2, false);



  double pitch = atan(coeff->values[0]/coeff->values[2]);
  double roll =- atan(coeff->values[1]/coeff->values[2]);
  double coeff_norm = sqrt(pow(coeff->values[0],2) +
	pow(coeff->values[1],2) + pow(coeff->values[2],2));
  double height = (coeff->values[2]*coeff->values[3]) / coeff_norm;
  // the point directly under the kinect, having corrected the rotation:
  // double sub_pt[3];
  // sub_pt[1]= -coeff->values[0]*coeff->values[3]/pow(coeff_norm,2)
  // sub_pt[2]= -coeff->values[1]*coeff->values[3]/pow(coeff_norm,2)
  // sub_pt[3]= -coeff->values[2]*coeff->values[3]/pow(coeff_norm,2) 

  if (1==1){ //(verbose_text>0){
    cout  <<  "\nRANSAC Floor Coefficients: " << coeff->values[0]
      << " " << coeff->values[1] << " "  << coeff->values[2] << " " << coeff->values[3] << endl;
    cout << "Pitch: " << pitch << " (" << (pitch*180/M_PI) << "d). positive nose down\n";
    cout << "Roll : " << roll << " (" << (roll*180/M_PI) << "d). positive right side down\n";
    cout << "Height : " << height << " of device off ground [m]\n";
    //std::cout << std::setprecision(20) << "corresponding obj_coll " << state->bot_id
    //  << " and kinect " << state->msg->timestamp << "\n";
  }


}



int
main (int argc, char** argv)
{

  std::cout << "ros to lcm stereo converter\n";
  std::cout << "Arguments: program_name inputROSchannel outputLCMchannel\n";
  std::cout << "ros-stereo2lcm wide_stereo WIDE_STEREO_IMAGE\n";

  std::cout << "    program: " << argv[ 0 ] << "\n";
  std::cout << "ROS channel: " << argv[ 1 ] << " [Input]\n";
  
  string fname = argv[ 1 ];

  // All the objects needed
  pcl::PCDReader reader;
  pcl::PassThrough<PointT> pass;
  pcl::NormalEstimation<PointT, pcl::Normal> ne;


  pcl::SACSegmentationFromNormals<PointT, pcl::Normal> seg; 
  pcl::PCDWriter writer;
  pcl::ExtractIndices<PointT> extract;
  pcl::ExtractIndices<pcl::Normal> extract_normals;
  pcl::search::KdTree<PointT>::Ptr tree (new pcl::search::KdTree<PointT> ());


  // Datasets
  pcl::PointCloud<PointT>::Ptr cloud (new pcl::PointCloud<PointT>);
  pcl::PointCloud<PointT>::Ptr cloud_filtered (new pcl::PointCloud<PointT>);
  pcl::PointCloud<pcl::Normal>::Ptr cloud_normals (new pcl::PointCloud<pcl::Normal>);

  pcl::ModelCoefficients::Ptr coefficients_cylinder (new pcl::ModelCoefficients);

  pcl::PointIndices::Ptr inliers_cylinder (new pcl::PointIndices);

  // Read in the cloud data
  reader.read (fname, *cloud);
  std::cerr << "PointCloud has: " << cloud->points.size () << " data points." << std::endl;

  // Build a passthrough filter to remove spurious NaNs
/*  pass.setInputCloud (cloud);
  pass.setFilterFieldName ("z");
  pass.setFilterLimits (0, 1.5);
  pass.filter (*cloud_filtered);
  std::cerr << "PointCloud after filtering has: " << cloud_filtered->points.size () << " data points." << std::endl;*/
  cloud_filtered = cloud;

  // Estimate point normals
  ne.setSearchMethod (tree);
  ne.setInputCloud (cloud_filtered);
  ne.setKSearch (50);
  ne.compute (*cloud_normals);


  pcl::PointCloud<PointT>::Ptr cloud_filtered0 (new pcl::PointCloud<PointT>);
  pcl::PointCloud<pcl::Normal>::Ptr cloud_normals0 (new pcl::PointCloud<pcl::Normal>);
  find_and_remove_plane(cloud_filtered, cloud_normals, cloud_filtered0, cloud_normals0,"plane0");






  return 0;




  pcl::PointCloud<PointT>::Ptr cloud_filtered2 (new pcl::PointCloud<PointT>);
  pcl::PointCloud<pcl::Normal>::Ptr cloud_normals2 (new pcl::PointCloud<pcl::Normal>);
  find_and_remove_plane(cloud_filtered0, cloud_normals0, cloud_filtered2, cloud_normals2,"plane1");
	





  // Create the segmentation object for cylinder segmentation and set all the parameters
  seg.setOptimizeCoefficients (true);
  seg.setModelType (pcl::SACMODEL_CYLINDER);
  seg.setMethodType (pcl::SAC_RANSAC);
  seg.setNormalDistanceWeight (0.1);
  seg.setMaxIterations (10000);
  seg.setDistanceThreshold (0.05);
//  seg.setRadiusLimits (0, 0.1);
  seg.setRadiusLimits (0, 0.5);
  seg.setInputCloud (cloud_filtered2);
  seg.setInputNormals (cloud_normals2);

  // Obtain the cylinder inliers and coefficients
  seg.segment (*inliers_cylinder, *coefficients_cylinder);
  std::cerr << "Cylinder coefficients: " << *coefficients_cylinder << std::endl;

  // Write the cylinder inliers to disk
  extract.setInputCloud (cloud_filtered2);
  extract.setIndices (inliers_cylinder);
  extract.setNegative (false);
  pcl::PointCloud<PointT>::Ptr cloud_cylinder (new pcl::PointCloud<PointT> ());
  extract.filter (*cloud_cylinder);
  if (cloud_cylinder->points.empty ()) 
    std::cerr << "Can't find the cylindrical component." << std::endl;
  else
  {
	  std::cerr << "PointCloud representing the cylindrical component: " << cloud_cylinder->points.size () << " data points." << std::endl;
	  writer.write ("table_scene_mug_stereo_textured_cylinder.pcd", *cloud_cylinder, false);
  }
  return (0);

}
