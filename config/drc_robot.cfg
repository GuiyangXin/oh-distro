coordinate_frames {
  root_frame = "local";

  body {
    relative_to = "local";
    history = 1000;
    pose_update_channel = "POSE";      #bot_core_pose_t messages will be listened for this channel
    initial_transform{
      translation = [ 0, 0, 0 ];
      quat = [ 1, 0, 0, 0 ];
    }
  }

  global {
      relative_to = "local";
      history = 1000;
      update_channel = "GLOBAL_TO_LOCAL";
      initial_transform {
          translation = [0, 0, 0 ];
          quat = [1, 0, 0, 0];
      }
  }

  base_scan {
    # NB: have had issues simulating this in pr2_gazebo as related tf clock time is ahead of time (aug2012) 
    relative_to = "body";
    history = 1000;                       
    update_channel = "BODY_TO_BASE_SCAN";
    initial_transform{
      translation = [ 0.275, 0, 0.255 ]; 
      quat = [1, 0, 0, 0 ];
    }
  }  

  tilt_scan {
    relative_to = "body";
    history = 1000;                       
    update_channel = "BODY_TO_TILT_SCAN";
    initial_transform{
      translation = [ 0, 0, 1.0 ]; #sits on top of IMU
      rpy = [ 0, 0, 0 ];
    }
  }  

  wide_left {
    relative_to = "body";
    history = 1000;
    update_channel = "BODY_TO_WIDE_LEFT";
    initial_transform{
      translation = [ 0.069, 0.06, 1.70];
      quat = [1,0,0,0];
    }
  }
    
  wide_stereo {
    relative_to = "body";
    history = 1000;
    update_channel = "BODY_TO_WIDE_STEREO";
    initial_transform{
      translation = [ 0.076, 0.030, 1.243];
      quat = [ 1, 0, 0, 0];
    }
  }
  
}




cameras {
    # nominally the PR2, rectified
    
    wide_left {
      lcm_channel = "WIDE_LEFT_RECT";
      coord_frame = "stereo";
      type = "stereo";

      left {
          width = 640;
          height = 480;
          distortion_model = "plumb";
          fx = 384.68031999999999;
          fy = 384.68031999999999;
          cx = 351.323;
          cy = 254.138;
          k1 = 0.0;
          k2 = 0.0;
          k3 = 0.0;
          p1 = 0.0;
          p2 = 0.0;
      }

      right {
          width = 640;
          height = 480;
          distortion_model = "plumb";
          fx = 384.68031999999999;
          fy = 384.68031999999999;
          cx = 351.323;
          cy = 254.138;
          k1 = 0.0;
          k2 = 0.0;
          k3 = 0.0;
          p1 = 0.0;
          p2 = 0.0;
      }
      rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
      translation = [-0.0896544, 0.0, 0.0];
    }    
    
    # PR2 in simulation: [NOT calibrated yet]
    wide_stereo {
      lcm_channel = "WIDE_STEREO_IMAGE";
      coord_frame = "stereo";
      type = "stereo";

      left {
          width = 640;
          height = 480;
          distortion_model = "plumb";
          fx = 384.68031999999999;
          fy = 384.68031999999999;
          cx = 351.323;
          cy = 254.138;
          k1 = 0.0;
          k2 = 0.0;
          k3 = 0.0;
          p1 = 0.0;
          p2 = 0.0;
      }

      right {
          width = 640;
          height = 480;
          distortion_model = "plumb";
          fx = 384.68031999999999;
          fy = 384.68031999999999;
          cx = 351.323;
          cy = 254.138;
          k1 = 0.0;
          k2 = 0.0;
          k3 = 0.0;
          p1 = 0.0;
          p2 = 0.0;
      }
      rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
      translation = [-0.0896544, 0.0, 0.0];
    }


    # real PR2's wide stereo, rectified
    pr2_stereo {
      lcm_channel = "PR2_STEREO_IMAGE";
      coord_frame = "pr2_stereo";
      type = "stereo";

      left {
          width = 640;
          height = 480;
          distortion_model = "plumb";
          fx = 384.68031999999999;
          fy = 384.68031999999999;
          cx = 351.323;
          cy = 254.138;
          k1 = 0.0;
          k2 = 0.0;
          k3 = 0.0;
          p1 = 0.0;
          p2 = 0.0;
      }

      right {
          width = 640;
          height = 480;
          distortion_model = "plumb";
          fx = 384.68031999999999;
          fy = 384.68031999999999;
          cx = 351.323;
          cy = 254.138;
          k1 = 0.0;
          k2 = 0.0;
          k3 = 0.0;
          p1 = 0.0;
          p2 = 0.0;
      }

      rotation = [1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0];
      translation = [-0.0896544, 0.0, 0.0];
    }

    # Calibration for the B21 Bumblebee from Javier 
    bumblebee {
        lcm_channel = "CAMLCM_IMAGE";
        coord_frame = "camera";
        type = "stereo";
        debayer = true;
        left_frame_on_top = true; 
       
        left {
            width = 1024;
            height = 768;
            fx = 836.466;
            fy = 835.78;
            cx = 513.198;
            cy = 397.901;
            distortion_model = "plumb";
            k1 = -0.376645;
            k2 = 0.252493;
            k3 = -0.136346;
            p1 = 0;
            p2 = 0;
        }

        right {
            width = 1024;
            height = 768;
            fx = 836.466;
            fy = 835.78;
            cx = 518.444;
            cy = 403.242;
            distortion_model = "plumb";
            k1 = -0.37464;
            k2 = 0.2336;
            k3 = -0.107056;
            p1 = 0;
            p2 = 0;
        }

        rotation = [0.999957, -0.00407631, 0.00828868, 0.00408099, 0.999992, -0.000548178, -0.00828638, 0.000581981, 0.999965];
        translation = [-0.119941, 0.000356381, 0.000447106];
    }

    # this calibration is from the PSDK used by the marine group [by hordur]
    asus {
        lcm_channel = "OPENNI_FRAME";
        coord_frame = "camera";
        type = "openni";

        rgb {
            width = 640;
            height = 480;

            fx = 537.874;
            fy = 537.953;
            cx = 317.019;
            cy = 242.859;
        }

        # HJ: I have to double check and see what intrinsic
        #     fovis uses when using openni data.
        depth {
            width = 640;
            height = 480;

            fx = 572.156;
            fy = 572.362;
            cx = 320.705;
            cy = 245.120;
        }

        shift_offset = 1090;
        projector_depth_baseline = 7.50000030e-02;

        # Using OpenNI both should be in the same reference frome
        rotation = [1.0, 0.0, 0.0, 
                    0.0, 1.0, 0.0,
                    0.0, 0.0, 1.0];
        translation = [0.0, 0.0, 0.0];
       
    }

    feature_track {
      lcm_channel = "FEATURE_TRACK";
      coord_frame = "camera";
    }
}


models {
    #wheelchair {
    #    wavefront_model = "copley/A204-R1.obj";
    #    translate = [-0.4774696935, -0.288993438, 0];
    #    rotate_xyz = [90, 0, 0];
    #    scale = 0.001;
    #}
    wheelchair {
        #wavefront_model = "wheelchair_person/wheelchair_person.obj";
        wavefront_model = "wheelchair/wavefront/ElectricWheelchairl.obj";
        translate = [-0.4774696935, -0.288993438, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.001;
    }
    person {
        wavefront_model = "person/walking_person.obj";
        translate = [-2, -0.7, 0];
        rotate_xyz = [90, 0, 0];
        scale = 0.02;
    }
    #person {
    #    wavefront_model = "person/dalek_modified_works_wo_mtl.obj";
    #    translate = [0.1, 0, 0];
    #    rotate_xyz = [90, 0, -90];
    #    scale = 0.29;
    #}
}


planar_lidars {
  base_scan {
    viewer_color = [ 0.0, 0.0, 1.0 ]; # blue
    max_range = 9;
    min_range = .25;
    angle_range = [135, -135];
    down_region = [1068, 1078];
    up_region = [-1,-1];
    surround_region = [180, 900];        
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "base_scan";
    lcm_channel = "BASE_SCAN";
  }
  tilt_scan {
    viewer_color = [ 1.0, 0.0, 0.0 ]; # red
    max_range = 9;
    min_range = .25;
    angle_range = [135, -135];
    down_region = [1068, 1078];
    up_region = [-1,-1];
    surround_region = [180, 900];        
    frequency = 40;
    laser_type = "HOKUYO_UTM";
    coord_frame = "tilt_scan";
    lcm_channel = "TILT_SCAN";
  }  
}

robot{
    length     = 1.09;
    width      = 0.65;        # 0.58 was used ***consider changin this 
    wheel_base = 1.486;         # front to back distance, value taken from agile, needs to be changed
    odometry_inverted  = 0; 
    laser1_offset      = 0.44; #these things are repeated - probably can use the laser as the source
    frontlaser_offset  = 0.44; 
    frontlaser_flipped = 0;    

    frontlaser_use            = 1;
    frontlaser_side_offset    = 0.0;
    frontlaser_angular_offset = 0.0;  #-0.785398163#45#0.0  #sachi added to new carmen
    frontlaser_id             = 1;    #sachi added

    rearlaser_offset      = -0.42;
    laser2_offset         = -0.42;      
    rearlaser_side_offset = 0.0;
    rearlaser_flipped     = 0;
    rearlaser_angular_offset = -3.1415926535897931;
    rearlaser_use            = 1;
    rearlaser_id             = 2;    #sachi added

    frontlaser_ignore_first_n_beams = 0;  # avoid self-occlusion
    frontlaser_ignore_last_n_beams  = 0; #not sure if these are used

    rearlaser_ignore_first_n_beams = 10;   # avoid self-occlusion
    rearlaser_ignore_last_n_beams  = 10;    # avoid self-occlusion
    
    min_approach_dist = 0.4; #was 0.1 sachi changed to 0.2
    min_side_dist     = 0.1;  #sachi changed
    acceleration      = 0.3; #was 0.2 - increased for person following         # m/s^2    sachi 0.3
    deceleration      = 0.3; #was 0.2 - increased for person following         # m/s^2    sac 0.3
    reaction_time     = 0.1;
    ##The following gain values were tested and found to work adquetly for 40% power on the wheelchair 
    sensor_timeout     = 3.0;

    max_t_vel          = 1.5; #  - this is the value for best person following#1.0#1.5 #m/s #increased for person following - not sure if this will screw with the dynamics
    max_r_vel          = 5.0;# - the value used for best person following#rad/s 
    theta_gain         = 4.0;#2.0#not used for velocity commands
    theta_d_gain       = 2.0;#not used for velocity commands
    displacement_gain  = 4.0;#2.0#5.0
    allow_rear_motion  = 0; #off#on
    rectangular        = 0;
    use_sonar          = 0;
    use_laser          = 1;        
    use_laser1         = 1;
    use_laser2         = 0;
    use_laser3         = 0;
    use_laser4         = 0;
    use_laser5         = 0;
    use_front_laser    = 0;
    use_back_laser     = 0;
    collision_avoidance = 0;
}

navigator{
    goal_size            = 0.8;
    goal_theta_tolerance = 1.5;
    ignore_new_goals_until_completed = 0;
    waypoint_tolerance   = 0.3;
    
    min_approach_dist = 0.3;
    min_side_dist     = 0.1;

    robot_length      = .75;
    robot_width       = 0.5;#.75;
    

    replan_frequency  = 5;
    smooth_path       = true;#false;#true;
    plan_to_nearest_free_point = true;
}

simulator{
    simulate_frontlaser = 0;
    simulate_rearlaser  = 0;
    dt                  = 0.025;
    time                = 0.025;
    sync_mode           = 0; #0/1 
    use_robot           = 0; #was called off - make sure compatible
    acceleration        = 1.0;#0.5;
    rot_acceleration    = 5.0;#2.0;

    person_leg_width    = 0.1;
    person_dist_from_robot = 0.4;
    person_speed        = 0.3;

    laser_probability_of_random_max     = .0001;
    laser_probability_of_random_reading = .0001;
    laser_sensor_variance               = .0001;
}

localizer{
    mean_c_d    = -0.0182;
    mean_c_t    = -0.105;
    std_dev_c_d = 0.0;
    std_dev_c_t = 0.0612;

    mean_d_d    = 1.0065;
    mean_d_t    = -0.0072;
    std_dev_d_d = 0.0932;
    std_dev_d_t = 0.0000;

    mean_t_d    = 0.0144;
    mean_t_t    = 0.8996;
    std_dev_t_d = 0.00;
    std_dev_t_t = 0.3699;

    num_particles   = 1000;#5000
    laser_max_range = 30.0;
    use_rear_laser  = false; #off
    tracking_beam_minlikelihood = 0.45;
    global_beam_minlikelihood   = 0.9;

    odom_a1 = 0.2;    # a1 = error in rotation
                      # as a function of rotation
    odom_a2 = 0.01;    # a2 = error in rotation
                    # as a function of translation
    odom_a3 = 0.2;    # a3 = error in translation
                                        # as a function of translation
    odom_a4 = 0.01;

    robot_particles  = 1000;#5000            # number of samples
    use_front_laser  = false; #off
    use_laser1       = true;#on
    use_laser2       = false;#  off
    use_laser3       = false;
    use_laser4       = false;
    use_laser5       = false;
    min_wall_prob    = 0.5; #0.5;   #was 0.25 Sachi changed ZMay 20
    outlier_fraction = 0.85;
    #might need to decrease these values
    update_distance  = 0.20; #was 0.2
    update_heading   = 0.20;
    ## integrate a beam each n rads (new version of laser_skip)
    integrate_angle  = 0.15; ## 0.052359   ## 3 degrees
    integrate_angle_deg  = 3.0;
    do_scanmatching  = false; #off    #was off
    constrain_to_map = false; #off    #was off
    occupied_prob    = 0.5;
    lmap_std         = 0.3;
    global_lmap_std  = 0.6;
    global_evidence_weight = 0.01;
    global_distance_threshold = 2.0;
    global_test_samples = 1000000; #was 100000
    use_sensor          = true; 
    tracking_beam_minlikelihood = 0.45;
    global_beam_minlikelihood = 0.9;    
}


# Options for fovis
fovis {
  feature-window-size = 9;
  max-pyramid-level = 6;
  min-pyramid-level = 2;
  target-pixels-per-feature = 200;
  fast-threshold = 10;
  fast-threshold-adaptive-gain = 0.002;
  use-adaptive-threshold = "true";
  use-homography-initialization = "true";
  ref-frame-change-threshold = 100; #100; #150;

  # OdometryFrame
  use-bucketing = "true";
  bucket-width = 20;
  bucket-height = 20;
  max-keypoints-per-bucket = 10;
  use-image-normalization = "false";

  # MotionEstimator
  inlier-max-reprojection-error = 2.0;
  clique-inlier-threshold = 0.15;
  min-features-for-estimate = 10;
  max-mean-reprojection-error = 3.0;
  use-subpixel-refinement = "true";
  feature-search-window = 25;
  update-target-features-with-refined = "false";

  # StereoDepth
  stereo-require-mutual-match = "true";
  stereo-max-dist-epipolar-line = 2.0;
  stereo-max-refinement-displacement = 2.0;
  stereo-max-disparity = 128;
}

