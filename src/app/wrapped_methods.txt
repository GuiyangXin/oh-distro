
int ddDrakeModel::numberOfJoints();
void ddDrakeModel::setJointPositions(const QList<double>&);
void ddDrakeModel::setAlpha(double);
void ddDrakeModel::setVisible(bool);

double ddDrakeModel::alpha() const;
bool ddDrakeModel::visible() const;
QString ddDrakeModel::filename() const;

ddDrakeModel* ddDRCView::loadURDFModel(const QString&);
QList<ddDrakeModel*> ddDRCView::models() const;
void ddDRCView::unloadModel(ddDrakeModel*);
void ddDRCView::unloadModels();

vtkCamera* ddQVTKWidgetView::camera() const;
vtkRenderWindow* ddQVTKWidgetView::renderWindow() const;
vtkRenderer* ddQVTKWidgetView::renderer() const;
QList<double> ddQVTKWidgetView::lastTDxMotion() const;

ddViewManager* ddMainWindow::viewManager()
ddPropertiesPanel* ddMainWindow::propertiesPanel() const;
QToolBar* ddMainWindow::toolBar() const;
QTreeWidget* ddMainWindow::objectTree() const;
QTextEdit* ddMainWindow::outputConsole() const;
void ddMainWindow::addWidgetToViewMenu(QWidget*);


ddViewBase* ddViewManager::findView(const QString&) const;
ddViewBase* ddViewManager::createView(const QString&, int);
ddViewBase* ddViewManager::createView(const QString&);


QAbstractItemModel* ddSpreadsheetView::model();
QStringList ddSpreadsheetView::rowData(int) const;
int ddSpreadsheetView::rowCount() const;
int ddSpreadsheetView::columnCount() const;
void ddSpreadsheetView::appendRow(const QStringList&);
void ddSpreadsheetView::removeRow(int);


QString QtVariantProperty::propertyName();
QVariant QtVariantProperty::value();
void QtVariantProperty::setAttribute(const QString &, const QVariant &);

QtVariantProperty* ddPropertiesPanel::addGroup(const QString&);
QtVariantProperty* ddPropertiesPanel::addProperty(const QString&, const QVariant&);
QtVariantProperty* ddPropertiesPanel::addSubProperty(const QString&, const QVariant&, QtVariantProperty*);
QtVariantProperty* ddPropertiesPanel::findProperty(const QString&) const;
QtVariantProperty* ddPropertiesPanel::findSubProperty(const QString&, QtVariantProperty*) const;


ddSignalMap::ddSignalMap();
QMap<QString, QVariant> ddSignalMap::map() const;
void ddSignalMap::signalItemChanged(const QString&);
void ddSignalMap::setItem(const QString&, const QVariant&);
QVariant ddSignalMap::value(const QString&) const;
